var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));

// src/cli.ts
import { configureCliOptions as configureTypegenCliOptions } from "@fuel-ts/abi-typegen/cli";
import { versions } from "@fuel-ts/versions";
import { runVersions } from "@fuel-ts/versions/cli";
import { Command, Option } from "commander";

// src/cli/utils/logger.ts
import chalk from "chalk";
var loggingConfig = {
  isDebugEnabled: false,
  isLoggingEnabled: true
};
function configureLogging(params) {
  loggingConfig.isLoggingEnabled = params.isLoggingEnabled;
  loggingConfig.isDebugEnabled = params.isDebugEnabled && loggingConfig.isLoggingEnabled;
}
function log(...data) {
  if (loggingConfig.isLoggingEnabled) {
    console.log(data.join(" "));
  }
}
function debug(...data) {
  if (loggingConfig.isDebugEnabled) {
    log(data);
  }
}
function error(...data) {
  console.log(chalk.red(data.join(" ")));
}

// src/cli/commands/build/generateTypes.ts
import { ProgramTypeEnum } from "@fuel-ts/abi-typegen";
import { runTypegen } from "@fuel-ts/abi-typegen/runTypegen";
import { getBinaryVersions } from "@fuel-ts/versions/cli";
import { writeFileSync as writeFileSync2, mkdirSync } from "fs";
import { globSync } from "glob";
import { join as join2 } from "path";

// src/cli/config/forcUtils.ts
import { FuelError } from "@fuel-ts/errors";
import { readFileSync, existsSync, writeFileSync } from "fs";
import camelCase from "lodash.camelcase";
import { join } from "path";
import toml from "toml";
var SwayType = /* @__PURE__ */ ((SwayType2) => {
  SwayType2["contract"] = "contract";
  SwayType2["script"] = "script";
  SwayType2["predicate"] = "predicate";
  SwayType2["library"] = "library";
  return SwayType2;
})(SwayType || {});
var swayFiles = /* @__PURE__ */ new Map();
var getClosestForcTomlDir = (dir) => {
  let forcPath = join(dir, "Forc.toml");
  if (existsSync(forcPath)) {
    return forcPath;
  }
  const parent = join(dir, "..");
  forcPath = getClosestForcTomlDir(parent);
  if (parent === "/" && !existsSync(forcPath)) {
    const msg = `TOML file not found:
  ${dir}`;
    throw new FuelError(FuelError.CODES.CONFIG_FILE_NOT_FOUND, msg);
  }
  return forcPath;
};
function readForcToml(contractPath) {
  if (!existsSync(contractPath)) {
    throw new FuelError(
      FuelError.CODES.CONFIG_FILE_NOT_FOUND,
      `TOML file not found:
  ${contractPath}`
    );
  }
  const forcPath = getClosestForcTomlDir(contractPath);
  if (!existsSync(forcPath)) {
    throw new FuelError(
      FuelError.CODES.CONFIG_FILE_NOT_FOUND,
      `TOML file not found:
  ${forcPath}`
    );
  }
  const forcFile = readFileSync(forcPath, "utf8");
  return toml.parse(forcFile);
}
function setForcTomlProxyAddress(contractPath, address) {
  const forcPath = getClosestForcTomlDir(contractPath);
  const tomlPristine = readFileSync(forcPath).toString();
  const tomlJson = readForcToml(forcPath);
  const isProxyEnabled = tomlJson.proxy?.enabled;
  const hasProxyAddress = tomlJson.proxy?.address;
  if (isProxyEnabled && hasProxyAddress) {
    return address;
  }
  const replaceReg = /(\[proxy\][\s\S]+^enabled.+$)/gm;
  const replaceStr = `$1
address = "${address}"`;
  const modifiedToml = tomlPristine.replace(replaceReg, replaceStr);
  writeFileSync(forcPath, modifiedToml);
  return address;
}
function readSwayType(path) {
  const forcToml = readForcToml(path);
  const entryFile = forcToml.project.entry || "main.sw";
  const swayEntryPath = join(path, "src", entryFile);
  if (!swayFiles.has(swayEntryPath)) {
    const swayFile = readFileSync(swayEntryPath, "utf8");
    const swayTypeLines = Object.values(SwayType).map((type) => `${type};`);
    const swayType = swayFile.split("\n").find((line) => swayTypeLines.some((swayTypeLine) => line === swayTypeLine))?.split(";")[0];
    swayFiles.set(swayEntryPath, swayType);
  }
  return swayFiles.get(swayEntryPath);
}
function getContractName(contractPath) {
  const { project } = readForcToml(contractPath);
  return project.name;
}
function getScriptName(scriptPath) {
  const { project } = readForcToml(scriptPath);
  return project.name;
}
function getPredicateName(predicatePath) {
  const { project } = readForcToml(predicatePath);
  return project.name;
}
function getContractCamelCase(contractPath) {
  const projectName = getContractName(contractPath);
  return camelCase(projectName);
}
function getBinaryPath(contractPath, { buildMode }) {
  const projectName = getContractName(contractPath);
  return join(contractPath, `/out/${buildMode}/${projectName}.bin`);
}
function getABIPath(contractPath, { buildMode }) {
  const projectName = getContractName(contractPath);
  return join(contractPath, `/out/${buildMode}/${projectName}-abi.json`);
}
function getABIPaths(paths, config) {
  return Promise.all(paths.map((path) => getABIPath(path, config)));
}
var getStorageSlotsPath = (contractPath, { buildMode }) => {
  const projectName = getContractName(contractPath);
  return join(contractPath, `/out/${buildMode}/${projectName}-storage_slots.json`);
};

// src/cli/templates/index.ts
import Handlebars from "handlebars";

// src/cli/templates/index.hbs
var templates_default = "{{#each paths}}\nexport * from './{{this}}';\n{{/each}}\n";

// src/cli/templates/index.ts
function renderIndexTemplate(paths) {
  const renderTemplate = Handlebars.compile(templates_default, {
    strict: true,
    noEscape: true
  });
  return renderTemplate({
    paths
  });
}

// src/cli/commands/build/generateTypes.ts
async function generateTypesForProgramType(config, paths, programType) {
  debug("Generating types..");
  let filepaths = await getABIPaths(paths, config);
  const pluralizedDirName = `${String(programType).toLocaleLowerCase()}s`;
  const versions2 = getBinaryVersions(config);
  const isScript = programType === ProgramTypeEnum.SCRIPT;
  const isPredicate = programType === ProgramTypeEnum.PREDICATE;
  if (isScript || isPredicate) {
    const loaderFiles = paths.flatMap((dirpath) => {
      const glob = `*-abi.json`;
      const cwd = `${dirpath}/out`;
      return globSync(glob, { cwd }).map((filename) => `${dirpath}/out/${filename}`);
    });
    filepaths = filepaths.concat(loaderFiles);
  }
  runTypegen({
    programType,
    cwd: config.basePath,
    filepaths,
    output: join2(config.output, pluralizedDirName),
    silent: !loggingConfig.isDebugEnabled,
    versions: versions2
  });
  return pluralizedDirName;
}
async function generateTypes(config) {
  log("Generating types..");
  const { contracts, scripts, predicates, output } = config;
  mkdirSync(output, { recursive: true });
  const members = [
    { type: ProgramTypeEnum.CONTRACT, programs: contracts },
    { type: ProgramTypeEnum.SCRIPT, programs: scripts },
    { type: ProgramTypeEnum.PREDICATE, programs: predicates }
  ];
  const pluralizedDirNames = await Promise.all(
    members.filter(({ programs }) => !!programs.length).map(({ programs, type }) => generateTypesForProgramType(config, programs, type))
  );
  const indexFile = await renderIndexTemplate(pluralizedDirNames);
  writeFileSync2(join2(config.output, "index.ts"), indexFile);
}

// src/cli/commands/deploy/deployContracts.ts
import { ContractFactory } from "@fuel-ts/contract";
import { Contract } from "@fuel-ts/program";
import { Src14OwnedProxy, Src14OwnedProxyFactory } from "@fuel-ts/recipes";
import { existsSync as existsSync2, readFileSync as readFileSync2 } from "fs";

// src/cli/commands/deploy/createWallet.ts
import { Wallet, Provider } from "@fuel-ts/account";
import { FuelError as FuelError2 } from "@fuel-ts/errors";
async function createWallet(providerUrl, privateKey) {
  let pvtKey;
  if (privateKey) {
    pvtKey = privateKey;
  } else if (process.env.PRIVATE_KEY) {
    pvtKey = process.env.PRIVATE_KEY;
  } else {
    throw new FuelError2(
      FuelError2.CODES.MISSING_REQUIRED_PARAMETER,
      "You must provide a privateKey via config.privateKey or env PRIVATE_KEY"
    );
  }
  try {
    const provider = new Provider(providerUrl);
    await provider.init();
    return Wallet.fromPrivateKey(pvtKey, provider);
  } catch (e) {
    const error2 = e;
    if (/EADDRNOTAVAIL|ECONNREFUSED/.test(error2.cause?.code ?? "")) {
      throw new FuelError2(
        FuelError2.CODES.CONNECTION_REFUSED,
        `Couldn't connect to the node at "${providerUrl}". Check that you've got a node running at the config's providerUrl or set autoStartFuelCore to true.`
      );
    } else {
      throw error2;
    }
  }
}

// src/cli/commands/deploy/getDeployConfig.ts
async function getDeployConfig(deployConfig, options) {
  let config;
  if (typeof deployConfig === "function") {
    config = await deployConfig(options);
  } else {
    config = deployConfig;
  }
  return config;
}

// src/cli/commands/deploy/deployContracts.ts
async function deployContract(wallet, binaryPath, abiPath, storageSlotsPath, deployConfig, contractPath, tomlContents) {
  debug(`Deploying contract for ABI: ${abiPath}`);
  if (existsSync2(storageSlotsPath)) {
    const storageSlots2 = JSON.parse(readFileSync2(storageSlotsPath, "utf-8"));
    deployConfig.storageSlots = storageSlots2;
  }
  const targetBytecode = readFileSync2(binaryPath);
  const targetAbi = JSON.parse(readFileSync2(abiPath, "utf-8"));
  const targetStorageSlots = deployConfig.storageSlots ?? [];
  const proxyBytecode = Src14OwnedProxyFactory.bytecode;
  const proxyAbi = Src14OwnedProxy.abi;
  const proxyStorageSlots = Src14OwnedProxy.storageSlots ?? [];
  const isProxyEnabled = tomlContents?.proxy?.enabled;
  const proxyAddress = tomlContents?.proxy?.address;
  if (!isProxyEnabled) {
    const contractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);
    const { waitForResult } = await contractFactory.deploy(deployConfig);
    const { contract } = await waitForResult();
    return contract.id.toB256();
  }
  if (proxyAddress) {
    const targetContractFactory2 = new ContractFactory(targetBytecode, targetAbi, wallet);
    const { waitForResult: waitForTarget2 } = await targetContractFactory2.deploy(deployConfig);
    const { contract: targetContract2 } = await waitForTarget2();
    const proxyContract2 = new Contract(proxyAddress, proxyAbi, wallet);
    const { waitForResult: waitForProxyUpdate } = await proxyContract2.functions.set_proxy_target({ bits: targetContract2.id.toB256() }).call();
    await waitForProxyUpdate();
    return proxyAddress;
  }
  const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);
  const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);
  const { contract: targetContract } = await waitForTarget();
  const { storageSlots, stateRoot, ...commonDeployConfig } = deployConfig;
  const mergedStorageSlots = targetStorageSlots.concat(proxyStorageSlots);
  const proxyDeployConfig = {
    ...commonDeployConfig,
    storageSlots: mergedStorageSlots,
    configurableConstants: {
      INITIAL_TARGET: { bits: targetContract.id.toB256() },
      INITIAL_OWNER: { Initialized: { Address: { bits: wallet.address.toB256() } } }
    }
  };
  const proxyFactory = new ContractFactory(proxyBytecode, proxyAbi, wallet);
  const { waitForResult: waitForProxy } = await proxyFactory.deploy(proxyDeployConfig);
  const { contract: proxyContract } = await waitForProxy();
  const { waitForResult: waitForProxyInit } = await proxyContract.functions.initialize_proxy().call();
  await waitForProxyInit();
  const proxyContractId = proxyContract.id.toB256();
  setForcTomlProxyAddress(contractPath, proxyContractId);
  return proxyContractId;
}
async function deployContracts(config) {
  const contracts = [];
  const wallet = await createWallet(config.providerUrl, config.privateKey);
  log(`Deploying contracts to: ${wallet.provider.url}`);
  const contractsLen = config.contracts.length;
  for (let i = 0; i < contractsLen; i++) {
    const contractPath = config.contracts[i];
    const forcTomlPath = getClosestForcTomlDir(contractPath);
    const binaryPath = getBinaryPath(contractPath, config);
    const abiPath = getABIPath(contractPath, config);
    const storageSlotsPath = getStorageSlotsPath(contractPath, config);
    const projectName = getContractName(contractPath);
    const contractName = getContractCamelCase(contractPath);
    const tomlContents = readForcToml(forcTomlPath);
    const deployConfig = await getDeployConfig(config.deployConfig, {
      contracts: Array.from(contracts),
      contractName,
      contractPath
    });
    const contractId = await deployContract(
      wallet,
      binaryPath,
      abiPath,
      storageSlotsPath,
      deployConfig,
      contractPath,
      tomlContents
    );
    debug(`Contract deployed: ${projectName} - ${contractId}`);
    contracts.push({
      name: contractName,
      contractId
    });
  }
  return contracts;
}

// src/cli/commands/deploy/deployPredicates.ts
import { getPredicateRoot, Predicate } from "@fuel-ts/account";
import { debug as debug2, log as log2 } from "console";
import { readFileSync as readFileSync3 } from "fs";
async function deployPredicates(config) {
  const predicates = [];
  const wallet = await createWallet(config.providerUrl, config.privateKey);
  log2(`Deploying predicates to: ${wallet.provider.url}`);
  const predicatesLen = config.predicates.length;
  for (let i = 0; i < predicatesLen; i++) {
    const predicatePath = config.predicates[i];
    const binaryPath = getBinaryPath(predicatePath, config);
    const abiPath = getABIPath(predicatePath, config);
    const projectName = getPredicateName(predicatePath);
    const bytecode = readFileSync3(binaryPath);
    const abi = JSON.parse(readFileSync3(abiPath, "utf-8"));
    const predicate = new Predicate({ abi, bytecode, provider: wallet.provider });
    const {
      bytes: loaderBytecode,
      interface: { jsonAbi }
    } = await (await predicate.deploy(wallet)).waitForResult();
    const predicateRoot = getPredicateRoot(loaderBytecode);
    debug2(`Predicate deployed: ${projectName} - ${predicateRoot}`);
    predicates.push({
      path: predicatePath,
      predicateRoot,
      loaderBytecode,
      abi: jsonAbi
    });
  }
  return predicates;
}

// src/cli/commands/deploy/deployScripts.ts
import { Script } from "@fuel-ts/script";
import { debug as debug3, log as log3 } from "console";
import { readFileSync as readFileSync4 } from "fs";
async function deployScripts(config) {
  const scripts = [];
  const wallet = await createWallet(config.providerUrl, config.privateKey);
  log3(`Deploying scripts to: ${wallet.provider.url}`);
  const scriptsLen = config.scripts.length;
  for (let i = 0; i < scriptsLen; i++) {
    const scriptPath = config.scripts[i];
    const binaryPath = getBinaryPath(scriptPath, config);
    const abiPath = getABIPath(scriptPath, config);
    const projectName = getScriptName(scriptPath);
    const bytecode = readFileSync4(binaryPath);
    const abi = JSON.parse(readFileSync4(abiPath, "utf-8"));
    const script = new Script(bytecode, abi, wallet);
    const {
      bytes: loaderBytecode,
      interface: { jsonAbi }
    } = await (await script.deploy(wallet)).waitForResult();
    debug3(`Script deployed: ${projectName}`);
    scripts.push({
      path: scriptPath,
      loaderBytecode,
      abi: jsonAbi
    });
  }
  return scripts;
}

// src/cli/commands/deploy/saveContractIds.ts
import { writeFile, mkdir } from "fs/promises";
import { resolve } from "path";
async function saveContractIds(contracts, output) {
  const contractsMap = contracts.reduce(
    (cConfig, { name, contractId }) => ({
      ...cConfig,
      [name]: contractId
    }),
    {}
  );
  const filePath = resolve(output, "contract-ids.json");
  await mkdir(output, { recursive: true });
  await writeFile(filePath, JSON.stringify(contractsMap, null, 2));
  log(`Contract IDs saved at: ${filePath}`);
}

// src/cli/commands/deploy/savePredicateFiles.ts
import { writeFileSync as writeFileSync3 } from "fs";
function savePredicateFiles(predicates, _config) {
  for (const { path, predicateRoot, loaderBytecode, abi } of predicates) {
    const predicateName = getPredicateName(path);
    const predicateRootPath = `${path}/out/${predicateName}-loader-bin-root`;
    writeFileSync3(predicateRootPath, predicateRoot);
    const loaderBytecodePath = `${path}/out/${predicateName}-loader.bin`;
    writeFileSync3(loaderBytecodePath, loaderBytecode);
    const abiPath = `${path}/out/${predicateName}-loader-abi.json`;
    writeFileSync3(abiPath, JSON.stringify(abi, null, 2));
  }
}

// src/cli/commands/deploy/saveScriptFiles.ts
import { writeFileSync as writeFileSync4 } from "fs";
function saveScriptFiles(scripts, _config) {
  for (const { path, loaderBytecode, abi } of scripts) {
    const scriptName = getScriptName(path);
    const loaderBytecodePath = `${path}/out/${scriptName}-loader.bin`;
    writeFileSync4(loaderBytecodePath, loaderBytecode);
    const abiPath = `${path}/out/${scriptName}-loader-abi.json`;
    writeFileSync4(abiPath, JSON.stringify(abi, null, 2));
  }
}

// src/cli/commands/deploy/index.ts
async function deploy(config) {
  const contracts = await deployContracts(config);
  await saveContractIds(contracts, config.output);
  const scripts = await deployScripts(config);
  saveScriptFiles(scripts, config);
  const predicates = await deployPredicates(config);
  savePredicateFiles(predicates, config);
  config.onDeploy?.(config, {
    contracts,
    scripts,
    predicates
  });
  await generateTypes(config);
  return {
    contracts,
    scripts,
    predicates
  };
}

// src/cli/commands/dev/autoStartFuelCore.ts
import { defaultConsensusKey } from "@fuel-ts/utils";
import { getPortPromise } from "portfinder";

// src/test-utils.ts
var test_utils_exports = {};
__reExport(test_utils_exports, test_utils_star);
__reExport(test_utils_exports, test_utils_star2);
__reExport(test_utils_exports, test_utils_star3);
__reExport(test_utils_exports, test_utils_star4);
import * as test_utils_star from "@fuel-ts/contract/test-utils";
import * as test_utils_star2 from "@fuel-ts/account/test-utils";
import * as test_utils_star3 from "@fuel-ts/errors/test-utils";
import * as test_utils_star4 from "@fuel-ts/utils/test-utils";

// src/cli/commands/dev/autoStartFuelCore.ts
var autoStartFuelCore = async (config) => {
  let fuelCore;
  if (config.autoStartFuelCore) {
    log(`Starting node using: '${config.fuelCorePath}'`);
    const bindIp = "0.0.0.0";
    const accessIp = "127.0.0.1";
    const port = config.fuelCorePort ?? await getPortPromise({ port: 4e3 });
    const { cleanup, url, snapshotDir } = await (0, test_utils_exports.launchNode)({
      args: [
        ["--snapshot", config.snapshotDir],
        ["--db-type", "in-memory"]
      ].flat(),
      ip: bindIp,
      port: port.toString(),
      loggingEnabled: loggingConfig.isLoggingEnabled,
      basePath: config.basePath,
      fuelCorePath: config.fuelCorePath,
      includeInitialState: true,
      killProcessOnExit: true
    });
    fuelCore = {
      bindIp,
      accessIp,
      port,
      providerUrl: url,
      snapshotDir,
      killChildProcess: cleanup
    };
    config.providerUrl = fuelCore.providerUrl;
    config.privateKey = defaultConsensusKey;
  }
  return fuelCore;
};

// src/cli/commands/build/buildSwayProgram.ts
import { spawn } from "child_process";

// src/cli/commands/build/forcHandlers.ts
var onForcExit = (onResultFn, onErrorFn) => (code) => {
  if (code) {
    onErrorFn(code);
  } else {
    onResultFn();
  }
};
var onForcError = (onError) => (err) => {
  error(err);
  onError(err);
};

// src/cli/commands/build/buildSwayProgram.ts
var buildSwayProgram = async (config, path) => {
  debug("Building Sway program", path);
  return new Promise((resolve4, reject) => {
    const args = ["build", "-p", path].concat(config.forcBuildFlags);
    const forc = spawn(config.forcPath, args, { stdio: "pipe" });
    if (loggingConfig.isLoggingEnabled) {
      forc.stderr?.on("data", (chunk) => console.log(chunk.toString()));
    }
    if (loggingConfig.isDebugEnabled) {
      forc.stdout?.on("data", (chunk) => {
        console.log(chunk.toString());
      });
    }
    const onExit = onForcExit(resolve4, reject);
    const onError = onForcError(reject);
    forc.on("exit", onExit);
    forc.on("error", onError);
  });
};

// src/cli/commands/build/buildSwayPrograms.ts
async function buildSwayPrograms(config) {
  log(`Building Sway programs using: '${config.forcPath}'`);
  const paths = config.workspace ? [config.workspace] : [config.contracts, config.predicates, config.scripts].flat();
  await Promise.all(paths.map((path) => buildSwayProgram(config, path)));
}

// src/cli/commands/build/index.ts
async function build(config, program) {
  log("Building..");
  await buildSwayPrograms(config);
  await generateTypes(config);
  config.onBuild?.(config);
  const options = program?.opts();
  if (options?.deploy) {
    const fuelCore = await autoStartFuelCore(config);
    await deploy(config);
    fuelCore?.killChildProcess();
  }
}

// src/cli/commands/dev/index.ts
import { watch } from "chokidar";
import { globSync as globSync2 } from "glob";

// src/cli/config/loadConfig.ts
import { FuelError as FuelError3 } from "@fuel-ts/errors";
import { defaultConsensusKey as defaultConsensusKey2 } from "@fuel-ts/utils";
import { bundleRequire } from "bundle-require";
import JoyCon from "joycon";
import { resolve as resolve2, parse } from "path";

// src/cli-utils.ts
var cli_utils_exports = {};
__reExport(cli_utils_exports, cli_utils_star);
import * as cli_utils_star from "@fuel-ts/utils/cli-utils";

// src/cli/config/validateConfig.ts
import * as yup from "yup";
var schema = yup.object({
  workspace: yup.string(),
  contracts: yup.array(yup.string()),
  scripts: yup.array(yup.string()),
  predicates: yup.array(yup.string()),
  output: yup.string().required("config.output should be a valid string")
}).required();
async function validateConfig(config) {
  return schema.validate(config);
}

// src/cli/config/loadConfig.ts
async function loadUserConfig(cwd) {
  const configJoycon = new JoyCon();
  const configPath = await configJoycon.resolve({
    files: ["ts", "js", "cjs", "mjs"].map((e) => `fuels.config.${e}`),
    cwd,
    stopDir: parse(cwd).root
  });
  if (!configPath) {
    throw new FuelError3(FuelError3.CODES.CONFIG_FILE_NOT_FOUND, "Config file not found!");
  }
  const esbuildOptions = {
    target: "ES2021",
    platform: "node",
    format: "esm"
  };
  const result = await bundleRequire({
    filepath: configPath,
    esbuildOptions,
    cwd
  });
  const userConfig = result.mod.default;
  return { configPath, userConfig };
}
async function loadConfig(cwd) {
  const { configPath, userConfig } = await loadUserConfig(cwd);
  await validateConfig(userConfig);
  const { forcBuildFlags = [] } = userConfig;
  const releaseFlag = forcBuildFlags.find((f) => f === "--release");
  const buildMode = releaseFlag ? "release" : "debug";
  const { forcPath, fuelCorePath } = (0, cli_utils_exports.tryFindBinaries)({
    forcPath: userConfig.forcPath,
    fuelCorePath: userConfig.fuelCorePath
  });
  const config = {
    contracts: [],
    scripts: [],
    predicates: [],
    deployConfig: {},
    autoStartFuelCore: true,
    fuelCorePort: 4e3,
    providerUrl: process.env.FUEL_NETWORK_URL ?? "http://127.0.0.1:4000/v1/graphql",
    privateKey: defaultConsensusKey2,
    ...userConfig,
    basePath: cwd,
    forcPath,
    fuelCorePath,
    configPath,
    forcBuildFlags,
    buildMode
  };
  config.output = resolve2(cwd, config.output);
  config.autoStartFuelCore = userConfig.autoStartFuelCore ?? true;
  if (!userConfig.workspace) {
    const { contracts, predicates, scripts } = userConfig;
    config.contracts = (contracts || []).map((c) => resolve2(cwd, c));
    config.scripts = (scripts || []).map((s) => resolve2(cwd, s));
    config.predicates = (predicates || []).map((p) => resolve2(cwd, p));
  } else {
    const workspace = resolve2(cwd, userConfig.workspace);
    const forcToml = readForcToml(workspace);
    if (!forcToml.workspace) {
      const workspaceMsg = `Forc workspace not detected in:
  ${workspace}/Forc.toml`;
      const swayProgramType = readSwayType(workspace);
      const exampleMsg = `Try using '${swayProgramType}s' instead of 'workspace' in:
  ${configPath}`;
      throw new FuelError3(
        FuelError3.CODES.WORKSPACE_NOT_DETECTED,
        [workspaceMsg, exampleMsg].join("\n\n")
      );
    }
    const swayMembers = forcToml.workspace.members.map((member) => resolve2(workspace, member));
    swayMembers.map((path) => ({ path, type: readSwayType(path) })).filter(({ type }) => type !== "library" /* library */).forEach(({ path, type }) => config[`${type}s`].push(path));
    config.workspace = workspace;
  }
  return config;
}

// src/cli/commands/withConfig.ts
import { capitalizeString } from "@fuel-ts/utils";
var withConfigErrorHandler = async (err, config) => {
  error(err.message);
  if (config) {
    await config.onFailure?.(config, err);
  }
};
function withConfig(program, command, fn) {
  return async () => {
    const options = program.opts();
    let config;
    try {
      config = await loadConfig(options.path);
    } catch (err) {
      await withConfigErrorHandler(err);
      return;
    }
    try {
      await fn(config, program);
      log(`\u{1F389}  ${capitalizeString(command)} completed successfully!`);
    } catch (err) {
      await withConfigErrorHandler(err, config);
    }
  };
}

// src/cli/commands/dev/index.ts
var closeAllFileHandlers = (handlers) => {
  handlers.forEach((h) => h.close());
};
var buildAndDeploy = async (config) => {
  await build(config);
  const deployedContracts = await deploy(config);
  config.onDev?.(config);
  return deployedContracts;
};
var getConfigFilepathsToWatch = (config) => {
  const configFilePathsToWatch = [config.configPath];
  if (config.snapshotDir) {
    configFilePathsToWatch.push(config.snapshotDir);
  }
  return configFilePathsToWatch;
};
var workspaceFileChanged = (state) => async (_event, path) => {
  log(`
File changed: ${path}`);
  await buildAndDeploy(state.config);
};
var configFileChanged = (state) => async (_event, path) => {
  log(`
File changed: ${path}`);
  closeAllFileHandlers(state.watchHandlers);
  state.fuelCore?.killChildProcess();
  try {
    await dev(await loadConfig(state.config.basePath));
  } catch (err) {
    await withConfigErrorHandler(err, state.config);
  }
};
var dev = async (config) => {
  const fuelCore = await autoStartFuelCore(config);
  const configFilePaths = getConfigFilepathsToWatch(config);
  const { contracts, scripts, predicates, basePath: cwd } = config;
  const workspaceFilePaths = [contracts, predicates, scripts].flat().flatMap((dir) => [
    dir,
    globSync2(`${dir}/**/*.toml`, { cwd }),
    globSync2(`${dir}/**/*.sw`, { cwd })
  ]).flat();
  try {
    await buildAndDeploy(config);
    const watchHandlers = [];
    const options = { persistent: true, ignoreInitial: true, ignored: "**/out/**" };
    const state = { config, watchHandlers, fuelCore };
    watchHandlers.push(watch(configFilePaths, options).on("all", configFileChanged(state)));
    watchHandlers.push(watch(workspaceFilePaths, options).on("all", workspaceFileChanged(state)));
  } catch (err) {
    error(err);
    throw err;
  }
};

// src/cli/commands/init/index.ts
import { FuelError as FuelError4 } from "@fuel-ts/errors";
import { existsSync as existsSync3, writeFileSync as writeFileSync5 } from "fs";
import { globSync as globSync3 } from "glob";
import { join as join3, relative, resolve as resolve3 } from "path";

// src/cli/templates/fuels.config.ts
import Handlebars2 from "handlebars";

// src/cli/templates/fuels.config.hbs
var fuels_config_default = "import { createConfig } from 'fuels';\n\nexport default createConfig({\n  {{#if (isDefined workspace)}}\n  workspace: '{{workspace}}',\n  {{else}}\n    {{#if (isDefined contracts)}}\n  contracts: [\n      {{#each contracts}}\n        '{{this}}',\n      {{/each}}\n  ],\n    {{/if}}\n    {{#if (isDefined predicates)}}\n  predicates: [\n      {{#each predicates}}\n        '{{this}}',\n      {{/each}}\n  ],\n    {{/if}}\n    {{#if (isDefined scripts)}}\n  scripts: [\n      {{#each scripts}}\n        '{{this}}',\n      {{/each}}\n  ],\n    {{/if}}\n  {{/if}}\n  output: '{{output}}',\n  {{#if (isDefined forcPath)}}\n  forcPath: '{{forcPath}}',\n  {{/if}}\n  {{#if (isDefined fuelCorePath)}}\n  fuelCorePath: '{{fuelCorePath}}',\n  {{/if}}\n  {{#if (isDefined autoStartFuelCore)}}\n  autoStartFuelCore: {{autoStartFuelCore}},\n  {{/if}}\n  {{#if (isDefined fuelCorePort)}}\n  fuelCorePort: {{fuelCorePort}},\n  {{/if}}\n});\n\n/**\n * Check the docs:\n * https://docs.fuel.network/docs/fuels-ts/fuels-cli/config-file/\n */\n";

// src/cli/templates/fuels.config.ts
Handlebars2.registerHelper("isDefined", (v) => v !== void 0);
function renderFuelsConfigTemplate(props) {
  const renderTemplate = Handlebars2.compile(fuels_config_default, {
    strict: true,
    noEscape: true
  });
  return renderTemplate(props);
}

// src/cli/commands/init/index.ts
function init(program) {
  const options = program.opts();
  const { path, autoStartFuelCore: autoStartFuelCore2, forcPath, fuelCorePath, fuelCorePort } = options;
  let workspace;
  let absoluteWorkspace;
  if (options.workspace) {
    absoluteWorkspace = resolve3(path, options.workspace);
    workspace = `./${relative(path, absoluteWorkspace)}`;
  }
  const absoluteOutput = resolve3(path, options.output);
  const output = `./${relative(path, absoluteOutput)}`;
  const [contracts, scripts, predicates] = ["contracts", "scripts", "predicates"].map(
    (optionName) => {
      const pathOrGlob = options[optionName];
      if (!pathOrGlob) {
        return void 0;
      }
      const expanded = globSync3(pathOrGlob, { cwd: path });
      const relatives = expanded.map((e) => relative(path, e));
      return relatives;
    }
  );
  const noneIsInformed = ![workspace, contracts, scripts, predicates].find((v) => v !== void 0);
  if (noneIsInformed) {
    console.log(`error: required option '-w, --workspace <path>' not specified\r`);
    process.exit(1);
  } else {
    const fuelsConfigPath = join3(path, "fuels.config.ts");
    if (existsSync3(fuelsConfigPath)) {
      throw new FuelError4(
        FuelError4.CODES.CONFIG_FILE_ALREADY_EXISTS,
        `Config file exists, aborting.
  ${fuelsConfigPath}`
      );
    }
    const renderedConfig = renderFuelsConfigTemplate({
      workspace,
      contracts,
      scripts,
      predicates,
      output,
      forcPath,
      fuelCorePath,
      autoStartFuelCore: autoStartFuelCore2,
      fuelCorePort
    });
    writeFileSync5(fuelsConfigPath, renderedConfig);
    log(`Config file created at:

 ${fuelsConfigPath}
`);
  }
}

// src/cli/commands/node/index.ts
import { watch as watch2 } from "chokidar";
var getConfigFilepathsToWatch2 = (config) => {
  const configFilePathsToWatch = [config.configPath];
  if (config.snapshotDir) {
    configFilePathsToWatch.push(config.snapshotDir);
  }
  return configFilePathsToWatch;
};
var closeAllFileHandlers2 = (handlers) => {
  handlers.forEach((h) => h.close());
};
var configFileChanged2 = (state) => async (_event, path) => {
  log(`
File changed: ${path}`);
  closeAllFileHandlers2(state.watchHandlers);
  state.fuelCore?.killChildProcess();
  try {
    await node(await loadConfig(state.config.basePath));
    state.config.onNode?.(state.config);
  } catch (err) {
    await withConfigErrorHandler(err, state.config);
  }
};
var node = async (config) => {
  const fuelCore = await autoStartFuelCore(config);
  const configFilePaths = getConfigFilepathsToWatch2(config);
  try {
    const watchHandlers = [];
    const options = { persistent: true, ignoreInitial: true, ignored: "**/out/**" };
    const state = { config, watchHandlers, fuelCore };
    watchHandlers.push(watch2(configFilePaths, options).on("all", configFileChanged2(state)));
  } catch (err) {
    error(err);
    throw err;
  }
};

// src/cli/commands/withBinaryPaths.ts
function withBinaryPaths(program, _command, fn) {
  return async () => {
    const options = program.opts();
    const paths = {};
    try {
      const { userConfig } = await loadUserConfig(options.path);
      paths.forcPath = userConfig.forcPath;
      paths.fuelCorePath = userConfig.fuelCorePath;
    } catch (err) {
      debug(err.message);
    }
    try {
      await fn(paths);
    } catch (err) {
      error(err);
    }
  };
}

// src/cli/commands/withProgram.ts
function withProgram(program, _command, fn) {
  return async () => {
    try {
      await fn(program);
    } catch (err) {
      error(err);
    }
  };
}

// src/cli.ts
var onPreAction = (command) => {
  const opts = command.opts();
  configureLogging({
    isDebugEnabled: opts.debug,
    isLoggingEnabled: !opts.silent
  });
};
var configureCli = () => {
  const program = new Command();
  program.name("fuels");
  program.option("-D, --debug", "Enables verbose logging", false);
  program.option("-S, --silent", "Omit output messages", false);
  program.version(versions.FUELS, "-v, --version", "Output the version number");
  program.helpOption("-h, --help", "Display help");
  program.helpCommand("help [command]", "Display help for command");
  program.enablePositionalOptions(true);
  program.hook("preAction", onPreAction);
  const pathOption = new Option("--path <path>", "Path to project root").default(process.cwd());
  let command;
  (command = program.command("init" /* init */)).description("Create a sample `fuel.config.ts` file").addOption(pathOption).option("-w, --workspace <path>", "Relative dir path to Forc workspace").addOption(
    new Option(`-c, --contracts [paths...]`, `Relative paths to Contracts`).conflicts("workspace")
  ).addOption(
    new Option(`-s, --scripts [paths...]`, `Relative paths to Scripts`).conflicts("workspace")
  ).addOption(
    new Option(`-p, --predicates [paths...]`, `Relative paths to Predicates`).conflicts(
      "workspace"
    )
  ).requiredOption("-o, --output <path>", "Relative dir path for Typescript generation output").option("--forc-path <path>", "Path to the `forc` binary").option("--fuel-core-path <path>", "Path to the `fuel-core` binary").option("--auto-start-fuel-core", "Auto-starts a `fuel-core` node during `dev` command").option(
    "--fuel-core-port <port>",
    "Port to use when starting a local `fuel-core` node for dev mode"
  ).action(withProgram(command, "init" /* init */, init));
  (command = program.command("dev" /* dev */)).description("Start a Fuel node with hot-reload capabilities").addOption(pathOption).action(withConfig(command, "dev" /* dev */, dev));
  (command = program.command("node" /* node */)).description("Start a Fuel node using project configs").addOption(pathOption).action(withConfig(command, "node" /* node */, node));
  (command = program.command("build" /* build */)).description("Build Sway programs and generate Typescript for them").addOption(pathOption).option(
    "-d, --deploy",
    "Deploy contracts after build (auto-starts a `fuel-core` node if needed)"
  ).action(withConfig(command, "build" /* build */, build));
  (command = program.command("deploy" /* deploy */)).description("Deploy contracts to the Fuel network").addOption(pathOption).action(withConfig(command, "deploy" /* deploy */, deploy));
  configureTypegenCliOptions(
    program.command("typegen").description(`Generate Typescript from Sway ABI JSON files`)
  );
  (command = program.command("versions")).description("Check for version incompatibilities").addOption(pathOption).action(withBinaryPaths(command, "versions" /* versions */, runVersions));
  return program;
};
export {
  configureCli,
  onPreAction
};
//# sourceMappingURL=cli.mjs.map