"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod2) => function __require2() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);

  // ../../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "../../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js"(exports, module) {
      (function(module2, exports2) {
        "use strict";
        function assert(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN2(number2, base2, endian) {
          if (BN2.isBN(number2)) {
            return number2;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number2 !== null) {
            if (base2 === "le" || base2 === "be") {
              endian = base2;
              base2 = 10;
            }
            this._init(number2 || 0, base2 || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN2;
        } else {
          exports2.BN = BN2;
        }
        BN2.BN = BN2;
        BN2.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = __require("buffer").Buffer;
          }
        } catch (e) {
        }
        BN2.isBN = function isBN(num) {
          if (num instanceof BN2) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN2.wordSize && Array.isArray(num.words);
        };
        BN2.max = function max(left, right) {
          if (left.cmp(right) > 0)
            return left;
          return right;
        };
        BN2.min = function min(left, right) {
          if (left.cmp(right) < 0)
            return left;
          return right;
        };
        BN2.prototype._init = function init(number2, base2, endian) {
          if (typeof number2 === "number") {
            return this._initNumber(number2, base2, endian);
          }
          if (typeof number2 === "object") {
            return this._initArray(number2, base2, endian);
          }
          if (base2 === "hex") {
            base2 = 16;
          }
          assert(base2 === (base2 | 0) && base2 >= 2 && base2 <= 36);
          number2 = number2.toString().replace(/\s+/g, "");
          var start = 0;
          if (number2[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number2.length) {
            if (base2 === 16) {
              this._parseHex(number2, start, endian);
            } else {
              this._parseBase(number2, base2, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base2, endian);
              }
            }
          }
        };
        BN2.prototype._initNumber = function _initNumber(number2, base2, endian) {
          if (number2 < 0) {
            this.negative = 1;
            number2 = -number2;
          }
          if (number2 < 67108864) {
            this.words = [number2 & 67108863];
            this.length = 1;
          } else if (number2 < 4503599627370496) {
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert(number2 < 9007199254740992);
            this.words = [
              number2 & 67108863,
              number2 / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base2, endian);
        };
        BN2.prototype._initArray = function _initArray(number2, base2, endian) {
          assert(typeof number2.length === "number");
          if (number2.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number2.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {
              w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number2.length; i += 3) {
              w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 48 && c <= 57) {
            return c - 48;
          } else if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert(false, "Invalid character in " + string);
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN2.prototype._parseHex = function _parseHex(number2, start, endian) {
          this.length = Math.ceil((number2.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number2.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number2, start, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number2.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number2.length; i += 2) {
              w = parseHexByte(number2, start, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              b = c - 49 + 10;
            } else if (c >= 17) {
              b = c - 17 + 10;
            } else {
              b = c;
            }
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
          }
          return r;
        }
        BN2.prototype._parseBase = function _parseBase(number2, base2, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base2) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base2 | 0;
          var total = number2.length - start;
          var mod2 = total % limbLen;
          var end = Math.min(total, total - mod2) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number2, i, i + limbLen, base2);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod2 !== 0) {
            var pow3 = 1;
            word = parseBase(number2, i, number2.length, base2);
            for (i = 0; i < mod2; i++) {
              pow3 *= base2;
            }
            this.imuln(pow3);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN2.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN2.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN2.prototype.clone = function clone4() {
          var r = new BN2(null);
          this.copy(r);
          return r;
        };
        BN2.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN2.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN2.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN2.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect2;
          } catch (e) {
            BN2.prototype.inspect = inspect2;
          }
        } else {
          BN2.prototype.inspect = inspect2;
        }
        function inspect2() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN2.prototype.toString = function toString(base2, padding) {
          base2 = base2 || 10;
          padding = padding | 0 || 1;
          var out;
          if (base2 === 16 || base2 === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base2 === (base2 | 0) && base2 >= 2 && base2 <= 36) {
            var groupSize = groupSizes[base2];
            var groupBase = groupBases[base2];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modrn(groupBase).toString(base2);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert(false, "Base should be between 2 and 36");
        };
        BN2.prototype.toNumber = function toNumber2() {
          var ret2 = this.words[0];
          if (this.length === 2) {
            ret2 += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret2 += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret2 : ret2;
        };
        BN2.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN2.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer2, endian, length);
          };
        }
        BN2.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN2.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };
        BN2.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN2.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN2.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN2.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN2.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0)
            return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN2.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
          }
          return w;
        }
        BN2.prototype.zeroBits = function zeroBits() {
          if (this.isZero())
            return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26)
              break;
          }
          return r;
        };
        BN2.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN2.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN2.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN2.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN2.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN2.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN2.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this._strip();
        };
        BN2.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN2.prototype.or = function or(num) {
          if (this.length > num.length)
            return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN2.prototype.uor = function uor(num) {
          if (this.length > num.length)
            return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN2.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this._strip();
        };
        BN2.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN2.prototype.and = function and(num) {
          if (this.length > num.length)
            return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN2.prototype.uand = function uand(num) {
          if (this.length > num.length)
            return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN2.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN2.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN2.prototype.xor = function xor(num) {
          if (this.length > num.length)
            return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN2.prototype.uxor = function uxor(num) {
          if (this.length > num.length)
            return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN2.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN2.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN2.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN2.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN2.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length)
            return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN2.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN2.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          var len = self.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self, num, out) {
          var a = self.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self, num, out) {
          out.negative = num.negative ^ self.negative;
          out.length = self.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self, num, out) {
          return bigMulTo(self, num, out);
        }
        BN2.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN2.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1)
            return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1)
            return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert(carry === 0);
          assert((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
        };
        BN2.prototype.mul = function mul(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN2.prototype.mulf = function mulf(num) {
          var out = new BN2(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN2.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN2.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(typeof num === "number");
          assert(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN2.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN2.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN2.prototype.pow = function pow3(num) {
          var w = toBitArray(num);
          if (w.length === 0)
            return new BN2(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0)
              break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0)
                continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN2.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this._strip();
        };
        BN2.prototype.ishln = function ishln(bits) {
          assert(this.negative === 0);
          return this.iushln(bits);
        };
        BN2.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN2.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN2.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN2.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN2.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN2.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN2.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s)
            return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN2.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this._strip();
        };
        BN2.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN2.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN2.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN2.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN2.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN2.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN2.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN2.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN2.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0)
            return this._strip();
          assert(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN2.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN2(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN2.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN2(0),
              mod: new BN2(0)
            };
          }
          var div, mod2, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.iadd(num);
              }
            }
            return {
              div,
              mod: mod2
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod2 = res.mod.neg();
              if (positive && mod2.negative !== 0) {
                mod2.isub(num);
              }
            }
            return {
              div: res.div,
              mod: mod2
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN2(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN2(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN2(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN2.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN2.prototype.mod = function mod2(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN2.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN2.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero())
            return dm.div;
          var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod2.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0)
            return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN2.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN2.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN2.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN2.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN2.prototype.egcd = function egcd(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN2(1);
          var B = new BN2(0);
          var C = new BN2(0);
          var D = new BN2(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN2.prototype._invmp = function _invmp(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN2(1);
          var x2 = new BN2(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN2.prototype.gcd = function gcd(num) {
          if (this.isZero())
            return num.abs();
          if (num.isZero())
            return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN2.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN2.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN2.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN2.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN2.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN2.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN2.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative)
            return -1;
          if (this.negative === 0 && negative)
            return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN2.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0)
            return -1;
          if (this.negative === 0 && num.negative !== 0)
            return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN2.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length)
            return 1;
          if (this.length < num.length)
            return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b)
              continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN2.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN2.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN2.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN2.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN2.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN2.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN2.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN2.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN2.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN2.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN2.red = function red(num) {
          return new Red(num);
        };
        BN2.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN2.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN2.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN2.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN2.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN2.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN2.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN2.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN2.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN2.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN2.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN2.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN2.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN2.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN2.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN2.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN2.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p) {
          this.name = name;
          this.p = new BN2(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN2(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN2(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split2(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split2(input, output2) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output2.words[i] = input.words[i];
          }
          output2.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output2.words[output2.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN2._prime = function prime(name) {
          if (primes[name])
            return primes[name];
          var prime2;
          if (name === "k256") {
            prime2 = new K256();
          } else if (name === "p224") {
            prime2 = new P224();
          } else if (name === "p192") {
            prime2 = new P192();
          } else if (name === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN2._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert(a.negative === 0, "red works only with positives");
          assert(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert((a.negative | b.negative) === 0, "red works only with positives");
          assert(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime)
            return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero())
            return a.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow3 = this.m.add(new BN2(1)).iushrn(2);
            return this.pow(a, pow3);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert(!q.isZero());
          var one = new BN2(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN2(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert(i < m);
            var b = this.pow(c, new BN2(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow3(a, num) {
          if (num.isZero())
            return new BN2(1).toRed(this);
          if (num.cmpn(1) === 0)
            return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN2(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0))
                continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN2.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN2(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero())
            return new BN2(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // ../../node_modules/.pnpm/webidl-conversions@7.0.0/node_modules/webidl-conversions/lib/index.js
  var require_lib = __commonJS({
    "../../node_modules/.pnpm/webidl-conversions@7.0.0/node_modules/webidl-conversions/lib/index.js"(exports) {
      "use strict";
      function makeException(ErrorType, message, options) {
        if (options.globals) {
          ErrorType = options.globals[ErrorType.name];
        }
        return new ErrorType(`${options.context ? options.context : "Value"} ${message}.`);
      }
      function toNumber2(value, options) {
        if (typeof value === "bigint") {
          throw makeException(TypeError, "is a BigInt which cannot be converted to a number", options);
        }
        if (!options.globals) {
          return Number(value);
        }
        return options.globals.Number(value);
      }
      function evenRound(x) {
        if (x > 0 && x % 1 === 0.5 && (x & 1) === 0 || x < 0 && x % 1 === -0.5 && (x & 1) === 1) {
          return censorNegativeZero(Math.floor(x));
        }
        return censorNegativeZero(Math.round(x));
      }
      function integerPart(n) {
        return censorNegativeZero(Math.trunc(n));
      }
      function sign(x) {
        return x < 0 ? -1 : 1;
      }
      function modulo(x, y) {
        const signMightNotMatch = x % y;
        if (sign(y) !== sign(signMightNotMatch)) {
          return signMightNotMatch + y;
        }
        return signMightNotMatch;
      }
      function censorNegativeZero(x) {
        return x === 0 ? 0 : x;
      }
      function createIntegerConversion(bitLength, { unsigned }) {
        let lowerBound, upperBound;
        if (unsigned) {
          lowerBound = 0;
          upperBound = 2 ** bitLength - 1;
        } else {
          lowerBound = -(2 ** (bitLength - 1));
          upperBound = 2 ** (bitLength - 1) - 1;
        }
        const twoToTheBitLength = 2 ** bitLength;
        const twoToOneLessThanTheBitLength = 2 ** (bitLength - 1);
        return (value, options = {}) => {
          let x = toNumber2(value, options);
          x = censorNegativeZero(x);
          if (options.enforceRange) {
            if (!Number.isFinite(x)) {
              throw makeException(TypeError, "is not a finite number", options);
            }
            x = integerPart(x);
            if (x < lowerBound || x > upperBound) {
              throw makeException(
                TypeError,
                `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,
                options
              );
            }
            return x;
          }
          if (!Number.isNaN(x) && options.clamp) {
            x = Math.min(Math.max(x, lowerBound), upperBound);
            x = evenRound(x);
            return x;
          }
          if (!Number.isFinite(x) || x === 0) {
            return 0;
          }
          x = integerPart(x);
          if (x >= lowerBound && x <= upperBound) {
            return x;
          }
          x = modulo(x, twoToTheBitLength);
          if (!unsigned && x >= twoToOneLessThanTheBitLength) {
            return x - twoToTheBitLength;
          }
          return x;
        };
      }
      function createLongLongConversion(bitLength, { unsigned }) {
        const upperBound = Number.MAX_SAFE_INTEGER;
        const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;
        const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;
        return (value, options = {}) => {
          let x = toNumber2(value, options);
          x = censorNegativeZero(x);
          if (options.enforceRange) {
            if (!Number.isFinite(x)) {
              throw makeException(TypeError, "is not a finite number", options);
            }
            x = integerPart(x);
            if (x < lowerBound || x > upperBound) {
              throw makeException(
                TypeError,
                `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,
                options
              );
            }
            return x;
          }
          if (!Number.isNaN(x) && options.clamp) {
            x = Math.min(Math.max(x, lowerBound), upperBound);
            x = evenRound(x);
            return x;
          }
          if (!Number.isFinite(x) || x === 0) {
            return 0;
          }
          let xBigInt = BigInt(integerPart(x));
          xBigInt = asBigIntN(bitLength, xBigInt);
          return Number(xBigInt);
        };
      }
      exports.any = (value) => {
        return value;
      };
      exports.undefined = () => {
        return void 0;
      };
      exports.boolean = (value) => {
        return Boolean(value);
      };
      exports.byte = createIntegerConversion(8, { unsigned: false });
      exports.octet = createIntegerConversion(8, { unsigned: true });
      exports.short = createIntegerConversion(16, { unsigned: false });
      exports["unsigned short"] = createIntegerConversion(16, { unsigned: true });
      exports.long = createIntegerConversion(32, { unsigned: false });
      exports["unsigned long"] = createIntegerConversion(32, { unsigned: true });
      exports["long long"] = createLongLongConversion(64, { unsigned: false });
      exports["unsigned long long"] = createLongLongConversion(64, { unsigned: true });
      exports.double = (value, options = {}) => {
        const x = toNumber2(value, options);
        if (!Number.isFinite(x)) {
          throw makeException(TypeError, "is not a finite floating-point value", options);
        }
        return x;
      };
      exports["unrestricted double"] = (value, options = {}) => {
        const x = toNumber2(value, options);
        return x;
      };
      exports.float = (value, options = {}) => {
        const x = toNumber2(value, options);
        if (!Number.isFinite(x)) {
          throw makeException(TypeError, "is not a finite floating-point value", options);
        }
        if (Object.is(x, -0)) {
          return x;
        }
        const y = Math.fround(x);
        if (!Number.isFinite(y)) {
          throw makeException(TypeError, "is outside the range of a single-precision floating-point value", options);
        }
        return y;
      };
      exports["unrestricted float"] = (value, options = {}) => {
        const x = toNumber2(value, options);
        if (isNaN(x)) {
          return x;
        }
        if (Object.is(x, -0)) {
          return x;
        }
        return Math.fround(x);
      };
      exports.DOMString = (value, options = {}) => {
        if (options.treatNullAsEmptyString && value === null) {
          return "";
        }
        if (typeof value === "symbol") {
          throw makeException(TypeError, "is a symbol, which cannot be converted to a string", options);
        }
        const StringCtor = options.globals ? options.globals.String : String;
        return StringCtor(value);
      };
      exports.ByteString = (value, options = {}) => {
        const x = exports.DOMString(value, options);
        let c;
        for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
          if (c > 255) {
            throw makeException(TypeError, "is not a valid ByteString", options);
          }
        }
        return x;
      };
      exports.USVString = (value, options = {}) => {
        const S = exports.DOMString(value, options);
        const n = S.length;
        const U = [];
        for (let i = 0; i < n; ++i) {
          const c = S.charCodeAt(i);
          if (c < 55296 || c > 57343) {
            U.push(String.fromCodePoint(c));
          } else if (56320 <= c && c <= 57343) {
            U.push(String.fromCodePoint(65533));
          } else if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
        return U.join("");
      };
      exports.object = (value, options = {}) => {
        if (value === null || typeof value !== "object" && typeof value !== "function") {
          throw makeException(TypeError, "is not an object", options);
        }
        return value;
      };
      var abByteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
      var sabByteLengthGetter = typeof SharedArrayBuffer === "function" ? Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, "byteLength").get : null;
      function isNonSharedArrayBuffer(value) {
        try {
          abByteLengthGetter.call(value);
          return true;
        } catch {
          return false;
        }
      }
      function isSharedArrayBuffer(value) {
        try {
          sabByteLengthGetter.call(value);
          return true;
        } catch {
          return false;
        }
      }
      function isArrayBufferDetached(value) {
        try {
          new Uint8Array(value);
          return false;
        } catch {
          return true;
        }
      }
      exports.ArrayBuffer = (value, options = {}) => {
        if (!isNonSharedArrayBuffer(value)) {
          if (options.allowShared && !isSharedArrayBuffer(value)) {
            throw makeException(TypeError, "is not an ArrayBuffer or SharedArrayBuffer", options);
          }
          throw makeException(TypeError, "is not an ArrayBuffer", options);
        }
        if (isArrayBufferDetached(value)) {
          throw makeException(TypeError, "is a detached ArrayBuffer", options);
        }
        return value;
      };
      var dvByteLengthGetter = Object.getOwnPropertyDescriptor(DataView.prototype, "byteLength").get;
      exports.DataView = (value, options = {}) => {
        try {
          dvByteLengthGetter.call(value);
        } catch (e) {
          throw makeException(TypeError, "is not a DataView", options);
        }
        if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
          throw makeException(TypeError, "is backed by a SharedArrayBuffer, which is not allowed", options);
        }
        if (isArrayBufferDetached(value.buffer)) {
          throw makeException(TypeError, "is backed by a detached ArrayBuffer", options);
        }
        return value;
      };
      var typedArrayNameGetter = Object.getOwnPropertyDescriptor(
        Object.getPrototypeOf(Uint8Array).prototype,
        Symbol.toStringTag
      ).get;
      [
        Int8Array,
        Int16Array,
        Int32Array,
        Uint8Array,
        Uint16Array,
        Uint32Array,
        Uint8ClampedArray,
        Float32Array,
        Float64Array
      ].forEach((func) => {
        const { name } = func;
        const article = /^[AEIOU]/u.test(name) ? "an" : "a";
        exports[name] = (value, options = {}) => {
          if (!ArrayBuffer.isView(value) || typedArrayNameGetter.call(value) !== name) {
            throw makeException(TypeError, `is not ${article} ${name} object`, options);
          }
          if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
            throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options);
          }
          if (isArrayBufferDetached(value.buffer)) {
            throw makeException(TypeError, "is a view on a detached ArrayBuffer", options);
          }
          return value;
        };
      });
      exports.ArrayBufferView = (value, options = {}) => {
        if (!ArrayBuffer.isView(value)) {
          throw makeException(TypeError, "is not a view on an ArrayBuffer or SharedArrayBuffer", options);
        }
        if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
          throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options);
        }
        if (isArrayBufferDetached(value.buffer)) {
          throw makeException(TypeError, "is a view on a detached ArrayBuffer", options);
        }
        return value;
      };
      exports.BufferSource = (value, options = {}) => {
        if (ArrayBuffer.isView(value)) {
          if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {
            throw makeException(TypeError, "is a view on a SharedArrayBuffer, which is not allowed", options);
          }
          if (isArrayBufferDetached(value.buffer)) {
            throw makeException(TypeError, "is a view on a detached ArrayBuffer", options);
          }
          return value;
        }
        if (!options.allowShared && !isNonSharedArrayBuffer(value)) {
          throw makeException(TypeError, "is not an ArrayBuffer or a view on one", options);
        }
        if (options.allowShared && !isSharedArrayBuffer(value) && !isNonSharedArrayBuffer(value)) {
          throw makeException(TypeError, "is not an ArrayBuffer, SharedArrayBuffer, or a view on one", options);
        }
        if (isArrayBufferDetached(value)) {
          throw makeException(TypeError, "is a detached ArrayBuffer", options);
        }
        return value;
      };
      exports.DOMTimeStamp = exports["unsigned long long"];
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/utils.js
  var require_utils = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/utils.js"(exports, module) {
      "use strict";
      function isObject(value) {
        return typeof value === "object" && value !== null || typeof value === "function";
      }
      var hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);
      function define(target, source) {
        for (const key of Reflect.ownKeys(source)) {
          const descriptor = Reflect.getOwnPropertyDescriptor(source, key);
          if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {
            throw new TypeError(`Cannot redefine property: ${String(key)}`);
          }
        }
      }
      function newObjectInRealm(globalObject, object) {
        const ctorRegistry = initCtorRegistry(globalObject);
        return Object.defineProperties(
          Object.create(ctorRegistry["%Object.prototype%"]),
          Object.getOwnPropertyDescriptors(object)
        );
      }
      var wrapperSymbol = Symbol("wrapper");
      var implSymbol = Symbol("impl");
      var sameObjectCaches = Symbol("SameObject caches");
      var ctorRegistrySymbol = Symbol.for("[webidl2js] constructor registry");
      var AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {
      }).prototype);
      function initCtorRegistry(globalObject) {
        if (hasOwn(globalObject, ctorRegistrySymbol)) {
          return globalObject[ctorRegistrySymbol];
        }
        const ctorRegistry = /* @__PURE__ */ Object.create(null);
        ctorRegistry["%Object.prototype%"] = globalObject.Object.prototype;
        ctorRegistry["%IteratorPrototype%"] = Object.getPrototypeOf(
          Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]())
        );
        try {
          ctorRegistry["%AsyncIteratorPrototype%"] = Object.getPrototypeOf(
            Object.getPrototypeOf(
              globalObject.eval("(async function* () {})").prototype
            )
          );
        } catch {
          ctorRegistry["%AsyncIteratorPrototype%"] = AsyncIteratorPrototype;
        }
        globalObject[ctorRegistrySymbol] = ctorRegistry;
        return ctorRegistry;
      }
      function getSameObject(wrapper, prop, creator) {
        if (!wrapper[sameObjectCaches]) {
          wrapper[sameObjectCaches] = /* @__PURE__ */ Object.create(null);
        }
        if (prop in wrapper[sameObjectCaches]) {
          return wrapper[sameObjectCaches][prop];
        }
        wrapper[sameObjectCaches][prop] = creator();
        return wrapper[sameObjectCaches][prop];
      }
      function wrapperForImpl(impl) {
        return impl ? impl[wrapperSymbol] : null;
      }
      function implForWrapper(wrapper) {
        return wrapper ? wrapper[implSymbol] : null;
      }
      function tryWrapperForImpl(impl) {
        const wrapper = wrapperForImpl(impl);
        return wrapper ? wrapper : impl;
      }
      function tryImplForWrapper(wrapper) {
        const impl = implForWrapper(wrapper);
        return impl ? impl : wrapper;
      }
      var iterInternalSymbol = Symbol("internal");
      function isArrayIndexPropName(P) {
        if (typeof P !== "string") {
          return false;
        }
        const i = P >>> 0;
        if (i === 2 ** 32 - 1) {
          return false;
        }
        const s = `${i}`;
        if (P !== s) {
          return false;
        }
        return true;
      }
      var byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, "byteLength").get;
      function isArrayBuffer(value) {
        try {
          byteLengthGetter.call(value);
          return true;
        } catch (e) {
          return false;
        }
      }
      function iteratorResult([key, value], kind) {
        let result;
        switch (kind) {
          case "key":
            result = key;
            break;
          case "value":
            result = value;
            break;
          case "key+value":
            result = [key, value];
            break;
        }
        return { value: result, done: false };
      }
      var supportsPropertyIndex = Symbol("supports property index");
      var supportedPropertyIndices = Symbol("supported property indices");
      var supportsPropertyName = Symbol("supports property name");
      var supportedPropertyNames = Symbol("supported property names");
      var indexedGet = Symbol("indexed property get");
      var indexedSetNew = Symbol("indexed property set new");
      var indexedSetExisting = Symbol("indexed property set existing");
      var namedGet = Symbol("named property get");
      var namedSetNew = Symbol("named property set new");
      var namedSetExisting = Symbol("named property set existing");
      var namedDelete = Symbol("named property delete");
      var asyncIteratorNext = Symbol("async iterator get the next iteration result");
      var asyncIteratorReturn = Symbol("async iterator return steps");
      var asyncIteratorInit = Symbol("async iterator initialization steps");
      var asyncIteratorEOI = Symbol("async iterator end of iteration");
      module.exports = exports = {
        isObject,
        hasOwn,
        define,
        newObjectInRealm,
        wrapperSymbol,
        implSymbol,
        getSameObject,
        ctorRegistrySymbol,
        initCtorRegistry,
        wrapperForImpl,
        implForWrapper,
        tryWrapperForImpl,
        tryImplForWrapper,
        iterInternalSymbol,
        isArrayBuffer,
        isArrayIndexPropName,
        supportsPropertyIndex,
        supportedPropertyIndices,
        supportsPropertyName,
        supportedPropertyNames,
        indexedGet,
        indexedSetNew,
        indexedSetExisting,
        namedGet,
        namedSetNew,
        namedSetExisting,
        namedDelete,
        asyncIteratorNext,
        asyncIteratorReturn,
        asyncIteratorInit,
        asyncIteratorEOI,
        iteratorResult
      };
    }
  });

  // ../../node_modules/.pnpm/punycode@2.3.1/node_modules/punycode/punycode.es6.js
  var punycode_es6_exports = {};
  __export(punycode_es6_exports, {
    decode: () => decode,
    default: () => punycode_es6_default,
    encode: () => encode,
    toASCII: () => toASCII,
    toUnicode: () => toUnicode,
    ucs2decode: () => ucs2decode,
    ucs2encode: () => ucs2encode
  });
  function error(type3) {
    throw new RangeError(errors[type3]);
  }
  function map(array, callback) {
    const result = [];
    let length = array.length;
    while (length--) {
      result[length] = callback(array[length]);
    }
    return result;
  }
  function mapDomain(domain, callback) {
    const parts = domain.split("@");
    let result = "";
    if (parts.length > 1) {
      result = parts[0] + "@";
      domain = parts[1];
    }
    domain = domain.replace(regexSeparators, ".");
    const labels = domain.split(".");
    const encoded = map(labels, callback).join(".");
    return result + encoded;
  }
  function ucs2decode(string) {
    const output2 = [];
    let counter = 0;
    const length = string.length;
    while (counter < length) {
      const value = string.charCodeAt(counter++);
      if (value >= 55296 && value <= 56319 && counter < length) {
        const extra = string.charCodeAt(counter++);
        if ((extra & 64512) == 56320) {
          output2.push(((value & 1023) << 10) + (extra & 1023) + 65536);
        } else {
          output2.push(value);
          counter--;
        }
      } else {
        output2.push(value);
      }
    }
    return output2;
  }
  var maxInt, base, tMin, tMax, skew, damp, initialBias, initialN, delimiter, regexPunycode, regexNonASCII, regexSeparators, errors, baseMinusTMin, floor, stringFromCharCode, ucs2encode, basicToDigit, digitToBasic, adapt, decode, encode, toUnicode, toASCII, punycode, punycode_es6_default;
  var init_punycode_es6 = __esm({
    "../../node_modules/.pnpm/punycode@2.3.1/node_modules/punycode/punycode.es6.js"() {
      "use strict";
      maxInt = 2147483647;
      base = 36;
      tMin = 1;
      tMax = 26;
      skew = 38;
      damp = 700;
      initialBias = 72;
      initialN = 128;
      delimiter = "-";
      regexPunycode = /^xn--/;
      regexNonASCII = /[^\0-\x7F]/;
      regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
      errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      baseMinusTMin = base - tMin;
      floor = Math.floor;
      stringFromCharCode = String.fromCharCode;
      ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
      basicToDigit = function(codePoint) {
        if (codePoint >= 48 && codePoint < 58) {
          return 26 + (codePoint - 48);
        }
        if (codePoint >= 65 && codePoint < 91) {
          return codePoint - 65;
        }
        if (codePoint >= 97 && codePoint < 123) {
          return codePoint - 97;
        }
        return base;
      };
      digitToBasic = function(digit, flag) {
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
      };
      adapt = function(delta, numPoints, firstTime) {
        let k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      decode = function(input) {
        const output2 = [];
        const inputLength = input.length;
        let i = 0;
        let n = initialN;
        let bias = initialBias;
        let basic = input.lastIndexOf(delimiter);
        if (basic < 0) {
          basic = 0;
        }
        for (let j = 0; j < basic; ++j) {
          if (input.charCodeAt(j) >= 128) {
            error("not-basic");
          }
          output2.push(input.charCodeAt(j));
        }
        for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
          const oldi = i;
          for (let w = 1, k = base; ; k += base) {
            if (index >= inputLength) {
              error("invalid-input");
            }
            const digit = basicToDigit(input.charCodeAt(index++));
            if (digit >= base) {
              error("invalid-input");
            }
            if (digit > floor((maxInt - i) / w)) {
              error("overflow");
            }
            i += digit * w;
            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
            if (digit < t) {
              break;
            }
            const baseMinusT = base - t;
            if (w > floor(maxInt / baseMinusT)) {
              error("overflow");
            }
            w *= baseMinusT;
          }
          const out = output2.length + 1;
          bias = adapt(i - oldi, out, oldi == 0);
          if (floor(i / out) > maxInt - n) {
            error("overflow");
          }
          n += floor(i / out);
          i %= out;
          output2.splice(i++, 0, n);
        }
        return String.fromCodePoint(...output2);
      };
      encode = function(input) {
        const output2 = [];
        input = ucs2decode(input);
        const inputLength = input.length;
        let n = initialN;
        let delta = 0;
        let bias = initialBias;
        for (const currentValue of input) {
          if (currentValue < 128) {
            output2.push(stringFromCharCode(currentValue));
          }
        }
        const basicLength = output2.length;
        let handledCPCount = basicLength;
        if (basicLength) {
          output2.push(delimiter);
        }
        while (handledCPCount < inputLength) {
          let m = maxInt;
          for (const currentValue of input) {
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
          const handledCPCountPlusOne = handledCPCount + 1;
          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            error("overflow");
          }
          delta += (m - n) * handledCPCountPlusOne;
          n = m;
          for (const currentValue of input) {
            if (currentValue < n && ++delta > maxInt) {
              error("overflow");
            }
            if (currentValue === n) {
              let q = delta;
              for (let k = base; ; k += base) {
                const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                const qMinusT = q - t;
                const baseMinusT = base - t;
                output2.push(
                  stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
                );
                q = floor(qMinusT / baseMinusT);
              }
              output2.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
          ++delta;
          ++n;
        }
        return output2.join("");
      };
      toUnicode = function(input) {
        return mapDomain(input, function(string) {
          return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
      };
      toASCII = function(input) {
        return mapDomain(input, function(string) {
          return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
      };
      punycode = {
        /**
         * A string representing the current Punycode.js version number.
         * @memberOf punycode
         * @type String
         */
        "version": "2.3.1",
        /**
         * An object of methods to convert from JavaScript's internal character
         * representation (UCS-2) to Unicode code points, and back.
         * @see <https://mathiasbynens.be/notes/javascript-encoding>
         * @memberOf punycode
         * @type Object
         */
        "ucs2": {
          "decode": ucs2decode,
          "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
      };
      punycode_es6_default = punycode;
    }
  });

  // ../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/regexes.js
  var require_regexes = __commonJS({
    "../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/regexes.js"(exports, module) {
      "use strict";
      var combiningMarks = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11000}-\u{11002}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11082}\u{110B0}-\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{11134}\u{11145}\u{11146}\u{11173}\u{11180}-\u{11182}\u{111B3}-\u{111C0}\u{111C9}-\u{111CC}\u{111CE}\u{111CF}\u{1122C}-\u{11237}\u{1123E}\u{11241}\u{112DF}-\u{112EA}\u{11300}-\u{11303}\u{1133B}\u{1133C}\u{1133E}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11357}\u{11362}\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11435}-\u{11446}\u{1145E}\u{114B0}-\u{114C3}\u{115AF}-\u{115B5}\u{115B8}-\u{115C0}\u{115DC}\u{115DD}\u{11630}-\u{11640}\u{116AB}-\u{116B7}\u{1171D}-\u{1172B}\u{1182C}-\u{1183A}\u{11930}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{1193E}\u{11940}\u{11942}\u{11943}\u{119D1}-\u{119D7}\u{119DA}-\u{119E0}\u{119E4}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A39}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A5B}\u{11A8A}-\u{11A99}\u{11C2F}-\u{11C36}\u{11C38}-\u{11C3F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D8A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D97}\u{11EF3}-\u{11EF6}\u{11F00}\u{11F01}\u{11F03}\u{11F34}-\u{11F3A}\u{11F3E}-\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F51}-\u{16F87}\u{16F8F}-\u{16F92}\u{16FE4}\u{16FF0}\u{16FF1}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D165}-\u{1D169}\u{1D16D}-\u{1D172}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]/u;
      var combiningClassVirama = /[\u094D\u09CD\u0A4D\u0ACD\u0B4D\u0BCD\u0C4D\u0CCD\u0D3B\u0D3C\u0D4D\u0DCA\u0E3A\u0EBA\u0F84\u1039\u103A\u1714\u1715\u1734\u17D2\u1A60\u1B44\u1BAA\u1BAB\u1BF2\u1BF3\u2D7F\uA806\uA82C\uA8C4\uA953\uA9C0\uAAF6\uABED\u{10A3F}\u{11046}\u{11070}\u{1107F}\u{110B9}\u{11133}\u{11134}\u{111C0}\u{11235}\u{112EA}\u{1134D}\u{11442}\u{114C2}\u{115BF}\u{1163F}\u{116B6}\u{1172B}\u{11839}\u{1193D}\u{1193E}\u{119E0}\u{11A34}\u{11A47}\u{11A99}\u{11C3F}\u{11D44}\u{11D45}\u{11D97}\u{11F41}\u{11F42}]/u;
      var validZWNJ = /[\u0620\u0626\u0628\u062A-\u062E\u0633-\u063F\u0641-\u0647\u0649\u064A\u066E\u066F\u0678-\u0687\u069A-\u06BF\u06C1\u06C2\u06CC\u06CE\u06D0\u06D1\u06FA-\u06FC\u06FF\u0712-\u0714\u071A-\u071D\u071F-\u0727\u0729\u072B\u072D\u072E\u074E-\u0758\u075C-\u076A\u076D-\u0770\u0772\u0775-\u0777\u077A-\u077F\u07CA-\u07EA\u0841-\u0845\u0848\u084A-\u0853\u0855\u0860\u0862-\u0865\u0868\u0886\u0889-\u088D\u08A0-\u08A9\u08AF\u08B0\u08B3-\u08B8\u08BA-\u08C8\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA872\u{10AC0}-\u{10AC4}\u{10ACD}\u{10AD3}-\u{10ADC}\u{10ADE}-\u{10AE0}\u{10AEB}-\u{10AEE}\u{10B80}\u{10B82}\u{10B86}-\u{10B88}\u{10B8A}\u{10B8B}\u{10B8D}\u{10B90}\u{10BAD}\u{10BAE}\u{10D00}-\u{10D21}\u{10D23}\u{10F30}-\u{10F32}\u{10F34}-\u{10F44}\u{10F51}-\u{10F53}\u{10F70}-\u{10F73}\u{10F76}-\u{10F81}\u{10FB0}\u{10FB2}\u{10FB3}\u{10FB8}\u{10FBB}\u{10FBC}\u{10FBE}\u{10FBF}\u{10FC1}\u{10FC4}\u{10FCA}\u{10FCB}\u{1E900}-\u{1E943}][\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13430}-\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*\u200C[\xAD\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u061C\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u070F\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u200B\u200E\u200F\u202A-\u202E\u2060-\u2064\u206A-\u206F\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFEFF\uFFF9-\uFFFB\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C3F}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13430}-\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94B}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*[\u0620\u0622-\u063F\u0641-\u064A\u066E\u066F\u0671-\u0673\u0675-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u077F\u07CA-\u07EA\u0840-\u0858\u0860\u0862-\u0865\u0867-\u086A\u0870-\u0882\u0886\u0889-\u088E\u08A0-\u08AC\u08AE-\u08C8\u1807\u1820-\u1878\u1887-\u18A8\u18AA\uA840-\uA871\u{10AC0}-\u{10AC5}\u{10AC7}\u{10AC9}\u{10ACA}\u{10ACE}-\u{10AD6}\u{10AD8}-\u{10AE1}\u{10AE4}\u{10AEB}-\u{10AEF}\u{10B80}-\u{10B91}\u{10BA9}-\u{10BAE}\u{10D01}-\u{10D23}\u{10F30}-\u{10F44}\u{10F51}-\u{10F54}\u{10F70}-\u{10F81}\u{10FB0}\u{10FB2}-\u{10FB6}\u{10FB8}-\u{10FBF}\u{10FC1}-\u{10FC4}\u{10FC9}\u{10FCA}\u{1E900}-\u{1E943}]/u;
      var bidiDomain = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u08A0-\u08C9\u08E2\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
      var bidiS1LTR = /[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u1711\u1715\u171F-\u1731\u1734-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4C\u1B50-\u1B6A\u1B74-\u1B7E\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u249C-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11071}\u{11072}\u{11075}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{11746}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11F02}-\u{11F10}\u{11F12}-\u{11F35}\u{11F3E}\u{11F3F}\u{11F41}\u{11F43}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{1343F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D800}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1E4D0}-\u{1E4EB}\u{1E4F0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2EBF0}-\u{2EE5D}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]/u;
      var bidiS1RTL = /[\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0608\u060B\u060D\u061B-\u064A\u066D-\u066F\u0671-\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u08A0-\u08C9\u200F\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}]/u;
      var bidiS2 = /^[\0-\x08\x0E-\x1B!-@\[-`\{-\x84\x86-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02B9\u02BA\u02C2-\u02CF\u02D2-\u02DF\u02E5-\u02ED\u02EF-\u036F\u0374\u0375\u037E\u0384\u0385\u0387\u03F6\u0483-\u0489\u058A\u058D-\u058F\u0591-\u05C7\u05D0-\u05EA\u05EF-\u05F4\u0600-\u070D\u070F-\u074A\u074D-\u07B1\u07C0-\u07FA\u07FD-\u082D\u0830-\u083E\u0840-\u085B\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u0898-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09F2\u09F3\u09FB\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF1\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0BF3-\u0BFA\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C78-\u0C7E\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E3F\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1390-\u1399\u1400\u169B\u169C\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DB\u17DD\u17F0-\u17F9\u1800-\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1940\u1944\u1945\u19DE-\u19FF\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u200B-\u200D\u200F-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20C0\u20D0-\u20F0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u2150-\u215F\u2189-\u218B\u2190-\u2335\u237B-\u2394\u2396-\u2426\u2440-\u244A\u2460-\u249B\u24EA-\u26AB\u26AD-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2CEF-\u2CF1\u2CF9-\u2CFF\u2D7F\u2DE0-\u2E5D\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3001-\u3004\u3008-\u3020\u302A-\u302D\u3030\u3036\u3037\u303D-\u303F\u3099-\u309C\u30A0\u30FB\u31C0-\u31E3\u31EF\u321D\u321E\u3250-\u325F\u327C-\u327E\u32B1-\u32BF\u32CC-\u32CF\u3377-\u337A\u33DE\u33DF\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA60D-\uA60F\uA66F-\uA67F\uA69E\uA69F\uA6F0\uA6F1\uA700-\uA721\uA788\uA802\uA806\uA80B\uA825\uA826\uA828-\uA82C\uA838\uA839\uA874-\uA877\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uAB6A\uAB6B\uABE5\uABE8\uABED\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD8F\uFD92-\uFDC7\uFDCF\uFDF0-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFE70-\uFE74\uFE76-\uFEFC\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10101}\u{10140}-\u{1018C}\u{10190}-\u{1019C}\u{101A0}\u{101FD}\u{102E0}-\u{102FB}\u{10376}-\u{1037A}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{1091F}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A38}-\u{10A3A}\u{10A3F}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE6}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B39}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D27}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAB}-\u{10EAD}\u{10EB0}\u{10EB1}\u{10EFD}-\u{10F27}\u{10F30}-\u{10F59}\u{10F70}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{11001}\u{11038}-\u{11046}\u{11052}-\u{11065}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{11660}-\u{1166C}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{11FD5}-\u{11FF1}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE2}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1BCA0}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D173}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D1E9}\u{1D1EA}\u{1D200}-\u{1D245}\u{1D300}-\u{1D356}\u{1D6DB}\u{1D715}\u{1D74F}\u{1D789}\u{1D7C3}\u{1D7CE}-\u{1D7FF}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E2FF}\u{1E4EC}-\u{1E4EF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8D6}\u{1E900}-\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F10F}\u{1F12F}\u{1F16A}-\u{1F16F}\u{1F1AD}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6DC}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F776}\u{1F77B}-\u{1F7D9}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}]*$/u;
      var bidiS3 = /[0-9\xB2\xB3\xB9\u05BE\u05C0\u05C3\u05C6\u05D0-\u05EA\u05EF-\u05F4\u0600-\u0605\u0608\u060B\u060D\u061B-\u064A\u0660-\u0669\u066B-\u066F\u0671-\u06D5\u06DD\u06E5\u06E6\u06EE-\u070D\u070F\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u07FE-\u0815\u081A\u0824\u0828\u0830-\u083E\u0840-\u0858\u085E\u0860-\u086A\u0870-\u088E\u0890\u0891\u08A0-\u08C9\u08E2\u200F\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBC2\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFC\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\u{102E1}-\u{102FB}\u{10800}-\u{10805}\u{10808}\u{1080A}-\u{10835}\u{10837}\u{10838}\u{1083C}\u{1083F}-\u{10855}\u{10857}-\u{1089E}\u{108A7}-\u{108AF}\u{108E0}-\u{108F2}\u{108F4}\u{108F5}\u{108FB}-\u{1091B}\u{10920}-\u{10939}\u{1093F}\u{10980}-\u{109B7}\u{109BC}-\u{109CF}\u{109D2}-\u{10A00}\u{10A10}-\u{10A13}\u{10A15}-\u{10A17}\u{10A19}-\u{10A35}\u{10A40}-\u{10A48}\u{10A50}-\u{10A58}\u{10A60}-\u{10A9F}\u{10AC0}-\u{10AE4}\u{10AEB}-\u{10AF6}\u{10B00}-\u{10B35}\u{10B40}-\u{10B55}\u{10B58}-\u{10B72}\u{10B78}-\u{10B91}\u{10B99}-\u{10B9C}\u{10BA9}-\u{10BAF}\u{10C00}-\u{10C48}\u{10C80}-\u{10CB2}\u{10CC0}-\u{10CF2}\u{10CFA}-\u{10D23}\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}\u{10E80}-\u{10EA9}\u{10EAD}\u{10EB0}\u{10EB1}\u{10F00}-\u{10F27}\u{10F30}-\u{10F45}\u{10F51}-\u{10F59}\u{10F70}-\u{10F81}\u{10F86}-\u{10F89}\u{10FB0}-\u{10FCB}\u{10FE0}-\u{10FF6}\u{1D7CE}-\u{1D7FF}\u{1E800}-\u{1E8C4}\u{1E8C7}-\u{1E8CF}\u{1E900}-\u{1E943}\u{1E94B}\u{1E950}-\u{1E959}\u{1E95E}\u{1E95F}\u{1EC71}-\u{1ECB4}\u{1ED01}-\u{1ED3D}\u{1EE00}-\u{1EE03}\u{1EE05}-\u{1EE1F}\u{1EE21}\u{1EE22}\u{1EE24}\u{1EE27}\u{1EE29}-\u{1EE32}\u{1EE34}-\u{1EE37}\u{1EE39}\u{1EE3B}\u{1EE42}\u{1EE47}\u{1EE49}\u{1EE4B}\u{1EE4D}-\u{1EE4F}\u{1EE51}\u{1EE52}\u{1EE54}\u{1EE57}\u{1EE59}\u{1EE5B}\u{1EE5D}\u{1EE5F}\u{1EE61}\u{1EE62}\u{1EE64}\u{1EE67}-\u{1EE6A}\u{1EE6C}-\u{1EE72}\u{1EE74}-\u{1EE77}\u{1EE79}-\u{1EE7C}\u{1EE7E}\u{1EE80}-\u{1EE89}\u{1EE8B}-\u{1EE9B}\u{1EEA1}-\u{1EEA3}\u{1EEA5}-\u{1EEA9}\u{1EEAB}-\u{1EEBB}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
      var bidiS4EN = /[0-9\xB2\xB3\xB9\u06F0-\u06F9\u2070\u2074-\u2079\u2080-\u2089\u2488-\u249B\uFF10-\uFF19\u{102E1}-\u{102FB}\u{1D7CE}-\u{1D7FF}\u{1F100}-\u{1F10A}\u{1FBF0}-\u{1FBF9}]/u;
      var bidiS4AN = /[\u0600-\u0605\u0660-\u0669\u066B\u066C\u06DD\u0890\u0891\u08E2\u{10D30}-\u{10D39}\u{10E60}-\u{10E7E}]/u;
      var bidiS5 = /^[\0-\x08\x0E-\x1B!-\x84\x86-\u0377\u037A-\u037F\u0384-\u038A\u038C\u038E-\u03A1\u03A3-\u052F\u0531-\u0556\u0559-\u058A\u058D-\u058F\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0606\u0607\u0609\u060A\u060C\u060E-\u061A\u064B-\u065F\u066A\u0670\u06D6-\u06DC\u06DE-\u06E4\u06E7-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F6-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FE\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A76\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA\u0C00-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3C-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C5D\u0C60-\u0C63\u0C66-\u0C6F\u0C77-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D00-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F\u0D81-\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E3A\u0E3F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECE\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FDA\u1000-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u13A0-\u13F5\u13F8-\u13FD\u1400-\u167F\u1681-\u169C\u16A0-\u16F8\u1700-\u1715\u171F-\u1736\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u1800-\u1819\u1820-\u1878\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE-\u1A1B\u1A1E-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1AB0-\u1ACE\u1B00-\u1B4C\u1B50-\u1B7E\u1B80-\u1BF3\u1BFC-\u1C37\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD0-\u1CFA\u1D00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u200B-\u200E\u2010-\u2027\u202F-\u205E\u2060-\u2064\u206A-\u2071\u2074-\u208E\u2090-\u209C\u20A0-\u20C0\u20D0-\u20F0\u2100-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u2B73\u2B76-\u2B95\u2B97-\u2CF3\u2CF9-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2E5D\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3001-\u303F\u3041-\u3096\u3099-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31E3\u31EF-\u321E\u3220-\uA48C\uA490-\uA4C6\uA4D0-\uA62B\uA640-\uA6F7\uA700-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA82C\uA830-\uA839\uA840-\uA877\uA880-\uA8C5\uA8CE-\uA8D9\uA8E0-\uA953\uA95F-\uA97C\uA980-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAAC2\uAADB-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB6B\uAB70-\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1E\uFB29\uFD3E-\uFD4F\uFDCF\uFDFD-\uFE19\uFE20-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}-\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1018E}\u{10190}-\u{1019C}\u{101A0}\u{101D0}-\u{101FD}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E0}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{1037A}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{1091F}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10B39}-\u{10B3F}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11000}-\u{1104D}\u{11052}-\u{11075}\u{1107F}-\u{110C2}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11100}-\u{11134}\u{11136}-\u{11147}\u{11150}-\u{11176}\u{11180}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{11241}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112EA}\u{112F0}-\u{112F9}\u{11300}-\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133B}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11400}-\u{1145B}\u{1145D}-\u{11461}\u{11480}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B5}\u{115B8}-\u{115DD}\u{11600}-\u{11644}\u{11650}-\u{11659}\u{11660}-\u{1166C}\u{11680}-\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{1171D}-\u{1172B}\u{11730}-\u{11746}\u{11800}-\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193B}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D7}\u{119DA}-\u{119E4}\u{11A00}-\u{11A47}\u{11A50}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C36}\u{11C38}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11C92}-\u{11CA7}\u{11CA9}-\u{11CB6}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D47}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D90}\u{11D91}\u{11D93}-\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF8}\u{11F00}-\u{11F10}\u{11F12}-\u{11F3A}\u{11F3E}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FF1}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{13455}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF0}-\u{16AF5}\u{16B00}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F4F}-\u{16F87}\u{16F8F}-\u{16F9F}\u{16FE0}-\u{16FE4}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}-\u{1BCA3}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D1EA}\u{1D200}-\u{1D245}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D300}-\u{1D356}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D7CB}\u{1D7CE}-\u{1DA8B}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E030}-\u{1E06D}\u{1E08F}\u{1E100}-\u{1E12C}\u{1E130}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AE}\u{1E2C0}-\u{1E2F9}\u{1E2FF}\u{1E4D0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{1EEF0}\u{1EEF1}\u{1F000}-\u{1F02B}\u{1F030}-\u{1F093}\u{1F0A0}-\u{1F0AE}\u{1F0B1}-\u{1F0BF}\u{1F0C1}-\u{1F0CF}\u{1F0D1}-\u{1F0F5}\u{1F100}-\u{1F1AD}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1F260}-\u{1F265}\u{1F300}-\u{1F6D7}\u{1F6DC}-\u{1F6EC}\u{1F6F0}-\u{1F6FC}\u{1F700}-\u{1F776}\u{1F77B}-\u{1F7D9}\u{1F7E0}-\u{1F7EB}\u{1F7F0}\u{1F800}-\u{1F80B}\u{1F810}-\u{1F847}\u{1F850}-\u{1F859}\u{1F860}-\u{1F887}\u{1F890}-\u{1F8AD}\u{1F8B0}\u{1F8B1}\u{1F900}-\u{1FA53}\u{1FA60}-\u{1FA6D}\u{1FA70}-\u{1FA7C}\u{1FA80}-\u{1FA88}\u{1FA90}-\u{1FABD}\u{1FABF}-\u{1FAC5}\u{1FACE}-\u{1FADB}\u{1FAE0}-\u{1FAE8}\u{1FAF0}-\u{1FAF8}\u{1FB00}-\u{1FB92}\u{1FB94}-\u{1FBCA}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2EBF0}-\u{2EE5D}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{E0001}\u{E0020}-\u{E007F}\u{E0100}-\u{E01EF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}]*$/u;
      var bidiS6 = /[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02BB-\u02C1\u02D0\u02D1\u02E0-\u02E4\u02EE\u0370-\u0373\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0482\u048A-\u052F\u0531-\u0556\u0559-\u0589\u06F0-\u06F9\u0903-\u0939\u093B\u093D-\u0940\u0949-\u094C\u094E-\u0950\u0958-\u0961\u0964-\u0980\u0982\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C0\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09FA\u09FC\u09FD\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A40\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A76\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC0\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0\u0AE1\u0AE6-\u0AF0\u0AF9\u0B02\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0BE6-\u0BF2\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C41-\u0C44\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C77\u0C7F\u0C80\u0C82-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1-\u0CF3\u0D02-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D4F\u0D54-\u0D61\u0D66-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E4F-\u0E5B\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00-\u0F17\u0F1A-\u0F34\u0F36\u0F38\u0F3E-\u0F47\u0F49-\u0F6C\u0F7F\u0F85\u0F88-\u0F8C\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE-\u0FDA\u1000-\u102C\u1031\u1038\u103B\u103C\u103F-\u1057\u105A-\u105D\u1061-\u1070\u1075-\u1081\u1083\u1084\u1087-\u108C\u108E-\u109C\u109E-\u10C5\u10C7\u10CD\u10D0-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1360-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u167F\u1681-\u169A\u16A0-\u16F8\u1700-\u1711\u1715\u171F-\u1731\u1734-\u1736\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17B6\u17BE-\u17C5\u17C7\u17C8\u17D4-\u17DA\u17DC\u17E0-\u17E9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A19\u1A1A\u1A1E-\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1A80-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD\u1B04-\u1B33\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B4C\u1B50-\u1B6A\u1B74-\u1B7E\u1B82-\u1BA1\u1BA6\u1BA7\u1BAA\u1BAE-\u1BE5\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1BFC-\u1C2B\u1C34\u1C35\u1C3B-\u1C49\u1C4D-\u1C88\u1C90-\u1CBA\u1CBD-\u1CC7\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200E\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u214F\u2160-\u2188\u2336-\u237A\u2395\u2488-\u24E9\u26AC\u2800-\u28FF\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D70\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u302E\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3190-\u31BF\u31F0-\u321C\u3220-\u324F\u3260-\u327B\u327F-\u32B0\u32C0-\u32CB\u32D0-\u3376\u337B-\u33DD\u33E0-\u33FE\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA60C\uA610-\uA62B\uA640-\uA66E\uA680-\uA69D\uA6A0-\uA6EF\uA6F2-\uA6F7\uA722-\uA787\uA789-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA824\uA827\uA830-\uA837\uA840-\uA873\uA880-\uA8C3\uA8CE-\uA8D9\uA8F2-\uA8FE\uA900-\uA925\uA92E-\uA946\uA952\uA953\uA95F-\uA97C\uA983-\uA9B2\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9CD\uA9CF-\uA9D9\uA9DE-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA2F\uAA30\uAA33\uAA34\uAA40-\uAA42\uAA44-\uAA4B\uAA4D\uAA50-\uAA59\uAA5C-\uAA7B\uAA7D-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAAEB\uAAEE-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB69\uAB70-\uABE4\uABE6\uABE7\uABE9-\uABEC\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uD800-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\u{10000}-\u{1000B}\u{1000D}-\u{10026}\u{10028}-\u{1003A}\u{1003C}\u{1003D}\u{1003F}-\u{1004D}\u{10050}-\u{1005D}\u{10080}-\u{100FA}\u{10100}\u{10102}\u{10107}-\u{10133}\u{10137}-\u{1013F}\u{1018D}\u{1018E}\u{101D0}-\u{101FC}\u{10280}-\u{1029C}\u{102A0}-\u{102D0}\u{102E1}-\u{102FB}\u{10300}-\u{10323}\u{1032D}-\u{1034A}\u{10350}-\u{10375}\u{10380}-\u{1039D}\u{1039F}-\u{103C3}\u{103C8}-\u{103D5}\u{10400}-\u{1049D}\u{104A0}-\u{104A9}\u{104B0}-\u{104D3}\u{104D8}-\u{104FB}\u{10500}-\u{10527}\u{10530}-\u{10563}\u{1056F}-\u{1057A}\u{1057C}-\u{1058A}\u{1058C}-\u{10592}\u{10594}\u{10595}\u{10597}-\u{105A1}\u{105A3}-\u{105B1}\u{105B3}-\u{105B9}\u{105BB}\u{105BC}\u{10600}-\u{10736}\u{10740}-\u{10755}\u{10760}-\u{10767}\u{10780}-\u{10785}\u{10787}-\u{107B0}\u{107B2}-\u{107BA}\u{11000}\u{11002}-\u{11037}\u{11047}-\u{1104D}\u{11066}-\u{1106F}\u{11071}\u{11072}\u{11075}\u{11082}-\u{110B2}\u{110B7}\u{110B8}\u{110BB}-\u{110C1}\u{110CD}\u{110D0}-\u{110E8}\u{110F0}-\u{110F9}\u{11103}-\u{11126}\u{1112C}\u{11136}-\u{11147}\u{11150}-\u{11172}\u{11174}-\u{11176}\u{11182}-\u{111B5}\u{111BF}-\u{111C8}\u{111CD}\u{111CE}\u{111D0}-\u{111DF}\u{111E1}-\u{111F4}\u{11200}-\u{11211}\u{11213}-\u{1122E}\u{11232}\u{11233}\u{11235}\u{11238}-\u{1123D}\u{1123F}\u{11240}\u{11280}-\u{11286}\u{11288}\u{1128A}-\u{1128D}\u{1128F}-\u{1129D}\u{1129F}-\u{112A9}\u{112B0}-\u{112DE}\u{112E0}-\u{112E2}\u{112F0}-\u{112F9}\u{11302}\u{11303}\u{11305}-\u{1130C}\u{1130F}\u{11310}\u{11313}-\u{11328}\u{1132A}-\u{11330}\u{11332}\u{11333}\u{11335}-\u{11339}\u{1133D}-\u{1133F}\u{11341}-\u{11344}\u{11347}\u{11348}\u{1134B}-\u{1134D}\u{11350}\u{11357}\u{1135D}-\u{11363}\u{11400}-\u{11437}\u{11440}\u{11441}\u{11445}\u{11447}-\u{1145B}\u{1145D}\u{1145F}-\u{11461}\u{11480}-\u{114B2}\u{114B9}\u{114BB}-\u{114BE}\u{114C1}\u{114C4}-\u{114C7}\u{114D0}-\u{114D9}\u{11580}-\u{115B1}\u{115B8}-\u{115BB}\u{115BE}\u{115C1}-\u{115DB}\u{11600}-\u{11632}\u{1163B}\u{1163C}\u{1163E}\u{11641}-\u{11644}\u{11650}-\u{11659}\u{11680}-\u{116AA}\u{116AC}\u{116AE}\u{116AF}\u{116B6}\u{116B8}\u{116B9}\u{116C0}-\u{116C9}\u{11700}-\u{1171A}\u{11720}\u{11721}\u{11726}\u{11730}-\u{11746}\u{11800}-\u{1182E}\u{11838}\u{1183B}\u{118A0}-\u{118F2}\u{118FF}-\u{11906}\u{11909}\u{1190C}-\u{11913}\u{11915}\u{11916}\u{11918}-\u{11935}\u{11937}\u{11938}\u{1193D}\u{1193F}-\u{11942}\u{11944}-\u{11946}\u{11950}-\u{11959}\u{119A0}-\u{119A7}\u{119AA}-\u{119D3}\u{119DC}-\u{119DF}\u{119E1}-\u{119E4}\u{11A00}\u{11A07}\u{11A08}\u{11A0B}-\u{11A32}\u{11A39}\u{11A3A}\u{11A3F}-\u{11A46}\u{11A50}\u{11A57}\u{11A58}\u{11A5C}-\u{11A89}\u{11A97}\u{11A9A}-\u{11AA2}\u{11AB0}-\u{11AF8}\u{11B00}-\u{11B09}\u{11C00}-\u{11C08}\u{11C0A}-\u{11C2F}\u{11C3E}-\u{11C45}\u{11C50}-\u{11C6C}\u{11C70}-\u{11C8F}\u{11CA9}\u{11CB1}\u{11CB4}\u{11D00}-\u{11D06}\u{11D08}\u{11D09}\u{11D0B}-\u{11D30}\u{11D46}\u{11D50}-\u{11D59}\u{11D60}-\u{11D65}\u{11D67}\u{11D68}\u{11D6A}-\u{11D8E}\u{11D93}\u{11D94}\u{11D96}\u{11D98}\u{11DA0}-\u{11DA9}\u{11EE0}-\u{11EF2}\u{11EF5}-\u{11EF8}\u{11F02}-\u{11F10}\u{11F12}-\u{11F35}\u{11F3E}\u{11F3F}\u{11F41}\u{11F43}-\u{11F59}\u{11FB0}\u{11FC0}-\u{11FD4}\u{11FFF}-\u{12399}\u{12400}-\u{1246E}\u{12470}-\u{12474}\u{12480}-\u{12543}\u{12F90}-\u{12FF2}\u{13000}-\u{1343F}\u{13441}-\u{13446}\u{14400}-\u{14646}\u{16800}-\u{16A38}\u{16A40}-\u{16A5E}\u{16A60}-\u{16A69}\u{16A6E}-\u{16ABE}\u{16AC0}-\u{16AC9}\u{16AD0}-\u{16AED}\u{16AF5}\u{16B00}-\u{16B2F}\u{16B37}-\u{16B45}\u{16B50}-\u{16B59}\u{16B5B}-\u{16B61}\u{16B63}-\u{16B77}\u{16B7D}-\u{16B8F}\u{16E40}-\u{16E9A}\u{16F00}-\u{16F4A}\u{16F50}-\u{16F87}\u{16F93}-\u{16F9F}\u{16FE0}\u{16FE1}\u{16FE3}\u{16FF0}\u{16FF1}\u{17000}-\u{187F7}\u{18800}-\u{18CD5}\u{18D00}-\u{18D08}\u{1AFF0}-\u{1AFF3}\u{1AFF5}-\u{1AFFB}\u{1AFFD}\u{1AFFE}\u{1B000}-\u{1B122}\u{1B132}\u{1B150}-\u{1B152}\u{1B155}\u{1B164}-\u{1B167}\u{1B170}-\u{1B2FB}\u{1BC00}-\u{1BC6A}\u{1BC70}-\u{1BC7C}\u{1BC80}-\u{1BC88}\u{1BC90}-\u{1BC99}\u{1BC9C}\u{1BC9F}\u{1CF50}-\u{1CFC3}\u{1D000}-\u{1D0F5}\u{1D100}-\u{1D126}\u{1D129}-\u{1D166}\u{1D16A}-\u{1D172}\u{1D183}\u{1D184}\u{1D18C}-\u{1D1A9}\u{1D1AE}-\u{1D1E8}\u{1D2C0}-\u{1D2D3}\u{1D2E0}-\u{1D2F3}\u{1D360}-\u{1D378}\u{1D400}-\u{1D454}\u{1D456}-\u{1D49C}\u{1D49E}\u{1D49F}\u{1D4A2}\u{1D4A5}\u{1D4A6}\u{1D4A9}-\u{1D4AC}\u{1D4AE}-\u{1D4B9}\u{1D4BB}\u{1D4BD}-\u{1D4C3}\u{1D4C5}-\u{1D505}\u{1D507}-\u{1D50A}\u{1D50D}-\u{1D514}\u{1D516}-\u{1D51C}\u{1D51E}-\u{1D539}\u{1D53B}-\u{1D53E}\u{1D540}-\u{1D544}\u{1D546}\u{1D54A}-\u{1D550}\u{1D552}-\u{1D6A5}\u{1D6A8}-\u{1D6DA}\u{1D6DC}-\u{1D714}\u{1D716}-\u{1D74E}\u{1D750}-\u{1D788}\u{1D78A}-\u{1D7C2}\u{1D7C4}-\u{1D7CB}\u{1D7CE}-\u{1D9FF}\u{1DA37}-\u{1DA3A}\u{1DA6D}-\u{1DA74}\u{1DA76}-\u{1DA83}\u{1DA85}-\u{1DA8B}\u{1DF00}-\u{1DF1E}\u{1DF25}-\u{1DF2A}\u{1E030}-\u{1E06D}\u{1E100}-\u{1E12C}\u{1E137}-\u{1E13D}\u{1E140}-\u{1E149}\u{1E14E}\u{1E14F}\u{1E290}-\u{1E2AD}\u{1E2C0}-\u{1E2EB}\u{1E2F0}-\u{1E2F9}\u{1E4D0}-\u{1E4EB}\u{1E4F0}-\u{1E4F9}\u{1E7E0}-\u{1E7E6}\u{1E7E8}-\u{1E7EB}\u{1E7ED}\u{1E7EE}\u{1E7F0}-\u{1E7FE}\u{1F100}-\u{1F10A}\u{1F110}-\u{1F12E}\u{1F130}-\u{1F169}\u{1F170}-\u{1F1AC}\u{1F1E6}-\u{1F202}\u{1F210}-\u{1F23B}\u{1F240}-\u{1F248}\u{1F250}\u{1F251}\u{1FBF0}-\u{1FBF9}\u{20000}-\u{2A6DF}\u{2A700}-\u{2B739}\u{2B740}-\u{2B81D}\u{2B820}-\u{2CEA1}\u{2CEB0}-\u{2EBE0}\u{2EBF0}-\u{2EE5D}\u{2F800}-\u{2FA1D}\u{30000}-\u{3134A}\u{31350}-\u{323AF}\u{F0000}-\u{FFFFD}\u{100000}-\u{10FFFD}][\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3C\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732\u1733\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u180F\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ACE\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\u{101FD}\u{102E0}\u{10376}-\u{1037A}\u{10A01}-\u{10A03}\u{10A05}\u{10A06}\u{10A0C}-\u{10A0F}\u{10A38}-\u{10A3A}\u{10A3F}\u{10AE5}\u{10AE6}\u{10D24}-\u{10D27}\u{10EAB}\u{10EAC}\u{10EFD}-\u{10EFF}\u{10F46}-\u{10F50}\u{10F82}-\u{10F85}\u{11001}\u{11038}-\u{11046}\u{11070}\u{11073}\u{11074}\u{1107F}-\u{11081}\u{110B3}-\u{110B6}\u{110B9}\u{110BA}\u{110C2}\u{11100}-\u{11102}\u{11127}-\u{1112B}\u{1112D}-\u{11134}\u{11173}\u{11180}\u{11181}\u{111B6}-\u{111BE}\u{111C9}-\u{111CC}\u{111CF}\u{1122F}-\u{11231}\u{11234}\u{11236}\u{11237}\u{1123E}\u{11241}\u{112DF}\u{112E3}-\u{112EA}\u{11300}\u{11301}\u{1133B}\u{1133C}\u{11340}\u{11366}-\u{1136C}\u{11370}-\u{11374}\u{11438}-\u{1143F}\u{11442}-\u{11444}\u{11446}\u{1145E}\u{114B3}-\u{114B8}\u{114BA}\u{114BF}\u{114C0}\u{114C2}\u{114C3}\u{115B2}-\u{115B5}\u{115BC}\u{115BD}\u{115BF}\u{115C0}\u{115DC}\u{115DD}\u{11633}-\u{1163A}\u{1163D}\u{1163F}\u{11640}\u{116AB}\u{116AD}\u{116B0}-\u{116B5}\u{116B7}\u{1171D}-\u{1171F}\u{11722}-\u{11725}\u{11727}-\u{1172B}\u{1182F}-\u{11837}\u{11839}\u{1183A}\u{1193B}\u{1193C}\u{1193E}\u{11943}\u{119D4}-\u{119D7}\u{119DA}\u{119DB}\u{119E0}\u{11A01}-\u{11A06}\u{11A09}\u{11A0A}\u{11A33}-\u{11A38}\u{11A3B}-\u{11A3E}\u{11A47}\u{11A51}-\u{11A56}\u{11A59}-\u{11A5B}\u{11A8A}-\u{11A96}\u{11A98}\u{11A99}\u{11C30}-\u{11C36}\u{11C38}-\u{11C3D}\u{11C92}-\u{11CA7}\u{11CAA}-\u{11CB0}\u{11CB2}\u{11CB3}\u{11CB5}\u{11CB6}\u{11D31}-\u{11D36}\u{11D3A}\u{11D3C}\u{11D3D}\u{11D3F}-\u{11D45}\u{11D47}\u{11D90}\u{11D91}\u{11D95}\u{11D97}\u{11EF3}\u{11EF4}\u{11F00}\u{11F01}\u{11F36}-\u{11F3A}\u{11F40}\u{11F42}\u{13440}\u{13447}-\u{13455}\u{16AF0}-\u{16AF4}\u{16B30}-\u{16B36}\u{16F4F}\u{16F8F}-\u{16F92}\u{16FE4}\u{1BC9D}\u{1BC9E}\u{1CF00}-\u{1CF2D}\u{1CF30}-\u{1CF46}\u{1D167}-\u{1D169}\u{1D17B}-\u{1D182}\u{1D185}-\u{1D18B}\u{1D1AA}-\u{1D1AD}\u{1D242}-\u{1D244}\u{1DA00}-\u{1DA36}\u{1DA3B}-\u{1DA6C}\u{1DA75}\u{1DA84}\u{1DA9B}-\u{1DA9F}\u{1DAA1}-\u{1DAAF}\u{1E000}-\u{1E006}\u{1E008}-\u{1E018}\u{1E01B}-\u{1E021}\u{1E023}\u{1E024}\u{1E026}-\u{1E02A}\u{1E08F}\u{1E130}-\u{1E136}\u{1E2AE}\u{1E2EC}-\u{1E2EF}\u{1E4EC}-\u{1E4EF}\u{1E8D0}-\u{1E8D6}\u{1E944}-\u{1E94A}\u{E0100}-\u{E01EF}]*$/u;
      module.exports = {
        combiningMarks,
        combiningClassVirama,
        validZWNJ,
        bidiDomain,
        bidiS1LTR,
        bidiS1RTL,
        bidiS2,
        bidiS3,
        bidiS4EN,
        bidiS4AN,
        bidiS5,
        bidiS6
      };
    }
  });

  // ../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/mappingTable.json
  var require_mappingTable = __commonJS({
    "../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/mappingTable.json"(exports, module) {
      module.exports = [[[0, 44], 4], [[45, 46], 2], [47, 4], [[48, 57], 2], [[58, 64], 4], [65, 1, "a"], [66, 1, "b"], [67, 1, "c"], [68, 1, "d"], [69, 1, "e"], [70, 1, "f"], [71, 1, "g"], [72, 1, "h"], [73, 1, "i"], [74, 1, "j"], [75, 1, "k"], [76, 1, "l"], [77, 1, "m"], [78, 1, "n"], [79, 1, "o"], [80, 1, "p"], [81, 1, "q"], [82, 1, "r"], [83, 1, "s"], [84, 1, "t"], [85, 1, "u"], [86, 1, "v"], [87, 1, "w"], [88, 1, "x"], [89, 1, "y"], [90, 1, "z"], [[91, 96], 4], [[97, 122], 2], [[123, 127], 4], [[128, 159], 3], [160, 5, " "], [[161, 167], 2], [168, 5, " \u0308"], [169, 2], [170, 1, "a"], [[171, 172], 2], [173, 7], [174, 2], [175, 5, " \u0304"], [[176, 177], 2], [178, 1, "2"], [179, 1, "3"], [180, 5, " \u0301"], [181, 1, "\u03BC"], [182, 2], [183, 2], [184, 5, " \u0327"], [185, 1, "1"], [186, 1, "o"], [187, 2], [188, 1, "1\u20444"], [189, 1, "1\u20442"], [190, 1, "3\u20444"], [191, 2], [192, 1, "\xE0"], [193, 1, "\xE1"], [194, 1, "\xE2"], [195, 1, "\xE3"], [196, 1, "\xE4"], [197, 1, "\xE5"], [198, 1, "\xE6"], [199, 1, "\xE7"], [200, 1, "\xE8"], [201, 1, "\xE9"], [202, 1, "\xEA"], [203, 1, "\xEB"], [204, 1, "\xEC"], [205, 1, "\xED"], [206, 1, "\xEE"], [207, 1, "\xEF"], [208, 1, "\xF0"], [209, 1, "\xF1"], [210, 1, "\xF2"], [211, 1, "\xF3"], [212, 1, "\xF4"], [213, 1, "\xF5"], [214, 1, "\xF6"], [215, 2], [216, 1, "\xF8"], [217, 1, "\xF9"], [218, 1, "\xFA"], [219, 1, "\xFB"], [220, 1, "\xFC"], [221, 1, "\xFD"], [222, 1, "\xFE"], [223, 6, "ss"], [[224, 246], 2], [247, 2], [[248, 255], 2], [256, 1, "\u0101"], [257, 2], [258, 1, "\u0103"], [259, 2], [260, 1, "\u0105"], [261, 2], [262, 1, "\u0107"], [263, 2], [264, 1, "\u0109"], [265, 2], [266, 1, "\u010B"], [267, 2], [268, 1, "\u010D"], [269, 2], [270, 1, "\u010F"], [271, 2], [272, 1, "\u0111"], [273, 2], [274, 1, "\u0113"], [275, 2], [276, 1, "\u0115"], [277, 2], [278, 1, "\u0117"], [279, 2], [280, 1, "\u0119"], [281, 2], [282, 1, "\u011B"], [283, 2], [284, 1, "\u011D"], [285, 2], [286, 1, "\u011F"], [287, 2], [288, 1, "\u0121"], [289, 2], [290, 1, "\u0123"], [291, 2], [292, 1, "\u0125"], [293, 2], [294, 1, "\u0127"], [295, 2], [296, 1, "\u0129"], [297, 2], [298, 1, "\u012B"], [299, 2], [300, 1, "\u012D"], [301, 2], [302, 1, "\u012F"], [303, 2], [304, 1, "i\u0307"], [305, 2], [[306, 307], 1, "ij"], [308, 1, "\u0135"], [309, 2], [310, 1, "\u0137"], [[311, 312], 2], [313, 1, "\u013A"], [314, 2], [315, 1, "\u013C"], [316, 2], [317, 1, "\u013E"], [318, 2], [[319, 320], 1, "l\xB7"], [321, 1, "\u0142"], [322, 2], [323, 1, "\u0144"], [324, 2], [325, 1, "\u0146"], [326, 2], [327, 1, "\u0148"], [328, 2], [329, 1, "\u02BCn"], [330, 1, "\u014B"], [331, 2], [332, 1, "\u014D"], [333, 2], [334, 1, "\u014F"], [335, 2], [336, 1, "\u0151"], [337, 2], [338, 1, "\u0153"], [339, 2], [340, 1, "\u0155"], [341, 2], [342, 1, "\u0157"], [343, 2], [344, 1, "\u0159"], [345, 2], [346, 1, "\u015B"], [347, 2], [348, 1, "\u015D"], [349, 2], [350, 1, "\u015F"], [351, 2], [352, 1, "\u0161"], [353, 2], [354, 1, "\u0163"], [355, 2], [356, 1, "\u0165"], [357, 2], [358, 1, "\u0167"], [359, 2], [360, 1, "\u0169"], [361, 2], [362, 1, "\u016B"], [363, 2], [364, 1, "\u016D"], [365, 2], [366, 1, "\u016F"], [367, 2], [368, 1, "\u0171"], [369, 2], [370, 1, "\u0173"], [371, 2], [372, 1, "\u0175"], [373, 2], [374, 1, "\u0177"], [375, 2], [376, 1, "\xFF"], [377, 1, "\u017A"], [378, 2], [379, 1, "\u017C"], [380, 2], [381, 1, "\u017E"], [382, 2], [383, 1, "s"], [384, 2], [385, 1, "\u0253"], [386, 1, "\u0183"], [387, 2], [388, 1, "\u0185"], [389, 2], [390, 1, "\u0254"], [391, 1, "\u0188"], [392, 2], [393, 1, "\u0256"], [394, 1, "\u0257"], [395, 1, "\u018C"], [[396, 397], 2], [398, 1, "\u01DD"], [399, 1, "\u0259"], [400, 1, "\u025B"], [401, 1, "\u0192"], [402, 2], [403, 1, "\u0260"], [404, 1, "\u0263"], [405, 2], [406, 1, "\u0269"], [407, 1, "\u0268"], [408, 1, "\u0199"], [[409, 411], 2], [412, 1, "\u026F"], [413, 1, "\u0272"], [414, 2], [415, 1, "\u0275"], [416, 1, "\u01A1"], [417, 2], [418, 1, "\u01A3"], [419, 2], [420, 1, "\u01A5"], [421, 2], [422, 1, "\u0280"], [423, 1, "\u01A8"], [424, 2], [425, 1, "\u0283"], [[426, 427], 2], [428, 1, "\u01AD"], [429, 2], [430, 1, "\u0288"], [431, 1, "\u01B0"], [432, 2], [433, 1, "\u028A"], [434, 1, "\u028B"], [435, 1, "\u01B4"], [436, 2], [437, 1, "\u01B6"], [438, 2], [439, 1, "\u0292"], [440, 1, "\u01B9"], [[441, 443], 2], [444, 1, "\u01BD"], [[445, 451], 2], [[452, 454], 1, "d\u017E"], [[455, 457], 1, "lj"], [[458, 460], 1, "nj"], [461, 1, "\u01CE"], [462, 2], [463, 1, "\u01D0"], [464, 2], [465, 1, "\u01D2"], [466, 2], [467, 1, "\u01D4"], [468, 2], [469, 1, "\u01D6"], [470, 2], [471, 1, "\u01D8"], [472, 2], [473, 1, "\u01DA"], [474, 2], [475, 1, "\u01DC"], [[476, 477], 2], [478, 1, "\u01DF"], [479, 2], [480, 1, "\u01E1"], [481, 2], [482, 1, "\u01E3"], [483, 2], [484, 1, "\u01E5"], [485, 2], [486, 1, "\u01E7"], [487, 2], [488, 1, "\u01E9"], [489, 2], [490, 1, "\u01EB"], [491, 2], [492, 1, "\u01ED"], [493, 2], [494, 1, "\u01EF"], [[495, 496], 2], [[497, 499], 1, "dz"], [500, 1, "\u01F5"], [501, 2], [502, 1, "\u0195"], [503, 1, "\u01BF"], [504, 1, "\u01F9"], [505, 2], [506, 1, "\u01FB"], [507, 2], [508, 1, "\u01FD"], [509, 2], [510, 1, "\u01FF"], [511, 2], [512, 1, "\u0201"], [513, 2], [514, 1, "\u0203"], [515, 2], [516, 1, "\u0205"], [517, 2], [518, 1, "\u0207"], [519, 2], [520, 1, "\u0209"], [521, 2], [522, 1, "\u020B"], [523, 2], [524, 1, "\u020D"], [525, 2], [526, 1, "\u020F"], [527, 2], [528, 1, "\u0211"], [529, 2], [530, 1, "\u0213"], [531, 2], [532, 1, "\u0215"], [533, 2], [534, 1, "\u0217"], [535, 2], [536, 1, "\u0219"], [537, 2], [538, 1, "\u021B"], [539, 2], [540, 1, "\u021D"], [541, 2], [542, 1, "\u021F"], [543, 2], [544, 1, "\u019E"], [545, 2], [546, 1, "\u0223"], [547, 2], [548, 1, "\u0225"], [549, 2], [550, 1, "\u0227"], [551, 2], [552, 1, "\u0229"], [553, 2], [554, 1, "\u022B"], [555, 2], [556, 1, "\u022D"], [557, 2], [558, 1, "\u022F"], [559, 2], [560, 1, "\u0231"], [561, 2], [562, 1, "\u0233"], [563, 2], [[564, 566], 2], [[567, 569], 2], [570, 1, "\u2C65"], [571, 1, "\u023C"], [572, 2], [573, 1, "\u019A"], [574, 1, "\u2C66"], [[575, 576], 2], [577, 1, "\u0242"], [578, 2], [579, 1, "\u0180"], [580, 1, "\u0289"], [581, 1, "\u028C"], [582, 1, "\u0247"], [583, 2], [584, 1, "\u0249"], [585, 2], [586, 1, "\u024B"], [587, 2], [588, 1, "\u024D"], [589, 2], [590, 1, "\u024F"], [591, 2], [[592, 680], 2], [[681, 685], 2], [[686, 687], 2], [688, 1, "h"], [689, 1, "\u0266"], [690, 1, "j"], [691, 1, "r"], [692, 1, "\u0279"], [693, 1, "\u027B"], [694, 1, "\u0281"], [695, 1, "w"], [696, 1, "y"], [[697, 705], 2], [[706, 709], 2], [[710, 721], 2], [[722, 727], 2], [728, 5, " \u0306"], [729, 5, " \u0307"], [730, 5, " \u030A"], [731, 5, " \u0328"], [732, 5, " \u0303"], [733, 5, " \u030B"], [734, 2], [735, 2], [736, 1, "\u0263"], [737, 1, "l"], [738, 1, "s"], [739, 1, "x"], [740, 1, "\u0295"], [[741, 745], 2], [[746, 747], 2], [748, 2], [749, 2], [750, 2], [[751, 767], 2], [[768, 831], 2], [832, 1, "\u0300"], [833, 1, "\u0301"], [834, 2], [835, 1, "\u0313"], [836, 1, "\u0308\u0301"], [837, 1, "\u03B9"], [[838, 846], 2], [847, 7], [[848, 855], 2], [[856, 860], 2], [[861, 863], 2], [[864, 865], 2], [866, 2], [[867, 879], 2], [880, 1, "\u0371"], [881, 2], [882, 1, "\u0373"], [883, 2], [884, 1, "\u02B9"], [885, 2], [886, 1, "\u0377"], [887, 2], [[888, 889], 3], [890, 5, " \u03B9"], [[891, 893], 2], [894, 5, ";"], [895, 1, "\u03F3"], [[896, 899], 3], [900, 5, " \u0301"], [901, 5, " \u0308\u0301"], [902, 1, "\u03AC"], [903, 1, "\xB7"], [904, 1, "\u03AD"], [905, 1, "\u03AE"], [906, 1, "\u03AF"], [907, 3], [908, 1, "\u03CC"], [909, 3], [910, 1, "\u03CD"], [911, 1, "\u03CE"], [912, 2], [913, 1, "\u03B1"], [914, 1, "\u03B2"], [915, 1, "\u03B3"], [916, 1, "\u03B4"], [917, 1, "\u03B5"], [918, 1, "\u03B6"], [919, 1, "\u03B7"], [920, 1, "\u03B8"], [921, 1, "\u03B9"], [922, 1, "\u03BA"], [923, 1, "\u03BB"], [924, 1, "\u03BC"], [925, 1, "\u03BD"], [926, 1, "\u03BE"], [927, 1, "\u03BF"], [928, 1, "\u03C0"], [929, 1, "\u03C1"], [930, 3], [931, 1, "\u03C3"], [932, 1, "\u03C4"], [933, 1, "\u03C5"], [934, 1, "\u03C6"], [935, 1, "\u03C7"], [936, 1, "\u03C8"], [937, 1, "\u03C9"], [938, 1, "\u03CA"], [939, 1, "\u03CB"], [[940, 961], 2], [962, 6, "\u03C3"], [[963, 974], 2], [975, 1, "\u03D7"], [976, 1, "\u03B2"], [977, 1, "\u03B8"], [978, 1, "\u03C5"], [979, 1, "\u03CD"], [980, 1, "\u03CB"], [981, 1, "\u03C6"], [982, 1, "\u03C0"], [983, 2], [984, 1, "\u03D9"], [985, 2], [986, 1, "\u03DB"], [987, 2], [988, 1, "\u03DD"], [989, 2], [990, 1, "\u03DF"], [991, 2], [992, 1, "\u03E1"], [993, 2], [994, 1, "\u03E3"], [995, 2], [996, 1, "\u03E5"], [997, 2], [998, 1, "\u03E7"], [999, 2], [1e3, 1, "\u03E9"], [1001, 2], [1002, 1, "\u03EB"], [1003, 2], [1004, 1, "\u03ED"], [1005, 2], [1006, 1, "\u03EF"], [1007, 2], [1008, 1, "\u03BA"], [1009, 1, "\u03C1"], [1010, 1, "\u03C3"], [1011, 2], [1012, 1, "\u03B8"], [1013, 1, "\u03B5"], [1014, 2], [1015, 1, "\u03F8"], [1016, 2], [1017, 1, "\u03C3"], [1018, 1, "\u03FB"], [1019, 2], [1020, 2], [1021, 1, "\u037B"], [1022, 1, "\u037C"], [1023, 1, "\u037D"], [1024, 1, "\u0450"], [1025, 1, "\u0451"], [1026, 1, "\u0452"], [1027, 1, "\u0453"], [1028, 1, "\u0454"], [1029, 1, "\u0455"], [1030, 1, "\u0456"], [1031, 1, "\u0457"], [1032, 1, "\u0458"], [1033, 1, "\u0459"], [1034, 1, "\u045A"], [1035, 1, "\u045B"], [1036, 1, "\u045C"], [1037, 1, "\u045D"], [1038, 1, "\u045E"], [1039, 1, "\u045F"], [1040, 1, "\u0430"], [1041, 1, "\u0431"], [1042, 1, "\u0432"], [1043, 1, "\u0433"], [1044, 1, "\u0434"], [1045, 1, "\u0435"], [1046, 1, "\u0436"], [1047, 1, "\u0437"], [1048, 1, "\u0438"], [1049, 1, "\u0439"], [1050, 1, "\u043A"], [1051, 1, "\u043B"], [1052, 1, "\u043C"], [1053, 1, "\u043D"], [1054, 1, "\u043E"], [1055, 1, "\u043F"], [1056, 1, "\u0440"], [1057, 1, "\u0441"], [1058, 1, "\u0442"], [1059, 1, "\u0443"], [1060, 1, "\u0444"], [1061, 1, "\u0445"], [1062, 1, "\u0446"], [1063, 1, "\u0447"], [1064, 1, "\u0448"], [1065, 1, "\u0449"], [1066, 1, "\u044A"], [1067, 1, "\u044B"], [1068, 1, "\u044C"], [1069, 1, "\u044D"], [1070, 1, "\u044E"], [1071, 1, "\u044F"], [[1072, 1103], 2], [1104, 2], [[1105, 1116], 2], [1117, 2], [[1118, 1119], 2], [1120, 1, "\u0461"], [1121, 2], [1122, 1, "\u0463"], [1123, 2], [1124, 1, "\u0465"], [1125, 2], [1126, 1, "\u0467"], [1127, 2], [1128, 1, "\u0469"], [1129, 2], [1130, 1, "\u046B"], [1131, 2], [1132, 1, "\u046D"], [1133, 2], [1134, 1, "\u046F"], [1135, 2], [1136, 1, "\u0471"], [1137, 2], [1138, 1, "\u0473"], [1139, 2], [1140, 1, "\u0475"], [1141, 2], [1142, 1, "\u0477"], [1143, 2], [1144, 1, "\u0479"], [1145, 2], [1146, 1, "\u047B"], [1147, 2], [1148, 1, "\u047D"], [1149, 2], [1150, 1, "\u047F"], [1151, 2], [1152, 1, "\u0481"], [1153, 2], [1154, 2], [[1155, 1158], 2], [1159, 2], [[1160, 1161], 2], [1162, 1, "\u048B"], [1163, 2], [1164, 1, "\u048D"], [1165, 2], [1166, 1, "\u048F"], [1167, 2], [1168, 1, "\u0491"], [1169, 2], [1170, 1, "\u0493"], [1171, 2], [1172, 1, "\u0495"], [1173, 2], [1174, 1, "\u0497"], [1175, 2], [1176, 1, "\u0499"], [1177, 2], [1178, 1, "\u049B"], [1179, 2], [1180, 1, "\u049D"], [1181, 2], [1182, 1, "\u049F"], [1183, 2], [1184, 1, "\u04A1"], [1185, 2], [1186, 1, "\u04A3"], [1187, 2], [1188, 1, "\u04A5"], [1189, 2], [1190, 1, "\u04A7"], [1191, 2], [1192, 1, "\u04A9"], [1193, 2], [1194, 1, "\u04AB"], [1195, 2], [1196, 1, "\u04AD"], [1197, 2], [1198, 1, "\u04AF"], [1199, 2], [1200, 1, "\u04B1"], [1201, 2], [1202, 1, "\u04B3"], [1203, 2], [1204, 1, "\u04B5"], [1205, 2], [1206, 1, "\u04B7"], [1207, 2], [1208, 1, "\u04B9"], [1209, 2], [1210, 1, "\u04BB"], [1211, 2], [1212, 1, "\u04BD"], [1213, 2], [1214, 1, "\u04BF"], [1215, 2], [1216, 3], [1217, 1, "\u04C2"], [1218, 2], [1219, 1, "\u04C4"], [1220, 2], [1221, 1, "\u04C6"], [1222, 2], [1223, 1, "\u04C8"], [1224, 2], [1225, 1, "\u04CA"], [1226, 2], [1227, 1, "\u04CC"], [1228, 2], [1229, 1, "\u04CE"], [1230, 2], [1231, 2], [1232, 1, "\u04D1"], [1233, 2], [1234, 1, "\u04D3"], [1235, 2], [1236, 1, "\u04D5"], [1237, 2], [1238, 1, "\u04D7"], [1239, 2], [1240, 1, "\u04D9"], [1241, 2], [1242, 1, "\u04DB"], [1243, 2], [1244, 1, "\u04DD"], [1245, 2], [1246, 1, "\u04DF"], [1247, 2], [1248, 1, "\u04E1"], [1249, 2], [1250, 1, "\u04E3"], [1251, 2], [1252, 1, "\u04E5"], [1253, 2], [1254, 1, "\u04E7"], [1255, 2], [1256, 1, "\u04E9"], [1257, 2], [1258, 1, "\u04EB"], [1259, 2], [1260, 1, "\u04ED"], [1261, 2], [1262, 1, "\u04EF"], [1263, 2], [1264, 1, "\u04F1"], [1265, 2], [1266, 1, "\u04F3"], [1267, 2], [1268, 1, "\u04F5"], [1269, 2], [1270, 1, "\u04F7"], [1271, 2], [1272, 1, "\u04F9"], [1273, 2], [1274, 1, "\u04FB"], [1275, 2], [1276, 1, "\u04FD"], [1277, 2], [1278, 1, "\u04FF"], [1279, 2], [1280, 1, "\u0501"], [1281, 2], [1282, 1, "\u0503"], [1283, 2], [1284, 1, "\u0505"], [1285, 2], [1286, 1, "\u0507"], [1287, 2], [1288, 1, "\u0509"], [1289, 2], [1290, 1, "\u050B"], [1291, 2], [1292, 1, "\u050D"], [1293, 2], [1294, 1, "\u050F"], [1295, 2], [1296, 1, "\u0511"], [1297, 2], [1298, 1, "\u0513"], [1299, 2], [1300, 1, "\u0515"], [1301, 2], [1302, 1, "\u0517"], [1303, 2], [1304, 1, "\u0519"], [1305, 2], [1306, 1, "\u051B"], [1307, 2], [1308, 1, "\u051D"], [1309, 2], [1310, 1, "\u051F"], [1311, 2], [1312, 1, "\u0521"], [1313, 2], [1314, 1, "\u0523"], [1315, 2], [1316, 1, "\u0525"], [1317, 2], [1318, 1, "\u0527"], [1319, 2], [1320, 1, "\u0529"], [1321, 2], [1322, 1, "\u052B"], [1323, 2], [1324, 1, "\u052D"], [1325, 2], [1326, 1, "\u052F"], [1327, 2], [1328, 3], [1329, 1, "\u0561"], [1330, 1, "\u0562"], [1331, 1, "\u0563"], [1332, 1, "\u0564"], [1333, 1, "\u0565"], [1334, 1, "\u0566"], [1335, 1, "\u0567"], [1336, 1, "\u0568"], [1337, 1, "\u0569"], [1338, 1, "\u056A"], [1339, 1, "\u056B"], [1340, 1, "\u056C"], [1341, 1, "\u056D"], [1342, 1, "\u056E"], [1343, 1, "\u056F"], [1344, 1, "\u0570"], [1345, 1, "\u0571"], [1346, 1, "\u0572"], [1347, 1, "\u0573"], [1348, 1, "\u0574"], [1349, 1, "\u0575"], [1350, 1, "\u0576"], [1351, 1, "\u0577"], [1352, 1, "\u0578"], [1353, 1, "\u0579"], [1354, 1, "\u057A"], [1355, 1, "\u057B"], [1356, 1, "\u057C"], [1357, 1, "\u057D"], [1358, 1, "\u057E"], [1359, 1, "\u057F"], [1360, 1, "\u0580"], [1361, 1, "\u0581"], [1362, 1, "\u0582"], [1363, 1, "\u0583"], [1364, 1, "\u0584"], [1365, 1, "\u0585"], [1366, 1, "\u0586"], [[1367, 1368], 3], [1369, 2], [[1370, 1375], 2], [1376, 2], [[1377, 1414], 2], [1415, 1, "\u0565\u0582"], [1416, 2], [1417, 2], [1418, 2], [[1419, 1420], 3], [[1421, 1422], 2], [1423, 2], [1424, 3], [[1425, 1441], 2], [1442, 2], [[1443, 1455], 2], [[1456, 1465], 2], [1466, 2], [[1467, 1469], 2], [1470, 2], [1471, 2], [1472, 2], [[1473, 1474], 2], [1475, 2], [1476, 2], [1477, 2], [1478, 2], [1479, 2], [[1480, 1487], 3], [[1488, 1514], 2], [[1515, 1518], 3], [1519, 2], [[1520, 1524], 2], [[1525, 1535], 3], [[1536, 1539], 3], [1540, 3], [1541, 3], [[1542, 1546], 2], [1547, 2], [1548, 2], [[1549, 1551], 2], [[1552, 1557], 2], [[1558, 1562], 2], [1563, 2], [1564, 3], [1565, 2], [1566, 2], [1567, 2], [1568, 2], [[1569, 1594], 2], [[1595, 1599], 2], [1600, 2], [[1601, 1618], 2], [[1619, 1621], 2], [[1622, 1624], 2], [[1625, 1630], 2], [1631, 2], [[1632, 1641], 2], [[1642, 1645], 2], [[1646, 1647], 2], [[1648, 1652], 2], [1653, 1, "\u0627\u0674"], [1654, 1, "\u0648\u0674"], [1655, 1, "\u06C7\u0674"], [1656, 1, "\u064A\u0674"], [[1657, 1719], 2], [[1720, 1721], 2], [[1722, 1726], 2], [1727, 2], [[1728, 1742], 2], [1743, 2], [[1744, 1747], 2], [1748, 2], [[1749, 1756], 2], [1757, 3], [1758, 2], [[1759, 1768], 2], [1769, 2], [[1770, 1773], 2], [[1774, 1775], 2], [[1776, 1785], 2], [[1786, 1790], 2], [1791, 2], [[1792, 1805], 2], [1806, 3], [1807, 3], [[1808, 1836], 2], [[1837, 1839], 2], [[1840, 1866], 2], [[1867, 1868], 3], [[1869, 1871], 2], [[1872, 1901], 2], [[1902, 1919], 2], [[1920, 1968], 2], [1969, 2], [[1970, 1983], 3], [[1984, 2037], 2], [[2038, 2042], 2], [[2043, 2044], 3], [2045, 2], [[2046, 2047], 2], [[2048, 2093], 2], [[2094, 2095], 3], [[2096, 2110], 2], [2111, 3], [[2112, 2139], 2], [[2140, 2141], 3], [2142, 2], [2143, 3], [[2144, 2154], 2], [[2155, 2159], 3], [[2160, 2183], 2], [2184, 2], [[2185, 2190], 2], [2191, 3], [[2192, 2193], 3], [[2194, 2199], 3], [[2200, 2207], 2], [2208, 2], [2209, 2], [[2210, 2220], 2], [[2221, 2226], 2], [[2227, 2228], 2], [2229, 2], [[2230, 2237], 2], [[2238, 2247], 2], [[2248, 2258], 2], [2259, 2], [[2260, 2273], 2], [2274, 3], [2275, 2], [[2276, 2302], 2], [2303, 2], [2304, 2], [[2305, 2307], 2], [2308, 2], [[2309, 2361], 2], [[2362, 2363], 2], [[2364, 2381], 2], [2382, 2], [2383, 2], [[2384, 2388], 2], [2389, 2], [[2390, 2391], 2], [2392, 1, "\u0915\u093C"], [2393, 1, "\u0916\u093C"], [2394, 1, "\u0917\u093C"], [2395, 1, "\u091C\u093C"], [2396, 1, "\u0921\u093C"], [2397, 1, "\u0922\u093C"], [2398, 1, "\u092B\u093C"], [2399, 1, "\u092F\u093C"], [[2400, 2403], 2], [[2404, 2405], 2], [[2406, 2415], 2], [2416, 2], [[2417, 2418], 2], [[2419, 2423], 2], [2424, 2], [[2425, 2426], 2], [[2427, 2428], 2], [2429, 2], [[2430, 2431], 2], [2432, 2], [[2433, 2435], 2], [2436, 3], [[2437, 2444], 2], [[2445, 2446], 3], [[2447, 2448], 2], [[2449, 2450], 3], [[2451, 2472], 2], [2473, 3], [[2474, 2480], 2], [2481, 3], [2482, 2], [[2483, 2485], 3], [[2486, 2489], 2], [[2490, 2491], 3], [2492, 2], [2493, 2], [[2494, 2500], 2], [[2501, 2502], 3], [[2503, 2504], 2], [[2505, 2506], 3], [[2507, 2509], 2], [2510, 2], [[2511, 2518], 3], [2519, 2], [[2520, 2523], 3], [2524, 1, "\u09A1\u09BC"], [2525, 1, "\u09A2\u09BC"], [2526, 3], [2527, 1, "\u09AF\u09BC"], [[2528, 2531], 2], [[2532, 2533], 3], [[2534, 2545], 2], [[2546, 2554], 2], [2555, 2], [2556, 2], [2557, 2], [2558, 2], [[2559, 2560], 3], [2561, 2], [2562, 2], [2563, 2], [2564, 3], [[2565, 2570], 2], [[2571, 2574], 3], [[2575, 2576], 2], [[2577, 2578], 3], [[2579, 2600], 2], [2601, 3], [[2602, 2608], 2], [2609, 3], [2610, 2], [2611, 1, "\u0A32\u0A3C"], [2612, 3], [2613, 2], [2614, 1, "\u0A38\u0A3C"], [2615, 3], [[2616, 2617], 2], [[2618, 2619], 3], [2620, 2], [2621, 3], [[2622, 2626], 2], [[2627, 2630], 3], [[2631, 2632], 2], [[2633, 2634], 3], [[2635, 2637], 2], [[2638, 2640], 3], [2641, 2], [[2642, 2648], 3], [2649, 1, "\u0A16\u0A3C"], [2650, 1, "\u0A17\u0A3C"], [2651, 1, "\u0A1C\u0A3C"], [2652, 2], [2653, 3], [2654, 1, "\u0A2B\u0A3C"], [[2655, 2661], 3], [[2662, 2676], 2], [2677, 2], [2678, 2], [[2679, 2688], 3], [[2689, 2691], 2], [2692, 3], [[2693, 2699], 2], [2700, 2], [2701, 2], [2702, 3], [[2703, 2705], 2], [2706, 3], [[2707, 2728], 2], [2729, 3], [[2730, 2736], 2], [2737, 3], [[2738, 2739], 2], [2740, 3], [[2741, 2745], 2], [[2746, 2747], 3], [[2748, 2757], 2], [2758, 3], [[2759, 2761], 2], [2762, 3], [[2763, 2765], 2], [[2766, 2767], 3], [2768, 2], [[2769, 2783], 3], [2784, 2], [[2785, 2787], 2], [[2788, 2789], 3], [[2790, 2799], 2], [2800, 2], [2801, 2], [[2802, 2808], 3], [2809, 2], [[2810, 2815], 2], [2816, 3], [[2817, 2819], 2], [2820, 3], [[2821, 2828], 2], [[2829, 2830], 3], [[2831, 2832], 2], [[2833, 2834], 3], [[2835, 2856], 2], [2857, 3], [[2858, 2864], 2], [2865, 3], [[2866, 2867], 2], [2868, 3], [2869, 2], [[2870, 2873], 2], [[2874, 2875], 3], [[2876, 2883], 2], [2884, 2], [[2885, 2886], 3], [[2887, 2888], 2], [[2889, 2890], 3], [[2891, 2893], 2], [[2894, 2900], 3], [2901, 2], [[2902, 2903], 2], [[2904, 2907], 3], [2908, 1, "\u0B21\u0B3C"], [2909, 1, "\u0B22\u0B3C"], [2910, 3], [[2911, 2913], 2], [[2914, 2915], 2], [[2916, 2917], 3], [[2918, 2927], 2], [2928, 2], [2929, 2], [[2930, 2935], 2], [[2936, 2945], 3], [[2946, 2947], 2], [2948, 3], [[2949, 2954], 2], [[2955, 2957], 3], [[2958, 2960], 2], [2961, 3], [[2962, 2965], 2], [[2966, 2968], 3], [[2969, 2970], 2], [2971, 3], [2972, 2], [2973, 3], [[2974, 2975], 2], [[2976, 2978], 3], [[2979, 2980], 2], [[2981, 2983], 3], [[2984, 2986], 2], [[2987, 2989], 3], [[2990, 2997], 2], [2998, 2], [[2999, 3001], 2], [[3002, 3005], 3], [[3006, 3010], 2], [[3011, 3013], 3], [[3014, 3016], 2], [3017, 3], [[3018, 3021], 2], [[3022, 3023], 3], [3024, 2], [[3025, 3030], 3], [3031, 2], [[3032, 3045], 3], [3046, 2], [[3047, 3055], 2], [[3056, 3058], 2], [[3059, 3066], 2], [[3067, 3071], 3], [3072, 2], [[3073, 3075], 2], [3076, 2], [[3077, 3084], 2], [3085, 3], [[3086, 3088], 2], [3089, 3], [[3090, 3112], 2], [3113, 3], [[3114, 3123], 2], [3124, 2], [[3125, 3129], 2], [[3130, 3131], 3], [3132, 2], [3133, 2], [[3134, 3140], 2], [3141, 3], [[3142, 3144], 2], [3145, 3], [[3146, 3149], 2], [[3150, 3156], 3], [[3157, 3158], 2], [3159, 3], [[3160, 3161], 2], [3162, 2], [[3163, 3164], 3], [3165, 2], [[3166, 3167], 3], [[3168, 3169], 2], [[3170, 3171], 2], [[3172, 3173], 3], [[3174, 3183], 2], [[3184, 3190], 3], [3191, 2], [[3192, 3199], 2], [3200, 2], [3201, 2], [[3202, 3203], 2], [3204, 2], [[3205, 3212], 2], [3213, 3], [[3214, 3216], 2], [3217, 3], [[3218, 3240], 2], [3241, 3], [[3242, 3251], 2], [3252, 3], [[3253, 3257], 2], [[3258, 3259], 3], [[3260, 3261], 2], [[3262, 3268], 2], [3269, 3], [[3270, 3272], 2], [3273, 3], [[3274, 3277], 2], [[3278, 3284], 3], [[3285, 3286], 2], [[3287, 3292], 3], [3293, 2], [3294, 2], [3295, 3], [[3296, 3297], 2], [[3298, 3299], 2], [[3300, 3301], 3], [[3302, 3311], 2], [3312, 3], [[3313, 3314], 2], [3315, 2], [[3316, 3327], 3], [3328, 2], [3329, 2], [[3330, 3331], 2], [3332, 2], [[3333, 3340], 2], [3341, 3], [[3342, 3344], 2], [3345, 3], [[3346, 3368], 2], [3369, 2], [[3370, 3385], 2], [3386, 2], [[3387, 3388], 2], [3389, 2], [[3390, 3395], 2], [3396, 2], [3397, 3], [[3398, 3400], 2], [3401, 3], [[3402, 3405], 2], [3406, 2], [3407, 2], [[3408, 3411], 3], [[3412, 3414], 2], [3415, 2], [[3416, 3422], 2], [3423, 2], [[3424, 3425], 2], [[3426, 3427], 2], [[3428, 3429], 3], [[3430, 3439], 2], [[3440, 3445], 2], [[3446, 3448], 2], [3449, 2], [[3450, 3455], 2], [3456, 3], [3457, 2], [[3458, 3459], 2], [3460, 3], [[3461, 3478], 2], [[3479, 3481], 3], [[3482, 3505], 2], [3506, 3], [[3507, 3515], 2], [3516, 3], [3517, 2], [[3518, 3519], 3], [[3520, 3526], 2], [[3527, 3529], 3], [3530, 2], [[3531, 3534], 3], [[3535, 3540], 2], [3541, 3], [3542, 2], [3543, 3], [[3544, 3551], 2], [[3552, 3557], 3], [[3558, 3567], 2], [[3568, 3569], 3], [[3570, 3571], 2], [3572, 2], [[3573, 3584], 3], [[3585, 3634], 2], [3635, 1, "\u0E4D\u0E32"], [[3636, 3642], 2], [[3643, 3646], 3], [3647, 2], [[3648, 3662], 2], [3663, 2], [[3664, 3673], 2], [[3674, 3675], 2], [[3676, 3712], 3], [[3713, 3714], 2], [3715, 3], [3716, 2], [3717, 3], [3718, 2], [[3719, 3720], 2], [3721, 2], [3722, 2], [3723, 3], [3724, 2], [3725, 2], [[3726, 3731], 2], [[3732, 3735], 2], [3736, 2], [[3737, 3743], 2], [3744, 2], [[3745, 3747], 2], [3748, 3], [3749, 2], [3750, 3], [3751, 2], [[3752, 3753], 2], [[3754, 3755], 2], [3756, 2], [[3757, 3762], 2], [3763, 1, "\u0ECD\u0EB2"], [[3764, 3769], 2], [3770, 2], [[3771, 3773], 2], [[3774, 3775], 3], [[3776, 3780], 2], [3781, 3], [3782, 2], [3783, 3], [[3784, 3789], 2], [3790, 2], [3791, 3], [[3792, 3801], 2], [[3802, 3803], 3], [3804, 1, "\u0EAB\u0E99"], [3805, 1, "\u0EAB\u0EA1"], [[3806, 3807], 2], [[3808, 3839], 3], [3840, 2], [[3841, 3850], 2], [3851, 2], [3852, 1, "\u0F0B"], [[3853, 3863], 2], [[3864, 3865], 2], [[3866, 3871], 2], [[3872, 3881], 2], [[3882, 3892], 2], [3893, 2], [3894, 2], [3895, 2], [3896, 2], [3897, 2], [[3898, 3901], 2], [[3902, 3906], 2], [3907, 1, "\u0F42\u0FB7"], [[3908, 3911], 2], [3912, 3], [[3913, 3916], 2], [3917, 1, "\u0F4C\u0FB7"], [[3918, 3921], 2], [3922, 1, "\u0F51\u0FB7"], [[3923, 3926], 2], [3927, 1, "\u0F56\u0FB7"], [[3928, 3931], 2], [3932, 1, "\u0F5B\u0FB7"], [[3933, 3944], 2], [3945, 1, "\u0F40\u0FB5"], [3946, 2], [[3947, 3948], 2], [[3949, 3952], 3], [[3953, 3954], 2], [3955, 1, "\u0F71\u0F72"], [3956, 2], [3957, 1, "\u0F71\u0F74"], [3958, 1, "\u0FB2\u0F80"], [3959, 1, "\u0FB2\u0F71\u0F80"], [3960, 1, "\u0FB3\u0F80"], [3961, 1, "\u0FB3\u0F71\u0F80"], [[3962, 3968], 2], [3969, 1, "\u0F71\u0F80"], [[3970, 3972], 2], [3973, 2], [[3974, 3979], 2], [[3980, 3983], 2], [[3984, 3986], 2], [3987, 1, "\u0F92\u0FB7"], [[3988, 3989], 2], [3990, 2], [3991, 2], [3992, 3], [[3993, 3996], 2], [3997, 1, "\u0F9C\u0FB7"], [[3998, 4001], 2], [4002, 1, "\u0FA1\u0FB7"], [[4003, 4006], 2], [4007, 1, "\u0FA6\u0FB7"], [[4008, 4011], 2], [4012, 1, "\u0FAB\u0FB7"], [4013, 2], [[4014, 4016], 2], [[4017, 4023], 2], [4024, 2], [4025, 1, "\u0F90\u0FB5"], [[4026, 4028], 2], [4029, 3], [[4030, 4037], 2], [4038, 2], [[4039, 4044], 2], [4045, 3], [4046, 2], [4047, 2], [[4048, 4049], 2], [[4050, 4052], 2], [[4053, 4056], 2], [[4057, 4058], 2], [[4059, 4095], 3], [[4096, 4129], 2], [4130, 2], [[4131, 4135], 2], [4136, 2], [[4137, 4138], 2], [4139, 2], [[4140, 4146], 2], [[4147, 4149], 2], [[4150, 4153], 2], [[4154, 4159], 2], [[4160, 4169], 2], [[4170, 4175], 2], [[4176, 4185], 2], [[4186, 4249], 2], [[4250, 4253], 2], [[4254, 4255], 2], [[4256, 4293], 3], [4294, 3], [4295, 1, "\u2D27"], [[4296, 4300], 3], [4301, 1, "\u2D2D"], [[4302, 4303], 3], [[4304, 4342], 2], [[4343, 4344], 2], [[4345, 4346], 2], [4347, 2], [4348, 1, "\u10DC"], [[4349, 4351], 2], [[4352, 4441], 2], [[4442, 4446], 2], [[4447, 4448], 3], [[4449, 4514], 2], [[4515, 4519], 2], [[4520, 4601], 2], [[4602, 4607], 2], [[4608, 4614], 2], [4615, 2], [[4616, 4678], 2], [4679, 2], [4680, 2], [4681, 3], [[4682, 4685], 2], [[4686, 4687], 3], [[4688, 4694], 2], [4695, 3], [4696, 2], [4697, 3], [[4698, 4701], 2], [[4702, 4703], 3], [[4704, 4742], 2], [4743, 2], [4744, 2], [4745, 3], [[4746, 4749], 2], [[4750, 4751], 3], [[4752, 4782], 2], [4783, 2], [4784, 2], [4785, 3], [[4786, 4789], 2], [[4790, 4791], 3], [[4792, 4798], 2], [4799, 3], [4800, 2], [4801, 3], [[4802, 4805], 2], [[4806, 4807], 3], [[4808, 4814], 2], [4815, 2], [[4816, 4822], 2], [4823, 3], [[4824, 4846], 2], [4847, 2], [[4848, 4878], 2], [4879, 2], [4880, 2], [4881, 3], [[4882, 4885], 2], [[4886, 4887], 3], [[4888, 4894], 2], [4895, 2], [[4896, 4934], 2], [4935, 2], [[4936, 4954], 2], [[4955, 4956], 3], [[4957, 4958], 2], [4959, 2], [4960, 2], [[4961, 4988], 2], [[4989, 4991], 3], [[4992, 5007], 2], [[5008, 5017], 2], [[5018, 5023], 3], [[5024, 5108], 2], [5109, 2], [[5110, 5111], 3], [5112, 1, "\u13F0"], [5113, 1, "\u13F1"], [5114, 1, "\u13F2"], [5115, 1, "\u13F3"], [5116, 1, "\u13F4"], [5117, 1, "\u13F5"], [[5118, 5119], 3], [5120, 2], [[5121, 5740], 2], [[5741, 5742], 2], [[5743, 5750], 2], [[5751, 5759], 2], [5760, 3], [[5761, 5786], 2], [[5787, 5788], 2], [[5789, 5791], 3], [[5792, 5866], 2], [[5867, 5872], 2], [[5873, 5880], 2], [[5881, 5887], 3], [[5888, 5900], 2], [5901, 2], [[5902, 5908], 2], [5909, 2], [[5910, 5918], 3], [5919, 2], [[5920, 5940], 2], [[5941, 5942], 2], [[5943, 5951], 3], [[5952, 5971], 2], [[5972, 5983], 3], [[5984, 5996], 2], [5997, 3], [[5998, 6e3], 2], [6001, 3], [[6002, 6003], 2], [[6004, 6015], 3], [[6016, 6067], 2], [[6068, 6069], 3], [[6070, 6099], 2], [[6100, 6102], 2], [6103, 2], [[6104, 6107], 2], [6108, 2], [6109, 2], [[6110, 6111], 3], [[6112, 6121], 2], [[6122, 6127], 3], [[6128, 6137], 2], [[6138, 6143], 3], [[6144, 6149], 2], [6150, 3], [[6151, 6154], 2], [[6155, 6157], 7], [6158, 3], [6159, 7], [[6160, 6169], 2], [[6170, 6175], 3], [[6176, 6263], 2], [6264, 2], [[6265, 6271], 3], [[6272, 6313], 2], [6314, 2], [[6315, 6319], 3], [[6320, 6389], 2], [[6390, 6399], 3], [[6400, 6428], 2], [[6429, 6430], 2], [6431, 3], [[6432, 6443], 2], [[6444, 6447], 3], [[6448, 6459], 2], [[6460, 6463], 3], [6464, 2], [[6465, 6467], 3], [[6468, 6469], 2], [[6470, 6509], 2], [[6510, 6511], 3], [[6512, 6516], 2], [[6517, 6527], 3], [[6528, 6569], 2], [[6570, 6571], 2], [[6572, 6575], 3], [[6576, 6601], 2], [[6602, 6607], 3], [[6608, 6617], 2], [6618, 2], [[6619, 6621], 3], [[6622, 6623], 2], [[6624, 6655], 2], [[6656, 6683], 2], [[6684, 6685], 3], [[6686, 6687], 2], [[6688, 6750], 2], [6751, 3], [[6752, 6780], 2], [[6781, 6782], 3], [[6783, 6793], 2], [[6794, 6799], 3], [[6800, 6809], 2], [[6810, 6815], 3], [[6816, 6822], 2], [6823, 2], [[6824, 6829], 2], [[6830, 6831], 3], [[6832, 6845], 2], [6846, 2], [[6847, 6848], 2], [[6849, 6862], 2], [[6863, 6911], 3], [[6912, 6987], 2], [6988, 2], [[6989, 6991], 3], [[6992, 7001], 2], [[7002, 7018], 2], [[7019, 7027], 2], [[7028, 7036], 2], [[7037, 7038], 2], [7039, 3], [[7040, 7082], 2], [[7083, 7085], 2], [[7086, 7097], 2], [[7098, 7103], 2], [[7104, 7155], 2], [[7156, 7163], 3], [[7164, 7167], 2], [[7168, 7223], 2], [[7224, 7226], 3], [[7227, 7231], 2], [[7232, 7241], 2], [[7242, 7244], 3], [[7245, 7293], 2], [[7294, 7295], 2], [7296, 1, "\u0432"], [7297, 1, "\u0434"], [7298, 1, "\u043E"], [7299, 1, "\u0441"], [[7300, 7301], 1, "\u0442"], [7302, 1, "\u044A"], [7303, 1, "\u0463"], [7304, 1, "\uA64B"], [[7305, 7311], 3], [7312, 1, "\u10D0"], [7313, 1, "\u10D1"], [7314, 1, "\u10D2"], [7315, 1, "\u10D3"], [7316, 1, "\u10D4"], [7317, 1, "\u10D5"], [7318, 1, "\u10D6"], [7319, 1, "\u10D7"], [7320, 1, "\u10D8"], [7321, 1, "\u10D9"], [7322, 1, "\u10DA"], [7323, 1, "\u10DB"], [7324, 1, "\u10DC"], [7325, 1, "\u10DD"], [7326, 1, "\u10DE"], [7327, 1, "\u10DF"], [7328, 1, "\u10E0"], [7329, 1, "\u10E1"], [7330, 1, "\u10E2"], [7331, 1, "\u10E3"], [7332, 1, "\u10E4"], [7333, 1, "\u10E5"], [7334, 1, "\u10E6"], [7335, 1, "\u10E7"], [7336, 1, "\u10E8"], [7337, 1, "\u10E9"], [7338, 1, "\u10EA"], [7339, 1, "\u10EB"], [7340, 1, "\u10EC"], [7341, 1, "\u10ED"], [7342, 1, "\u10EE"], [7343, 1, "\u10EF"], [7344, 1, "\u10F0"], [7345, 1, "\u10F1"], [7346, 1, "\u10F2"], [7347, 1, "\u10F3"], [7348, 1, "\u10F4"], [7349, 1, "\u10F5"], [7350, 1, "\u10F6"], [7351, 1, "\u10F7"], [7352, 1, "\u10F8"], [7353, 1, "\u10F9"], [7354, 1, "\u10FA"], [[7355, 7356], 3], [7357, 1, "\u10FD"], [7358, 1, "\u10FE"], [7359, 1, "\u10FF"], [[7360, 7367], 2], [[7368, 7375], 3], [[7376, 7378], 2], [7379, 2], [[7380, 7410], 2], [[7411, 7414], 2], [7415, 2], [[7416, 7417], 2], [7418, 2], [[7419, 7423], 3], [[7424, 7467], 2], [7468, 1, "a"], [7469, 1, "\xE6"], [7470, 1, "b"], [7471, 2], [7472, 1, "d"], [7473, 1, "e"], [7474, 1, "\u01DD"], [7475, 1, "g"], [7476, 1, "h"], [7477, 1, "i"], [7478, 1, "j"], [7479, 1, "k"], [7480, 1, "l"], [7481, 1, "m"], [7482, 1, "n"], [7483, 2], [7484, 1, "o"], [7485, 1, "\u0223"], [7486, 1, "p"], [7487, 1, "r"], [7488, 1, "t"], [7489, 1, "u"], [7490, 1, "w"], [7491, 1, "a"], [7492, 1, "\u0250"], [7493, 1, "\u0251"], [7494, 1, "\u1D02"], [7495, 1, "b"], [7496, 1, "d"], [7497, 1, "e"], [7498, 1, "\u0259"], [7499, 1, "\u025B"], [7500, 1, "\u025C"], [7501, 1, "g"], [7502, 2], [7503, 1, "k"], [7504, 1, "m"], [7505, 1, "\u014B"], [7506, 1, "o"], [7507, 1, "\u0254"], [7508, 1, "\u1D16"], [7509, 1, "\u1D17"], [7510, 1, "p"], [7511, 1, "t"], [7512, 1, "u"], [7513, 1, "\u1D1D"], [7514, 1, "\u026F"], [7515, 1, "v"], [7516, 1, "\u1D25"], [7517, 1, "\u03B2"], [7518, 1, "\u03B3"], [7519, 1, "\u03B4"], [7520, 1, "\u03C6"], [7521, 1, "\u03C7"], [7522, 1, "i"], [7523, 1, "r"], [7524, 1, "u"], [7525, 1, "v"], [7526, 1, "\u03B2"], [7527, 1, "\u03B3"], [7528, 1, "\u03C1"], [7529, 1, "\u03C6"], [7530, 1, "\u03C7"], [7531, 2], [[7532, 7543], 2], [7544, 1, "\u043D"], [[7545, 7578], 2], [7579, 1, "\u0252"], [7580, 1, "c"], [7581, 1, "\u0255"], [7582, 1, "\xF0"], [7583, 1, "\u025C"], [7584, 1, "f"], [7585, 1, "\u025F"], [7586, 1, "\u0261"], [7587, 1, "\u0265"], [7588, 1, "\u0268"], [7589, 1, "\u0269"], [7590, 1, "\u026A"], [7591, 1, "\u1D7B"], [7592, 1, "\u029D"], [7593, 1, "\u026D"], [7594, 1, "\u1D85"], [7595, 1, "\u029F"], [7596, 1, "\u0271"], [7597, 1, "\u0270"], [7598, 1, "\u0272"], [7599, 1, "\u0273"], [7600, 1, "\u0274"], [7601, 1, "\u0275"], [7602, 1, "\u0278"], [7603, 1, "\u0282"], [7604, 1, "\u0283"], [7605, 1, "\u01AB"], [7606, 1, "\u0289"], [7607, 1, "\u028A"], [7608, 1, "\u1D1C"], [7609, 1, "\u028B"], [7610, 1, "\u028C"], [7611, 1, "z"], [7612, 1, "\u0290"], [7613, 1, "\u0291"], [7614, 1, "\u0292"], [7615, 1, "\u03B8"], [[7616, 7619], 2], [[7620, 7626], 2], [[7627, 7654], 2], [[7655, 7669], 2], [[7670, 7673], 2], [7674, 2], [7675, 2], [7676, 2], [7677, 2], [[7678, 7679], 2], [7680, 1, "\u1E01"], [7681, 2], [7682, 1, "\u1E03"], [7683, 2], [7684, 1, "\u1E05"], [7685, 2], [7686, 1, "\u1E07"], [7687, 2], [7688, 1, "\u1E09"], [7689, 2], [7690, 1, "\u1E0B"], [7691, 2], [7692, 1, "\u1E0D"], [7693, 2], [7694, 1, "\u1E0F"], [7695, 2], [7696, 1, "\u1E11"], [7697, 2], [7698, 1, "\u1E13"], [7699, 2], [7700, 1, "\u1E15"], [7701, 2], [7702, 1, "\u1E17"], [7703, 2], [7704, 1, "\u1E19"], [7705, 2], [7706, 1, "\u1E1B"], [7707, 2], [7708, 1, "\u1E1D"], [7709, 2], [7710, 1, "\u1E1F"], [7711, 2], [7712, 1, "\u1E21"], [7713, 2], [7714, 1, "\u1E23"], [7715, 2], [7716, 1, "\u1E25"], [7717, 2], [7718, 1, "\u1E27"], [7719, 2], [7720, 1, "\u1E29"], [7721, 2], [7722, 1, "\u1E2B"], [7723, 2], [7724, 1, "\u1E2D"], [7725, 2], [7726, 1, "\u1E2F"], [7727, 2], [7728, 1, "\u1E31"], [7729, 2], [7730, 1, "\u1E33"], [7731, 2], [7732, 1, "\u1E35"], [7733, 2], [7734, 1, "\u1E37"], [7735, 2], [7736, 1, "\u1E39"], [7737, 2], [7738, 1, "\u1E3B"], [7739, 2], [7740, 1, "\u1E3D"], [7741, 2], [7742, 1, "\u1E3F"], [7743, 2], [7744, 1, "\u1E41"], [7745, 2], [7746, 1, "\u1E43"], [7747, 2], [7748, 1, "\u1E45"], [7749, 2], [7750, 1, "\u1E47"], [7751, 2], [7752, 1, "\u1E49"], [7753, 2], [7754, 1, "\u1E4B"], [7755, 2], [7756, 1, "\u1E4D"], [7757, 2], [7758, 1, "\u1E4F"], [7759, 2], [7760, 1, "\u1E51"], [7761, 2], [7762, 1, "\u1E53"], [7763, 2], [7764, 1, "\u1E55"], [7765, 2], [7766, 1, "\u1E57"], [7767, 2], [7768, 1, "\u1E59"], [7769, 2], [7770, 1, "\u1E5B"], [7771, 2], [7772, 1, "\u1E5D"], [7773, 2], [7774, 1, "\u1E5F"], [7775, 2], [7776, 1, "\u1E61"], [7777, 2], [7778, 1, "\u1E63"], [7779, 2], [7780, 1, "\u1E65"], [7781, 2], [7782, 1, "\u1E67"], [7783, 2], [7784, 1, "\u1E69"], [7785, 2], [7786, 1, "\u1E6B"], [7787, 2], [7788, 1, "\u1E6D"], [7789, 2], [7790, 1, "\u1E6F"], [7791, 2], [7792, 1, "\u1E71"], [7793, 2], [7794, 1, "\u1E73"], [7795, 2], [7796, 1, "\u1E75"], [7797, 2], [7798, 1, "\u1E77"], [7799, 2], [7800, 1, "\u1E79"], [7801, 2], [7802, 1, "\u1E7B"], [7803, 2], [7804, 1, "\u1E7D"], [7805, 2], [7806, 1, "\u1E7F"], [7807, 2], [7808, 1, "\u1E81"], [7809, 2], [7810, 1, "\u1E83"], [7811, 2], [7812, 1, "\u1E85"], [7813, 2], [7814, 1, "\u1E87"], [7815, 2], [7816, 1, "\u1E89"], [7817, 2], [7818, 1, "\u1E8B"], [7819, 2], [7820, 1, "\u1E8D"], [7821, 2], [7822, 1, "\u1E8F"], [7823, 2], [7824, 1, "\u1E91"], [7825, 2], [7826, 1, "\u1E93"], [7827, 2], [7828, 1, "\u1E95"], [[7829, 7833], 2], [7834, 1, "a\u02BE"], [7835, 1, "\u1E61"], [[7836, 7837], 2], [7838, 1, "\xDF"], [7839, 2], [7840, 1, "\u1EA1"], [7841, 2], [7842, 1, "\u1EA3"], [7843, 2], [7844, 1, "\u1EA5"], [7845, 2], [7846, 1, "\u1EA7"], [7847, 2], [7848, 1, "\u1EA9"], [7849, 2], [7850, 1, "\u1EAB"], [7851, 2], [7852, 1, "\u1EAD"], [7853, 2], [7854, 1, "\u1EAF"], [7855, 2], [7856, 1, "\u1EB1"], [7857, 2], [7858, 1, "\u1EB3"], [7859, 2], [7860, 1, "\u1EB5"], [7861, 2], [7862, 1, "\u1EB7"], [7863, 2], [7864, 1, "\u1EB9"], [7865, 2], [7866, 1, "\u1EBB"], [7867, 2], [7868, 1, "\u1EBD"], [7869, 2], [7870, 1, "\u1EBF"], [7871, 2], [7872, 1, "\u1EC1"], [7873, 2], [7874, 1, "\u1EC3"], [7875, 2], [7876, 1, "\u1EC5"], [7877, 2], [7878, 1, "\u1EC7"], [7879, 2], [7880, 1, "\u1EC9"], [7881, 2], [7882, 1, "\u1ECB"], [7883, 2], [7884, 1, "\u1ECD"], [7885, 2], [7886, 1, "\u1ECF"], [7887, 2], [7888, 1, "\u1ED1"], [7889, 2], [7890, 1, "\u1ED3"], [7891, 2], [7892, 1, "\u1ED5"], [7893, 2], [7894, 1, "\u1ED7"], [7895, 2], [7896, 1, "\u1ED9"], [7897, 2], [7898, 1, "\u1EDB"], [7899, 2], [7900, 1, "\u1EDD"], [7901, 2], [7902, 1, "\u1EDF"], [7903, 2], [7904, 1, "\u1EE1"], [7905, 2], [7906, 1, "\u1EE3"], [7907, 2], [7908, 1, "\u1EE5"], [7909, 2], [7910, 1, "\u1EE7"], [7911, 2], [7912, 1, "\u1EE9"], [7913, 2], [7914, 1, "\u1EEB"], [7915, 2], [7916, 1, "\u1EED"], [7917, 2], [7918, 1, "\u1EEF"], [7919, 2], [7920, 1, "\u1EF1"], [7921, 2], [7922, 1, "\u1EF3"], [7923, 2], [7924, 1, "\u1EF5"], [7925, 2], [7926, 1, "\u1EF7"], [7927, 2], [7928, 1, "\u1EF9"], [7929, 2], [7930, 1, "\u1EFB"], [7931, 2], [7932, 1, "\u1EFD"], [7933, 2], [7934, 1, "\u1EFF"], [7935, 2], [[7936, 7943], 2], [7944, 1, "\u1F00"], [7945, 1, "\u1F01"], [7946, 1, "\u1F02"], [7947, 1, "\u1F03"], [7948, 1, "\u1F04"], [7949, 1, "\u1F05"], [7950, 1, "\u1F06"], [7951, 1, "\u1F07"], [[7952, 7957], 2], [[7958, 7959], 3], [7960, 1, "\u1F10"], [7961, 1, "\u1F11"], [7962, 1, "\u1F12"], [7963, 1, "\u1F13"], [7964, 1, "\u1F14"], [7965, 1, "\u1F15"], [[7966, 7967], 3], [[7968, 7975], 2], [7976, 1, "\u1F20"], [7977, 1, "\u1F21"], [7978, 1, "\u1F22"], [7979, 1, "\u1F23"], [7980, 1, "\u1F24"], [7981, 1, "\u1F25"], [7982, 1, "\u1F26"], [7983, 1, "\u1F27"], [[7984, 7991], 2], [7992, 1, "\u1F30"], [7993, 1, "\u1F31"], [7994, 1, "\u1F32"], [7995, 1, "\u1F33"], [7996, 1, "\u1F34"], [7997, 1, "\u1F35"], [7998, 1, "\u1F36"], [7999, 1, "\u1F37"], [[8e3, 8005], 2], [[8006, 8007], 3], [8008, 1, "\u1F40"], [8009, 1, "\u1F41"], [8010, 1, "\u1F42"], [8011, 1, "\u1F43"], [8012, 1, "\u1F44"], [8013, 1, "\u1F45"], [[8014, 8015], 3], [[8016, 8023], 2], [8024, 3], [8025, 1, "\u1F51"], [8026, 3], [8027, 1, "\u1F53"], [8028, 3], [8029, 1, "\u1F55"], [8030, 3], [8031, 1, "\u1F57"], [[8032, 8039], 2], [8040, 1, "\u1F60"], [8041, 1, "\u1F61"], [8042, 1, "\u1F62"], [8043, 1, "\u1F63"], [8044, 1, "\u1F64"], [8045, 1, "\u1F65"], [8046, 1, "\u1F66"], [8047, 1, "\u1F67"], [8048, 2], [8049, 1, "\u03AC"], [8050, 2], [8051, 1, "\u03AD"], [8052, 2], [8053, 1, "\u03AE"], [8054, 2], [8055, 1, "\u03AF"], [8056, 2], [8057, 1, "\u03CC"], [8058, 2], [8059, 1, "\u03CD"], [8060, 2], [8061, 1, "\u03CE"], [[8062, 8063], 3], [8064, 1, "\u1F00\u03B9"], [8065, 1, "\u1F01\u03B9"], [8066, 1, "\u1F02\u03B9"], [8067, 1, "\u1F03\u03B9"], [8068, 1, "\u1F04\u03B9"], [8069, 1, "\u1F05\u03B9"], [8070, 1, "\u1F06\u03B9"], [8071, 1, "\u1F07\u03B9"], [8072, 1, "\u1F00\u03B9"], [8073, 1, "\u1F01\u03B9"], [8074, 1, "\u1F02\u03B9"], [8075, 1, "\u1F03\u03B9"], [8076, 1, "\u1F04\u03B9"], [8077, 1, "\u1F05\u03B9"], [8078, 1, "\u1F06\u03B9"], [8079, 1, "\u1F07\u03B9"], [8080, 1, "\u1F20\u03B9"], [8081, 1, "\u1F21\u03B9"], [8082, 1, "\u1F22\u03B9"], [8083, 1, "\u1F23\u03B9"], [8084, 1, "\u1F24\u03B9"], [8085, 1, "\u1F25\u03B9"], [8086, 1, "\u1F26\u03B9"], [8087, 1, "\u1F27\u03B9"], [8088, 1, "\u1F20\u03B9"], [8089, 1, "\u1F21\u03B9"], [8090, 1, "\u1F22\u03B9"], [8091, 1, "\u1F23\u03B9"], [8092, 1, "\u1F24\u03B9"], [8093, 1, "\u1F25\u03B9"], [8094, 1, "\u1F26\u03B9"], [8095, 1, "\u1F27\u03B9"], [8096, 1, "\u1F60\u03B9"], [8097, 1, "\u1F61\u03B9"], [8098, 1, "\u1F62\u03B9"], [8099, 1, "\u1F63\u03B9"], [8100, 1, "\u1F64\u03B9"], [8101, 1, "\u1F65\u03B9"], [8102, 1, "\u1F66\u03B9"], [8103, 1, "\u1F67\u03B9"], [8104, 1, "\u1F60\u03B9"], [8105, 1, "\u1F61\u03B9"], [8106, 1, "\u1F62\u03B9"], [8107, 1, "\u1F63\u03B9"], [8108, 1, "\u1F64\u03B9"], [8109, 1, "\u1F65\u03B9"], [8110, 1, "\u1F66\u03B9"], [8111, 1, "\u1F67\u03B9"], [[8112, 8113], 2], [8114, 1, "\u1F70\u03B9"], [8115, 1, "\u03B1\u03B9"], [8116, 1, "\u03AC\u03B9"], [8117, 3], [8118, 2], [8119, 1, "\u1FB6\u03B9"], [8120, 1, "\u1FB0"], [8121, 1, "\u1FB1"], [8122, 1, "\u1F70"], [8123, 1, "\u03AC"], [8124, 1, "\u03B1\u03B9"], [8125, 5, " \u0313"], [8126, 1, "\u03B9"], [8127, 5, " \u0313"], [8128, 5, " \u0342"], [8129, 5, " \u0308\u0342"], [8130, 1, "\u1F74\u03B9"], [8131, 1, "\u03B7\u03B9"], [8132, 1, "\u03AE\u03B9"], [8133, 3], [8134, 2], [8135, 1, "\u1FC6\u03B9"], [8136, 1, "\u1F72"], [8137, 1, "\u03AD"], [8138, 1, "\u1F74"], [8139, 1, "\u03AE"], [8140, 1, "\u03B7\u03B9"], [8141, 5, " \u0313\u0300"], [8142, 5, " \u0313\u0301"], [8143, 5, " \u0313\u0342"], [[8144, 8146], 2], [8147, 1, "\u0390"], [[8148, 8149], 3], [[8150, 8151], 2], [8152, 1, "\u1FD0"], [8153, 1, "\u1FD1"], [8154, 1, "\u1F76"], [8155, 1, "\u03AF"], [8156, 3], [8157, 5, " \u0314\u0300"], [8158, 5, " \u0314\u0301"], [8159, 5, " \u0314\u0342"], [[8160, 8162], 2], [8163, 1, "\u03B0"], [[8164, 8167], 2], [8168, 1, "\u1FE0"], [8169, 1, "\u1FE1"], [8170, 1, "\u1F7A"], [8171, 1, "\u03CD"], [8172, 1, "\u1FE5"], [8173, 5, " \u0308\u0300"], [8174, 5, " \u0308\u0301"], [8175, 5, "`"], [[8176, 8177], 3], [8178, 1, "\u1F7C\u03B9"], [8179, 1, "\u03C9\u03B9"], [8180, 1, "\u03CE\u03B9"], [8181, 3], [8182, 2], [8183, 1, "\u1FF6\u03B9"], [8184, 1, "\u1F78"], [8185, 1, "\u03CC"], [8186, 1, "\u1F7C"], [8187, 1, "\u03CE"], [8188, 1, "\u03C9\u03B9"], [8189, 5, " \u0301"], [8190, 5, " \u0314"], [8191, 3], [[8192, 8202], 5, " "], [8203, 7], [[8204, 8205], 6, ""], [[8206, 8207], 3], [8208, 2], [8209, 1, "\u2010"], [[8210, 8214], 2], [8215, 5, " \u0333"], [[8216, 8227], 2], [[8228, 8230], 3], [8231, 2], [[8232, 8238], 3], [8239, 5, " "], [[8240, 8242], 2], [8243, 1, "\u2032\u2032"], [8244, 1, "\u2032\u2032\u2032"], [8245, 2], [8246, 1, "\u2035\u2035"], [8247, 1, "\u2035\u2035\u2035"], [[8248, 8251], 2], [8252, 5, "!!"], [8253, 2], [8254, 5, " \u0305"], [[8255, 8262], 2], [8263, 5, "??"], [8264, 5, "?!"], [8265, 5, "!?"], [[8266, 8269], 2], [[8270, 8274], 2], [[8275, 8276], 2], [[8277, 8278], 2], [8279, 1, "\u2032\u2032\u2032\u2032"], [[8280, 8286], 2], [8287, 5, " "], [8288, 7], [[8289, 8291], 3], [8292, 7], [8293, 3], [[8294, 8297], 3], [[8298, 8303], 3], [8304, 1, "0"], [8305, 1, "i"], [[8306, 8307], 3], [8308, 1, "4"], [8309, 1, "5"], [8310, 1, "6"], [8311, 1, "7"], [8312, 1, "8"], [8313, 1, "9"], [8314, 5, "+"], [8315, 1, "\u2212"], [8316, 5, "="], [8317, 5, "("], [8318, 5, ")"], [8319, 1, "n"], [8320, 1, "0"], [8321, 1, "1"], [8322, 1, "2"], [8323, 1, "3"], [8324, 1, "4"], [8325, 1, "5"], [8326, 1, "6"], [8327, 1, "7"], [8328, 1, "8"], [8329, 1, "9"], [8330, 5, "+"], [8331, 1, "\u2212"], [8332, 5, "="], [8333, 5, "("], [8334, 5, ")"], [8335, 3], [8336, 1, "a"], [8337, 1, "e"], [8338, 1, "o"], [8339, 1, "x"], [8340, 1, "\u0259"], [8341, 1, "h"], [8342, 1, "k"], [8343, 1, "l"], [8344, 1, "m"], [8345, 1, "n"], [8346, 1, "p"], [8347, 1, "s"], [8348, 1, "t"], [[8349, 8351], 3], [[8352, 8359], 2], [8360, 1, "rs"], [[8361, 8362], 2], [8363, 2], [8364, 2], [[8365, 8367], 2], [[8368, 8369], 2], [[8370, 8373], 2], [[8374, 8376], 2], [8377, 2], [8378, 2], [[8379, 8381], 2], [8382, 2], [8383, 2], [8384, 2], [[8385, 8399], 3], [[8400, 8417], 2], [[8418, 8419], 2], [[8420, 8426], 2], [8427, 2], [[8428, 8431], 2], [8432, 2], [[8433, 8447], 3], [8448, 5, "a/c"], [8449, 5, "a/s"], [8450, 1, "c"], [8451, 1, "\xB0c"], [8452, 2], [8453, 5, "c/o"], [8454, 5, "c/u"], [8455, 1, "\u025B"], [8456, 2], [8457, 1, "\xB0f"], [8458, 1, "g"], [[8459, 8462], 1, "h"], [8463, 1, "\u0127"], [[8464, 8465], 1, "i"], [[8466, 8467], 1, "l"], [8468, 2], [8469, 1, "n"], [8470, 1, "no"], [[8471, 8472], 2], [8473, 1, "p"], [8474, 1, "q"], [[8475, 8477], 1, "r"], [[8478, 8479], 2], [8480, 1, "sm"], [8481, 1, "tel"], [8482, 1, "tm"], [8483, 2], [8484, 1, "z"], [8485, 2], [8486, 1, "\u03C9"], [8487, 2], [8488, 1, "z"], [8489, 2], [8490, 1, "k"], [8491, 1, "\xE5"], [8492, 1, "b"], [8493, 1, "c"], [8494, 2], [[8495, 8496], 1, "e"], [8497, 1, "f"], [8498, 3], [8499, 1, "m"], [8500, 1, "o"], [8501, 1, "\u05D0"], [8502, 1, "\u05D1"], [8503, 1, "\u05D2"], [8504, 1, "\u05D3"], [8505, 1, "i"], [8506, 2], [8507, 1, "fax"], [8508, 1, "\u03C0"], [[8509, 8510], 1, "\u03B3"], [8511, 1, "\u03C0"], [8512, 1, "\u2211"], [[8513, 8516], 2], [[8517, 8518], 1, "d"], [8519, 1, "e"], [8520, 1, "i"], [8521, 1, "j"], [[8522, 8523], 2], [8524, 2], [8525, 2], [8526, 2], [8527, 2], [8528, 1, "1\u20447"], [8529, 1, "1\u20449"], [8530, 1, "1\u204410"], [8531, 1, "1\u20443"], [8532, 1, "2\u20443"], [8533, 1, "1\u20445"], [8534, 1, "2\u20445"], [8535, 1, "3\u20445"], [8536, 1, "4\u20445"], [8537, 1, "1\u20446"], [8538, 1, "5\u20446"], [8539, 1, "1\u20448"], [8540, 1, "3\u20448"], [8541, 1, "5\u20448"], [8542, 1, "7\u20448"], [8543, 1, "1\u2044"], [8544, 1, "i"], [8545, 1, "ii"], [8546, 1, "iii"], [8547, 1, "iv"], [8548, 1, "v"], [8549, 1, "vi"], [8550, 1, "vii"], [8551, 1, "viii"], [8552, 1, "ix"], [8553, 1, "x"], [8554, 1, "xi"], [8555, 1, "xii"], [8556, 1, "l"], [8557, 1, "c"], [8558, 1, "d"], [8559, 1, "m"], [8560, 1, "i"], [8561, 1, "ii"], [8562, 1, "iii"], [8563, 1, "iv"], [8564, 1, "v"], [8565, 1, "vi"], [8566, 1, "vii"], [8567, 1, "viii"], [8568, 1, "ix"], [8569, 1, "x"], [8570, 1, "xi"], [8571, 1, "xii"], [8572, 1, "l"], [8573, 1, "c"], [8574, 1, "d"], [8575, 1, "m"], [[8576, 8578], 2], [8579, 3], [8580, 2], [[8581, 8584], 2], [8585, 1, "0\u20443"], [[8586, 8587], 2], [[8588, 8591], 3], [[8592, 8682], 2], [[8683, 8691], 2], [[8692, 8703], 2], [[8704, 8747], 2], [8748, 1, "\u222B\u222B"], [8749, 1, "\u222B\u222B\u222B"], [8750, 2], [8751, 1, "\u222E\u222E"], [8752, 1, "\u222E\u222E\u222E"], [[8753, 8945], 2], [[8946, 8959], 2], [8960, 2], [8961, 2], [[8962, 9e3], 2], [9001, 1, "\u3008"], [9002, 1, "\u3009"], [[9003, 9082], 2], [9083, 2], [9084, 2], [[9085, 9114], 2], [[9115, 9166], 2], [[9167, 9168], 2], [[9169, 9179], 2], [[9180, 9191], 2], [9192, 2], [[9193, 9203], 2], [[9204, 9210], 2], [[9211, 9214], 2], [9215, 2], [[9216, 9252], 2], [[9253, 9254], 2], [[9255, 9279], 3], [[9280, 9290], 2], [[9291, 9311], 3], [9312, 1, "1"], [9313, 1, "2"], [9314, 1, "3"], [9315, 1, "4"], [9316, 1, "5"], [9317, 1, "6"], [9318, 1, "7"], [9319, 1, "8"], [9320, 1, "9"], [9321, 1, "10"], [9322, 1, "11"], [9323, 1, "12"], [9324, 1, "13"], [9325, 1, "14"], [9326, 1, "15"], [9327, 1, "16"], [9328, 1, "17"], [9329, 1, "18"], [9330, 1, "19"], [9331, 1, "20"], [9332, 5, "(1)"], [9333, 5, "(2)"], [9334, 5, "(3)"], [9335, 5, "(4)"], [9336, 5, "(5)"], [9337, 5, "(6)"], [9338, 5, "(7)"], [9339, 5, "(8)"], [9340, 5, "(9)"], [9341, 5, "(10)"], [9342, 5, "(11)"], [9343, 5, "(12)"], [9344, 5, "(13)"], [9345, 5, "(14)"], [9346, 5, "(15)"], [9347, 5, "(16)"], [9348, 5, "(17)"], [9349, 5, "(18)"], [9350, 5, "(19)"], [9351, 5, "(20)"], [[9352, 9371], 3], [9372, 5, "(a)"], [9373, 5, "(b)"], [9374, 5, "(c)"], [9375, 5, "(d)"], [9376, 5, "(e)"], [9377, 5, "(f)"], [9378, 5, "(g)"], [9379, 5, "(h)"], [9380, 5, "(i)"], [9381, 5, "(j)"], [9382, 5, "(k)"], [9383, 5, "(l)"], [9384, 5, "(m)"], [9385, 5, "(n)"], [9386, 5, "(o)"], [9387, 5, "(p)"], [9388, 5, "(q)"], [9389, 5, "(r)"], [9390, 5, "(s)"], [9391, 5, "(t)"], [9392, 5, "(u)"], [9393, 5, "(v)"], [9394, 5, "(w)"], [9395, 5, "(x)"], [9396, 5, "(y)"], [9397, 5, "(z)"], [9398, 1, "a"], [9399, 1, "b"], [9400, 1, "c"], [9401, 1, "d"], [9402, 1, "e"], [9403, 1, "f"], [9404, 1, "g"], [9405, 1, "h"], [9406, 1, "i"], [9407, 1, "j"], [9408, 1, "k"], [9409, 1, "l"], [9410, 1, "m"], [9411, 1, "n"], [9412, 1, "o"], [9413, 1, "p"], [9414, 1, "q"], [9415, 1, "r"], [9416, 1, "s"], [9417, 1, "t"], [9418, 1, "u"], [9419, 1, "v"], [9420, 1, "w"], [9421, 1, "x"], [9422, 1, "y"], [9423, 1, "z"], [9424, 1, "a"], [9425, 1, "b"], [9426, 1, "c"], [9427, 1, "d"], [9428, 1, "e"], [9429, 1, "f"], [9430, 1, "g"], [9431, 1, "h"], [9432, 1, "i"], [9433, 1, "j"], [9434, 1, "k"], [9435, 1, "l"], [9436, 1, "m"], [9437, 1, "n"], [9438, 1, "o"], [9439, 1, "p"], [9440, 1, "q"], [9441, 1, "r"], [9442, 1, "s"], [9443, 1, "t"], [9444, 1, "u"], [9445, 1, "v"], [9446, 1, "w"], [9447, 1, "x"], [9448, 1, "y"], [9449, 1, "z"], [9450, 1, "0"], [[9451, 9470], 2], [9471, 2], [[9472, 9621], 2], [[9622, 9631], 2], [[9632, 9711], 2], [[9712, 9719], 2], [[9720, 9727], 2], [[9728, 9747], 2], [[9748, 9749], 2], [[9750, 9751], 2], [9752, 2], [9753, 2], [[9754, 9839], 2], [[9840, 9841], 2], [[9842, 9853], 2], [[9854, 9855], 2], [[9856, 9865], 2], [[9866, 9873], 2], [[9874, 9884], 2], [9885, 2], [[9886, 9887], 2], [[9888, 9889], 2], [[9890, 9905], 2], [9906, 2], [[9907, 9916], 2], [[9917, 9919], 2], [[9920, 9923], 2], [[9924, 9933], 2], [9934, 2], [[9935, 9953], 2], [9954, 2], [9955, 2], [[9956, 9959], 2], [[9960, 9983], 2], [9984, 2], [[9985, 9988], 2], [9989, 2], [[9990, 9993], 2], [[9994, 9995], 2], [[9996, 10023], 2], [10024, 2], [[10025, 10059], 2], [10060, 2], [10061, 2], [10062, 2], [[10063, 10066], 2], [[10067, 10069], 2], [10070, 2], [10071, 2], [[10072, 10078], 2], [[10079, 10080], 2], [[10081, 10087], 2], [[10088, 10101], 2], [[10102, 10132], 2], [[10133, 10135], 2], [[10136, 10159], 2], [10160, 2], [[10161, 10174], 2], [10175, 2], [[10176, 10182], 2], [[10183, 10186], 2], [10187, 2], [10188, 2], [10189, 2], [[10190, 10191], 2], [[10192, 10219], 2], [[10220, 10223], 2], [[10224, 10239], 2], [[10240, 10495], 2], [[10496, 10763], 2], [10764, 1, "\u222B\u222B\u222B\u222B"], [[10765, 10867], 2], [10868, 5, "::="], [10869, 5, "=="], [10870, 5, "==="], [[10871, 10971], 2], [10972, 1, "\u2ADD\u0338"], [[10973, 11007], 2], [[11008, 11021], 2], [[11022, 11027], 2], [[11028, 11034], 2], [[11035, 11039], 2], [[11040, 11043], 2], [[11044, 11084], 2], [[11085, 11087], 2], [[11088, 11092], 2], [[11093, 11097], 2], [[11098, 11123], 2], [[11124, 11125], 3], [[11126, 11157], 2], [11158, 3], [11159, 2], [[11160, 11193], 2], [[11194, 11196], 2], [[11197, 11208], 2], [11209, 2], [[11210, 11217], 2], [11218, 2], [[11219, 11243], 2], [[11244, 11247], 2], [[11248, 11262], 2], [11263, 2], [11264, 1, "\u2C30"], [11265, 1, "\u2C31"], [11266, 1, "\u2C32"], [11267, 1, "\u2C33"], [11268, 1, "\u2C34"], [11269, 1, "\u2C35"], [11270, 1, "\u2C36"], [11271, 1, "\u2C37"], [11272, 1, "\u2C38"], [11273, 1, "\u2C39"], [11274, 1, "\u2C3A"], [11275, 1, "\u2C3B"], [11276, 1, "\u2C3C"], [11277, 1, "\u2C3D"], [11278, 1, "\u2C3E"], [11279, 1, "\u2C3F"], [11280, 1, "\u2C40"], [11281, 1, "\u2C41"], [11282, 1, "\u2C42"], [11283, 1, "\u2C43"], [11284, 1, "\u2C44"], [11285, 1, "\u2C45"], [11286, 1, "\u2C46"], [11287, 1, "\u2C47"], [11288, 1, "\u2C48"], [11289, 1, "\u2C49"], [11290, 1, "\u2C4A"], [11291, 1, "\u2C4B"], [11292, 1, "\u2C4C"], [11293, 1, "\u2C4D"], [11294, 1, "\u2C4E"], [11295, 1, "\u2C4F"], [11296, 1, "\u2C50"], [11297, 1, "\u2C51"], [11298, 1, "\u2C52"], [11299, 1, "\u2C53"], [11300, 1, "\u2C54"], [11301, 1, "\u2C55"], [11302, 1, "\u2C56"], [11303, 1, "\u2C57"], [11304, 1, "\u2C58"], [11305, 1, "\u2C59"], [11306, 1, "\u2C5A"], [11307, 1, "\u2C5B"], [11308, 1, "\u2C5C"], [11309, 1, "\u2C5D"], [11310, 1, "\u2C5E"], [11311, 1, "\u2C5F"], [[11312, 11358], 2], [11359, 2], [11360, 1, "\u2C61"], [11361, 2], [11362, 1, "\u026B"], [11363, 1, "\u1D7D"], [11364, 1, "\u027D"], [[11365, 11366], 2], [11367, 1, "\u2C68"], [11368, 2], [11369, 1, "\u2C6A"], [11370, 2], [11371, 1, "\u2C6C"], [11372, 2], [11373, 1, "\u0251"], [11374, 1, "\u0271"], [11375, 1, "\u0250"], [11376, 1, "\u0252"], [11377, 2], [11378, 1, "\u2C73"], [11379, 2], [11380, 2], [11381, 1, "\u2C76"], [[11382, 11383], 2], [[11384, 11387], 2], [11388, 1, "j"], [11389, 1, "v"], [11390, 1, "\u023F"], [11391, 1, "\u0240"], [11392, 1, "\u2C81"], [11393, 2], [11394, 1, "\u2C83"], [11395, 2], [11396, 1, "\u2C85"], [11397, 2], [11398, 1, "\u2C87"], [11399, 2], [11400, 1, "\u2C89"], [11401, 2], [11402, 1, "\u2C8B"], [11403, 2], [11404, 1, "\u2C8D"], [11405, 2], [11406, 1, "\u2C8F"], [11407, 2], [11408, 1, "\u2C91"], [11409, 2], [11410, 1, "\u2C93"], [11411, 2], [11412, 1, "\u2C95"], [11413, 2], [11414, 1, "\u2C97"], [11415, 2], [11416, 1, "\u2C99"], [11417, 2], [11418, 1, "\u2C9B"], [11419, 2], [11420, 1, "\u2C9D"], [11421, 2], [11422, 1, "\u2C9F"], [11423, 2], [11424, 1, "\u2CA1"], [11425, 2], [11426, 1, "\u2CA3"], [11427, 2], [11428, 1, "\u2CA5"], [11429, 2], [11430, 1, "\u2CA7"], [11431, 2], [11432, 1, "\u2CA9"], [11433, 2], [11434, 1, "\u2CAB"], [11435, 2], [11436, 1, "\u2CAD"], [11437, 2], [11438, 1, "\u2CAF"], [11439, 2], [11440, 1, "\u2CB1"], [11441, 2], [11442, 1, "\u2CB3"], [11443, 2], [11444, 1, "\u2CB5"], [11445, 2], [11446, 1, "\u2CB7"], [11447, 2], [11448, 1, "\u2CB9"], [11449, 2], [11450, 1, "\u2CBB"], [11451, 2], [11452, 1, "\u2CBD"], [11453, 2], [11454, 1, "\u2CBF"], [11455, 2], [11456, 1, "\u2CC1"], [11457, 2], [11458, 1, "\u2CC3"], [11459, 2], [11460, 1, "\u2CC5"], [11461, 2], [11462, 1, "\u2CC7"], [11463, 2], [11464, 1, "\u2CC9"], [11465, 2], [11466, 1, "\u2CCB"], [11467, 2], [11468, 1, "\u2CCD"], [11469, 2], [11470, 1, "\u2CCF"], [11471, 2], [11472, 1, "\u2CD1"], [11473, 2], [11474, 1, "\u2CD3"], [11475, 2], [11476, 1, "\u2CD5"], [11477, 2], [11478, 1, "\u2CD7"], [11479, 2], [11480, 1, "\u2CD9"], [11481, 2], [11482, 1, "\u2CDB"], [11483, 2], [11484, 1, "\u2CDD"], [11485, 2], [11486, 1, "\u2CDF"], [11487, 2], [11488, 1, "\u2CE1"], [11489, 2], [11490, 1, "\u2CE3"], [[11491, 11492], 2], [[11493, 11498], 2], [11499, 1, "\u2CEC"], [11500, 2], [11501, 1, "\u2CEE"], [[11502, 11505], 2], [11506, 1, "\u2CF3"], [11507, 2], [[11508, 11512], 3], [[11513, 11519], 2], [[11520, 11557], 2], [11558, 3], [11559, 2], [[11560, 11564], 3], [11565, 2], [[11566, 11567], 3], [[11568, 11621], 2], [[11622, 11623], 2], [[11624, 11630], 3], [11631, 1, "\u2D61"], [11632, 2], [[11633, 11646], 3], [11647, 2], [[11648, 11670], 2], [[11671, 11679], 3], [[11680, 11686], 2], [11687, 3], [[11688, 11694], 2], [11695, 3], [[11696, 11702], 2], [11703, 3], [[11704, 11710], 2], [11711, 3], [[11712, 11718], 2], [11719, 3], [[11720, 11726], 2], [11727, 3], [[11728, 11734], 2], [11735, 3], [[11736, 11742], 2], [11743, 3], [[11744, 11775], 2], [[11776, 11799], 2], [[11800, 11803], 2], [[11804, 11805], 2], [[11806, 11822], 2], [11823, 2], [11824, 2], [11825, 2], [[11826, 11835], 2], [[11836, 11842], 2], [[11843, 11844], 2], [[11845, 11849], 2], [[11850, 11854], 2], [11855, 2], [[11856, 11858], 2], [[11859, 11869], 2], [[11870, 11903], 3], [[11904, 11929], 2], [11930, 3], [[11931, 11934], 2], [11935, 1, "\u6BCD"], [[11936, 12018], 2], [12019, 1, "\u9F9F"], [[12020, 12031], 3], [12032, 1, "\u4E00"], [12033, 1, "\u4E28"], [12034, 1, "\u4E36"], [12035, 1, "\u4E3F"], [12036, 1, "\u4E59"], [12037, 1, "\u4E85"], [12038, 1, "\u4E8C"], [12039, 1, "\u4EA0"], [12040, 1, "\u4EBA"], [12041, 1, "\u513F"], [12042, 1, "\u5165"], [12043, 1, "\u516B"], [12044, 1, "\u5182"], [12045, 1, "\u5196"], [12046, 1, "\u51AB"], [12047, 1, "\u51E0"], [12048, 1, "\u51F5"], [12049, 1, "\u5200"], [12050, 1, "\u529B"], [12051, 1, "\u52F9"], [12052, 1, "\u5315"], [12053, 1, "\u531A"], [12054, 1, "\u5338"], [12055, 1, "\u5341"], [12056, 1, "\u535C"], [12057, 1, "\u5369"], [12058, 1, "\u5382"], [12059, 1, "\u53B6"], [12060, 1, "\u53C8"], [12061, 1, "\u53E3"], [12062, 1, "\u56D7"], [12063, 1, "\u571F"], [12064, 1, "\u58EB"], [12065, 1, "\u5902"], [12066, 1, "\u590A"], [12067, 1, "\u5915"], [12068, 1, "\u5927"], [12069, 1, "\u5973"], [12070, 1, "\u5B50"], [12071, 1, "\u5B80"], [12072, 1, "\u5BF8"], [12073, 1, "\u5C0F"], [12074, 1, "\u5C22"], [12075, 1, "\u5C38"], [12076, 1, "\u5C6E"], [12077, 1, "\u5C71"], [12078, 1, "\u5DDB"], [12079, 1, "\u5DE5"], [12080, 1, "\u5DF1"], [12081, 1, "\u5DFE"], [12082, 1, "\u5E72"], [12083, 1, "\u5E7A"], [12084, 1, "\u5E7F"], [12085, 1, "\u5EF4"], [12086, 1, "\u5EFE"], [12087, 1, "\u5F0B"], [12088, 1, "\u5F13"], [12089, 1, "\u5F50"], [12090, 1, "\u5F61"], [12091, 1, "\u5F73"], [12092, 1, "\u5FC3"], [12093, 1, "\u6208"], [12094, 1, "\u6236"], [12095, 1, "\u624B"], [12096, 1, "\u652F"], [12097, 1, "\u6534"], [12098, 1, "\u6587"], [12099, 1, "\u6597"], [12100, 1, "\u65A4"], [12101, 1, "\u65B9"], [12102, 1, "\u65E0"], [12103, 1, "\u65E5"], [12104, 1, "\u66F0"], [12105, 1, "\u6708"], [12106, 1, "\u6728"], [12107, 1, "\u6B20"], [12108, 1, "\u6B62"], [12109, 1, "\u6B79"], [12110, 1, "\u6BB3"], [12111, 1, "\u6BCB"], [12112, 1, "\u6BD4"], [12113, 1, "\u6BDB"], [12114, 1, "\u6C0F"], [12115, 1, "\u6C14"], [12116, 1, "\u6C34"], [12117, 1, "\u706B"], [12118, 1, "\u722A"], [12119, 1, "\u7236"], [12120, 1, "\u723B"], [12121, 1, "\u723F"], [12122, 1, "\u7247"], [12123, 1, "\u7259"], [12124, 1, "\u725B"], [12125, 1, "\u72AC"], [12126, 1, "\u7384"], [12127, 1, "\u7389"], [12128, 1, "\u74DC"], [12129, 1, "\u74E6"], [12130, 1, "\u7518"], [12131, 1, "\u751F"], [12132, 1, "\u7528"], [12133, 1, "\u7530"], [12134, 1, "\u758B"], [12135, 1, "\u7592"], [12136, 1, "\u7676"], [12137, 1, "\u767D"], [12138, 1, "\u76AE"], [12139, 1, "\u76BF"], [12140, 1, "\u76EE"], [12141, 1, "\u77DB"], [12142, 1, "\u77E2"], [12143, 1, "\u77F3"], [12144, 1, "\u793A"], [12145, 1, "\u79B8"], [12146, 1, "\u79BE"], [12147, 1, "\u7A74"], [12148, 1, "\u7ACB"], [12149, 1, "\u7AF9"], [12150, 1, "\u7C73"], [12151, 1, "\u7CF8"], [12152, 1, "\u7F36"], [12153, 1, "\u7F51"], [12154, 1, "\u7F8A"], [12155, 1, "\u7FBD"], [12156, 1, "\u8001"], [12157, 1, "\u800C"], [12158, 1, "\u8012"], [12159, 1, "\u8033"], [12160, 1, "\u807F"], [12161, 1, "\u8089"], [12162, 1, "\u81E3"], [12163, 1, "\u81EA"], [12164, 1, "\u81F3"], [12165, 1, "\u81FC"], [12166, 1, "\u820C"], [12167, 1, "\u821B"], [12168, 1, "\u821F"], [12169, 1, "\u826E"], [12170, 1, "\u8272"], [12171, 1, "\u8278"], [12172, 1, "\u864D"], [12173, 1, "\u866B"], [12174, 1, "\u8840"], [12175, 1, "\u884C"], [12176, 1, "\u8863"], [12177, 1, "\u897E"], [12178, 1, "\u898B"], [12179, 1, "\u89D2"], [12180, 1, "\u8A00"], [12181, 1, "\u8C37"], [12182, 1, "\u8C46"], [12183, 1, "\u8C55"], [12184, 1, "\u8C78"], [12185, 1, "\u8C9D"], [12186, 1, "\u8D64"], [12187, 1, "\u8D70"], [12188, 1, "\u8DB3"], [12189, 1, "\u8EAB"], [12190, 1, "\u8ECA"], [12191, 1, "\u8F9B"], [12192, 1, "\u8FB0"], [12193, 1, "\u8FB5"], [12194, 1, "\u9091"], [12195, 1, "\u9149"], [12196, 1, "\u91C6"], [12197, 1, "\u91CC"], [12198, 1, "\u91D1"], [12199, 1, "\u9577"], [12200, 1, "\u9580"], [12201, 1, "\u961C"], [12202, 1, "\u96B6"], [12203, 1, "\u96B9"], [12204, 1, "\u96E8"], [12205, 1, "\u9751"], [12206, 1, "\u975E"], [12207, 1, "\u9762"], [12208, 1, "\u9769"], [12209, 1, "\u97CB"], [12210, 1, "\u97ED"], [12211, 1, "\u97F3"], [12212, 1, "\u9801"], [12213, 1, "\u98A8"], [12214, 1, "\u98DB"], [12215, 1, "\u98DF"], [12216, 1, "\u9996"], [12217, 1, "\u9999"], [12218, 1, "\u99AC"], [12219, 1, "\u9AA8"], [12220, 1, "\u9AD8"], [12221, 1, "\u9ADF"], [12222, 1, "\u9B25"], [12223, 1, "\u9B2F"], [12224, 1, "\u9B32"], [12225, 1, "\u9B3C"], [12226, 1, "\u9B5A"], [12227, 1, "\u9CE5"], [12228, 1, "\u9E75"], [12229, 1, "\u9E7F"], [12230, 1, "\u9EA5"], [12231, 1, "\u9EBB"], [12232, 1, "\u9EC3"], [12233, 1, "\u9ECD"], [12234, 1, "\u9ED1"], [12235, 1, "\u9EF9"], [12236, 1, "\u9EFD"], [12237, 1, "\u9F0E"], [12238, 1, "\u9F13"], [12239, 1, "\u9F20"], [12240, 1, "\u9F3B"], [12241, 1, "\u9F4A"], [12242, 1, "\u9F52"], [12243, 1, "\u9F8D"], [12244, 1, "\u9F9C"], [12245, 1, "\u9FA0"], [[12246, 12271], 3], [[12272, 12283], 3], [[12284, 12287], 3], [12288, 5, " "], [12289, 2], [12290, 1, "."], [[12291, 12292], 2], [[12293, 12295], 2], [[12296, 12329], 2], [[12330, 12333], 2], [[12334, 12341], 2], [12342, 1, "\u3012"], [12343, 2], [12344, 1, "\u5341"], [12345, 1, "\u5344"], [12346, 1, "\u5345"], [12347, 2], [12348, 2], [12349, 2], [12350, 2], [12351, 2], [12352, 3], [[12353, 12436], 2], [[12437, 12438], 2], [[12439, 12440], 3], [[12441, 12442], 2], [12443, 5, " \u3099"], [12444, 5, " \u309A"], [[12445, 12446], 2], [12447, 1, "\u3088\u308A"], [12448, 2], [[12449, 12542], 2], [12543, 1, "\u30B3\u30C8"], [[12544, 12548], 3], [[12549, 12588], 2], [12589, 2], [12590, 2], [12591, 2], [12592, 3], [12593, 1, "\u1100"], [12594, 1, "\u1101"], [12595, 1, "\u11AA"], [12596, 1, "\u1102"], [12597, 1, "\u11AC"], [12598, 1, "\u11AD"], [12599, 1, "\u1103"], [12600, 1, "\u1104"], [12601, 1, "\u1105"], [12602, 1, "\u11B0"], [12603, 1, "\u11B1"], [12604, 1, "\u11B2"], [12605, 1, "\u11B3"], [12606, 1, "\u11B4"], [12607, 1, "\u11B5"], [12608, 1, "\u111A"], [12609, 1, "\u1106"], [12610, 1, "\u1107"], [12611, 1, "\u1108"], [12612, 1, "\u1121"], [12613, 1, "\u1109"], [12614, 1, "\u110A"], [12615, 1, "\u110B"], [12616, 1, "\u110C"], [12617, 1, "\u110D"], [12618, 1, "\u110E"], [12619, 1, "\u110F"], [12620, 1, "\u1110"], [12621, 1, "\u1111"], [12622, 1, "\u1112"], [12623, 1, "\u1161"], [12624, 1, "\u1162"], [12625, 1, "\u1163"], [12626, 1, "\u1164"], [12627, 1, "\u1165"], [12628, 1, "\u1166"], [12629, 1, "\u1167"], [12630, 1, "\u1168"], [12631, 1, "\u1169"], [12632, 1, "\u116A"], [12633, 1, "\u116B"], [12634, 1, "\u116C"], [12635, 1, "\u116D"], [12636, 1, "\u116E"], [12637, 1, "\u116F"], [12638, 1, "\u1170"], [12639, 1, "\u1171"], [12640, 1, "\u1172"], [12641, 1, "\u1173"], [12642, 1, "\u1174"], [12643, 1, "\u1175"], [12644, 3], [12645, 1, "\u1114"], [12646, 1, "\u1115"], [12647, 1, "\u11C7"], [12648, 1, "\u11C8"], [12649, 1, "\u11CC"], [12650, 1, "\u11CE"], [12651, 1, "\u11D3"], [12652, 1, "\u11D7"], [12653, 1, "\u11D9"], [12654, 1, "\u111C"], [12655, 1, "\u11DD"], [12656, 1, "\u11DF"], [12657, 1, "\u111D"], [12658, 1, "\u111E"], [12659, 1, "\u1120"], [12660, 1, "\u1122"], [12661, 1, "\u1123"], [12662, 1, "\u1127"], [12663, 1, "\u1129"], [12664, 1, "\u112B"], [12665, 1, "\u112C"], [12666, 1, "\u112D"], [12667, 1, "\u112E"], [12668, 1, "\u112F"], [12669, 1, "\u1132"], [12670, 1, "\u1136"], [12671, 1, "\u1140"], [12672, 1, "\u1147"], [12673, 1, "\u114C"], [12674, 1, "\u11F1"], [12675, 1, "\u11F2"], [12676, 1, "\u1157"], [12677, 1, "\u1158"], [12678, 1, "\u1159"], [12679, 1, "\u1184"], [12680, 1, "\u1185"], [12681, 1, "\u1188"], [12682, 1, "\u1191"], [12683, 1, "\u1192"], [12684, 1, "\u1194"], [12685, 1, "\u119E"], [12686, 1, "\u11A1"], [12687, 3], [[12688, 12689], 2], [12690, 1, "\u4E00"], [12691, 1, "\u4E8C"], [12692, 1, "\u4E09"], [12693, 1, "\u56DB"], [12694, 1, "\u4E0A"], [12695, 1, "\u4E2D"], [12696, 1, "\u4E0B"], [12697, 1, "\u7532"], [12698, 1, "\u4E59"], [12699, 1, "\u4E19"], [12700, 1, "\u4E01"], [12701, 1, "\u5929"], [12702, 1, "\u5730"], [12703, 1, "\u4EBA"], [[12704, 12727], 2], [[12728, 12730], 2], [[12731, 12735], 2], [[12736, 12751], 2], [[12752, 12771], 2], [[12772, 12782], 3], [12783, 3], [[12784, 12799], 2], [12800, 5, "(\u1100)"], [12801, 5, "(\u1102)"], [12802, 5, "(\u1103)"], [12803, 5, "(\u1105)"], [12804, 5, "(\u1106)"], [12805, 5, "(\u1107)"], [12806, 5, "(\u1109)"], [12807, 5, "(\u110B)"], [12808, 5, "(\u110C)"], [12809, 5, "(\u110E)"], [12810, 5, "(\u110F)"], [12811, 5, "(\u1110)"], [12812, 5, "(\u1111)"], [12813, 5, "(\u1112)"], [12814, 5, "(\uAC00)"], [12815, 5, "(\uB098)"], [12816, 5, "(\uB2E4)"], [12817, 5, "(\uB77C)"], [12818, 5, "(\uB9C8)"], [12819, 5, "(\uBC14)"], [12820, 5, "(\uC0AC)"], [12821, 5, "(\uC544)"], [12822, 5, "(\uC790)"], [12823, 5, "(\uCC28)"], [12824, 5, "(\uCE74)"], [12825, 5, "(\uD0C0)"], [12826, 5, "(\uD30C)"], [12827, 5, "(\uD558)"], [12828, 5, "(\uC8FC)"], [12829, 5, "(\uC624\uC804)"], [12830, 5, "(\uC624\uD6C4)"], [12831, 3], [12832, 5, "(\u4E00)"], [12833, 5, "(\u4E8C)"], [12834, 5, "(\u4E09)"], [12835, 5, "(\u56DB)"], [12836, 5, "(\u4E94)"], [12837, 5, "(\u516D)"], [12838, 5, "(\u4E03)"], [12839, 5, "(\u516B)"], [12840, 5, "(\u4E5D)"], [12841, 5, "(\u5341)"], [12842, 5, "(\u6708)"], [12843, 5, "(\u706B)"], [12844, 5, "(\u6C34)"], [12845, 5, "(\u6728)"], [12846, 5, "(\u91D1)"], [12847, 5, "(\u571F)"], [12848, 5, "(\u65E5)"], [12849, 5, "(\u682A)"], [12850, 5, "(\u6709)"], [12851, 5, "(\u793E)"], [12852, 5, "(\u540D)"], [12853, 5, "(\u7279)"], [12854, 5, "(\u8CA1)"], [12855, 5, "(\u795D)"], [12856, 5, "(\u52B4)"], [12857, 5, "(\u4EE3)"], [12858, 5, "(\u547C)"], [12859, 5, "(\u5B66)"], [12860, 5, "(\u76E3)"], [12861, 5, "(\u4F01)"], [12862, 5, "(\u8CC7)"], [12863, 5, "(\u5354)"], [12864, 5, "(\u796D)"], [12865, 5, "(\u4F11)"], [12866, 5, "(\u81EA)"], [12867, 5, "(\u81F3)"], [12868, 1, "\u554F"], [12869, 1, "\u5E7C"], [12870, 1, "\u6587"], [12871, 1, "\u7B8F"], [[12872, 12879], 2], [12880, 1, "pte"], [12881, 1, "21"], [12882, 1, "22"], [12883, 1, "23"], [12884, 1, "24"], [12885, 1, "25"], [12886, 1, "26"], [12887, 1, "27"], [12888, 1, "28"], [12889, 1, "29"], [12890, 1, "30"], [12891, 1, "31"], [12892, 1, "32"], [12893, 1, "33"], [12894, 1, "34"], [12895, 1, "35"], [12896, 1, "\u1100"], [12897, 1, "\u1102"], [12898, 1, "\u1103"], [12899, 1, "\u1105"], [12900, 1, "\u1106"], [12901, 1, "\u1107"], [12902, 1, "\u1109"], [12903, 1, "\u110B"], [12904, 1, "\u110C"], [12905, 1, "\u110E"], [12906, 1, "\u110F"], [12907, 1, "\u1110"], [12908, 1, "\u1111"], [12909, 1, "\u1112"], [12910, 1, "\uAC00"], [12911, 1, "\uB098"], [12912, 1, "\uB2E4"], [12913, 1, "\uB77C"], [12914, 1, "\uB9C8"], [12915, 1, "\uBC14"], [12916, 1, "\uC0AC"], [12917, 1, "\uC544"], [12918, 1, "\uC790"], [12919, 1, "\uCC28"], [12920, 1, "\uCE74"], [12921, 1, "\uD0C0"], [12922, 1, "\uD30C"], [12923, 1, "\uD558"], [12924, 1, "\uCC38\uACE0"], [12925, 1, "\uC8FC\uC758"], [12926, 1, "\uC6B0"], [12927, 2], [12928, 1, "\u4E00"], [12929, 1, "\u4E8C"], [12930, 1, "\u4E09"], [12931, 1, "\u56DB"], [12932, 1, "\u4E94"], [12933, 1, "\u516D"], [12934, 1, "\u4E03"], [12935, 1, "\u516B"], [12936, 1, "\u4E5D"], [12937, 1, "\u5341"], [12938, 1, "\u6708"], [12939, 1, "\u706B"], [12940, 1, "\u6C34"], [12941, 1, "\u6728"], [12942, 1, "\u91D1"], [12943, 1, "\u571F"], [12944, 1, "\u65E5"], [12945, 1, "\u682A"], [12946, 1, "\u6709"], [12947, 1, "\u793E"], [12948, 1, "\u540D"], [12949, 1, "\u7279"], [12950, 1, "\u8CA1"], [12951, 1, "\u795D"], [12952, 1, "\u52B4"], [12953, 1, "\u79D8"], [12954, 1, "\u7537"], [12955, 1, "\u5973"], [12956, 1, "\u9069"], [12957, 1, "\u512A"], [12958, 1, "\u5370"], [12959, 1, "\u6CE8"], [12960, 1, "\u9805"], [12961, 1, "\u4F11"], [12962, 1, "\u5199"], [12963, 1, "\u6B63"], [12964, 1, "\u4E0A"], [12965, 1, "\u4E2D"], [12966, 1, "\u4E0B"], [12967, 1, "\u5DE6"], [12968, 1, "\u53F3"], [12969, 1, "\u533B"], [12970, 1, "\u5B97"], [12971, 1, "\u5B66"], [12972, 1, "\u76E3"], [12973, 1, "\u4F01"], [12974, 1, "\u8CC7"], [12975, 1, "\u5354"], [12976, 1, "\u591C"], [12977, 1, "36"], [12978, 1, "37"], [12979, 1, "38"], [12980, 1, "39"], [12981, 1, "40"], [12982, 1, "41"], [12983, 1, "42"], [12984, 1, "43"], [12985, 1, "44"], [12986, 1, "45"], [12987, 1, "46"], [12988, 1, "47"], [12989, 1, "48"], [12990, 1, "49"], [12991, 1, "50"], [12992, 1, "1\u6708"], [12993, 1, "2\u6708"], [12994, 1, "3\u6708"], [12995, 1, "4\u6708"], [12996, 1, "5\u6708"], [12997, 1, "6\u6708"], [12998, 1, "7\u6708"], [12999, 1, "8\u6708"], [13e3, 1, "9\u6708"], [13001, 1, "10\u6708"], [13002, 1, "11\u6708"], [13003, 1, "12\u6708"], [13004, 1, "hg"], [13005, 1, "erg"], [13006, 1, "ev"], [13007, 1, "ltd"], [13008, 1, "\u30A2"], [13009, 1, "\u30A4"], [13010, 1, "\u30A6"], [13011, 1, "\u30A8"], [13012, 1, "\u30AA"], [13013, 1, "\u30AB"], [13014, 1, "\u30AD"], [13015, 1, "\u30AF"], [13016, 1, "\u30B1"], [13017, 1, "\u30B3"], [13018, 1, "\u30B5"], [13019, 1, "\u30B7"], [13020, 1, "\u30B9"], [13021, 1, "\u30BB"], [13022, 1, "\u30BD"], [13023, 1, "\u30BF"], [13024, 1, "\u30C1"], [13025, 1, "\u30C4"], [13026, 1, "\u30C6"], [13027, 1, "\u30C8"], [13028, 1, "\u30CA"], [13029, 1, "\u30CB"], [13030, 1, "\u30CC"], [13031, 1, "\u30CD"], [13032, 1, "\u30CE"], [13033, 1, "\u30CF"], [13034, 1, "\u30D2"], [13035, 1, "\u30D5"], [13036, 1, "\u30D8"], [13037, 1, "\u30DB"], [13038, 1, "\u30DE"], [13039, 1, "\u30DF"], [13040, 1, "\u30E0"], [13041, 1, "\u30E1"], [13042, 1, "\u30E2"], [13043, 1, "\u30E4"], [13044, 1, "\u30E6"], [13045, 1, "\u30E8"], [13046, 1, "\u30E9"], [13047, 1, "\u30EA"], [13048, 1, "\u30EB"], [13049, 1, "\u30EC"], [13050, 1, "\u30ED"], [13051, 1, "\u30EF"], [13052, 1, "\u30F0"], [13053, 1, "\u30F1"], [13054, 1, "\u30F2"], [13055, 1, "\u4EE4\u548C"], [13056, 1, "\u30A2\u30D1\u30FC\u30C8"], [13057, 1, "\u30A2\u30EB\u30D5\u30A1"], [13058, 1, "\u30A2\u30F3\u30DA\u30A2"], [13059, 1, "\u30A2\u30FC\u30EB"], [13060, 1, "\u30A4\u30CB\u30F3\u30B0"], [13061, 1, "\u30A4\u30F3\u30C1"], [13062, 1, "\u30A6\u30A9\u30F3"], [13063, 1, "\u30A8\u30B9\u30AF\u30FC\u30C9"], [13064, 1, "\u30A8\u30FC\u30AB\u30FC"], [13065, 1, "\u30AA\u30F3\u30B9"], [13066, 1, "\u30AA\u30FC\u30E0"], [13067, 1, "\u30AB\u30A4\u30EA"], [13068, 1, "\u30AB\u30E9\u30C3\u30C8"], [13069, 1, "\u30AB\u30ED\u30EA\u30FC"], [13070, 1, "\u30AC\u30ED\u30F3"], [13071, 1, "\u30AC\u30F3\u30DE"], [13072, 1, "\u30AE\u30AC"], [13073, 1, "\u30AE\u30CB\u30FC"], [13074, 1, "\u30AD\u30E5\u30EA\u30FC"], [13075, 1, "\u30AE\u30EB\u30C0\u30FC"], [13076, 1, "\u30AD\u30ED"], [13077, 1, "\u30AD\u30ED\u30B0\u30E9\u30E0"], [13078, 1, "\u30AD\u30ED\u30E1\u30FC\u30C8\u30EB"], [13079, 1, "\u30AD\u30ED\u30EF\u30C3\u30C8"], [13080, 1, "\u30B0\u30E9\u30E0"], [13081, 1, "\u30B0\u30E9\u30E0\u30C8\u30F3"], [13082, 1, "\u30AF\u30EB\u30BC\u30A4\u30ED"], [13083, 1, "\u30AF\u30ED\u30FC\u30CD"], [13084, 1, "\u30B1\u30FC\u30B9"], [13085, 1, "\u30B3\u30EB\u30CA"], [13086, 1, "\u30B3\u30FC\u30DD"], [13087, 1, "\u30B5\u30A4\u30AF\u30EB"], [13088, 1, "\u30B5\u30F3\u30C1\u30FC\u30E0"], [13089, 1, "\u30B7\u30EA\u30F3\u30B0"], [13090, 1, "\u30BB\u30F3\u30C1"], [13091, 1, "\u30BB\u30F3\u30C8"], [13092, 1, "\u30C0\u30FC\u30B9"], [13093, 1, "\u30C7\u30B7"], [13094, 1, "\u30C9\u30EB"], [13095, 1, "\u30C8\u30F3"], [13096, 1, "\u30CA\u30CE"], [13097, 1, "\u30CE\u30C3\u30C8"], [13098, 1, "\u30CF\u30A4\u30C4"], [13099, 1, "\u30D1\u30FC\u30BB\u30F3\u30C8"], [13100, 1, "\u30D1\u30FC\u30C4"], [13101, 1, "\u30D0\u30FC\u30EC\u30EB"], [13102, 1, "\u30D4\u30A2\u30B9\u30C8\u30EB"], [13103, 1, "\u30D4\u30AF\u30EB"], [13104, 1, "\u30D4\u30B3"], [13105, 1, "\u30D3\u30EB"], [13106, 1, "\u30D5\u30A1\u30E9\u30C3\u30C9"], [13107, 1, "\u30D5\u30A3\u30FC\u30C8"], [13108, 1, "\u30D6\u30C3\u30B7\u30A7\u30EB"], [13109, 1, "\u30D5\u30E9\u30F3"], [13110, 1, "\u30D8\u30AF\u30BF\u30FC\u30EB"], [13111, 1, "\u30DA\u30BD"], [13112, 1, "\u30DA\u30CB\u30D2"], [13113, 1, "\u30D8\u30EB\u30C4"], [13114, 1, "\u30DA\u30F3\u30B9"], [13115, 1, "\u30DA\u30FC\u30B8"], [13116, 1, "\u30D9\u30FC\u30BF"], [13117, 1, "\u30DD\u30A4\u30F3\u30C8"], [13118, 1, "\u30DC\u30EB\u30C8"], [13119, 1, "\u30DB\u30F3"], [13120, 1, "\u30DD\u30F3\u30C9"], [13121, 1, "\u30DB\u30FC\u30EB"], [13122, 1, "\u30DB\u30FC\u30F3"], [13123, 1, "\u30DE\u30A4\u30AF\u30ED"], [13124, 1, "\u30DE\u30A4\u30EB"], [13125, 1, "\u30DE\u30C3\u30CF"], [13126, 1, "\u30DE\u30EB\u30AF"], [13127, 1, "\u30DE\u30F3\u30B7\u30E7\u30F3"], [13128, 1, "\u30DF\u30AF\u30ED\u30F3"], [13129, 1, "\u30DF\u30EA"], [13130, 1, "\u30DF\u30EA\u30D0\u30FC\u30EB"], [13131, 1, "\u30E1\u30AC"], [13132, 1, "\u30E1\u30AC\u30C8\u30F3"], [13133, 1, "\u30E1\u30FC\u30C8\u30EB"], [13134, 1, "\u30E4\u30FC\u30C9"], [13135, 1, "\u30E4\u30FC\u30EB"], [13136, 1, "\u30E6\u30A2\u30F3"], [13137, 1, "\u30EA\u30C3\u30C8\u30EB"], [13138, 1, "\u30EA\u30E9"], [13139, 1, "\u30EB\u30D4\u30FC"], [13140, 1, "\u30EB\u30FC\u30D6\u30EB"], [13141, 1, "\u30EC\u30E0"], [13142, 1, "\u30EC\u30F3\u30C8\u30B2\u30F3"], [13143, 1, "\u30EF\u30C3\u30C8"], [13144, 1, "0\u70B9"], [13145, 1, "1\u70B9"], [13146, 1, "2\u70B9"], [13147, 1, "3\u70B9"], [13148, 1, "4\u70B9"], [13149, 1, "5\u70B9"], [13150, 1, "6\u70B9"], [13151, 1, "7\u70B9"], [13152, 1, "8\u70B9"], [13153, 1, "9\u70B9"], [13154, 1, "10\u70B9"], [13155, 1, "11\u70B9"], [13156, 1, "12\u70B9"], [13157, 1, "13\u70B9"], [13158, 1, "14\u70B9"], [13159, 1, "15\u70B9"], [13160, 1, "16\u70B9"], [13161, 1, "17\u70B9"], [13162, 1, "18\u70B9"], [13163, 1, "19\u70B9"], [13164, 1, "20\u70B9"], [13165, 1, "21\u70B9"], [13166, 1, "22\u70B9"], [13167, 1, "23\u70B9"], [13168, 1, "24\u70B9"], [13169, 1, "hpa"], [13170, 1, "da"], [13171, 1, "au"], [13172, 1, "bar"], [13173, 1, "ov"], [13174, 1, "pc"], [13175, 1, "dm"], [13176, 1, "dm2"], [13177, 1, "dm3"], [13178, 1, "iu"], [13179, 1, "\u5E73\u6210"], [13180, 1, "\u662D\u548C"], [13181, 1, "\u5927\u6B63"], [13182, 1, "\u660E\u6CBB"], [13183, 1, "\u682A\u5F0F\u4F1A\u793E"], [13184, 1, "pa"], [13185, 1, "na"], [13186, 1, "\u03BCa"], [13187, 1, "ma"], [13188, 1, "ka"], [13189, 1, "kb"], [13190, 1, "mb"], [13191, 1, "gb"], [13192, 1, "cal"], [13193, 1, "kcal"], [13194, 1, "pf"], [13195, 1, "nf"], [13196, 1, "\u03BCf"], [13197, 1, "\u03BCg"], [13198, 1, "mg"], [13199, 1, "kg"], [13200, 1, "hz"], [13201, 1, "khz"], [13202, 1, "mhz"], [13203, 1, "ghz"], [13204, 1, "thz"], [13205, 1, "\u03BCl"], [13206, 1, "ml"], [13207, 1, "dl"], [13208, 1, "kl"], [13209, 1, "fm"], [13210, 1, "nm"], [13211, 1, "\u03BCm"], [13212, 1, "mm"], [13213, 1, "cm"], [13214, 1, "km"], [13215, 1, "mm2"], [13216, 1, "cm2"], [13217, 1, "m2"], [13218, 1, "km2"], [13219, 1, "mm3"], [13220, 1, "cm3"], [13221, 1, "m3"], [13222, 1, "km3"], [13223, 1, "m\u2215s"], [13224, 1, "m\u2215s2"], [13225, 1, "pa"], [13226, 1, "kpa"], [13227, 1, "mpa"], [13228, 1, "gpa"], [13229, 1, "rad"], [13230, 1, "rad\u2215s"], [13231, 1, "rad\u2215s2"], [13232, 1, "ps"], [13233, 1, "ns"], [13234, 1, "\u03BCs"], [13235, 1, "ms"], [13236, 1, "pv"], [13237, 1, "nv"], [13238, 1, "\u03BCv"], [13239, 1, "mv"], [13240, 1, "kv"], [13241, 1, "mv"], [13242, 1, "pw"], [13243, 1, "nw"], [13244, 1, "\u03BCw"], [13245, 1, "mw"], [13246, 1, "kw"], [13247, 1, "mw"], [13248, 1, "k\u03C9"], [13249, 1, "m\u03C9"], [13250, 3], [13251, 1, "bq"], [13252, 1, "cc"], [13253, 1, "cd"], [13254, 1, "c\u2215kg"], [13255, 3], [13256, 1, "db"], [13257, 1, "gy"], [13258, 1, "ha"], [13259, 1, "hp"], [13260, 1, "in"], [13261, 1, "kk"], [13262, 1, "km"], [13263, 1, "kt"], [13264, 1, "lm"], [13265, 1, "ln"], [13266, 1, "log"], [13267, 1, "lx"], [13268, 1, "mb"], [13269, 1, "mil"], [13270, 1, "mol"], [13271, 1, "ph"], [13272, 3], [13273, 1, "ppm"], [13274, 1, "pr"], [13275, 1, "sr"], [13276, 1, "sv"], [13277, 1, "wb"], [13278, 1, "v\u2215m"], [13279, 1, "a\u2215m"], [13280, 1, "1\u65E5"], [13281, 1, "2\u65E5"], [13282, 1, "3\u65E5"], [13283, 1, "4\u65E5"], [13284, 1, "5\u65E5"], [13285, 1, "6\u65E5"], [13286, 1, "7\u65E5"], [13287, 1, "8\u65E5"], [13288, 1, "9\u65E5"], [13289, 1, "10\u65E5"], [13290, 1, "11\u65E5"], [13291, 1, "12\u65E5"], [13292, 1, "13\u65E5"], [13293, 1, "14\u65E5"], [13294, 1, "15\u65E5"], [13295, 1, "16\u65E5"], [13296, 1, "17\u65E5"], [13297, 1, "18\u65E5"], [13298, 1, "19\u65E5"], [13299, 1, "20\u65E5"], [13300, 1, "21\u65E5"], [13301, 1, "22\u65E5"], [13302, 1, "23\u65E5"], [13303, 1, "24\u65E5"], [13304, 1, "25\u65E5"], [13305, 1, "26\u65E5"], [13306, 1, "27\u65E5"], [13307, 1, "28\u65E5"], [13308, 1, "29\u65E5"], [13309, 1, "30\u65E5"], [13310, 1, "31\u65E5"], [13311, 1, "gal"], [[13312, 19893], 2], [[19894, 19903], 2], [[19904, 19967], 2], [[19968, 40869], 2], [[40870, 40891], 2], [[40892, 40899], 2], [[40900, 40907], 2], [40908, 2], [[40909, 40917], 2], [[40918, 40938], 2], [[40939, 40943], 2], [[40944, 40956], 2], [[40957, 40959], 2], [[40960, 42124], 2], [[42125, 42127], 3], [[42128, 42145], 2], [[42146, 42147], 2], [[42148, 42163], 2], [42164, 2], [[42165, 42176], 2], [42177, 2], [[42178, 42180], 2], [42181, 2], [42182, 2], [[42183, 42191], 3], [[42192, 42237], 2], [[42238, 42239], 2], [[42240, 42508], 2], [[42509, 42511], 2], [[42512, 42539], 2], [[42540, 42559], 3], [42560, 1, "\uA641"], [42561, 2], [42562, 1, "\uA643"], [42563, 2], [42564, 1, "\uA645"], [42565, 2], [42566, 1, "\uA647"], [42567, 2], [42568, 1, "\uA649"], [42569, 2], [42570, 1, "\uA64B"], [42571, 2], [42572, 1, "\uA64D"], [42573, 2], [42574, 1, "\uA64F"], [42575, 2], [42576, 1, "\uA651"], [42577, 2], [42578, 1, "\uA653"], [42579, 2], [42580, 1, "\uA655"], [42581, 2], [42582, 1, "\uA657"], [42583, 2], [42584, 1, "\uA659"], [42585, 2], [42586, 1, "\uA65B"], [42587, 2], [42588, 1, "\uA65D"], [42589, 2], [42590, 1, "\uA65F"], [42591, 2], [42592, 1, "\uA661"], [42593, 2], [42594, 1, "\uA663"], [42595, 2], [42596, 1, "\uA665"], [42597, 2], [42598, 1, "\uA667"], [42599, 2], [42600, 1, "\uA669"], [42601, 2], [42602, 1, "\uA66B"], [42603, 2], [42604, 1, "\uA66D"], [[42605, 42607], 2], [[42608, 42611], 2], [[42612, 42619], 2], [[42620, 42621], 2], [42622, 2], [42623, 2], [42624, 1, "\uA681"], [42625, 2], [42626, 1, "\uA683"], [42627, 2], [42628, 1, "\uA685"], [42629, 2], [42630, 1, "\uA687"], [42631, 2], [42632, 1, "\uA689"], [42633, 2], [42634, 1, "\uA68B"], [42635, 2], [42636, 1, "\uA68D"], [42637, 2], [42638, 1, "\uA68F"], [42639, 2], [42640, 1, "\uA691"], [42641, 2], [42642, 1, "\uA693"], [42643, 2], [42644, 1, "\uA695"], [42645, 2], [42646, 1, "\uA697"], [42647, 2], [42648, 1, "\uA699"], [42649, 2], [42650, 1, "\uA69B"], [42651, 2], [42652, 1, "\u044A"], [42653, 1, "\u044C"], [42654, 2], [42655, 2], [[42656, 42725], 2], [[42726, 42735], 2], [[42736, 42737], 2], [[42738, 42743], 2], [[42744, 42751], 3], [[42752, 42774], 2], [[42775, 42778], 2], [[42779, 42783], 2], [[42784, 42785], 2], [42786, 1, "\uA723"], [42787, 2], [42788, 1, "\uA725"], [42789, 2], [42790, 1, "\uA727"], [42791, 2], [42792, 1, "\uA729"], [42793, 2], [42794, 1, "\uA72B"], [42795, 2], [42796, 1, "\uA72D"], [42797, 2], [42798, 1, "\uA72F"], [[42799, 42801], 2], [42802, 1, "\uA733"], [42803, 2], [42804, 1, "\uA735"], [42805, 2], [42806, 1, "\uA737"], [42807, 2], [42808, 1, "\uA739"], [42809, 2], [42810, 1, "\uA73B"], [42811, 2], [42812, 1, "\uA73D"], [42813, 2], [42814, 1, "\uA73F"], [42815, 2], [42816, 1, "\uA741"], [42817, 2], [42818, 1, "\uA743"], [42819, 2], [42820, 1, "\uA745"], [42821, 2], [42822, 1, "\uA747"], [42823, 2], [42824, 1, "\uA749"], [42825, 2], [42826, 1, "\uA74B"], [42827, 2], [42828, 1, "\uA74D"], [42829, 2], [42830, 1, "\uA74F"], [42831, 2], [42832, 1, "\uA751"], [42833, 2], [42834, 1, "\uA753"], [42835, 2], [42836, 1, "\uA755"], [42837, 2], [42838, 1, "\uA757"], [42839, 2], [42840, 1, "\uA759"], [42841, 2], [42842, 1, "\uA75B"], [42843, 2], [42844, 1, "\uA75D"], [42845, 2], [42846, 1, "\uA75F"], [42847, 2], [42848, 1, "\uA761"], [42849, 2], [42850, 1, "\uA763"], [42851, 2], [42852, 1, "\uA765"], [42853, 2], [42854, 1, "\uA767"], [42855, 2], [42856, 1, "\uA769"], [42857, 2], [42858, 1, "\uA76B"], [42859, 2], [42860, 1, "\uA76D"], [42861, 2], [42862, 1, "\uA76F"], [42863, 2], [42864, 1, "\uA76F"], [[42865, 42872], 2], [42873, 1, "\uA77A"], [42874, 2], [42875, 1, "\uA77C"], [42876, 2], [42877, 1, "\u1D79"], [42878, 1, "\uA77F"], [42879, 2], [42880, 1, "\uA781"], [42881, 2], [42882, 1, "\uA783"], [42883, 2], [42884, 1, "\uA785"], [42885, 2], [42886, 1, "\uA787"], [[42887, 42888], 2], [[42889, 42890], 2], [42891, 1, "\uA78C"], [42892, 2], [42893, 1, "\u0265"], [42894, 2], [42895, 2], [42896, 1, "\uA791"], [42897, 2], [42898, 1, "\uA793"], [42899, 2], [[42900, 42901], 2], [42902, 1, "\uA797"], [42903, 2], [42904, 1, "\uA799"], [42905, 2], [42906, 1, "\uA79B"], [42907, 2], [42908, 1, "\uA79D"], [42909, 2], [42910, 1, "\uA79F"], [42911, 2], [42912, 1, "\uA7A1"], [42913, 2], [42914, 1, "\uA7A3"], [42915, 2], [42916, 1, "\uA7A5"], [42917, 2], [42918, 1, "\uA7A7"], [42919, 2], [42920, 1, "\uA7A9"], [42921, 2], [42922, 1, "\u0266"], [42923, 1, "\u025C"], [42924, 1, "\u0261"], [42925, 1, "\u026C"], [42926, 1, "\u026A"], [42927, 2], [42928, 1, "\u029E"], [42929, 1, "\u0287"], [42930, 1, "\u029D"], [42931, 1, "\uAB53"], [42932, 1, "\uA7B5"], [42933, 2], [42934, 1, "\uA7B7"], [42935, 2], [42936, 1, "\uA7B9"], [42937, 2], [42938, 1, "\uA7BB"], [42939, 2], [42940, 1, "\uA7BD"], [42941, 2], [42942, 1, "\uA7BF"], [42943, 2], [42944, 1, "\uA7C1"], [42945, 2], [42946, 1, "\uA7C3"], [42947, 2], [42948, 1, "\uA794"], [42949, 1, "\u0282"], [42950, 1, "\u1D8E"], [42951, 1, "\uA7C8"], [42952, 2], [42953, 1, "\uA7CA"], [42954, 2], [[42955, 42959], 3], [42960, 1, "\uA7D1"], [42961, 2], [42962, 3], [42963, 2], [42964, 3], [42965, 2], [42966, 1, "\uA7D7"], [42967, 2], [42968, 1, "\uA7D9"], [42969, 2], [[42970, 42993], 3], [42994, 1, "c"], [42995, 1, "f"], [42996, 1, "q"], [42997, 1, "\uA7F6"], [42998, 2], [42999, 2], [43e3, 1, "\u0127"], [43001, 1, "\u0153"], [43002, 2], [[43003, 43007], 2], [[43008, 43047], 2], [[43048, 43051], 2], [43052, 2], [[43053, 43055], 3], [[43056, 43065], 2], [[43066, 43071], 3], [[43072, 43123], 2], [[43124, 43127], 2], [[43128, 43135], 3], [[43136, 43204], 2], [43205, 2], [[43206, 43213], 3], [[43214, 43215], 2], [[43216, 43225], 2], [[43226, 43231], 3], [[43232, 43255], 2], [[43256, 43258], 2], [43259, 2], [43260, 2], [43261, 2], [[43262, 43263], 2], [[43264, 43309], 2], [[43310, 43311], 2], [[43312, 43347], 2], [[43348, 43358], 3], [43359, 2], [[43360, 43388], 2], [[43389, 43391], 3], [[43392, 43456], 2], [[43457, 43469], 2], [43470, 3], [[43471, 43481], 2], [[43482, 43485], 3], [[43486, 43487], 2], [[43488, 43518], 2], [43519, 3], [[43520, 43574], 2], [[43575, 43583], 3], [[43584, 43597], 2], [[43598, 43599], 3], [[43600, 43609], 2], [[43610, 43611], 3], [[43612, 43615], 2], [[43616, 43638], 2], [[43639, 43641], 2], [[43642, 43643], 2], [[43644, 43647], 2], [[43648, 43714], 2], [[43715, 43738], 3], [[43739, 43741], 2], [[43742, 43743], 2], [[43744, 43759], 2], [[43760, 43761], 2], [[43762, 43766], 2], [[43767, 43776], 3], [[43777, 43782], 2], [[43783, 43784], 3], [[43785, 43790], 2], [[43791, 43792], 3], [[43793, 43798], 2], [[43799, 43807], 3], [[43808, 43814], 2], [43815, 3], [[43816, 43822], 2], [43823, 3], [[43824, 43866], 2], [43867, 2], [43868, 1, "\uA727"], [43869, 1, "\uAB37"], [43870, 1, "\u026B"], [43871, 1, "\uAB52"], [[43872, 43875], 2], [[43876, 43877], 2], [[43878, 43879], 2], [43880, 2], [43881, 1, "\u028D"], [[43882, 43883], 2], [[43884, 43887], 3], [43888, 1, "\u13A0"], [43889, 1, "\u13A1"], [43890, 1, "\u13A2"], [43891, 1, "\u13A3"], [43892, 1, "\u13A4"], [43893, 1, "\u13A5"], [43894, 1, "\u13A6"], [43895, 1, "\u13A7"], [43896, 1, "\u13A8"], [43897, 1, "\u13A9"], [43898, 1, "\u13AA"], [43899, 1, "\u13AB"], [43900, 1, "\u13AC"], [43901, 1, "\u13AD"], [43902, 1, "\u13AE"], [43903, 1, "\u13AF"], [43904, 1, "\u13B0"], [43905, 1, "\u13B1"], [43906, 1, "\u13B2"], [43907, 1, "\u13B3"], [43908, 1, "\u13B4"], [43909, 1, "\u13B5"], [43910, 1, "\u13B6"], [43911, 1, "\u13B7"], [43912, 1, "\u13B8"], [43913, 1, "\u13B9"], [43914, 1, "\u13BA"], [43915, 1, "\u13BB"], [43916, 1, "\u13BC"], [43917, 1, "\u13BD"], [43918, 1, "\u13BE"], [43919, 1, "\u13BF"], [43920, 1, "\u13C0"], [43921, 1, "\u13C1"], [43922, 1, "\u13C2"], [43923, 1, "\u13C3"], [43924, 1, "\u13C4"], [43925, 1, "\u13C5"], [43926, 1, "\u13C6"], [43927, 1, "\u13C7"], [43928, 1, "\u13C8"], [43929, 1, "\u13C9"], [43930, 1, "\u13CA"], [43931, 1, "\u13CB"], [43932, 1, "\u13CC"], [43933, 1, "\u13CD"], [43934, 1, "\u13CE"], [43935, 1, "\u13CF"], [43936, 1, "\u13D0"], [43937, 1, "\u13D1"], [43938, 1, "\u13D2"], [43939, 1, "\u13D3"], [43940, 1, "\u13D4"], [43941, 1, "\u13D5"], [43942, 1, "\u13D6"], [43943, 1, "\u13D7"], [43944, 1, "\u13D8"], [43945, 1, "\u13D9"], [43946, 1, "\u13DA"], [43947, 1, "\u13DB"], [43948, 1, "\u13DC"], [43949, 1, "\u13DD"], [43950, 1, "\u13DE"], [43951, 1, "\u13DF"], [43952, 1, "\u13E0"], [43953, 1, "\u13E1"], [43954, 1, "\u13E2"], [43955, 1, "\u13E3"], [43956, 1, "\u13E4"], [43957, 1, "\u13E5"], [43958, 1, "\u13E6"], [43959, 1, "\u13E7"], [43960, 1, "\u13E8"], [43961, 1, "\u13E9"], [43962, 1, "\u13EA"], [43963, 1, "\u13EB"], [43964, 1, "\u13EC"], [43965, 1, "\u13ED"], [43966, 1, "\u13EE"], [43967, 1, "\u13EF"], [[43968, 44010], 2], [44011, 2], [[44012, 44013], 2], [[44014, 44015], 3], [[44016, 44025], 2], [[44026, 44031], 3], [[44032, 55203], 2], [[55204, 55215], 3], [[55216, 55238], 2], [[55239, 55242], 3], [[55243, 55291], 2], [[55292, 55295], 3], [[55296, 57343], 3], [[57344, 63743], 3], [63744, 1, "\u8C48"], [63745, 1, "\u66F4"], [63746, 1, "\u8ECA"], [63747, 1, "\u8CC8"], [63748, 1, "\u6ED1"], [63749, 1, "\u4E32"], [63750, 1, "\u53E5"], [[63751, 63752], 1, "\u9F9C"], [63753, 1, "\u5951"], [63754, 1, "\u91D1"], [63755, 1, "\u5587"], [63756, 1, "\u5948"], [63757, 1, "\u61F6"], [63758, 1, "\u7669"], [63759, 1, "\u7F85"], [63760, 1, "\u863F"], [63761, 1, "\u87BA"], [63762, 1, "\u88F8"], [63763, 1, "\u908F"], [63764, 1, "\u6A02"], [63765, 1, "\u6D1B"], [63766, 1, "\u70D9"], [63767, 1, "\u73DE"], [63768, 1, "\u843D"], [63769, 1, "\u916A"], [63770, 1, "\u99F1"], [63771, 1, "\u4E82"], [63772, 1, "\u5375"], [63773, 1, "\u6B04"], [63774, 1, "\u721B"], [63775, 1, "\u862D"], [63776, 1, "\u9E1E"], [63777, 1, "\u5D50"], [63778, 1, "\u6FEB"], [63779, 1, "\u85CD"], [63780, 1, "\u8964"], [63781, 1, "\u62C9"], [63782, 1, "\u81D8"], [63783, 1, "\u881F"], [63784, 1, "\u5ECA"], [63785, 1, "\u6717"], [63786, 1, "\u6D6A"], [63787, 1, "\u72FC"], [63788, 1, "\u90CE"], [63789, 1, "\u4F86"], [63790, 1, "\u51B7"], [63791, 1, "\u52DE"], [63792, 1, "\u64C4"], [63793, 1, "\u6AD3"], [63794, 1, "\u7210"], [63795, 1, "\u76E7"], [63796, 1, "\u8001"], [63797, 1, "\u8606"], [63798, 1, "\u865C"], [63799, 1, "\u8DEF"], [63800, 1, "\u9732"], [63801, 1, "\u9B6F"], [63802, 1, "\u9DFA"], [63803, 1, "\u788C"], [63804, 1, "\u797F"], [63805, 1, "\u7DA0"], [63806, 1, "\u83C9"], [63807, 1, "\u9304"], [63808, 1, "\u9E7F"], [63809, 1, "\u8AD6"], [63810, 1, "\u58DF"], [63811, 1, "\u5F04"], [63812, 1, "\u7C60"], [63813, 1, "\u807E"], [63814, 1, "\u7262"], [63815, 1, "\u78CA"], [63816, 1, "\u8CC2"], [63817, 1, "\u96F7"], [63818, 1, "\u58D8"], [63819, 1, "\u5C62"], [63820, 1, "\u6A13"], [63821, 1, "\u6DDA"], [63822, 1, "\u6F0F"], [63823, 1, "\u7D2F"], [63824, 1, "\u7E37"], [63825, 1, "\u964B"], [63826, 1, "\u52D2"], [63827, 1, "\u808B"], [63828, 1, "\u51DC"], [63829, 1, "\u51CC"], [63830, 1, "\u7A1C"], [63831, 1, "\u7DBE"], [63832, 1, "\u83F1"], [63833, 1, "\u9675"], [63834, 1, "\u8B80"], [63835, 1, "\u62CF"], [63836, 1, "\u6A02"], [63837, 1, "\u8AFE"], [63838, 1, "\u4E39"], [63839, 1, "\u5BE7"], [63840, 1, "\u6012"], [63841, 1, "\u7387"], [63842, 1, "\u7570"], [63843, 1, "\u5317"], [63844, 1, "\u78FB"], [63845, 1, "\u4FBF"], [63846, 1, "\u5FA9"], [63847, 1, "\u4E0D"], [63848, 1, "\u6CCC"], [63849, 1, "\u6578"], [63850, 1, "\u7D22"], [63851, 1, "\u53C3"], [63852, 1, "\u585E"], [63853, 1, "\u7701"], [63854, 1, "\u8449"], [63855, 1, "\u8AAA"], [63856, 1, "\u6BBA"], [63857, 1, "\u8FB0"], [63858, 1, "\u6C88"], [63859, 1, "\u62FE"], [63860, 1, "\u82E5"], [63861, 1, "\u63A0"], [63862, 1, "\u7565"], [63863, 1, "\u4EAE"], [63864, 1, "\u5169"], [63865, 1, "\u51C9"], [63866, 1, "\u6881"], [63867, 1, "\u7CE7"], [63868, 1, "\u826F"], [63869, 1, "\u8AD2"], [63870, 1, "\u91CF"], [63871, 1, "\u52F5"], [63872, 1, "\u5442"], [63873, 1, "\u5973"], [63874, 1, "\u5EEC"], [63875, 1, "\u65C5"], [63876, 1, "\u6FFE"], [63877, 1, "\u792A"], [63878, 1, "\u95AD"], [63879, 1, "\u9A6A"], [63880, 1, "\u9E97"], [63881, 1, "\u9ECE"], [63882, 1, "\u529B"], [63883, 1, "\u66C6"], [63884, 1, "\u6B77"], [63885, 1, "\u8F62"], [63886, 1, "\u5E74"], [63887, 1, "\u6190"], [63888, 1, "\u6200"], [63889, 1, "\u649A"], [63890, 1, "\u6F23"], [63891, 1, "\u7149"], [63892, 1, "\u7489"], [63893, 1, "\u79CA"], [63894, 1, "\u7DF4"], [63895, 1, "\u806F"], [63896, 1, "\u8F26"], [63897, 1, "\u84EE"], [63898, 1, "\u9023"], [63899, 1, "\u934A"], [63900, 1, "\u5217"], [63901, 1, "\u52A3"], [63902, 1, "\u54BD"], [63903, 1, "\u70C8"], [63904, 1, "\u88C2"], [63905, 1, "\u8AAA"], [63906, 1, "\u5EC9"], [63907, 1, "\u5FF5"], [63908, 1, "\u637B"], [63909, 1, "\u6BAE"], [63910, 1, "\u7C3E"], [63911, 1, "\u7375"], [63912, 1, "\u4EE4"], [63913, 1, "\u56F9"], [63914, 1, "\u5BE7"], [63915, 1, "\u5DBA"], [63916, 1, "\u601C"], [63917, 1, "\u73B2"], [63918, 1, "\u7469"], [63919, 1, "\u7F9A"], [63920, 1, "\u8046"], [63921, 1, "\u9234"], [63922, 1, "\u96F6"], [63923, 1, "\u9748"], [63924, 1, "\u9818"], [63925, 1, "\u4F8B"], [63926, 1, "\u79AE"], [63927, 1, "\u91B4"], [63928, 1, "\u96B8"], [63929, 1, "\u60E1"], [63930, 1, "\u4E86"], [63931, 1, "\u50DA"], [63932, 1, "\u5BEE"], [63933, 1, "\u5C3F"], [63934, 1, "\u6599"], [63935, 1, "\u6A02"], [63936, 1, "\u71CE"], [63937, 1, "\u7642"], [63938, 1, "\u84FC"], [63939, 1, "\u907C"], [63940, 1, "\u9F8D"], [63941, 1, "\u6688"], [63942, 1, "\u962E"], [63943, 1, "\u5289"], [63944, 1, "\u677B"], [63945, 1, "\u67F3"], [63946, 1, "\u6D41"], [63947, 1, "\u6E9C"], [63948, 1, "\u7409"], [63949, 1, "\u7559"], [63950, 1, "\u786B"], [63951, 1, "\u7D10"], [63952, 1, "\u985E"], [63953, 1, "\u516D"], [63954, 1, "\u622E"], [63955, 1, "\u9678"], [63956, 1, "\u502B"], [63957, 1, "\u5D19"], [63958, 1, "\u6DEA"], [63959, 1, "\u8F2A"], [63960, 1, "\u5F8B"], [63961, 1, "\u6144"], [63962, 1, "\u6817"], [63963, 1, "\u7387"], [63964, 1, "\u9686"], [63965, 1, "\u5229"], [63966, 1, "\u540F"], [63967, 1, "\u5C65"], [63968, 1, "\u6613"], [63969, 1, "\u674E"], [63970, 1, "\u68A8"], [63971, 1, "\u6CE5"], [63972, 1, "\u7406"], [63973, 1, "\u75E2"], [63974, 1, "\u7F79"], [63975, 1, "\u88CF"], [63976, 1, "\u88E1"], [63977, 1, "\u91CC"], [63978, 1, "\u96E2"], [63979, 1, "\u533F"], [63980, 1, "\u6EBA"], [63981, 1, "\u541D"], [63982, 1, "\u71D0"], [63983, 1, "\u7498"], [63984, 1, "\u85FA"], [63985, 1, "\u96A3"], [63986, 1, "\u9C57"], [63987, 1, "\u9E9F"], [63988, 1, "\u6797"], [63989, 1, "\u6DCB"], [63990, 1, "\u81E8"], [63991, 1, "\u7ACB"], [63992, 1, "\u7B20"], [63993, 1, "\u7C92"], [63994, 1, "\u72C0"], [63995, 1, "\u7099"], [63996, 1, "\u8B58"], [63997, 1, "\u4EC0"], [63998, 1, "\u8336"], [63999, 1, "\u523A"], [64e3, 1, "\u5207"], [64001, 1, "\u5EA6"], [64002, 1, "\u62D3"], [64003, 1, "\u7CD6"], [64004, 1, "\u5B85"], [64005, 1, "\u6D1E"], [64006, 1, "\u66B4"], [64007, 1, "\u8F3B"], [64008, 1, "\u884C"], [64009, 1, "\u964D"], [64010, 1, "\u898B"], [64011, 1, "\u5ED3"], [64012, 1, "\u5140"], [64013, 1, "\u55C0"], [[64014, 64015], 2], [64016, 1, "\u585A"], [64017, 2], [64018, 1, "\u6674"], [[64019, 64020], 2], [64021, 1, "\u51DE"], [64022, 1, "\u732A"], [64023, 1, "\u76CA"], [64024, 1, "\u793C"], [64025, 1, "\u795E"], [64026, 1, "\u7965"], [64027, 1, "\u798F"], [64028, 1, "\u9756"], [64029, 1, "\u7CBE"], [64030, 1, "\u7FBD"], [64031, 2], [64032, 1, "\u8612"], [64033, 2], [64034, 1, "\u8AF8"], [[64035, 64036], 2], [64037, 1, "\u9038"], [64038, 1, "\u90FD"], [[64039, 64041], 2], [64042, 1, "\u98EF"], [64043, 1, "\u98FC"], [64044, 1, "\u9928"], [64045, 1, "\u9DB4"], [64046, 1, "\u90DE"], [64047, 1, "\u96B7"], [64048, 1, "\u4FAE"], [64049, 1, "\u50E7"], [64050, 1, "\u514D"], [64051, 1, "\u52C9"], [64052, 1, "\u52E4"], [64053, 1, "\u5351"], [64054, 1, "\u559D"], [64055, 1, "\u5606"], [64056, 1, "\u5668"], [64057, 1, "\u5840"], [64058, 1, "\u58A8"], [64059, 1, "\u5C64"], [64060, 1, "\u5C6E"], [64061, 1, "\u6094"], [64062, 1, "\u6168"], [64063, 1, "\u618E"], [64064, 1, "\u61F2"], [64065, 1, "\u654F"], [64066, 1, "\u65E2"], [64067, 1, "\u6691"], [64068, 1, "\u6885"], [64069, 1, "\u6D77"], [64070, 1, "\u6E1A"], [64071, 1, "\u6F22"], [64072, 1, "\u716E"], [64073, 1, "\u722B"], [64074, 1, "\u7422"], [64075, 1, "\u7891"], [64076, 1, "\u793E"], [64077, 1, "\u7949"], [64078, 1, "\u7948"], [64079, 1, "\u7950"], [64080, 1, "\u7956"], [64081, 1, "\u795D"], [64082, 1, "\u798D"], [64083, 1, "\u798E"], [64084, 1, "\u7A40"], [64085, 1, "\u7A81"], [64086, 1, "\u7BC0"], [64087, 1, "\u7DF4"], [64088, 1, "\u7E09"], [64089, 1, "\u7E41"], [64090, 1, "\u7F72"], [64091, 1, "\u8005"], [64092, 1, "\u81ED"], [[64093, 64094], 1, "\u8279"], [64095, 1, "\u8457"], [64096, 1, "\u8910"], [64097, 1, "\u8996"], [64098, 1, "\u8B01"], [64099, 1, "\u8B39"], [64100, 1, "\u8CD3"], [64101, 1, "\u8D08"], [64102, 1, "\u8FB6"], [64103, 1, "\u9038"], [64104, 1, "\u96E3"], [64105, 1, "\u97FF"], [64106, 1, "\u983B"], [64107, 1, "\u6075"], [64108, 1, "\u{242EE}"], [64109, 1, "\u8218"], [[64110, 64111], 3], [64112, 1, "\u4E26"], [64113, 1, "\u51B5"], [64114, 1, "\u5168"], [64115, 1, "\u4F80"], [64116, 1, "\u5145"], [64117, 1, "\u5180"], [64118, 1, "\u52C7"], [64119, 1, "\u52FA"], [64120, 1, "\u559D"], [64121, 1, "\u5555"], [64122, 1, "\u5599"], [64123, 1, "\u55E2"], [64124, 1, "\u585A"], [64125, 1, "\u58B3"], [64126, 1, "\u5944"], [64127, 1, "\u5954"], [64128, 1, "\u5A62"], [64129, 1, "\u5B28"], [64130, 1, "\u5ED2"], [64131, 1, "\u5ED9"], [64132, 1, "\u5F69"], [64133, 1, "\u5FAD"], [64134, 1, "\u60D8"], [64135, 1, "\u614E"], [64136, 1, "\u6108"], [64137, 1, "\u618E"], [64138, 1, "\u6160"], [64139, 1, "\u61F2"], [64140, 1, "\u6234"], [64141, 1, "\u63C4"], [64142, 1, "\u641C"], [64143, 1, "\u6452"], [64144, 1, "\u6556"], [64145, 1, "\u6674"], [64146, 1, "\u6717"], [64147, 1, "\u671B"], [64148, 1, "\u6756"], [64149, 1, "\u6B79"], [64150, 1, "\u6BBA"], [64151, 1, "\u6D41"], [64152, 1, "\u6EDB"], [64153, 1, "\u6ECB"], [64154, 1, "\u6F22"], [64155, 1, "\u701E"], [64156, 1, "\u716E"], [64157, 1, "\u77A7"], [64158, 1, "\u7235"], [64159, 1, "\u72AF"], [64160, 1, "\u732A"], [64161, 1, "\u7471"], [64162, 1, "\u7506"], [64163, 1, "\u753B"], [64164, 1, "\u761D"], [64165, 1, "\u761F"], [64166, 1, "\u76CA"], [64167, 1, "\u76DB"], [64168, 1, "\u76F4"], [64169, 1, "\u774A"], [64170, 1, "\u7740"], [64171, 1, "\u78CC"], [64172, 1, "\u7AB1"], [64173, 1, "\u7BC0"], [64174, 1, "\u7C7B"], [64175, 1, "\u7D5B"], [64176, 1, "\u7DF4"], [64177, 1, "\u7F3E"], [64178, 1, "\u8005"], [64179, 1, "\u8352"], [64180, 1, "\u83EF"], [64181, 1, "\u8779"], [64182, 1, "\u8941"], [64183, 1, "\u8986"], [64184, 1, "\u8996"], [64185, 1, "\u8ABF"], [64186, 1, "\u8AF8"], [64187, 1, "\u8ACB"], [64188, 1, "\u8B01"], [64189, 1, "\u8AFE"], [64190, 1, "\u8AED"], [64191, 1, "\u8B39"], [64192, 1, "\u8B8A"], [64193, 1, "\u8D08"], [64194, 1, "\u8F38"], [64195, 1, "\u9072"], [64196, 1, "\u9199"], [64197, 1, "\u9276"], [64198, 1, "\u967C"], [64199, 1, "\u96E3"], [64200, 1, "\u9756"], [64201, 1, "\u97DB"], [64202, 1, "\u97FF"], [64203, 1, "\u980B"], [64204, 1, "\u983B"], [64205, 1, "\u9B12"], [64206, 1, "\u9F9C"], [64207, 1, "\u{2284A}"], [64208, 1, "\u{22844}"], [64209, 1, "\u{233D5}"], [64210, 1, "\u3B9D"], [64211, 1, "\u4018"], [64212, 1, "\u4039"], [64213, 1, "\u{25249}"], [64214, 1, "\u{25CD0}"], [64215, 1, "\u{27ED3}"], [64216, 1, "\u9F43"], [64217, 1, "\u9F8E"], [[64218, 64255], 3], [64256, 1, "ff"], [64257, 1, "fi"], [64258, 1, "fl"], [64259, 1, "ffi"], [64260, 1, "ffl"], [[64261, 64262], 1, "st"], [[64263, 64274], 3], [64275, 1, "\u0574\u0576"], [64276, 1, "\u0574\u0565"], [64277, 1, "\u0574\u056B"], [64278, 1, "\u057E\u0576"], [64279, 1, "\u0574\u056D"], [[64280, 64284], 3], [64285, 1, "\u05D9\u05B4"], [64286, 2], [64287, 1, "\u05F2\u05B7"], [64288, 1, "\u05E2"], [64289, 1, "\u05D0"], [64290, 1, "\u05D3"], [64291, 1, "\u05D4"], [64292, 1, "\u05DB"], [64293, 1, "\u05DC"], [64294, 1, "\u05DD"], [64295, 1, "\u05E8"], [64296, 1, "\u05EA"], [64297, 5, "+"], [64298, 1, "\u05E9\u05C1"], [64299, 1, "\u05E9\u05C2"], [64300, 1, "\u05E9\u05BC\u05C1"], [64301, 1, "\u05E9\u05BC\u05C2"], [64302, 1, "\u05D0\u05B7"], [64303, 1, "\u05D0\u05B8"], [64304, 1, "\u05D0\u05BC"], [64305, 1, "\u05D1\u05BC"], [64306, 1, "\u05D2\u05BC"], [64307, 1, "\u05D3\u05BC"], [64308, 1, "\u05D4\u05BC"], [64309, 1, "\u05D5\u05BC"], [64310, 1, "\u05D6\u05BC"], [64311, 3], [64312, 1, "\u05D8\u05BC"], [64313, 1, "\u05D9\u05BC"], [64314, 1, "\u05DA\u05BC"], [64315, 1, "\u05DB\u05BC"], [64316, 1, "\u05DC\u05BC"], [64317, 3], [64318, 1, "\u05DE\u05BC"], [64319, 3], [64320, 1, "\u05E0\u05BC"], [64321, 1, "\u05E1\u05BC"], [64322, 3], [64323, 1, "\u05E3\u05BC"], [64324, 1, "\u05E4\u05BC"], [64325, 3], [64326, 1, "\u05E6\u05BC"], [64327, 1, "\u05E7\u05BC"], [64328, 1, "\u05E8\u05BC"], [64329, 1, "\u05E9\u05BC"], [64330, 1, "\u05EA\u05BC"], [64331, 1, "\u05D5\u05B9"], [64332, 1, "\u05D1\u05BF"], [64333, 1, "\u05DB\u05BF"], [64334, 1, "\u05E4\u05BF"], [64335, 1, "\u05D0\u05DC"], [[64336, 64337], 1, "\u0671"], [[64338, 64341], 1, "\u067B"], [[64342, 64345], 1, "\u067E"], [[64346, 64349], 1, "\u0680"], [[64350, 64353], 1, "\u067A"], [[64354, 64357], 1, "\u067F"], [[64358, 64361], 1, "\u0679"], [[64362, 64365], 1, "\u06A4"], [[64366, 64369], 1, "\u06A6"], [[64370, 64373], 1, "\u0684"], [[64374, 64377], 1, "\u0683"], [[64378, 64381], 1, "\u0686"], [[64382, 64385], 1, "\u0687"], [[64386, 64387], 1, "\u068D"], [[64388, 64389], 1, "\u068C"], [[64390, 64391], 1, "\u068E"], [[64392, 64393], 1, "\u0688"], [[64394, 64395], 1, "\u0698"], [[64396, 64397], 1, "\u0691"], [[64398, 64401], 1, "\u06A9"], [[64402, 64405], 1, "\u06AF"], [[64406, 64409], 1, "\u06B3"], [[64410, 64413], 1, "\u06B1"], [[64414, 64415], 1, "\u06BA"], [[64416, 64419], 1, "\u06BB"], [[64420, 64421], 1, "\u06C0"], [[64422, 64425], 1, "\u06C1"], [[64426, 64429], 1, "\u06BE"], [[64430, 64431], 1, "\u06D2"], [[64432, 64433], 1, "\u06D3"], [[64434, 64449], 2], [64450, 2], [[64451, 64466], 3], [[64467, 64470], 1, "\u06AD"], [[64471, 64472], 1, "\u06C7"], [[64473, 64474], 1, "\u06C6"], [[64475, 64476], 1, "\u06C8"], [64477, 1, "\u06C7\u0674"], [[64478, 64479], 1, "\u06CB"], [[64480, 64481], 1, "\u06C5"], [[64482, 64483], 1, "\u06C9"], [[64484, 64487], 1, "\u06D0"], [[64488, 64489], 1, "\u0649"], [[64490, 64491], 1, "\u0626\u0627"], [[64492, 64493], 1, "\u0626\u06D5"], [[64494, 64495], 1, "\u0626\u0648"], [[64496, 64497], 1, "\u0626\u06C7"], [[64498, 64499], 1, "\u0626\u06C6"], [[64500, 64501], 1, "\u0626\u06C8"], [[64502, 64504], 1, "\u0626\u06D0"], [[64505, 64507], 1, "\u0626\u0649"], [[64508, 64511], 1, "\u06CC"], [64512, 1, "\u0626\u062C"], [64513, 1, "\u0626\u062D"], [64514, 1, "\u0626\u0645"], [64515, 1, "\u0626\u0649"], [64516, 1, "\u0626\u064A"], [64517, 1, "\u0628\u062C"], [64518, 1, "\u0628\u062D"], [64519, 1, "\u0628\u062E"], [64520, 1, "\u0628\u0645"], [64521, 1, "\u0628\u0649"], [64522, 1, "\u0628\u064A"], [64523, 1, "\u062A\u062C"], [64524, 1, "\u062A\u062D"], [64525, 1, "\u062A\u062E"], [64526, 1, "\u062A\u0645"], [64527, 1, "\u062A\u0649"], [64528, 1, "\u062A\u064A"], [64529, 1, "\u062B\u062C"], [64530, 1, "\u062B\u0645"], [64531, 1, "\u062B\u0649"], [64532, 1, "\u062B\u064A"], [64533, 1, "\u062C\u062D"], [64534, 1, "\u062C\u0645"], [64535, 1, "\u062D\u062C"], [64536, 1, "\u062D\u0645"], [64537, 1, "\u062E\u062C"], [64538, 1, "\u062E\u062D"], [64539, 1, "\u062E\u0645"], [64540, 1, "\u0633\u062C"], [64541, 1, "\u0633\u062D"], [64542, 1, "\u0633\u062E"], [64543, 1, "\u0633\u0645"], [64544, 1, "\u0635\u062D"], [64545, 1, "\u0635\u0645"], [64546, 1, "\u0636\u062C"], [64547, 1, "\u0636\u062D"], [64548, 1, "\u0636\u062E"], [64549, 1, "\u0636\u0645"], [64550, 1, "\u0637\u062D"], [64551, 1, "\u0637\u0645"], [64552, 1, "\u0638\u0645"], [64553, 1, "\u0639\u062C"], [64554, 1, "\u0639\u0645"], [64555, 1, "\u063A\u062C"], [64556, 1, "\u063A\u0645"], [64557, 1, "\u0641\u062C"], [64558, 1, "\u0641\u062D"], [64559, 1, "\u0641\u062E"], [64560, 1, "\u0641\u0645"], [64561, 1, "\u0641\u0649"], [64562, 1, "\u0641\u064A"], [64563, 1, "\u0642\u062D"], [64564, 1, "\u0642\u0645"], [64565, 1, "\u0642\u0649"], [64566, 1, "\u0642\u064A"], [64567, 1, "\u0643\u0627"], [64568, 1, "\u0643\u062C"], [64569, 1, "\u0643\u062D"], [64570, 1, "\u0643\u062E"], [64571, 1, "\u0643\u0644"], [64572, 1, "\u0643\u0645"], [64573, 1, "\u0643\u0649"], [64574, 1, "\u0643\u064A"], [64575, 1, "\u0644\u062C"], [64576, 1, "\u0644\u062D"], [64577, 1, "\u0644\u062E"], [64578, 1, "\u0644\u0645"], [64579, 1, "\u0644\u0649"], [64580, 1, "\u0644\u064A"], [64581, 1, "\u0645\u062C"], [64582, 1, "\u0645\u062D"], [64583, 1, "\u0645\u062E"], [64584, 1, "\u0645\u0645"], [64585, 1, "\u0645\u0649"], [64586, 1, "\u0645\u064A"], [64587, 1, "\u0646\u062C"], [64588, 1, "\u0646\u062D"], [64589, 1, "\u0646\u062E"], [64590, 1, "\u0646\u0645"], [64591, 1, "\u0646\u0649"], [64592, 1, "\u0646\u064A"], [64593, 1, "\u0647\u062C"], [64594, 1, "\u0647\u0645"], [64595, 1, "\u0647\u0649"], [64596, 1, "\u0647\u064A"], [64597, 1, "\u064A\u062C"], [64598, 1, "\u064A\u062D"], [64599, 1, "\u064A\u062E"], [64600, 1, "\u064A\u0645"], [64601, 1, "\u064A\u0649"], [64602, 1, "\u064A\u064A"], [64603, 1, "\u0630\u0670"], [64604, 1, "\u0631\u0670"], [64605, 1, "\u0649\u0670"], [64606, 5, " \u064C\u0651"], [64607, 5, " \u064D\u0651"], [64608, 5, " \u064E\u0651"], [64609, 5, " \u064F\u0651"], [64610, 5, " \u0650\u0651"], [64611, 5, " \u0651\u0670"], [64612, 1, "\u0626\u0631"], [64613, 1, "\u0626\u0632"], [64614, 1, "\u0626\u0645"], [64615, 1, "\u0626\u0646"], [64616, 1, "\u0626\u0649"], [64617, 1, "\u0626\u064A"], [64618, 1, "\u0628\u0631"], [64619, 1, "\u0628\u0632"], [64620, 1, "\u0628\u0645"], [64621, 1, "\u0628\u0646"], [64622, 1, "\u0628\u0649"], [64623, 1, "\u0628\u064A"], [64624, 1, "\u062A\u0631"], [64625, 1, "\u062A\u0632"], [64626, 1, "\u062A\u0645"], [64627, 1, "\u062A\u0646"], [64628, 1, "\u062A\u0649"], [64629, 1, "\u062A\u064A"], [64630, 1, "\u062B\u0631"], [64631, 1, "\u062B\u0632"], [64632, 1, "\u062B\u0645"], [64633, 1, "\u062B\u0646"], [64634, 1, "\u062B\u0649"], [64635, 1, "\u062B\u064A"], [64636, 1, "\u0641\u0649"], [64637, 1, "\u0641\u064A"], [64638, 1, "\u0642\u0649"], [64639, 1, "\u0642\u064A"], [64640, 1, "\u0643\u0627"], [64641, 1, "\u0643\u0644"], [64642, 1, "\u0643\u0645"], [64643, 1, "\u0643\u0649"], [64644, 1, "\u0643\u064A"], [64645, 1, "\u0644\u0645"], [64646, 1, "\u0644\u0649"], [64647, 1, "\u0644\u064A"], [64648, 1, "\u0645\u0627"], [64649, 1, "\u0645\u0645"], [64650, 1, "\u0646\u0631"], [64651, 1, "\u0646\u0632"], [64652, 1, "\u0646\u0645"], [64653, 1, "\u0646\u0646"], [64654, 1, "\u0646\u0649"], [64655, 1, "\u0646\u064A"], [64656, 1, "\u0649\u0670"], [64657, 1, "\u064A\u0631"], [64658, 1, "\u064A\u0632"], [64659, 1, "\u064A\u0645"], [64660, 1, "\u064A\u0646"], [64661, 1, "\u064A\u0649"], [64662, 1, "\u064A\u064A"], [64663, 1, "\u0626\u062C"], [64664, 1, "\u0626\u062D"], [64665, 1, "\u0626\u062E"], [64666, 1, "\u0626\u0645"], [64667, 1, "\u0626\u0647"], [64668, 1, "\u0628\u062C"], [64669, 1, "\u0628\u062D"], [64670, 1, "\u0628\u062E"], [64671, 1, "\u0628\u0645"], [64672, 1, "\u0628\u0647"], [64673, 1, "\u062A\u062C"], [64674, 1, "\u062A\u062D"], [64675, 1, "\u062A\u062E"], [64676, 1, "\u062A\u0645"], [64677, 1, "\u062A\u0647"], [64678, 1, "\u062B\u0645"], [64679, 1, "\u062C\u062D"], [64680, 1, "\u062C\u0645"], [64681, 1, "\u062D\u062C"], [64682, 1, "\u062D\u0645"], [64683, 1, "\u062E\u062C"], [64684, 1, "\u062E\u0645"], [64685, 1, "\u0633\u062C"], [64686, 1, "\u0633\u062D"], [64687, 1, "\u0633\u062E"], [64688, 1, "\u0633\u0645"], [64689, 1, "\u0635\u062D"], [64690, 1, "\u0635\u062E"], [64691, 1, "\u0635\u0645"], [64692, 1, "\u0636\u062C"], [64693, 1, "\u0636\u062D"], [64694, 1, "\u0636\u062E"], [64695, 1, "\u0636\u0645"], [64696, 1, "\u0637\u062D"], [64697, 1, "\u0638\u0645"], [64698, 1, "\u0639\u062C"], [64699, 1, "\u0639\u0645"], [64700, 1, "\u063A\u062C"], [64701, 1, "\u063A\u0645"], [64702, 1, "\u0641\u062C"], [64703, 1, "\u0641\u062D"], [64704, 1, "\u0641\u062E"], [64705, 1, "\u0641\u0645"], [64706, 1, "\u0642\u062D"], [64707, 1, "\u0642\u0645"], [64708, 1, "\u0643\u062C"], [64709, 1, "\u0643\u062D"], [64710, 1, "\u0643\u062E"], [64711, 1, "\u0643\u0644"], [64712, 1, "\u0643\u0645"], [64713, 1, "\u0644\u062C"], [64714, 1, "\u0644\u062D"], [64715, 1, "\u0644\u062E"], [64716, 1, "\u0644\u0645"], [64717, 1, "\u0644\u0647"], [64718, 1, "\u0645\u062C"], [64719, 1, "\u0645\u062D"], [64720, 1, "\u0645\u062E"], [64721, 1, "\u0645\u0645"], [64722, 1, "\u0646\u062C"], [64723, 1, "\u0646\u062D"], [64724, 1, "\u0646\u062E"], [64725, 1, "\u0646\u0645"], [64726, 1, "\u0646\u0647"], [64727, 1, "\u0647\u062C"], [64728, 1, "\u0647\u0645"], [64729, 1, "\u0647\u0670"], [64730, 1, "\u064A\u062C"], [64731, 1, "\u064A\u062D"], [64732, 1, "\u064A\u062E"], [64733, 1, "\u064A\u0645"], [64734, 1, "\u064A\u0647"], [64735, 1, "\u0626\u0645"], [64736, 1, "\u0626\u0647"], [64737, 1, "\u0628\u0645"], [64738, 1, "\u0628\u0647"], [64739, 1, "\u062A\u0645"], [64740, 1, "\u062A\u0647"], [64741, 1, "\u062B\u0645"], [64742, 1, "\u062B\u0647"], [64743, 1, "\u0633\u0645"], [64744, 1, "\u0633\u0647"], [64745, 1, "\u0634\u0645"], [64746, 1, "\u0634\u0647"], [64747, 1, "\u0643\u0644"], [64748, 1, "\u0643\u0645"], [64749, 1, "\u0644\u0645"], [64750, 1, "\u0646\u0645"], [64751, 1, "\u0646\u0647"], [64752, 1, "\u064A\u0645"], [64753, 1, "\u064A\u0647"], [64754, 1, "\u0640\u064E\u0651"], [64755, 1, "\u0640\u064F\u0651"], [64756, 1, "\u0640\u0650\u0651"], [64757, 1, "\u0637\u0649"], [64758, 1, "\u0637\u064A"], [64759, 1, "\u0639\u0649"], [64760, 1, "\u0639\u064A"], [64761, 1, "\u063A\u0649"], [64762, 1, "\u063A\u064A"], [64763, 1, "\u0633\u0649"], [64764, 1, "\u0633\u064A"], [64765, 1, "\u0634\u0649"], [64766, 1, "\u0634\u064A"], [64767, 1, "\u062D\u0649"], [64768, 1, "\u062D\u064A"], [64769, 1, "\u062C\u0649"], [64770, 1, "\u062C\u064A"], [64771, 1, "\u062E\u0649"], [64772, 1, "\u062E\u064A"], [64773, 1, "\u0635\u0649"], [64774, 1, "\u0635\u064A"], [64775, 1, "\u0636\u0649"], [64776, 1, "\u0636\u064A"], [64777, 1, "\u0634\u062C"], [64778, 1, "\u0634\u062D"], [64779, 1, "\u0634\u062E"], [64780, 1, "\u0634\u0645"], [64781, 1, "\u0634\u0631"], [64782, 1, "\u0633\u0631"], [64783, 1, "\u0635\u0631"], [64784, 1, "\u0636\u0631"], [64785, 1, "\u0637\u0649"], [64786, 1, "\u0637\u064A"], [64787, 1, "\u0639\u0649"], [64788, 1, "\u0639\u064A"], [64789, 1, "\u063A\u0649"], [64790, 1, "\u063A\u064A"], [64791, 1, "\u0633\u0649"], [64792, 1, "\u0633\u064A"], [64793, 1, "\u0634\u0649"], [64794, 1, "\u0634\u064A"], [64795, 1, "\u062D\u0649"], [64796, 1, "\u062D\u064A"], [64797, 1, "\u062C\u0649"], [64798, 1, "\u062C\u064A"], [64799, 1, "\u062E\u0649"], [64800, 1, "\u062E\u064A"], [64801, 1, "\u0635\u0649"], [64802, 1, "\u0635\u064A"], [64803, 1, "\u0636\u0649"], [64804, 1, "\u0636\u064A"], [64805, 1, "\u0634\u062C"], [64806, 1, "\u0634\u062D"], [64807, 1, "\u0634\u062E"], [64808, 1, "\u0634\u0645"], [64809, 1, "\u0634\u0631"], [64810, 1, "\u0633\u0631"], [64811, 1, "\u0635\u0631"], [64812, 1, "\u0636\u0631"], [64813, 1, "\u0634\u062C"], [64814, 1, "\u0634\u062D"], [64815, 1, "\u0634\u062E"], [64816, 1, "\u0634\u0645"], [64817, 1, "\u0633\u0647"], [64818, 1, "\u0634\u0647"], [64819, 1, "\u0637\u0645"], [64820, 1, "\u0633\u062C"], [64821, 1, "\u0633\u062D"], [64822, 1, "\u0633\u062E"], [64823, 1, "\u0634\u062C"], [64824, 1, "\u0634\u062D"], [64825, 1, "\u0634\u062E"], [64826, 1, "\u0637\u0645"], [64827, 1, "\u0638\u0645"], [[64828, 64829], 1, "\u0627\u064B"], [[64830, 64831], 2], [[64832, 64847], 2], [64848, 1, "\u062A\u062C\u0645"], [[64849, 64850], 1, "\u062A\u062D\u062C"], [64851, 1, "\u062A\u062D\u0645"], [64852, 1, "\u062A\u062E\u0645"], [64853, 1, "\u062A\u0645\u062C"], [64854, 1, "\u062A\u0645\u062D"], [64855, 1, "\u062A\u0645\u062E"], [[64856, 64857], 1, "\u062C\u0645\u062D"], [64858, 1, "\u062D\u0645\u064A"], [64859, 1, "\u062D\u0645\u0649"], [64860, 1, "\u0633\u062D\u062C"], [64861, 1, "\u0633\u062C\u062D"], [64862, 1, "\u0633\u062C\u0649"], [[64863, 64864], 1, "\u0633\u0645\u062D"], [64865, 1, "\u0633\u0645\u062C"], [[64866, 64867], 1, "\u0633\u0645\u0645"], [[64868, 64869], 1, "\u0635\u062D\u062D"], [64870, 1, "\u0635\u0645\u0645"], [[64871, 64872], 1, "\u0634\u062D\u0645"], [64873, 1, "\u0634\u062C\u064A"], [[64874, 64875], 1, "\u0634\u0645\u062E"], [[64876, 64877], 1, "\u0634\u0645\u0645"], [64878, 1, "\u0636\u062D\u0649"], [[64879, 64880], 1, "\u0636\u062E\u0645"], [[64881, 64882], 1, "\u0637\u0645\u062D"], [64883, 1, "\u0637\u0645\u0645"], [64884, 1, "\u0637\u0645\u064A"], [64885, 1, "\u0639\u062C\u0645"], [[64886, 64887], 1, "\u0639\u0645\u0645"], [64888, 1, "\u0639\u0645\u0649"], [64889, 1, "\u063A\u0645\u0645"], [64890, 1, "\u063A\u0645\u064A"], [64891, 1, "\u063A\u0645\u0649"], [[64892, 64893], 1, "\u0641\u062E\u0645"], [64894, 1, "\u0642\u0645\u062D"], [64895, 1, "\u0642\u0645\u0645"], [64896, 1, "\u0644\u062D\u0645"], [64897, 1, "\u0644\u062D\u064A"], [64898, 1, "\u0644\u062D\u0649"], [[64899, 64900], 1, "\u0644\u062C\u062C"], [[64901, 64902], 1, "\u0644\u062E\u0645"], [[64903, 64904], 1, "\u0644\u0645\u062D"], [64905, 1, "\u0645\u062D\u062C"], [64906, 1, "\u0645\u062D\u0645"], [64907, 1, "\u0645\u062D\u064A"], [64908, 1, "\u0645\u062C\u062D"], [64909, 1, "\u0645\u062C\u0645"], [64910, 1, "\u0645\u062E\u062C"], [64911, 1, "\u0645\u062E\u0645"], [[64912, 64913], 3], [64914, 1, "\u0645\u062C\u062E"], [64915, 1, "\u0647\u0645\u062C"], [64916, 1, "\u0647\u0645\u0645"], [64917, 1, "\u0646\u062D\u0645"], [64918, 1, "\u0646\u062D\u0649"], [[64919, 64920], 1, "\u0646\u062C\u0645"], [64921, 1, "\u0646\u062C\u0649"], [64922, 1, "\u0646\u0645\u064A"], [64923, 1, "\u0646\u0645\u0649"], [[64924, 64925], 1, "\u064A\u0645\u0645"], [64926, 1, "\u0628\u062E\u064A"], [64927, 1, "\u062A\u062C\u064A"], [64928, 1, "\u062A\u062C\u0649"], [64929, 1, "\u062A\u062E\u064A"], [64930, 1, "\u062A\u062E\u0649"], [64931, 1, "\u062A\u0645\u064A"], [64932, 1, "\u062A\u0645\u0649"], [64933, 1, "\u062C\u0645\u064A"], [64934, 1, "\u062C\u062D\u0649"], [64935, 1, "\u062C\u0645\u0649"], [64936, 1, "\u0633\u062E\u0649"], [64937, 1, "\u0635\u062D\u064A"], [64938, 1, "\u0634\u062D\u064A"], [64939, 1, "\u0636\u062D\u064A"], [64940, 1, "\u0644\u062C\u064A"], [64941, 1, "\u0644\u0645\u064A"], [64942, 1, "\u064A\u062D\u064A"], [64943, 1, "\u064A\u062C\u064A"], [64944, 1, "\u064A\u0645\u064A"], [64945, 1, "\u0645\u0645\u064A"], [64946, 1, "\u0642\u0645\u064A"], [64947, 1, "\u0646\u062D\u064A"], [64948, 1, "\u0642\u0645\u062D"], [64949, 1, "\u0644\u062D\u0645"], [64950, 1, "\u0639\u0645\u064A"], [64951, 1, "\u0643\u0645\u064A"], [64952, 1, "\u0646\u062C\u062D"], [64953, 1, "\u0645\u062E\u064A"], [64954, 1, "\u0644\u062C\u0645"], [64955, 1, "\u0643\u0645\u0645"], [64956, 1, "\u0644\u062C\u0645"], [64957, 1, "\u0646\u062C\u062D"], [64958, 1, "\u062C\u062D\u064A"], [64959, 1, "\u062D\u062C\u064A"], [64960, 1, "\u0645\u062C\u064A"], [64961, 1, "\u0641\u0645\u064A"], [64962, 1, "\u0628\u062D\u064A"], [64963, 1, "\u0643\u0645\u0645"], [64964, 1, "\u0639\u062C\u0645"], [64965, 1, "\u0635\u0645\u0645"], [64966, 1, "\u0633\u062E\u064A"], [64967, 1, "\u0646\u062C\u064A"], [[64968, 64974], 3], [64975, 2], [[64976, 65007], 3], [65008, 1, "\u0635\u0644\u06D2"], [65009, 1, "\u0642\u0644\u06D2"], [65010, 1, "\u0627\u0644\u0644\u0647"], [65011, 1, "\u0627\u0643\u0628\u0631"], [65012, 1, "\u0645\u062D\u0645\u062F"], [65013, 1, "\u0635\u0644\u0639\u0645"], [65014, 1, "\u0631\u0633\u0648\u0644"], [65015, 1, "\u0639\u0644\u064A\u0647"], [65016, 1, "\u0648\u0633\u0644\u0645"], [65017, 1, "\u0635\u0644\u0649"], [65018, 5, "\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064A\u0647 \u0648\u0633\u0644\u0645"], [65019, 5, "\u062C\u0644 \u062C\u0644\u0627\u0644\u0647"], [65020, 1, "\u0631\u06CC\u0627\u0644"], [65021, 2], [[65022, 65023], 2], [[65024, 65039], 7], [65040, 5, ","], [65041, 1, "\u3001"], [65042, 3], [65043, 5, ":"], [65044, 5, ";"], [65045, 5, "!"], [65046, 5, "?"], [65047, 1, "\u3016"], [65048, 1, "\u3017"], [65049, 3], [[65050, 65055], 3], [[65056, 65059], 2], [[65060, 65062], 2], [[65063, 65069], 2], [[65070, 65071], 2], [65072, 3], [65073, 1, "\u2014"], [65074, 1, "\u2013"], [[65075, 65076], 5, "_"], [65077, 5, "("], [65078, 5, ")"], [65079, 5, "{"], [65080, 5, "}"], [65081, 1, "\u3014"], [65082, 1, "\u3015"], [65083, 1, "\u3010"], [65084, 1, "\u3011"], [65085, 1, "\u300A"], [65086, 1, "\u300B"], [65087, 1, "\u3008"], [65088, 1, "\u3009"], [65089, 1, "\u300C"], [65090, 1, "\u300D"], [65091, 1, "\u300E"], [65092, 1, "\u300F"], [[65093, 65094], 2], [65095, 5, "["], [65096, 5, "]"], [[65097, 65100], 5, " \u0305"], [[65101, 65103], 5, "_"], [65104, 5, ","], [65105, 1, "\u3001"], [65106, 3], [65107, 3], [65108, 5, ";"], [65109, 5, ":"], [65110, 5, "?"], [65111, 5, "!"], [65112, 1, "\u2014"], [65113, 5, "("], [65114, 5, ")"], [65115, 5, "{"], [65116, 5, "}"], [65117, 1, "\u3014"], [65118, 1, "\u3015"], [65119, 5, "#"], [65120, 5, "&"], [65121, 5, "*"], [65122, 5, "+"], [65123, 1, "-"], [65124, 5, "<"], [65125, 5, ">"], [65126, 5, "="], [65127, 3], [65128, 5, "\\"], [65129, 5, "$"], [65130, 5, "%"], [65131, 5, "@"], [[65132, 65135], 3], [65136, 5, " \u064B"], [65137, 1, "\u0640\u064B"], [65138, 5, " \u064C"], [65139, 2], [65140, 5, " \u064D"], [65141, 3], [65142, 5, " \u064E"], [65143, 1, "\u0640\u064E"], [65144, 5, " \u064F"], [65145, 1, "\u0640\u064F"], [65146, 5, " \u0650"], [65147, 1, "\u0640\u0650"], [65148, 5, " \u0651"], [65149, 1, "\u0640\u0651"], [65150, 5, " \u0652"], [65151, 1, "\u0640\u0652"], [65152, 1, "\u0621"], [[65153, 65154], 1, "\u0622"], [[65155, 65156], 1, "\u0623"], [[65157, 65158], 1, "\u0624"], [[65159, 65160], 1, "\u0625"], [[65161, 65164], 1, "\u0626"], [[65165, 65166], 1, "\u0627"], [[65167, 65170], 1, "\u0628"], [[65171, 65172], 1, "\u0629"], [[65173, 65176], 1, "\u062A"], [[65177, 65180], 1, "\u062B"], [[65181, 65184], 1, "\u062C"], [[65185, 65188], 1, "\u062D"], [[65189, 65192], 1, "\u062E"], [[65193, 65194], 1, "\u062F"], [[65195, 65196], 1, "\u0630"], [[65197, 65198], 1, "\u0631"], [[65199, 65200], 1, "\u0632"], [[65201, 65204], 1, "\u0633"], [[65205, 65208], 1, "\u0634"], [[65209, 65212], 1, "\u0635"], [[65213, 65216], 1, "\u0636"], [[65217, 65220], 1, "\u0637"], [[65221, 65224], 1, "\u0638"], [[65225, 65228], 1, "\u0639"], [[65229, 65232], 1, "\u063A"], [[65233, 65236], 1, "\u0641"], [[65237, 65240], 1, "\u0642"], [[65241, 65244], 1, "\u0643"], [[65245, 65248], 1, "\u0644"], [[65249, 65252], 1, "\u0645"], [[65253, 65256], 1, "\u0646"], [[65257, 65260], 1, "\u0647"], [[65261, 65262], 1, "\u0648"], [[65263, 65264], 1, "\u0649"], [[65265, 65268], 1, "\u064A"], [[65269, 65270], 1, "\u0644\u0622"], [[65271, 65272], 1, "\u0644\u0623"], [[65273, 65274], 1, "\u0644\u0625"], [[65275, 65276], 1, "\u0644\ua"], [65314, 1, "b"], [65315, 1, "c"], [65316, 1, "d"], [65317, 1, "e"], [65318, 1, "f"], [65319, 1, "g"], [65320, 1, "h"], [65321, 1, "i"], [65322, 1, "j"], [65323, 1, "k"], [65324, 1, "l"], [65325, 1, "m"], [65326, 1, "n"], [65327, 1, "o"], [65328, 1, "p"], [65329, 1, "q"], [65330, 1, "r"], [65331, 1, "s"], [65332, 1, "t"], [65333, 1, "u"], [65334, 1, "v"], [65335, 1, "w"], [65336, 1, "x"], [65337, 1, "y"], [65338, 1, "z"], [65339, 5, "["], [65340, 5, "\\"], [65341, 5, "]"], [65342, 5, "^"], [65343, 5, "_"], [65344, 5, "`"], [65345, 1, "a"], [65346, 1, "b"], [65347, 1, "c"], [65348, 1, "d"], [65349, 1, "e"], [65350, 1, "f"], [65351, 1, "g"], [65352, 1, "h"], [65353, 1, "i"], [65354, 1, "j"], [65355, 1, "k"], [65356, 1, "l"], [65357, 1, "m"], [65358, 1, "n"], [65359, 1, "o"], [65360, 1, "p"], [65361, 1, "q"], [65362, 1, "r"], [65363, 1, "s"], [65364, 1, "t"], [65365, 1, "u"], [65366, 1, "v"], [65367, 1, "w"], [65368, 1, "x"], [65369, 1, "y"], [65370, 1, "z"], [65371, 5, "{"], [65372, 5, "|"], [65373, 5, "}"], [65374, 5, "~"], [65375, 1, "\u2985"], [65376, 1, "\u2986"], [65377, 1, "."], [65378, 1, "\u300C"], [65379, 1, "\u300D"], [65380, 1, "\u3001"], [65381, 1, "\u30FB"], [65382, 1, "\u30F2"], [65383, 1, "\u30A1"], [65384, 1, "\u30A3"], [65385, 1, "\u30A5"], [65386, 1, "\u30A7"], [65387, 1, "\u30A9"], [65388, 1, "\u30E3"], [65389, 1, "\u30E5"], [65390, 1, "\u30E7"], [65391, 1, "\u30C3"], [65392, 1, "\u30FC"], [65393, 1, "\u30A2"], [65394, 1, "\u30A4"], [65395, 1, "\u30A6"], [65396, 1, "\u30A8"], [65397, 1, "\u30AA"], [65398, 1, "\u30AB"], [65399, 1, "\u30AD"], [65400, 1, "\u30AF"], [65401, 1, "\u30B1"], [65402, 1, "\u30B3"], [65403, 1, "\u30B5"], [65404, 1, "\u30B7"], [65405, 1, "\u30B9"], [65406, 1, "\u30BB"], [65407, 1, "\u30BD"], [65408, 1, "\u30BF"], [65409, 1, "\u30C1"], [65410, 1, "\u30C4"], [65411, 1, "\u30C6"], [65412, 1, "\u30C8"], [65413, 1, "\u30CA"], [65414, 1, "\u30CB"], [65415, 1, "\u30CC"], [65416, 1, "\u30CD"], [65417, 1, "\u30CE"], [65418, 1, "\u30CF"], [65419, 1, "\u30D2"], [65420, 1, "\u30D5"], [65421, 1, "\u30D8"], [65422, 1, "\u30DB"], [65423, 1, "\u30DE"], [65424, 1, "\u30DF"], [65425, 1, "\u30E0"], [65426, 1, "\u30E1"], [65427, 1, "\u30E2"], [65428, 1, "\u30E4"], [65429, 1, "\u30E6"], [65430, 1, "\u30E8"], [65431, 1, "\u30E9"], [65432, 1, "\u30EA"], [65433, 1, "\u30EB"], [65434, 1, "\u30EC"], [65435, 1, "\u30ED"], [65436, 1, "\u30EF"], [65437, 1, "\u30F3"], [65438, 1, "\u3099"], [65439, 1, "\u309A"], [65440, 3], [65441, 1, "\u1100"], [65442, 1, "\u1101"], [65443, 1, "\u11AA"], [65444, 1, "\u1102"], [65445, 1, "\u11AC"], [65446, 1, "\u11AD"], [65447, 1, "\u1103"], [65448, 1, "\u1104"], [65449, 1, "\u1105"], [65450, 1, "\u11B0"], [65451, 1, "\u11B1"], [65452, 1, "\u11B2"], [65453, 1, "\u11B3"], [65454, 1, "\u11B4"], [65455, 1, "\u11B5"], [65456, 1, "\u111A"], [65457, 1, "\u1106"], [65458, 1, "\u1107"], [65459, 1, "\u1108"], [65460, 1, "\u1121"], [65461, 1, "\u1109"], [65462, 1, "\u110A"], [65463, 1, "\u110B"], [65464, 1, "\u110C"], [65465, 1, "\u110D"], [65466, 1, "\u110E"], [65467, 1, "\u110F"], [65468, 1, "\u1110"], [65469, 1, "\u1111"], [65470, 1, "\u1112"], [[65471, 65473], 3], [65474, 1, "\u1161"], [65475, 1, "\u1162"], [65476, 1, "\u1163"], [65477, 1, "\u1164"], [65478, 1, "\u1165"], [65479, 1, "\u1166"], [[65480, 65481], 3], [65482, 1, "\u1167"], [65483, 1, "\u1168"], [65484, 1, "\u1169"], [65485, 1, "\u116A"], [65486, 1, "\u116B"], [65487, 1, "\u116C"], [[65488, 65489], 3], [65490, 1, "\u116D"], [65491, 1, "\u116E"], [65492, 1, "\u116F"], [65493, 1, "\u1170"], [65494, 1, "\u1171"], [65495, 1, "\u1172"], [[65496, 65497], 3], [65498, 1, "\u1173"], [65499, 1, "\u1174"], [65500, 1, "\u1175"], [[65501, 65503], 3], [65504, 1, "\xA2"], [65505, 1, "\xA3"], [65506, 1, "\xAC"], [65507, 5, " \u0304"], [65508, 1, "\xA6"], [65509, 1, "\xA5"], [65510, 1, "\u20A9"], [65511, 3], [65512, 1, "\u2502"], [65513, 1, "\u2190"], [65514, 1, "\u2191"], [65515, 1, "\u2192"], [65516, 1, "\u2193"], [65517, 1, "\u25A0"], [65518, 1, "\u25CB"], [[65519, 65528], 3], [[65529, 65531], 3], [65532, 3], [65533, 3], [[65534, 65535], 3], [[65536, 65547], 2], [65548, 3], [[65549, 65574], 2], [65575, 3], [[65576, 65594], 2], [65595, 3], [[65596, 65597], 2], [65598, 3], [[65599, 65613], 2], [[65614, 65615], 3], [[65616, 65629], 2], [[65630, 65663], 3], [[65664, 65786], 2], [[65787, 65791], 3], [[65792, 65794], 2], [[65795, 65798], 3], [[65799, 65843], 2], [[65844, 65846], 3], [[65847, 65855], 2], [[65856, 65930], 2], [[65931, 65932], 2], [[65933, 65934], 2], [65935, 3], [[65936, 65947], 2], [65948, 2], [[65949, 65951], 3], [65952, 2], [[65953, 65999], 3], [[66e3, 66044], 2], [66045, 2], [[66046, 66175], 3], [[66176, 66204], 2], [[66205, 66207], 3], [[66208, 66256], 2], [[66257, 66271], 3], [66272, 2], [[66273, 66299], 2], [[66300, 66303], 3], [[66304, 66334], 2], [66335, 2], [[66336, 66339], 2], [[66340, 66348], 3], [[66349, 66351], 2], [[66352, 66368], 2], [66369, 2], [[66370, 66377], 2], [66378, 2], [[66379, 66383], 3], [[66384, 66426], 2], [[66427, 66431], 3], [[66432, 66461], 2], [66462, 3], [66463, 2], [[66464, 66499], 2], [[66500, 66503], 3], [[66504, 66511], 2], [[66512, 66517], 2], [[66518, 66559], 3], [66560, 1, "\u{10428}"], [66561, 1, "\u{10429}"], [66562, 1, "\u{1042A}"], [66563, 1, "\u{1042B}"], [66564, 1, "\u{1042C}"], [66565, 1, "\u{1042D}"], [66566, 1, "\u{1042E}"], [66567, 1, "\u{1042F}"], [66568, 1, "\u{10430}"], [66569, 1, "\u{10431}"], [66570, 1, "\u{10432}"], [66571, 1, "\u{10433}"], [66572, 1, "\u{10434}"], [66573, 1, "\u{10435}"], [66574, 1, "\u{10436}"], [66575, 1, "\u{10437}"], [66576, 1, "\u{10438}"], [66577, 1, "\u{10439}"], [66578, 1, "\u{1043A}"], [66579, 1, "\u{1043B}"], [66580, 1, "\u{1043C}"], [66581, 1, "\u{1043D}"], [66582, 1, "\u{1043E}"], [66583, 1, "\u{1043F}"], [66584, 1, "\u{10440}"], [66585, 1, "\u{10441}"], [66586, 1, "\u{10442}"], [66587, 1, "\u{10443}"], [66588, 1, "\u{10444}"], [66589, 1, "\u{10445}"], [66590, 1, "\u{10446}"], [66591, 1, "\u{10447}"], [66592, 1, "\u{10448}"], [66593, 1, "\u{10449}"], [66594, 1, "\u{1044A}"], [66595, 1, "\u{1044B}"], [66596, 1, "\u{1044C}"], [66597, 1, "\u{1044D}"], [66598, 1, "\u{1044E}"], [66599, 1, "\u{1044F}"], [[66600, 66637], 2], [[66638, 66717], 2], [[66718, 66719], 3], [[66720, 66729], 2], [[66730, 66735], 3], [66736, 1, "\u{104D8}"], [66737, 1, "\u{104D9}"], [66738, 1, "\u{104DA}"], [66739, 1, "\u{104DB}"], [66740, 1, "\u{104DC}"], [66741, 1, "\u{104DD}"], [66742, 1, "\u{104DE}"], [66743, 1, "\u{104DF}"], [66744, 1, "\u{104E0}"], [66745, 1, "\u{104E1}"], [66746, 1, "\u{104E2}"], [66747, 1, "\u{104E3}"], [66748, 1, "\u{104E4}"], [66749, 1, "\u{104E5}"], [66750, 1, "\u{104E6}"], [66751, 1, "\u{104E7}"], [66752, 1, "\u{104E8}"], [66753, 1, "\u{104E9}"], [66754, 1, "\u{104EA}"], [66755, 1, "\u{104EB}"], [66756, 1, "\u{104EC}"], [66757, 1, "\u{104ED}"], [66758, 1, "\u{104EE}"], [66759, 1, "\u{104EF}"], [66760, 1, "\u{104F0}"], [66761, 1, "\u{104F1}"], [66762, 1, "\u{104F2}"], [66763, 1, "\u{104F3}"], [66764, 1, "\u{104F4}"], [66765, 1, "\u{104F5}"], [66766, 1, "\u{104F6}"], [66767, 1, "\u{104F7}"], [66768, 1, "\u{104F8}"], [66769, 1, "\u{104F9}"], [66770, 1, "\u{104FA}"], [66771, 1, "\u{104FB}"], [[66772, 66775], 3], [[66776, 66811], 2], [[66812, 66815], 3], [[66816, 66855], 2], [[66856, 66863], 3], [[66864, 66915], 2], [[66916, 66926], 3], [66927, 2], [66928, 1, "\u{10597}"], [66929, 1, "\u{10598}"], [66930, 1, "\u{10599}"], [66931, 1, "\u{1059A}"], [66932, 1, "\u{1059B}"], [66933, 1, "\u{1059C}"], [66934, 1, "\u{1059D}"], [66935, 1, "\u{1059E}"], [66936, 1, "\u{1059F}"], [66937, 1, "\u{105A0}"], [66938, 1, "\u{105A1}"], [66939, 3], [66940, 1, "\u{105A3}"], [66941, 1, "\u{105A4}"], [66942, 1, "\u{105A5}"], [66943, 1, "\u{105A6}"], [66944, 1, "\u{105A7}"], [66945, 1, "\u{105A8}"], [66946, 1, "\u{105A9}"], [66947, 1, "\u{105AA}"], [66948, 1, "\u{105AB}"], [66949, 1, "\u{105AC}"], [66950, 1, "\u{105AD}"], [66951, 1, "\u{105AE}"], [66952, 1, "\u{105AF}"], [66953, 1, "\u{105B0}"], [66954, 1, "\u{105B1}"], [66955, 3], [66956, 1, "\u{105B3}"], [66957, 1, "\u{105B4}"], [66958, 1, "\u{105B5}"], [66959, 1, "\u{105B6}"], [66960, 1, "\u{105B7}"], [66961, 1, "\u{105B8}"], [66962, 1, "\u{105B9}"], [66963, 3], [66964, 1, "\u{105BB}"], [66965, 1, "\u{105BC}"], [66966, 3], [[66967, 66977], 2], [66978, 3], [[66979, 66993], 2], [66994, 3], [[66995, 67001], 2], [67002, 3], [[67003, 67004], 2], [[67005, 67071], 3], [[67072, 67382], 2], [[67383, 67391], 3], [[67392, 67413], 2], [[67414, 67423], 3], [[67424, 67431], 2], [[67432, 67455], 3], [67456, 2], [67457, 1, "\u02D0"], [67458, 1, "\u02D1"], [67459, 1, "\xE6"], [67460, 1, "\u0299"], [67461, 1, "\u0253"], [67462, 3], [67463, 1, "\u02A3"], [67464, 1, "\uAB66"], [67465, 1, "\u02A5"], [67466, 1, "\u02A4"], [67467, 1, "\u0256"], [67468, 1, "\u0257"], [67469, 1, "\u1D91"], [67470, 1, "\u0258"], [67471, 1, "\u025E"], [67472, 1, "\u02A9"], [67473, 1, "\u0264"], [67474, 1, "\u0262"], [67475, 1, "\u0260"], [67476, 1, "\u029B"], [67477, 1, "\u0127"], [67478, 1, "\u029C"], [67479, 1, "\u0267"], [67480, 1, "\u0284"], [67481, 1, "\u02AA"], [67482, 1, "\u02AB"], [67483, 1, "\u026C"], [67484, 1, "\u{1DF04}"], [67485, 1, "\uA78E"], [67486, 1, "\u026E"], [67487, 1, "\u{1DF05}"], [67488, 1, "\u028E"], [67489, 1, "\u{1DF06}"], [67490, 1, "\xF8"], [67491, 1, "\u0276"], [67492, 1, "\u0277"], [67493, 1, "q"], [67494, 1, "\u027A"], [67495, 1, "\u{1DF08}"], [67496, 1, "\u027D"], [67497, 1, "\u027E"], [67498, 1, "\u0280"], [67499, 1, "\u02A8"], [67500, 1, "\u02A6"], [67501, 1, "\uAB67"], [67502, 1, "\u02A7"], [67503, 1, "\u0288"], [67504, 1, "\u2C71"], [67505, 3], [67506, 1, "\u028F"], [67507, 1, "\u02A1"], [67508, 1, "\u02A2"], [67509, 1, "\u0298"], [67510, 1, "\u01C0"], [67511, 1, "\u01C1"], [67512, 1, "\u01C2"], [67513, 1, "\u{1DF0A}"], [67514, 1, "\u{1DF1E}"], [[67515, 67583], 3], [[67584, 67589], 2], [[67590, 67591], 3], [67592, 2], [67593, 3], [[67594, 67637], 2], [67638, 3], [[67639, 67640], 2], [[67641, 67643], 3], [67644, 2], [[67645, 67646], 3], [67647, 2], [[67648, 67669], 2], [67670, 3], [[67671, 67679], 2], [[67680, 67702], 2], [[67703, 67711], 2], [[67712, 67742], 2], [[67743, 67750], 3], [[67751, 67759], 2], [[67760, 67807], 3], [[67808, 67826], 2], [67827, 3], [[67828, 67829], 2], [[67830, 67834], 3], [[67835, 67839], 2], [[67840, 67861], 2], [[67862, 67865], 2], [[67866, 67867], 2], [[67868, 67870], 3], [67871, 2], [[67872, 67897], 2], [[67898, 67902], 3], [67903, 2], [[67904, 67967], 3], [[67968, 68023], 2], [[68024, 68027], 3], [[68028, 68029], 2], [[68030, 68031], 2], [[68032, 68047], 2], [[68048, 68049], 3], [[68050, 68095], 2], [[68096, 68099], 2], [68100, 3], [[68101, 68102], 2], [[68103, 68107], 3], [[68108, 68115], 2], [68116, 3], [[68117, 68119], 2], [68120, 3], [[68121, 68147], 2], [[68148, 68149], 2], [[68150, 68151], 3], [[68152, 68154], 2], [[68155, 68158], 3], [68159, 2], [[68160, 68167], 2], [68168, 2], [[68169, 68175], 3], [[68176, 68184], 2], [[68185, 68191], 3], [[68192, 68220], 2], [[68221, 68223], 2], [[68224, 68252], 2], [[68253, 68255], 2], [[68256, 68287], 3], [[68288, 68295], 2], [68296, 2], [[68297, 68326], 2], [[68327, 68330], 3], [[68331, 68342], 2], [[68343, 68351], 3], [[68352, 68405], 2], [[68406, 68408], 3], [[68409, 68415], 2], [[68416, 68437], 2], [[68438, 68439], 3], [[68440, 68447], 2], [[68448, 68466], 2], [[68467, 68471], 3], [[68472, 68479], 2], [[68480, 68497], 2], [[68498, 68504], 3], [[68505, 68508], 2], [[68509, 68520], 3], [[68521, 68527], 2], [[68528, 68607], 3], [[68608, 68680], 2], [[68681, 68735], 3], [68736, 1, "\u{10CC0}"], [68737, 1, "\u{10CC1}"], [68738, 1, "\u{10CC2}"], [68739, 1, "\u{10CC3}"], [68740, 1, "\u{10CC4}"], [68741, 1, "\u{10CC5}"], [68742, 1, "\u{10CC6}"], [68743, 1, "\u{10CC7}"], [68744, 1, "\u{10CC8}"], [68745, 1, "\u{10CC9}"], [68746, 1, "\u{10CCA}"], [68747, 1, "\u{10CCB}"], [68748, 1, "\u{10CCC}"], [68749, 1, "\u{10CCD}"], [68750, 1, "\u{10CCE}"], [68751, 1, "\u{10CCF}"], [68752, 1, "\u{10CD0}"], [68753, 1, "\u{10CD1}"], [68754, 1, "\u{10CD2}"], [68755, 1, "\u{10CD3}"], [68756, 1, "\u{10CD4}"], [68757, 1, "\u{10CD5}"], [68758, 1, "\u{10CD6}"], [68759, 1, "\u{10CD7}"], [68760, 1, "\u{10CD8}"], [68761, 1, "\u{10CD9}"], [68762, 1, "\u{10CDA}"], [68763, 1, "\u{10CDB}"], [68764, 1, "\u{10CDC}"], [68765, 1, "\u{10CDD}"], [68766, 1, "\u{10CDE}"], [68767, 1, "\u{10CDF}"], [68768, 1, "\u{10CE0}"], [68769, 1, "\u{10CE1}"], [68770, 1, "\u{10CE2}"], [68771, 1, "\u{10CE3}"], [68772, 1, "\u{10CE4}"], [68773, 1, "\u{10CE5}"], [68774, 1, "\u{10CE6}"], [68775, 1, "\u{10CE7}"], [68776, 1, "\u{10CE8}"], [68777, 1, "\u{10CE9}"], [68778, 1, "\u{10CEA}"], [68779, 1, "\u{10CEB}"], [68780, 1, "\u{10CEC}"], [68781, 1, "\u{10CED}"], [68782, 1, "\u{10CEE}"], [68783, 1, "\u{10CEF}"], [68784, 1, "\u{10CF0}"], [68785, 1, "\u{10CF1}"], [68786, 1, "\u{10CF2}"], [[68787, 68799], 3], [[68800, 68850], 2], [[68851, 68857], 3], [[68858, 68863], 2], [[68864, 68903], 2], [[68904, 68911], 3], [[68912, 68921], 2], [[68922, 69215], 3], [[69216, 69246], 2], [69247, 3], [[69248, 69289], 2], [69290, 3], [[69291, 69292], 2], [69293, 2], [[69294, 69295], 3], [[69296, 69297], 2], [[69298, 69372], 3], [[69373, 69375], 2], [[69376, 69404], 2], [[69405, 69414], 2], [69415, 2], [[69416, 69423], 3], [[69424, 69456], 2], [[69457, 69465], 2], [[69466, 69487], 3], [[69488, 69509], 2], [[69510, 69513], 2], [[69514, 69551], 3], [[69552, 69572], 2], [[69573, 69579], 2], [[69580, 69599], 3], [[69600, 69622], 2], [[69623, 69631], 3], [[69632, 69702], 2], [[69703, 69709], 2], [[69710, 69713], 3], [[69714, 69733], 2], [[69734, 69743], 2], [[69744, 69749], 2], [[69750, 69758], 3], [69759, 2], [[69760, 69818], 2], [[69819, 69820], 2], [69821, 3], [[69822, 69825], 2], [69826, 2], [[69827, 69836], 3], [69837, 3], [[69838, 69839], 3], [[69840, 69864], 2], [[69865, 69871], 3], [[69872, 69881], 2], [[69882, 69887], 3], [[69888, 69940], 2], [69941, 3], [[69942, 69951], 2], [[69952, 69955], 2], [[69956, 69958], 2], [69959, 2], [[69960, 69967], 3], [[69968, 70003], 2], [[70004, 70005], 2], [70006, 2], [[70007, 70015], 3], [[70016, 70084], 2], [[70085, 70088], 2], [[70089, 70092], 2], [70093, 2], [[70094, 70095], 2], [[70096, 70105], 2], [70106, 2], [70107, 2], [70108, 2], [[70109, 70111], 2], [70112, 3], [[70113, 70132], 2], [[70133, 70143], 3], [[70144, 70161], 2], [70162, 3], [[70163, 70199], 2], [[70200, 70205], 2], [70206, 2], [[70207, 70209], 2], [[70210, 70271], 3], [[70272, 70278], 2], [70279, 3], [70280, 2], [70281, 3], [[70282, 70285], 2], [70286, 3], [[70287, 70301], 2], [70302, 3], [[70303, 70312], 2], [70313, 2], [[70314, 70319], 3], [[70320, 70378], 2], [[70379, 70383], 3], [[70384, 70393], 2], [[70394, 70399], 3], [70400, 2], [[70401, 70403], 2], [70404, 3], [[70405, 70412], 2], [[70413, 70414], 3], [[70415, 70416], 2], [[70417, 70418], 3], [[70419, 70440], 2], [70441, 3], [[70442, 70448], 2], [70449, 3], [[70450, 70451], 2], [70452, 3], [[70453, 70457], 2], [70458, 3], [70459, 2], [[70460, 70468], 2], [[70469, 70470], 3], [[70471, 70472], 2], [[70473, 70474], 3], [[70475, 70477], 2], [[70478, 70479], 3], [70480, 2], [[70481, 70486], 3], [70487, 2], [[70488, 70492], 3], [[70493, 70499], 2], [[70500, 70501], 3], [[70502, 70508], 2], [[70509, 70511], 3], [[70512, 70516], 2], [[70517, 70655], 3], [[70656, 70730], 2], [[70731, 70735], 2], [[70736, 70745], 2], [70746, 2], [70747, 2], [70748, 3], [70749, 2], [70750, 2], [70751, 2], [[70752, 70753], 2], [[70754, 70783], 3], [[70784, 70853], 2], [70854, 2], [70855, 2], [[70856, 70863], 3], [[70864, 70873], 2], [[70874, 71039], 3], [[71040, 71093], 2], [[71094, 71095], 3], [[71096, 71104], 2], [[71105, 71113], 2], [[71114, 71127], 2], [[71128, 71133], 2], [[71134, 71167], 3], [[71168, 71232], 2], [[71233, 71235], 2], [71236, 2], [[71237, 71247], 3], [[71248, 71257], 2], [[71258, 71263], 3], [[71264, 71276], 2], [[71277, 71295], 3], [[71296, 71351], 2], [71352, 2], [71353, 2], [[71354, 71359], 3], [[71360, 71369], 2], [[71370, 71423], 3], [[71424, 71449], 2], [71450, 2], [[71451, 71452], 3], [[71453, 71467], 2], [[71468, 71471], 3], [[71472, 71481], 2], [[71482, 71487], 2], [[71488, 71494], 2], [[71495, 71679], 3], [[71680, 71738], 2], [71739, 2], [[71740, 71839], 3], [71840, 1, "\u{118C0}"], [71841, 1, "\u{118C1}"], [71842, 1, "\u{118C2}"], [71843, 1, "\u{118C3}"], [71844, 1, "\u{118C4}"], [71845, 1, "\u{118C5}"], [71846, 1, "\u{118C6}"], [71847, 1, "\u{118C7}"], [71848, 1, "\u{118C8}"], [71849, 1, "\u{118C9}"], [71850, 1, "\u{118CA}"], [71851, 1, "\u{118CB}"], [71852, 1, "\u{118CC}"], [71853, 1, "\u{118CD}"], [71854, 1, "\u{118CE}"], [71855, 1, "\u{118CF}"], [71856, 1, "\u{118D0}"], [71857, 1, "\u{118D1}"], [71858, 1, "\u{118D2}"], [71859, 1, "\u{118D3}"], [71860, 1, "\u{118D4}"], [71861, 1, "\u{118D5}"], [71862, 1, "\u{118D6}"], [71863, 1, "\u{118D7}"], [71864, 1, "\u{118D8}"], [71865, 1, "\u{118D9}"], [71866, 1, "\u{118DA}"], [71867, 1, "\u{118DB}"], [71868, 1, "\u{118DC}"], [71869, 1, "\u{118DD}"], [71870, 1, "\u{118DE}"], [71871, 1, "\u{118DF}"], [[71872, 71913], 2], [[71914, 71922], 2], [[71923, 71934], 3], [71935, 2], [[71936, 71942], 2], [[71943, 71944], 3], [71945, 2], [[71946, 71947], 3], [[71948, 71955], 2], [71956, 3], [[71957, 71958], 2], [71959, 3], [[71960, 71989], 2], [71990, 3], [[71991, 71992], 2], [[71993, 71994], 3], [[71995, 72003], 2], [[72004, 72006], 2], [[72007, 72015], 3], [[72016, 72025], 2], [[72026, 72095], 3], [[72096, 72103], 2], [[72104, 72105], 3], [[72106, 72151], 2], [[72152, 72153], 3], [[72154, 72161], 2], [72162, 2], [[72163, 72164], 2], [[72165, 72191], 3], [[72192, 72254], 2], [[72255, 72262], 2], [72263, 2], [[72264, 72271], 3], [[72272, 72323], 2], [[72324, 72325], 2], [[72326, 72345], 2], [[72346, 72348], 2], [72349, 2], [[72350, 72354], 2], [[72355, 72367], 3], [[72368, 72383], 2], [[72384, 72440], 2], [[72441, 72447], 3], [[72448, 72457], 2], [[72458, 72703], 3], [[72704, 72712], 2], [72713, 3], [[72714, 72758], 2], [72759, 3], [[72760, 72768], 2], [[72769, 72773], 2], [[72774, 72783], 3], [[72784, 72793], 2], [[72794, 72812], 2], [[72813, 72815], 3], [[72816, 72817], 2], [[72818, 72847], 2], [[72848, 72849], 3], [[72850, 72871], 2], [72872, 3], [[72873, 72886], 2], [[72887, 72959], 3], [[72960, 72966], 2], [72967, 3], [[72968, 72969], 2], [72970, 3], [[72971, 73014], 2], [[73015, 73017], 3], [73018, 2], [73019, 3], [[73020, 73021], 2], [73022, 3], [[73023, 73031], 2], [[73032, 73039], 3], [[73040, 73049], 2], [[73050, 73055], 3], [[73056, 73061], 2], [73062, 3], [[73063, 73064], 2], [73065, 3], [[73066, 73102], 2], [73103, 3], [[73104, 73105], 2], [73106, 3], [[73107, 73112], 2], [[73113, 73119], 3], [[73120, 73129], 2], [[73130, 73439], 3], [[73440, 73462], 2], [[73463, 73464], 2], [[73465, 73471], 3], [[73472, 73488], 2], [73489, 3], [[73490, 73530], 2], [[73531, 73533], 3], [[73534, 73538], 2], [[73539, 73551], 2], [[73552, 73561], 2], [[73562, 73647], 3], [73648, 2], [[73649, 73663], 3], [[73664, 73713], 2], [[73714, 73726], 3], [73727, 2], [[73728, 74606], 2], [[74607, 74648], 2], [74649, 2], [[74650, 74751], 3], [[74752, 74850], 2], [[74851, 74862], 2], [74863, 3], [[74864, 74867], 2], [74868, 2], [[74869, 74879], 3], [[74880, 75075], 2], [[75076, 77711], 3], [[77712, 77808], 2], [[77809, 77810], 2], [[77811, 77823], 3], [[77824, 78894], 2], [78895, 2], [[78896, 78904], 3], [[78905, 78911], 3], [[78912, 78933], 2], [[78934, 82943], 3], [[82944, 83526], 2], [[83527, 92159], 3], [[92160, 92728], 2], [[92729, 92735], 3], [[92736, 92766], 2], [92767, 3], [[92768, 92777], 2], [[92778, 92781], 3], [[92782, 92783], 2], [[92784, 92862], 2], [92863, 3], [[92864, 92873], 2], [[92874, 92879], 3], [[92880, 92909], 2], [[92910, 92911], 3], [[92912, 92916], 2], [92917, 2], [[92918, 92927], 3], [[92928, 92982], 2], [[92983, 92991], 2], [[92992, 92995], 2], [[92996, 92997], 2], [[92998, 93007], 3], [[93008, 93017], 2], [93018, 3], [[93019, 93025], 2], [93026, 3], [[93027, 93047], 2], [[93048, 93052], 3], [[93053, 93071], 2], [[93072, 93759], 3], [93760, 1, "\u{16E60}"], [93761, 1, "\u{16E61}"], [93762, 1, "\u{16E62}"], [93763, 1, "\u{16E63}"], [93764, 1, "\u{16E64}"], [93765, 1, "\u{16E65}"], [93766, 1, "\u{16E66}"], [93767, 1, "\u{16E67}"], [93768, 1, "\u{16E68}"], [93769, 1, "\u{16E69}"], [93770, 1, "\u{16E6A}"], [93771, 1, "\u{16E6B}"], [93772, 1, "\u{16E6C}"], [93773, 1, "\u{16E6D}"], [93774, 1, "\u{16E6E}"], [93775, 1, "\u{16E6F}"], [93776, 1, "\u{16E70}"], [93777, 1, "\u{16E71}"], [93778, 1, "\u{16E72}"], [93779, 1, "\u{16E73}"], [93780, 1, "\u{16E74}"], [93781, 1, "\u{16E75}"], [93782, 1, "\u{16E76}"], [93783, 1, "\u{16E77}"], [93784, 1, "\u{16E78}"], [93785, 1, "\u{16E79}"], [93786, 1, "\u{16E7A}"], [93787, 1, "\u{16E7B}"], [93788, 1, "\u{16E7C}"], [93789, 1, "\u{16E7D}"], [93790, 1, "\u{16E7E}"], [93791, 1, "\u{16E7F}"], [[93792, 93823], 2], [[93824, 93850], 2], [[93851, 93951], 3], [[93952, 94020], 2], [[94021, 94026], 2], [[94027, 94030], 3], [94031, 2], [[94032, 94078], 2], [[94079, 94087], 2], [[94088, 94094], 3], [[94095, 94111], 2], [[94112, 94175], 3], [94176, 2], [94177, 2], [94178, 2], [94179, 2], [94180, 2], [[94181, 94191], 3], [[94192, 94193], 2], [[94194, 94207], 3], [[94208, 100332], 2], [[100333, 100337], 2], [[100338, 100343], 2], [[100344, 100351], 3], [[100352, 101106], 2], [[101107, 101589], 2], [[101590, 101631], 3], [[101632, 101640], 2], [[101641, 110575], 3], [[110576, 110579], 2], [110580, 3], [[110581, 110587], 2], [110588, 3], [[110589, 110590], 2], [110591, 3], [[110592, 110593], 2], [[110594, 110878], 2], [[110879, 110882], 2], [[110883, 110897], 3], [110898, 2], [[110899, 110927], 3], [[110928, 110930], 2], [[110931, 110932], 3], [110933, 2], [[110934, 110947], 3], [[110948, 110951], 2], [[110952, 110959], 3], [[110960, 111355], 2], [[111356, 113663], 3], [[113664, 113770], 2], [[113771, 113775], 3], [[113776, 113788], 2], [[113789, 113791], 3], [[113792, 113800], 2], [[113801, 113807], 3], [[113808, 113817], 2], [[113818, 113819], 3], [113820, 2], [[113821, 113822], 2], [113823, 2], [[113824, 113827], 7], [[113828, 118527], 3], [[118528, 118573], 2], [[118574, 118575], 3], [[118576, 118598], 2], [[118599, 118607], 3], [[118608, 118723], 2], [[118724, 118783], 3], [[118784, 119029], 2], [[119030, 119039], 3], [[119040, 119078], 2], [[119079, 119080], 3], [119081, 2], [[119082, 119133], 2], [119134, 1, "\u{1D157}\u{1D165}"], [119135, 1, "\u{1D158}\u{1D165}"], [119136, 1, "\u{1D158}\u{1D165}\u{1D16E}"], [119137, 1, "\u{1D158}\u{1D165}\u{1D16F}"], [119138, 1, "\u{1D158}\u{1D165}\u{1D170}"], [119139, 1, "\u{1D158}\u{1D165}\u{1D171}"], [119140, 1, "\u{1D158}\u{1D165}\u{1D172}"], [[119141, 119154], 2], [[119155, 119162], 3], [[119163, 119226], 2], [119227, 1, "\u{1D1B9}\u{1D165}"], [119228, 1, "\u{1D1BA}\u{1D165}"], [119229, 1, "\u{1D1B9}\u{1D165}\u{1D16E}"], [119230, 1, "\u{1D1BA}\u{1D165}\u{1D16E}"], [119231, 1, "\u{1D1B9}\u{1D165}\u{1D16F}"], [119232, 1, "\u{1D1BA}\u{1D165}\u{1D16F}"], [[119233, 119261], 2], [[119262, 119272], 2], [[119273, 119274], 2], [[119275, 119295], 3], [[119296, 119365], 2], [[119366, 119487], 3], [[119488, 119507], 2], [[119508, 119519], 3], [[119520, 119539], 2], [[119540, 119551], 3], [[119552, 119638], 2], [[119639, 119647], 3], [[119648, 119665], 2], [[119666, 119672], 2], [[119673, 119807], 3], [119808, 1, "a"], [119809, 1, "b"], [119810, 1, "c"], [119811, 1, "d"], [119812, 1, "e"], [119813, 1, "f"], [119814, 1, "g"], [119815, 1, "h"], [119816, 1, "i"], [119817, 1, "j"], [119818, 1, "k"], [119819, 1, "l"], [119820, 1, "m"], [119821, 1, "n"], [119822, 1, "o"], [119823, 1, "p"], [119824, 1, "q"], [119825, 1, "r"], [119826, 1, "s"], [119827, 1, "t"], [119828, 1, "u"], [119829, 1, "v"], [119830, 1, "w"], [119831, 1, "x"], [119832, 1, "y"], [119833, 1, "z"], [119834, 1, "a"], [119835, 1, "b"], [119836, 1, "c"], [119837, 1, "d"], [119838, 1, "e"], [119839, 1, "f"], [119840, 1, "g"], [119841, 1, "h"], [119842, 1, "i"], [119843, 1, "j"], [119844, 1, "k"], [119845, 1, "l"], [119846, 1, "m"], [119847, 1, "n"], [119848, 1, "o"], [119849, 1, "p"], [119850, 1, "q"], [119851, 1, "r"], [119852, 1, "s"], [119853, 1, "t"], [119854, 1, "u"], [119855, 1, "v"], [119856, 1, "w"], [119857, 1, "x"], [119858, 1, "y"], [119859, 1, "z"], [119860, 1, "a"], [119861, 1, "b"], [119862, 1, "c"], [119863, 1, "d"], [119864, 1, "e"], [119865, 1, "f"], [119866, 1, "g"], [119867, 1, "h"], [119868, 1, "i"], [119869, 1, "j"], [119870, 1, "k"], [119871, 1, "l"], [119872, 1, "m"], [119873, 1, "n"], [119874, 1, "o"], [119875, 1, "p"], [119876, 1, "q"], [119877, 1, "r"], [119878, 1, "s"], [119879, 1, "t"], [119880, 1, "u"], [119881, 1, "v"], [119882, 1, "w"], [119883, 1, "x"], [119884, 1, "y"], [119885, 1, "z"], [119886, 1, "a"], [119887, 1, "b"], [119888, 1, "c"], [119889, 1, "d"], [119890, 1, "e"], [119891, 1, "f"], [119892, 1, "g"], [119893, 3], [119894, 1, "i"], [119895, 1, "j"], [119896, 1, "k"], [119897, 1, "l"], [119898, 1, "m"], [119899, 1, "n"], [119900, 1, "o"], [119901, 1, "p"], [119902, 1, "q"], [119903, 1, "r"], [119904, 1, "s"], [119905, 1, "t"], [119906, 1, "u"], [119907, 1, "v"], [119908, 1, "w"], [119909, 1, "x"], [119910, 1, "y"], [119911, 1, "z"], [119912, 1, "a"], [119913, 1, "b"], [119914, 1, "c"], [119915, 1, "d"], [119916, 1, "e"], [119917, 1, "f"], [119918, 1, "g"], [119919, 1, "h"], [119920, 1, "i"], [119921, 1, "j"], [119922, 1, "k"], [119923, 1, "l"], [119924, 1, "m"], [119925, 1, "n"], [119926, 1, "o"], [119927, 1, "p"], [119928, 1, "q"], [119929, 1, "r"], [119930, 1, "s"], [119931, 1, "t"], [119932, 1, "u"], [119933, 1, "v"], [119934, 1, "w"], [119935, 1, "x"], [119936, 1, "y"], [119937, 1, "z"], [119938, 1, "a"], [119939, 1, "b"], [119940, 1, "c"], [119941, 1, "d"], [119942, 1, "e"], [119943, 1, "f"], [119944, 1, "g"], [119945, 1, "h"], [119946, 1, "i"], [119947, 1, "j"], [119948, 1, "k"], [119949, 1, "l"], [119950, 1, "m"], [119951, 1, "n"], [119952, 1, "o"], [119953, 1, "p"], [119954, 1, "q"], [119955, 1, "r"], [119956, 1, "s"], [119957, 1, "t"], [119958, 1, "u"], [119959, 1, "v"], [119960, 1, "w"], [119961, 1, "x"], [119962, 1, "y"], [119963, 1, "z"], [119964, 1, "a"], [119965, 3], [119966, 1, "c"], [119967, 1, "d"], [[119968, 119969], 3], [119970, 1, "g"], [[119971, 119972], 3], [119973, 1, "j"], [119974, 1, "k"], [[119975, 119976], 3], [119977, 1, "n"], [119978, 1, "o"], [119979, 1, "p"], [119980, 1, "q"], [119981, 3], [119982, 1, "s"], [119983, 1, "t"], [119984, 1, "u"], [119985, 1, "v"], [119986, 1, "w"], [119987, 1, "x"], [119988, 1, "y"], [119989, 1, "z"], [119990, 1, "a"], [119991, 1, "b"], [119992, 1, "c"], [119993, 1, "d"], [119994, 3], [119995, 1, "f"], [119996, 3], [119997, 1, "h"], [119998, 1, "i"], [119999, 1, "j"], [12e4, 1, "k"], [120001, 1, "l"], [120002, 1, "m"], [120003, 1, "n"], [120004, 3], [120005, 1, "p"], [120006, 1, "q"], [120007, 1, "r"], [120008, 1, "s"], [120009, 1, "t"], [120010, 1, "u"], [120011, 1, "v"], [120012, 1, "w"], [120013, 1, "x"], [120014, 1, "y"], [120015, 1, "z"], [120016, 1, "a"], [120017, 1, "b"], [120018, 1, "c"], [120019, 1, "d"], [120020, 1, "e"], [120021, 1, "f"], [120022, 1, "g"], [120023, 1, "h"], [120024, 1, "i"], [120025, 1, "j"], [120026, 1, "k"], [120027, 1, "l"], [120028, 1, "m"], [120029, 1, "n"], [120030, 1, "o"], [120031, 1, "p"], [120032, 1, "q"], [120033, 1, "r"], [120034, 1, "s"], [120035, 1, "t"], [120036, 1, "u"], [120037, 1, "v"], [120038, 1, "w"], [120039, 1, "x"], [120040, 1, "y"], [120041, 1, "z"], [120042, 1, "a"], [120043, 1, "b"], [120044, 1, "c"], [120045, 1, "d"], [120046, 1, "e"], [120047, 1, "f"], [120048, 1, "g"], [120049, 1, "h"], [120050, 1, "i"], [120051, 1, "j"], [120052, 1, "k"], [120053, 1, "l"], [120054, 1, "m"], [120055, 1, "n"], [120056, 1, "o"], [120057, 1, "p"], [120058, 1, "q"], [120059, 1, "r"], [120060, 1, "s"], [120061, 1, "t"], [120062, 1, "u"], [120063, 1, "v"], [120064, 1, "w"], [120065, 1, "x"], [120066, 1, "y"], [120067, 1, "z"], [120068, 1, "a"], [120069, 1, "b"], [120070, 3], [120071, 1, "d"], [120072, 1, "e"], [120073, 1, "f"], [120074, 1, "g"], [[120075, 120076], 3], [120077, 1, "j"], [120078, 1, "k"], [120079, 1, "l"], [120080, 1, "m"], [120081, 1, "n"], [120082, 1, "o"], [120083, 1, "p"], [120084, 1, "q"], [120085, 3], [120086, 1, "s"], [120087, 1, "t"], [120088, 1, "u"], [120089, 1, "v"], [120090, 1, "w"], [120091, 1, "x"], [120092, 1, "y"], [120093, 3], [120094, 1, "a"], [120095, 1, "b"], [120096, 1, "c"], [120097, 1, "d"], [120098, 1, "e"], [120099, 1, "f"], [120100, 1, "g"], [120101, 1, "h"], [120102, 1, "i"], [120103, 1, "j"], [120104, 1, "k"], [120105, 1, "l"], [120106, 1, "m"], [120107, 1, "n"], [120108, 1, "o"], [120109, 1, "p"], [120110, 1, "q"], [120111, 1, "r"], [120112, 1, "s"], [120113, 1, "t"], [120114, 1, "u"], [120115, 1, "v"], [120116, 1, "w"], [120117, 1, "x"], [120118, 1, "y"], [120119, 1, "z"], [120120, 1, "a"], [120121, 1, "b"], [120122, 3], [120123, 1, "d"], [120124, 1, "e"], [120125, 1, "f"], [120126, 1, "g"], [120127, 3], [120128, 1, "i"], [120129, 1, "j"], [120130, 1, "k"], [120131, 1, "l"], [120132, 1, "m"], [120133, 3], [120134, 1, "o"], [[120135, 120137], 3], [120138, 1, "s"], [120139, 1, "t"], [120140, 1, "u"], [120141, 1, "v"], [120142, 1, "w"], [120143, 1, "x"], [120144, 1, "y"], [120145, 3], [120146, 1, "a"], [120147, 1, "b"], [120148, 1, "c"], [120149, 1, "d"], [120150, 1, "e"], [120151, 1, "f"], [120152, 1, "g"], [120153, 1, "h"], [120154, 1, "i"], [120155, 1, "j"], [120156, 1, "k"], [120157, 1, "l"], [120158, 1, "m"], [120159, 1, "n"], [120160, 1, "o"], [120161, 1, "p"], [120162, 1, "q"], [120163, 1, "r"], [120164, 1, "s"], [120165, 1, "t"], [120166, 1, "u"], [120167, 1, "v"], [120168, 1, "w"], [120169, 1, "x"], [120170, 1, "y"], [120171, 1, "z"], [120172, 1, "a"], [120173, 1, "b"], [120174, 1, "c"], [120175, 1, "d"], [120176, 1, "e"], [120177, 1, "f"], [120178, 1, "g"], [120179, 1, "h"], [120180, 1, "i"], [120181, 1, "j"], [120182, 1, "k"], [120183, 1, "l"], [120184, 1, "m"], [120185, 1, "n"], [120186, 1, "o"], [120187, 1, "p"], [120188, 1, "q"], [120189, 1, "r"], [120190, 1, "s"], [120191, 1, "t"], [120192, 1, "u"], [120193, 1, "v"], [120194, 1, "w"], [120195, 1, "x"], [120196, 1, "y"], [120197, 1, "z"], [120198, 1, "a"], [120199, 1, "b"], [120200, 1, "c"], [120201, 1, "d"], [120202, 1, "e"], [120203, 1, "f"], [120204, 1, "g"], [120205, 1, "h"], [120206, 1, "i"], [120207, 1, "j"], [120208, 1, "k"], [120209, 1, "l"], [120210, 1, "m"], [120211, 1, "n"], [120212, 1, "o"], [120213, 1, "p"], [120214, 1, "q"], [120215, 1, "r"], [120216, 1, "s"], [120217, 1, "t"], [120218, 1, "u"], [120219, 1, "v"], [120220, 1, "w"], [120221, 1, "x"], [120222, 1, "y"], [120223, 1, "z"], [120224, 1, "a"], [120225, 1, "b"], [120226, 1, "c"], [120227, 1, "d"], [120228, 1, "e"], [120229, 1, "f"], [120230, 1, "g"], [120231, 1, "h"], [120232, 1, "i"], [120233, 1, "j"], [120234, 1, "k"], [120235, 1, "l"], [120236, 1, "m"], [120237, 1, "n"], [120238, 1, "o"], [120239, 1, "p"], [120240, 1, "q"], [120241, 1, "r"], [120242, 1, "s"], [120243, 1, "t"], [120244, 1, "u"], [120245, 1, "v"], [120246, 1, "w"], [120247, 1, "x"], [120248, 1, "y"], [120249, 1, "z"], [120250, 1, "a"], [120251, 1, "b"], [120252, 1, "c"], [120253, 1, "d"], [120254, 1, "e"], [120255, 1, "f"], [120256, 1, "g"], [120257, 1, "h"], [120258, 1, "i"], [120259, 1, "j"], [120260, 1, "k"], [120261, 1, "l"], [120262, 1, "m"], [120263, 1, "n"], [120264, 1, "o"], [120265, 1, "p"], [120266, 1, "q"], [120267, 1, "r"], [120268, 1, "s"], [120269, 1, "t"], [120270, 1, "u"], [120271, 1, "v"], [120272, 1, "w"], [120273, 1, "x"], [120274, 1, "y"], [120275, 1, "z"], [120276, 1, "a"], [120277, 1, "b"], [120278, 1, "c"], [120279, 1, "d"], [120280, 1, "e"], [120281, 1, "f"], [120282, 1, "g"], [120283, 1, "h"], [120284, 1, "i"], [120285, 1, "j"], [120286, 1, "k"], [120287, 1, "l"], [120288, 1, "m"], [120289, 1, "n"], [120290, 1, "o"], [120291, 1, "p"], [120292, 1, "q"], [120293, 1, "r"], [120294, 1, "s"], [120295, 1, "t"], [120296, 1, "u"], [120297, 1, "v"], [120298, 1, "w"], [120299, 1, "x"], [120300, 1, "y"], [120301, 1, "z"], [120302, 1, "a"], [120303, 1, "b"], [120304, 1, "c"], [120305, 1, "d"], [120306, 1, "e"], [120307, 1, "f"], [120308, 1, "g"], [120309, 1, "h"], [120310, 1, "i"], [120311, 1, "j"], [120312, 1, "k"], [120313, 1, "l"], [120314, 1, "m"], [120315, 1, "n"], [120316, 1, "o"], [120317, 1, "p"], [120318, 1, "q"], [120319, 1, "r"], [120320, 1, "s"], [120321, 1, "t"], [120322, 1, "u"], [120323, 1, "v"], [120324, 1, "w"], [120325, 1, "x"], [120326, 1, "y"], [120327, 1, "z"], [120328, 1, "a"], [120329, 1, "b"], [120330, 1, "c"], [120331, 1, "d"], [120332, 1, "e"], [120333, 1, "f"], [120334, 1, "g"], [120335, 1, "h"], [120336, 1, "i"], [120337, 1, "j"], [120338, 1, "k"], [120339, 1, "l"], [120340, 1, "m"], [120341, 1, "n"], [120342, 1, "o"], [120343, 1, "p"], [120344, 1, "q"], [120345, 1, "r"], [120346, 1, "s"], [120347, 1, "t"], [120348, 1, "u"], [120349, 1, "v"], [120350, 1, "w"], [120351, 1, "x"], [120352, 1, "y"], [120353, 1, "z"], [120354, 1, "a"], [120355, 1, "b"], [120356, 1, "c"], [120357, 1, "d"], [120358, 1, "e"], [120359, 1, "f"], [120360, 1, "g"], [120361, 1, "h"], [120362, 1, "i"], [120363, 1, "j"], [120364, 1, "k"], [120365, 1, "l"], [120366, 1, "m"], [120367, 1, "n"], [120368, 1, "o"], [120369, 1, "p"], [120370, 1, "q"], [120371, 1, "r"], [120372, 1, "s"], [120373, 1, "t"], [120374, 1, "u"], [120375, 1, "v"], [120376, 1, "w"], [120377, 1, "x"], [120378, 1, "y"], [120379, 1, "z"], [120380, 1, "a"], [120381, 1, "b"], [120382, 1, "c"], [120383, 1, "d"], [120384, 1, "e"], [120385, 1, "f"], [120386, 1, "g"], [120387, 1, "h"], [120388, 1, "i"], [120389, 1, "j"], [120390, 1, "k"], [120391, 1, "l"], [120392, 1, "m"], [120393, 1, "n"], [120394, 1, "o"], [120395, 1, "p"], [120396, 1, "q"], [120397, 1, "r"], [120398, 1, "s"], [120399, 1, "t"], [120400, 1, "u"], [120401, 1, "v"], [120402, 1, "w"], [120403, 1, "x"], [120404, 1, "y"], [120405, 1, "z"], [120406, 1, "a"], [120407, 1, "b"], [120408, 1, "c"], [120409, 1, "d"], [120410, 1, "e"], [120411, 1, "f"], [120412, 1, "g"], [120413, 1, "h"], [120414, 1, "i"], [120415, 1, "j"], [120416, 1, "k"], [120417, 1, "l"], [120418, 1, "m"], [120419, 1, "n"], [120420, 1, "o"], [120421, 1, "p"], [120422, 1, "q"], [120423, 1, "r"], [120424, 1, "s"], [120425, 1, "t"], [120426, 1, "u"], [120427, 1, "v"], [120428, 1, "w"], [120429, 1, "x"], [120430, 1, "y"], [120431, 1, "z"], [120432, 1, "a"], [120433, 1, "b"], [120434, 1, "c"], [120435, 1, "d"], [120436, 1, "e"], [120437, 1, "f"], [120438, 1, "g"], [120439, 1, "h"], [120440, 1, "i"], [120441, 1, "j"], [120442, 1, "k"], [120443, 1, "l"], [120444, 1, "m"], [120445, 1, "n"], [120446, 1, "o"], [120447, 1, "p"], [120448, 1, "q"], [120449, 1, "r"], [120450, 1, "s"], [120451, 1, "t"], [120452, 1, "u"], [120453, 1, "v"], [120454, 1, "w"], [120455, 1, "x"], [120456, 1, "y"], [120457, 1, "z"], [120458, 1, "a"], [120459, 1, "b"], [120460, 1, "c"], [120461, 1, "d"], [120462, 1, "e"], [120463, 1, "f"], [120464, 1, "g"], [120465, 1, "h"], [120466, 1, "i"], [120467, 1, "j"], [120468, 1, "k"], [120469, 1, "l"], [120470, 1, "m"], [120471, 1, "n"], [120472, 1, "o"], [120473, 1, "p"], [120474, 1, "q"], [120475, 1, "r"], [120476, 1, "s"], [120477, 1, "t"], [120478, 1, "u"], [120479, 1, "v"], [120480, 1, "w"], [120481, 1, "x"], [120482, 1, "y"], [120483, 1, "z"], [120484, 1, "\u0131"], [120485, 1, "\u0237"], [[120486, 120487], 3], [120488, 1, "\u03B1"], [120489, 1, "\u03B2"], [120490, 1, "\u03B3"], [120491, 1, "\u03B4"], [120492, 1, "\u03B5"], [120493, 1, "\u03B6"], [120494, 1, "\u03B7"], [120495, 1, "\u03B8"], [120496, 1, "\u03B9"], [120497, 1, "\u03BA"], [120498, 1, "\u03BB"], [120499, 1, "\u03BC"], [120500, 1, "\u03BD"], [120501, 1, "\u03BE"], [120502, 1, "\u03BF"], [120503, 1, "\u03C0"], [120504, 1, "\u03C1"], [120505, 1, "\u03B8"], [120506, 1, "\u03C3"], [120507, 1, "\u03C4"], [120508, 1, "\u03C5"], [120509, 1, "\u03C6"], [120510, 1, "\u03C7"], [120511, 1, "\u03C8"], [120512, 1, "\u03C9"], [120513, 1, "\u2207"], [120514, 1, "\u03B1"], [120515, 1, "\u03B2"], [120516, 1, "\u03B3"], [120517, 1, "\u03B4"], [120518, 1, "\u03B5"], [120519, 1, "\u03B6"], [120520, 1, "\u03B7"], [120521, 1, "\u03B8"], [120522, 1, "\u03B9"], [120523, 1, "\u03BA"], [120524, 1, "\u03BB"], [120525, 1, "\u03BC"], [120526, 1, "\u03BD"], [120527, 1, "\u03BE"], [120528, 1, "\u03BF"], [120529, 1, "\u03C0"], [120530, 1, "\u03C1"], [[120531, 120532], 1, "\u03C3"], [120533, 1, "\u03C4"], [120534, 1, "\u03C5"], [120535, 1, "\u03C6"], [120536, 1, "\u03C7"], [120537, 1, "\u03C8"], [120538, 1, "\u03C9"], [120539, 1, "\u2202"], [120540, 1, "\u03B5"], [120541, 1, "\u03B8"], [120542, 1, "\u03BA"], [120543, 1, "\u03C6"], [120544, 1, "\u03C1"], [120545, 1, "\u03C0"], [120546, 1, "\u03B1"], [120547, 1, "\u03B2"], [120548, 1, "\u03B3"], [120549, 1, "\u03B4"], [120550, 1, "\u03B5"], [120551, 1, "\u03B6"], [120552, 1, "\u03B7"], [120553, 1, "\u03B8"], [120554, 1, "\u03B9"], [120555, 1, "\u03BA"], [120556, 1, "\u03BB"], [120557, 1, "\u03BC"], [120558, 1, "\u03BD"], [120559, 1, "\u03BE"], [120560, 1, "\u03BF"], [120561, 1, "\u03C0"], [120562, 1, "\u03C1"], [120563, 1, "\u03B8"], [120564, 1, "\u03C3"], [120565, 1, "\u03C4"], [120566, 1, "\u03C5"], [120567, 1, "\u03C6"], [120568, 1, "\u03C7"], [120569, 1, "\u03C8"], [120570, 1, "\u03C9"], [120571, 1, "\u2207"], [120572, 1, "\u03B1"], [120573, 1, "\u03B2"], [120574, 1, "\u03B3"], [120575, 1, "\u03B4"], [120576, 1, "\u03B5"], [120577, 1, "\u03B6"], [120578, 1, "\u03B7"], [120579, 1, "\u03B8"], [120580, 1, "\u03B9"], [120581, 1, "\u03BA"], [120582, 1, "\u03BB"], [120583, 1, "\u03BC"], [120584, 1, "\u03BD"], [120585, 1, "\u03BE"], [120586, 1, "\u03BF"], [120587, 1, "\u03C0"], [120588, 1, "\u03C1"], [[120589, 120590], 1, "\u03C3"], [120591, 1, "\u03C4"], [120592, 1, "\u03C5"], [120593, 1, "\u03C6"], [120594, 1, "\u03C7"], [120595, 1, "\u03C8"], [120596, 1, "\u03C9"], [120597, 1, "\u2202"], [120598, 1, "\u03B5"], [120599, 1, "\u03B8"], [120600, 1, "\u03BA"], [120601, 1, "\u03C6"], [120602, 1, "\u03C1"], [120603, 1, "\u03C0"], [120604, 1, "\u03B1"], [120605, 1, "\u03B2"], [120606, 1, "\u03B3"], [120607, 1, "\u03B4"], [120608, 1, "\u03B5"], [120609, 1, "\u03B6"], [120610, 1, "\u03B7"], [120611, 1, "\u03B8"], [120612, 1, "\u03B9"], [120613, 1, "\u03BA"], [120614, 1, "\u03BB"], [120615, 1, "\u03BC"], [120616, 1, "\u03BD"], [120617, 1, "\u03BE"], [120618, 1, "\u03BF"], [120619, 1, "\u03C0"], [120620, 1, "\u03C1"], [120621, 1, "\u03B8"], [120622, 1, "\u03C3"], [120623, 1, "\u03C4"], [120624, 1, "\u03C5"], [120625, 1, "\u03C6"], [120626, 1, "\u03C7"], [120627, 1, "\u03C8"], [120628, 1, "\u03C9"], [120629, 1, "\u2207"], [120630, 1, "\u03B1"], [120631, 1, "\u03B2"], [120632, 1, "\u03B3"], [120633, 1, "\u03B4"], [120634, 1, "\u03B5"], [120635, 1, "\u03B6"], [120636, 1, "\u03B7"], [120637, 1, "\u03B8"], [120638, 1, "\u03B9"], [120639, 1, "\u03BA"], [120640, 1, "\u03BB"], [120641, 1, "\u03BC"], [120642, 1, "\u03BD"], [120643, 1, "\u03BE"], [120644, 1, "\u03BF"], [120645, 1, "\u03C0"], [120646, 1, "\u03C1"], [[120647, 120648], 1, "\u03C3"], [120649, 1, "\u03C4"], [120650, 1, "\u03C5"], [120651, 1, "\u03C6"], [120652, 1, "\u03C7"], [120653, 1, "\u03C8"], [120654, 1, "\u03C9"], [120655, 1, "\u2202"], [120656, 1, "\u03B5"], [120657, 1, "\u03B8"], [120658, 1, "\u03BA"], [120659, 1, "\u03C6"], [120660, 1, "\u03C1"], [120661, 1, "\u03C0"], [120662, 1, "\u03B1"], [120663, 1, "\u03B2"], [120664, 1, "\u03B3"], [120665, 1, "\u03B4"], [120666, 1, "\u03B5"], [120667, 1, "\u03B6"], [120668, 1, "\u03B7"], [120669, 1, "\u03B8"], [120670, 1, "\u03B9"], [120671, 1, "\u03BA"], [120672, 1, "\u03BB"], [120673, 1, "\u03BC"], [120674, 1, "\u03BD"], [120675, 1, "\u03BE"], [120676, 1, "\u03BF"], [120677, 1, "\u03C0"], [120678, 1, "\u03C1"], [120679, 1, "\u03B8"], [120680, 1, "\u03C3"], [120681, 1, "\u03C4"], [120682, 1, "\u03C5"], [120683, 1, "\u03C6"], [120684, 1, "\u03C7"], [120685, 1, "\u03C8"], [120686, 1, "\u03C9"], [120687, 1, "\u2207"], [120688, 1, "\u03B1"], [120689, 1, "\u03B2"], [120690, 1, "\u03B3"], [120691, 1, "\u03B4"], [120692, 1, "\u03B5"], [120693, 1, "\u03B6"], [120694, 1, "\u03B7"], [120695, 1, "\u03B8"], [120696, 1, "\u03B9"], [120697, 1, "\u03BA"], [120698, 1, "\u03BB"], [120699, 1, "\u03BC"], [120700, 1, "\u03BD"], [120701, 1, "\u03BE"], [120702, 1, "\u03BF"], [120703, 1, "\u03C0"], [120704, 1, "\u03C1"], [[120705, 120706], 1, "\u03C3"], [120707, 1, "\u03C4"], [120708, 1, "\u03C5"], [120709, 1, "\u03C6"], [120710, 1, "\u03C7"], [120711, 1, "\u03C8"], [120712, 1, "\u03C9"], [120713, 1, "\u2202"], [120714, 1, "\u03B5"], [120715, 1, "\u03B8"], [120716, 1, "\u03BA"], [120717, 1, "\u03C6"], [120718, 1, "\u03C1"], [120719, 1, "\u03C0"], [120720, 1, "\u03B1"], [120721, 1, "\u03B2"], [120722, 1, "\u03B3"], [120723, 1, "\u03B4"], [120724, 1, "\u03B5"], [120725, 1, "\u03B6"], [120726, 1, "\u03B7"], [120727, 1, "\u03B8"], [120728, 1, "\u03B9"], [120729, 1, "\u03BA"], [120730, 1, "\u03BB"], [120731, 1, "\u03BC"], [120732, 1, "\u03BD"], [120733, 1, "\u03BE"], [120734, 1, "\u03BF"], [120735, 1, "\u03C0"], [120736, 1, "\u03C1"], [120737, 1, "\u03B8"], [120738, 1, "\u03C3"], [120739, 1, "\u03C4"], [120740, 1, "\u03C5"], [120741, 1, "\u03C6"], [120742, 1, "\u03C7"], [120743, 1, "\u03C8"], [120744, 1, "\u03C9"], [120745, 1, "\u2207"], [120746, 1, "\u03B1"], [120747, 1, "\u03B2"], [120748, 1, "\u03B3"], [120749, 1, "\u03B4"], [120750, 1, "\u03B5"], [120751, 1, "\u03B6"], [120752, 1, "\u03B7"], [120753, 1, "\u03B8"], [120754, 1, "\u03B9"], [120755, 1, "\u03BA"], [120756, 1, "\u03BB"], [120757, 1, "\u03BC"], [120758, 1, "\u03BD"], [120759, 1, "\u03BE"], [120760, 1, "\u03BF"], [120761, 1, "\u03C0"], [120762, 1, "\u03C1"], [[120763, 120764], 1, "\u03C3"], [120765, 1, "\u03C4"], [120766, 1, "\u03C5"], [120767, 1, "\u03C6"], [120768, 1, "\u03C7"], [120769, 1, "\u03C8"], [120770, 1, "\u03C9"], [120771, 1, "\u2202"], [120772, 1, "\u03B5"], [120773, 1, "\u03B8"], [120774, 1, "\u03BA"], [120775, 1, "\u03C6"], [120776, 1, "\u03C1"], [120777, 1, "\u03C0"], [[120778, 120779], 1, "\u03DD"], [[120780, 120781], 3], [120782, 1, "0"], [120783, 1, "1"], [120784, 1, "2"], [120785, 1, "3"], [120786, 1, "4"], [120787, 1, "5"], [120788, 1, "6"], [120789, 1, "7"], [120790, 1, "8"], [120791, 1, "9"], [120792, 1, "0"], [120793, 1, "1"], [120794, 1, "2"], [120795, 1, "3"], [120796, 1, "4"], [120797, 1, "5"], [120798, 1, "6"], [120799, 1, "7"], [120800, 1, "8"], [120801, 1, "9"], [120802, 1, "0"], [120803, 1, "1"], [120804, 1, "2"], [120805, 1, "3"], [120806, 1, "4"], [120807, 1, "5"], [120808, 1, "6"], [120809, 1, "7"], [120810, 1, "8"], [120811, 1, "9"], [120812, 1, "0"], [120813, 1, "1"], [120814, 1, "2"], [120815, 1, "3"], [120816, 1, "4"], [120817, 1, "5"], [120818, 1, "6"], [120819, 1, "7"], [120820, 1, "8"], [120821, 1, "9"], [120822, 1, "0"], [120823, 1, "1"], [120824, 1, "2"], [120825, 1, "3"], [120826, 1, "4"], [120827, 1, "5"], [120828, 1, "6"], [120829, 1, "7"], [120830, 1, "8"], [120831, 1, "9"], [[120832, 121343], 2], [[121344, 121398], 2], [[121399, 121402], 2], [[121403, 121452], 2], [[121453, 121460], 2], [121461, 2], [[121462, 121475], 2], [121476, 2], [[121477, 121483], 2], [[121484, 121498], 3], [[121499, 121503], 2], [121504, 3], [[121505, 121519], 2], [[121520, 122623], 3], [[122624, 122654], 2], [[122655, 122660], 3], [[122661, 122666], 2], [[122667, 122879], 3], [[122880, 122886], 2], [122887, 3], [[122888, 122904], 2], [[122905, 122906], 3], [[122907, 122913], 2], [122914, 3], [[122915, 122916], 2], [122917, 3], [[122918, 122922], 2], [[122923, 122927], 3], [122928, 1, "\u0430"], [122929, 1, "\u0431"], [122930, 1, "\u0432"], [122931, 1, "\u0433"], [122932, 1, "\u0434"], [122933, 1, "\u0435"], [122934, 1, "\u0436"], [122935, 1, "\u0437"], [122936, 1, "\u0438"], [122937, 1, "\u043A"], [122938, 1, "\u043B"], [122939, 1, "\u043C"], [122940, 1, "\u043E"], [122941, 1, "\u043F"], [122942, 1, "\u0440"], [122943, 1, "\u0441"], [122944, 1, "\u0442"], [122945, 1, "\u0443"], [122946, 1, "\u0444"], [122947, 1, "\u0445"], [122948, 1, "\u0446"], [122949, 1, "\u0447"], [122950, 1, "\u0448"], [122951, 1, "\u044B"], [122952, 1, "\u044D"], [122953, 1, "\u044E"], [122954, 1, "\uA689"], [122955, 1, "\u04D9"], [122956, 1, "\u0456"], [122957, 1, "\u0458"], [122958, 1, "\u04E9"], [122959, 1, "\u04AF"], [122960, 1, "\u04CF"], [122961, 1, "\u0430"], [122962, 1, "\u0431"], [122963, 1, "\u0432"], [122964, 1, "\u0433"], [122965, 1, "\u0434"], [122966, 1, "\u0435"], [122967, 1, "\u0436"], [122968, 1, "\u0437"], [122969, 1, "\u0438"], [122970, 1, "\u043A"], [122971, 1, "\u043B"], [122972, 1, "\u043E"], [122973, 1, "\u043F"], [122974, 1, "\u0441"], [122975, 1, "\u0443"], [122976, 1, "\u0444"], [122977, 1, "\u0445"], [122978, 1, "\u0446"], [122979, 1, "\u0447"], [122980, 1, "\u0448"], [122981, 1, "\u044A"], [122982, 1, "\u044B"], [122983, 1, "\u0491"], [122984, 1, "\u0456"], [122985, 1, "\u0455"], [122986, 1, "\u045F"], [122987, 1, "\u04AB"], [122988, 1, "\uA651"], [122989, 1, "\u04B1"], [[122990, 123022], 3], [123023, 2], [[123024, 123135], 3], [[123136, 123180], 2], [[123181, 123183], 3], [[123184, 123197], 2], [[123198, 123199], 3], [[123200, 123209], 2], [[123210, 123213], 3], [123214, 2], [123215, 2], [[123216, 123535], 3], [[123536, 123566], 2], [[123567, 123583], 3], [[123584, 123641], 2], [[123642, 123646], 3], [123647, 2], [[123648, 124111], 3], [[124112, 124153], 2], [[124154, 124895], 3], [[124896, 124902], 2], [124903, 3], [[124904, 124907], 2], [124908, 3], [[124909, 124910], 2], [124911, 3], [[124912, 124926], 2], [124927, 3], [[124928, 125124], 2], [[125125, 125126], 3], [[125127, 125135], 2], [[125136, 125142], 2], [[125143, 125183], 3], [125184, 1, "\u{1E922}"], [125185, 1, "\u{1E923}"], [125186, 1, "\u{1E924}"], [125187, 1, "\u{1E925}"], [125188, 1, "\u{1E926}"], [125189, 1, "\u{1E927}"], [125190, 1, "\u{1E928}"], [125191, 1, "\u{1E929}"], [125192, 1, "\u{1E92A}"], [125193, 1, "\u{1E92B}"], [125194, 1, "\u{1E92C}"], [125195, 1, "\u{1E92D}"], [125196, 1, "\u{1E92E}"], [125197, 1, "\u{1E92F}"], [125198, 1, "\u{1E930}"], [125199, 1, "\u{1E931}"], [125200, 1, "\u{1E932}"], [125201, 1, "\u{1E933}"], [125202, 1, "\u{1E934}"], [125203, 1, "\u{1E935}"], [125204, 1, "\u{1E936}"], [125205, 1, "\u{1E937}"], [125206, 1, "\u{1E938}"], [125207, 1, "\u{1E939}"], [125208, 1, "\u{1E93A}"], [125209, 1, "\u{1E93B}"], [125210, 1, "\u{1E93C}"], [125211, 1, "\u{1E93D}"], [125212, 1, "\u{1E93E}"], [125213, 1, "\u{1E93F}"], [125214, 1, "\u{1E940}"], [125215, 1, "\u{1E941}"], [125216, 1, "\u{1E942}"], [125217, 1, "\u{1E943}"], [[125218, 125258], 2], [125259, 2], [[125260, 125263], 3], [[125264, 125273], 2], [[125274, 125277], 3], [[125278, 125279], 2], [[125280, 126064], 3], [[126065, 126132], 2], [[126133, 126208], 3], [[126209, 126269], 2], [[126270, 126463], 3], [126464, 1, "\u0627"], [126465, 1, "\u0628"], [126466, 1, "\u062C"], [126467, 1, "\u062F"], [126468, 3], [126469, 1, "\u0648"], [126470, 1, "\u0632"], [126471, 1, "\u062D"], [126472, 1, "\u0637"], [126473, 1, "\u064A"], [126474, 1, "\u0643"], [126475, 1, "\u0644"], [126476, 1, "\u0645"], [126477, 1, "\u0646"], [126478, 1, "\u0633"], [126479, 1, "\u0639"], [126480, 1, "\u0641"], [126481, 1, "\u0635"], [126482, 1, "\u0642"], [126483, 1, "\u0631"], [126484, 1, "\u0634"], [126485, 1, "\u062A"], [126486, 1, "\u062B"], [126487, 1, "\u062E"], [126488, 1, "\u0630"], [126489, 1, "\u0636"], [126490, 1, "\u0638"], [126491, 1, "\u063A"], [126492, 1, "\u066E"], [126493, 1, "\u06BA"], [126494, 1, "\u06A1"], [126495, 1, "\u066F"], [126496, 3], [126497, 1, "\u0628"], [126498, 1, "\u062C"], [126499, 3], [126500, 1, "\u0647"], [[126501, 126502], 3], [126503, 1, "\u062D"], [126504, 3], [126505, 1, "\u064A"], [126506, 1, "\u0643"], [126507, 1, "\u0644"], [126508, 1, "\u0645"], [126509, 1, "\u0646"], [126510, 1, "\u0633"], [126511, 1, "\u0639"], [126512, 1, "\u0641"], [126513, 1, "\u0635"], [126514, 1, "\u0642"], [126515, 3], [126516, 1, "\u0634"], [126517, 1, "\u062A"], [126518, 1, "\u062B"], [126519, 1, "\u062E"], [126520, 3], [126521, 1, "\u0636"], [126522, 3], [126523, 1, "\u063A"], [[126524, 126529], 3], [126530, 1, "\u062C"], [[126531, 126534], 3], [126535, 1, "\u062D"], [126536, 3], [126537, 1, "\u064A"], [126538, 3], [126539, 1, "\u0644"], [126540, 3], [126541, 1, "\u0646"], [126542, 1, "\u0633"], [126543, 1, "\u0639"], [126544, 3], [126545, 1, "\u0635"], [126546, 1, "\u0642"], [126547, 3], [126548, 1, "\u0634"], [[126549, 126550], 3], [126551, 1, "\u062E"], [126552, 3], [126553, 1, "\u0636"], [126554, 3], [126555, 1, "\u063A"], [126556, 3], [126557, 1, "\u06BA"], [126558, 3], [126559, 1, "\u066F"], [126560, 3], [126561, 1, "\u0628"], [126562, 1, "\u062C"], [126563, 3], [126564, 1, "\u0647"], [[126565, 126566], 3], [126567, 1, "\u062D"], [126568, 1, "\u0637"], [126569, 1, "\u064A"], [126570, 1, "\u0643"], [126571, 3], [126572, 1, "\u0645"], [126573, 1, "\u0646"], [126574, 1, "\u0633"], [126575, 1, "\u0639"], [126576, 1, "\u0641"], [126577, 1, "\u0635"], [126578, 1, "\u0642"], [126579, 3], [126580, 1, "\u0634"], [126581, 1, "\u062A"], [126582, 1, "\u062B"], [126583, 1, "\u062E"], [126584, 3], [126585, 1, "\u0636"], [126586, 1, "\u0638"], [126587, 1, "\u063A"], [126588, 1, "\u066E"], [126589, 3], [126590, 1, "\u06A1"], [126591, 3], [126592, 1, "\u0627"], [126593, 1, "\u0628"], [126594, 1, "\u062C"], [126595, 1, "\u062F"], [126596, 1, "\u0647"], [126597, 1, "\u0648"], [126598, 1, "\u0632"], [126599, 1, "\u062D"], [126600, 1, "\u0637"], [126601, 1, "\u064A"], [126602, 3], [126603, 1, "\u0644"], [126604, 1, "\u0645"], [126605, 1, "\u0646"], [126606, 1, "\u0633"], [126607, 1, "\u0639"], [126608, 1, "\u0641"], [126609, 1, "\u0635"], [126610, 1, "\u0642"], [126611, 1, "\u0631"], [126612, 1, "\u0634"], [126613, 1, "\u062A"], [126614, 1, "\u062B"], [126615, 1, "\u062E"], [126616, 1, "\u0630"], [126617, 1, "\u0636"], [126618, 1, "\u0638"], [126619, 1, "\u063A"], [[126620, 126624], 3], [126625, 1, "\u0628"], [126626, 1, "\u062C"], [126627, 1, "\u062F"], [126628, 3], [126629, 1, "\u0648"], [126630, 1, "\u0632"], [126631, 1, "\u062D"], [126632, 1, "\u0637"], [126633, 1, "\u064A"], [126634, 3], [126635, 1, "\u0644"], [126636, 1, "\u0645"], [126637, 1, "\u0646"], [126638, 1, "\u0633"], [126639, 1, "\u0639"], [126640, 1, "\u0641"], [126641, 1, "\u0635"], [126642, 1, "\u0642"], [126643, 1, "\u0631"], [126644, 1, "\u0634"], [126645, 1, "\u062A"], [126646, 1, "\u062B"], [126647, 1, "\u062E"], [126648, 1, "\u0630"], [126649, 1, "\u0636"], [126650, 1, "\u0638"], [126651, 1, "\u063A"], [[126652, 126703], 3], [[126704, 126705], 2], [[126706, 126975], 3], [[126976, 127019], 2], [[127020, 127023], 3], [[127024, 127123], 2], [[127124, 127135], 3], [[127136, 127150], 2], [[127151, 127152], 3], [[127153, 127166], 2], [127167, 2], [127168, 3], [[127169, 127183], 2], [127184, 3], [[127185, 127199], 2], [[127200, 127221], 2], [[127222, 127231], 3], [127232, 3], [127233, 5, "0,"], [127234, 5, "1,"], [127235, 5, "2,"], [127236, 5, "3,"], [127237, 5, "4,"], [127238, 5, "5,"], [127239, 5, "6,"], [127240, 5, "7,"], [127241, 5, "8,"], [127242, 5, "9,"], [[127243, 127244], 2], [[127245, 127247], 2], [127248, 5, "(a)"], [127249, 5, "(b)"], [127250, 5, "(c)"], [127251, 5, "(d)"], [127252, 5, "(e)"], [127253, 5, "(f)"], [127254, 5, "(g)"], [127255, 5, "(h)"], [127256, 5, "(i)"], [127257, 5, "(j)"], [127258, 5, "(k)"], [127259, 5, "(l)"], [127260, 5, "(m)"], [127261, 5, "(n)"], [127262, 5, "(o)"], [127263, 5, "(p)"], [127264, 5, "(q)"], [127265, 5, "(r)"], [127266, 5, "(s)"], [127267, 5, "(t)"], [127268, 5, "(u)"], [127269, 5, "(v)"], [127270, 5, "(w)"], [127271, 5, "(x)"], [127272, 5, "(y)"], [127273, 5, "(z)"], [127274, 1, "\u3014s\u3015"], [127275, 1, "c"], [127276, 1, "r"], [127277, 1, "cd"], [127278, 1, "wz"], [127279, 2], [127280, 1, "a"], [127281, 1, "b"], [127282, 1, "c"], [127283, 1, "d"], [127284, 1, "e"], [127285, 1, "f"], [127286, 1, "g"], [127287, 1, "h"], [127288, 1, "i"], [127289, 1, "j"], [127290, 1, "k"], [127291, 1, "l"], [127292, 1, "m"], [127293, 1, "n"], [127294, 1, "o"], [127295, 1, "p"], [127296, 1, "q"], [127297, 1, "r"], [127298, 1, "s"], [127299, 1, "t"], [127300, 1, "u"], [127301, 1, "v"], [127302, 1, "w"], [127303, 1, "x"], [127304, 1, "y"], [127305, 1, "z"], [127306, 1, "hv"], [127307, 1, "mv"], [127308, 1, "sd"], [127309, 1, "ss"], [127310, 1, "ppv"], [127311, 1, "wc"], [[127312, 127318], 2], [127319, 2], [[127320, 127326], 2], [127327, 2], [[127328, 127337], 2], [127338, 1, "mc"], [127339, 1, "md"], [127340, 1, "mr"], [[127341, 127343], 2], [[127344, 127352], 2], [127353, 2], [127354, 2], [[127355, 127356], 2], [[127357, 127358], 2], [127359, 2], [[127360, 127369], 2], [[127370, 127373], 2], [[127374, 127375], 2], [127376, 1, "dj"], [[127377, 127386], 2], [[127387, 127404], 2], [127405, 2], [[127406, 127461], 3], [[127462, 127487], 2], [127488, 1, "\u307B\u304B"], [127489, 1, "\u30B3\u30B3"], [127490, 1, "\u30B5"], [[127491, 127503], 3], [127504, 1, "\u624B"], [127505, 1, "\u5B57"], [127506, 1, "\u53CC"], [127507, 1, "\u30C7"], [127508, 1, "\u4E8C"], [127509, 1, "\u591A"], [127510, 1, "\u89E3"], [127511, 1, "\u5929"], [127512, 1, "\u4EA4"], [127513, 1, "\u6620"], [127514, 1, "\u7121"], [127515, 1, "\u6599"], [127516, 1, "\u524D"], [127517, 1, "\u5F8C"], [127518, 1, "\u518D"], [127519, 1, "\u65B0"], [127520, 1, "\u521D"], [127521, 1, "\u7D42"], [127522, 1, "\u751F"], [127523, 1, "\u8CA9"], [127524, 1, "\u58F0"], [127525, 1, "\u5439"], [127526, 1, "\u6F14"], [127527, 1, "\u6295"], [127528, 1, "\u6355"], [127529, 1, "\u4E00"], [127530, 1, "\u4E09"], [127531, 1, "\u904A"], [127532, 1, "\u5DE6"], [127533, 1, "\u4E2D"], [127534, 1, "\u53F3"], [127535, 1, "\u6307"], [127536, 1, "\u8D70"], [127537, 1, "\u6253"], [127538, 1, "\u7981"], [127539, 1, "\u7A7A"], [127540, 1, "\u5408"], [127541, 1, "\u6E80"], [127542, 1, "\u6709"], [127543, 1, "\u6708"], [127544, 1, "\u7533"], [127545, 1, "\u5272"], [127546, 1, "\u55B6"], [127547, 1, "\u914D"], [[127548, 127551], 3], [127552, 1, "\u3014\u672C\u3015"], [127553, 1, "\u3014\u4E09\u3015"], [127554, 1, "\u3014\u4E8C\u3015"], [127555, 1, "\u3014\u5B89\u3015"], [127556, 1, "\u3014\u70B9\u3015"], [127557, 1, "\u3014\u6253\u3015"], [127558, 1, "\u3014\u76D7\u3015"], [127559, 1, "\u3014\u52DD\u3015"], [127560, 1, "\u3014\u6557\u3015"], [[127561, 127567], 3], [127568, 1, "\u5F97"], [127569, 1, "\u53EF"], [[127570, 127583], 3], [[127584, 127589], 2], [[127590, 127743], 3], [[127744, 127776], 2], [[127777, 127788], 2], [[127789, 127791], 2], [[127792, 127797], 2], [127798, 2], [[127799, 127868], 2], [127869, 2], [[127870, 127871], 2], [[127872, 127891], 2], [[127892, 127903], 2], [[127904, 127940], 2], [127941, 2], [[127942, 127946], 2], [[127947, 127950], 2], [[127951, 127955], 2], [[127956, 127967], 2], [[127968, 127984], 2], [[127985, 127991], 2], [[127992, 127999], 2], [[128e3, 128062], 2], [128063, 2], [128064, 2], [128065, 2], [[128066, 128247], 2], [128248, 2], [[128249, 128252], 2], [[128253, 128254], 2], [128255, 2], [[128256, 128317], 2], [[128318, 128319], 2], [[128320, 128323], 2], [[128324, 128330], 2], [[128331, 128335], 2], [[128336, 128359], 2], [[128360, 128377], 2], [128378, 2], [[128379, 128419], 2], [128420, 2], [[128421, 128506], 2], [[128507, 128511], 2], [128512, 2], [[128513, 128528], 2], [128529, 2], [[128530, 128532], 2], [128533, 2], [128534, 2], [128535, 2], [128536, 2], [128537, 2], [128538, 2], [128539, 2], [[128540, 128542], 2], [128543, 2], [[128544, 128549], 2], [[128550, 128551], 2], [[128552, 128555], 2], [128556, 2], [128557, 2], [[128558, 128559], 2], [[128560, 128563], 2], [128564, 2], [[128565, 128576], 2], [[128577, 128578], 2], [[128579, 128580], 2], [[128581, 128591], 2], [[128592, 128639], 2], [[128640, 128709], 2], [[128710, 128719], 2], [128720, 2], [[128721, 128722], 2], [[128723, 128724], 2], [128725, 2], [[128726, 128727], 2], [[128728, 128731], 3], [128732, 2], [[128733, 128735], 2], [[128736, 128748], 2], [[128749, 128751], 3], [[128752, 128755], 2], [[128756, 128758], 2], [[128759, 128760], 2], [128761, 2], [128762, 2], [[128763, 128764], 2], [[128765, 128767], 3], [[128768, 128883], 2], [[128884, 128886], 2], [[128887, 128890], 3], [[128891, 128895], 2], [[128896, 128980], 2], [[128981, 128984], 2], [128985, 2], [[128986, 128991], 3], [[128992, 129003], 2], [[129004, 129007], 3], [129008, 2], [[129009, 129023], 3], [[129024, 129035], 2], [[129036, 129039], 3], [[129040, 129095], 2], [[129096, 129103], 3], [[129104, 129113], 2], [[129114, 129119], 3], [[129120, 129159], 2], [[129160, 129167], 3], [[129168, 129197], 2], [[129198, 129199], 3], [[129200, 129201], 2], [[129202, 129279], 3], [[129280, 129291], 2], [129292, 2], [[129293, 129295], 2], [[129296, 129304], 2], [[129305, 129310], 2], [129311, 2], [[129312, 129319], 2], [[129320, 129327], 2], [129328, 2], [[129329, 129330], 2], [[129331, 129342], 2], [129343, 2], [[129344, 129355], 2], [129356, 2], [[129357, 129359], 2], [[129360, 129374], 2], [[129375, 129387], 2], [[129388, 129392], 2], [129393, 2], [129394, 2], [[129395, 129398], 2], [[129399, 129400], 2], [129401, 2], [129402, 2], [129403, 2], [[129404, 129407], 2], [[129408, 129412], 2], [[129413, 129425], 2], [[129426, 129431], 2], [[129432, 129442], 2], [[129443, 129444], 2], [[129445, 129450], 2], [[129451, 129453], 2], [[129454, 129455], 2], [[129456, 129465], 2], [[129466, 129471], 2], [129472, 2], [[129473, 129474], 2], [[129475, 129482], 2], [129483, 2], [129484, 2], [[129485, 129487], 2], [[129488, 129510], 2], [[129511, 129535], 2], [[129536, 129619], 2], [[129620, 129631], 3], [[129632, 129645], 2], [[129646, 129647], 3], [[129648, 129651], 2], [129652, 2], [[129653, 129655], 2], [[129656, 129658], 2], [[129659, 129660], 2], [[129661, 129663], 3], [[129664, 129666], 2], [[129667, 129670], 2], [[129671, 129672], 2], [[129673, 129679], 3], [[129680, 129685], 2], [[129686, 129704], 2], [[129705, 129708], 2], [[129709, 129711], 2], [[129712, 129718], 2], [[129719, 129722], 2], [[129723, 129725], 2], [129726, 3], [129727, 2], [[129728, 129730], 2], [[129731, 129733], 2], [[129734, 129741], 3], [[129742, 129743], 2], [[129744, 129750], 2], [[129751, 129753], 2], [[129754, 129755], 2], [[129756, 129759], 3], [[129760, 129767], 2], [129768, 2], [[129769, 129775], 3], [[129776, 129782], 2], [[129783, 129784], 2], [[129785, 129791], 3], [[129792, 129938], 2], [129939, 3], [[129940, 129994], 2], [[129995, 130031], 3], [130032, 1, "0"], [130033, 1, "1"], [130034, 1, "2"], [130035, 1, "3"], [130036, 1, "4"], [130037, 1, "5"], [130038, 1, "6"], [130039, 1, "7"], [130040, 1, "8"], [130041, 1, "9"], [[130042, 131069], 3], [[131070, 131071], 3], [[131072, 173782], 2], [[173783, 173789], 2], [[173790, 173791], 2], [[173792, 173823], 3], [[173824, 177972], 2], [[177973, 177976], 2], [177977, 2], [[177978, 177983], 3], [[177984, 178205], 2], [[178206, 178207], 3], [[178208, 183969], 2], [[183970, 183983], 3], [[183984, 191456], 2], [[191457, 191471], 3], [[191472, 192093], 2], [[192094, 194559], 3], [194560, 1, "\u4E3D"], [194561, 1, "\u4E38"], [194562, 1, "\u4E41"], [194563, 1, "\u{20122}"], [194564, 1, "\u4F60"], [194565, 1, "\u4FAE"], [194566, 1, "\u4FBB"], [194567, 1, "\u5002"], [194568, 1, "\u507A"], [194569, 1, "\u5099"], [194570, 1, "\u50E7"], [194571, 1, "\u50CF"], [194572, 1, "\u349E"], [194573, 1, "\u{2063A}"], [194574, 1, "\u514D"], [194575, 1, "\u5154"], [194576, 1, "\u5164"], [194577, 1, "\u5177"], [194578, 1, "\u{2051C}"], [194579, 1, "\u34B9"], [194580, 1, "\u5167"], [194581, 1, "\u518D"], [194582, 1, "\u{2054B}"], [194583, 1, "\u5197"], [194584, 1, "\u51A4"], [194585, 1, "\u4ECC"], [194586, 1, "\u51AC"], [194587, 1, "\u51B5"], [194588, 1, "\u{291DF}"], [194589, 1, "\u51F5"], [194590, 1, "\u5203"], [194591, 1, "\u34DF"], [194592, 1, "\u523B"], [194593, 1, "\u5246"], [194594, 1, "\u5272"], [194595, 1, "\u5277"], [194596, 1, "\u3515"], [194597, 1, "\u52C7"], [194598, 1, "\u52C9"], [194599, 1, "\u52E4"], [194600, 1, "\u52FA"], [194601, 1, "\u5305"], [194602, 1, "\u5306"], [194603, 1, "\u5317"], [194604, 1, "\u5349"], [194605, 1, "\u5351"], [194606, 1, "\u535A"], [194607, 1, "\u5373"], [194608, 1, "\u537D"], [[194609, 194611], 1, "\u537F"], [194612, 1, "\u{20A2C}"], [194613, 1, "\u7070"], [194614, 1, "\u53CA"], [194615, 1, "\u53DF"], [194616, 1, "\u{20B63}"], [194617, 1, "\u53EB"], [194618, 1, "\u53F1"], [194619, 1, "\u5406"], [194620, 1, "\u549E"], [194621, 1, "\u5438"], [194622, 1, "\u5448"], [194623, 1, "\u5468"], [194624, 1, "\u54A2"], [194625, 1, "\u54F6"], [194626, 1, "\u5510"], [194627, 1, "\u5553"], [194628, 1, "\u5563"], [[194629, 194630], 1, "\u5584"], [194631, 1, "\u5599"], [194632, 1, "\u55AB"], [194633, 1, "\u55B3"], [194634, 1, "\u55C2"], [194635, 1, "\u5716"], [194636, 1, "\u5606"], [194637, 1, "\u5717"], [194638, 1, "\u5651"], [194639, 1, "\u5674"], [194640, 1, "\u5207"], [194641, 1, "\u58EE"], [194642, 1, "\u57CE"], [194643, 1, "\u57F4"], [194644, 1, "\u580D"], [194645, 1, "\u578B"], [194646, 1, "\u5832"], [194647, 1, "\u5831"], [194648, 1, "\u58AC"], [194649, 1, "\u{214E4}"], [194650, 1, "\u58F2"], [194651, 1, "\u58F7"], [194652, 1, "\u5906"], [194653, 1, "\u591A"], [194654, 1, "\u5922"], [194655, 1, "\u5962"], [194656, 1, "\u{216A8}"], [194657, 1, "\u{216EA}"], [194658, 1, "\u59EC"], [194659, 1, "\u5A1B"], [194660, 1, "\u5A27"], [194661, 1, "\u59D8"], [194662, 1, "\u5A66"], [194663, 1, "\u36EE"], [194664, 3], [194665, 1, "\u5B08"], [[194666, 194667], 1, "\u5B3E"], [194668, 1, "\u{219C8}"], [194669, 1, "\u5BC3"], [194670, 1, "\u5BD8"], [194671, 1, "\u5BE7"], [194672, 1, "\u5BF3"], [194673, 1, "\u{21B18}"], [194674, 1, "\u5BFF"], [194675, 1, "\u5C06"], [194676, 3], [194677, 1, "\u5C22"], [194678, 1, "\u3781"], [194679, 1, "\u5C60"], [194680, 1, "\u5C6E"], [194681, 1, "\u5CC0"], [194682, 1, "\u5C8D"], [194683, 1, "\u{21DE4}"], [194684, 1, "\u5D43"], [194685, 1, "\u{21DE6}"], [194686, 1, "\u5D6E"], [194687, 1, "\u5D6B"], [194688, 1, "\u5D7C"], [194689, 1, "\u5DE1"], [194690, 1, "\u5DE2"], [194691, 1, "\u382F"], [194692, 1, "\u5DFD"], [194693, 1, "\u5E28"], [194694, 1, "\u5E3D"], [194695, 1, "\u5E69"], [194696, 1, "\u3862"], [194697, 1, "\u{22183}"], [194698, 1, "\u387C"], [194699, 1, "\u5EB0"], [194700, 1, "\u5EB3"], [194701, 1, "\u5EB6"], [194702, 1, "\u5ECA"], [194703, 1, "\u{2A392}"], [194704, 1, "\u5EFE"], [[194705, 194706], 1, "\u{22331}"], [194707, 1, "\u8201"], [[194708, 194709], 1, "\u5F22"], [194710, 1, "\u38C7"], [194711, 1, "\u{232B8}"], [194712, 1, "\u{261DA}"], [194713, 1, "\u5F62"], [194714, 1, "\u5F6B"], [194715, 1, "\u38E3"], [194716, 1, "\u5F9A"], [194717, 1, "\u5FCD"], [194718, 1, "\u5FD7"], [194719, 1, "\u5FF9"], [194720, 1, "\u6081"], [194721, 1, "\u393A"], [194722, 1, "\u391C"], [194723, 1, "\u6094"], [194724, 1, "\u{226D4}"], [194725, 1, "\u60C7"], [194726, 1, "\u6148"], [194727, 1, "\u614C"], [194728, 1, "\u614E"], [194729, 1, "\u614C"], [194730, 1, "\u617A"], [194731, 1, "\u618E"], [194732, 1, "\u61B2"], [194733, 1, "\u61A4"], [194734, 1, "\u61AF"], [194735, 1, "\u61DE"], [194736, 1, "\u61F2"], [194737, 1, "\u61F6"], [194738, 1, "\u6210"], [194739, 1, "\u621B"], [194740, 1, "\u625D"], [194741, 1, "\u62B1"], [194742, 1, "\u62D4"], [194743, 1, "\u6350"], [194744, 1, "\u{22B0C}"], [194745, 1, "\u633D"], [194746, 1, "\u62FC"], [194747, 1, "\u6368"], [194748, 1, "\u6383"], [194749, 1, "\u63E4"], [194750, 1, "\u{22BF1}"], [194751, 1, "\u6422"], [194752, 1, "\u63C5"], [194753, 1, "\u63A9"], [194754, 1, "\u3A2E"], [194755, 1, "\u6469"], [194756, 1, "\u647E"], [194757, 1, "\u649D"], [194758, 1, "\u6477"], [194759, 1, "\u3A6C"], [194760, 1, "\u654F"], [194761, 1, "\u656C"], [194762, 1, "\u{2300A}"], [194763, 1, "\u65E3"], [194764, 1, "\u66F8"], [194765, 1, "\u6649"], [194766, 1, "\u3B19"], [194767, 1, "\u6691"], [194768, 1, "\u3B08"], [194769, 1, "\u3AE4"], [194770, 1, "\u5192"], [194771, 1, "\u5195"], [194772, 1, "\u6700"], [194773, 1, "\u669C"], [194774, 1, "\u80AD"], [194775, 1, "\u43D9"], [194776, 1, "\u6717"], [194777, 1, "\u671B"], [194778, 1, "\u6721"], [194779, 1, "\u675E"], [194780, 1, "\u6753"], [194781, 1, "\u{233C3}"], [194782, 1, "\u3B49"], [194783, 1, "\u67FA"], [194784, 1, "\u6785"], [194785, 1, "\u6852"], [194786, 1, "\u6885"], [194787, 1, "\u{2346D}"], [194788, 1, "\u688E"], [194789, 1, "\u681F"], [194790, 1, "\u6914"], [194791, 1, "\u3B9D"], [194792, 1, "\u6942"], [194793, 1, "\u69A3"], [194794, 1, "\u69EA"], [194795, 1, "\u6AA8"], [194796, 1, "\u{236A3}"], [194797, 1, "\u6ADB"], [194798, 1, "\u3C18"], [194799, 1, "\u6B21"], [194800, 1, "\u{238A7}"], [194801, 1, "\u6B54"], [194802, 1, "\u3C4E"], [194803, 1, "\u6B72"], [194804, 1, "\u6B9F"], [194805, 1, "\u6BBA"], [194806, 1, "\u6BBB"], [194807, 1, "\u{23A8D}"], [194808, 1, "\u{21D0B}"], [194809, 1, "\u{23AFA}"], [194810, 1, "\u6C4E"], [194811, 1, "\u{23CBC}"], [194812, 1, "\u6CBF"], [194813, 1, "\u6CCD"], [194814, 1, "\u6C67"], [194815, 1, "\u6D16"], [194816, 1, "\u6D3E"], [194817, 1, "\u6D77"], [194818, 1, "\u6D41"], [194819, 1, "\u6D69"], [194820, 1, "\u6D78"], [194821, 1, "\u6D85"], [194822, 1, "\u{23D1E}"], [194823, 1, "\u6D34"], [194824, 1, "\u6E2F"], [194825, 1, "\u6E6E"], [194826, 1, "\u3D33"], [194827, 1, "\u6ECB"], [194828, 1, "\u6EC7"], [194829, 1, "\u{23ED1}"], [194830, 1, "\u6DF9"], [194831, 1, "\u6F6E"], [194832, 1, "\u{23F5E}"], [194833, 1, "\u{23F8E}"], [194834, 1, "\u6FC6"], [194835, 1, "\u7039"], [194836, 1, "\u701E"], [194837, 1, "\u701B"], [194838, 1, "\u3D96"], [194839, 1, "\u704A"], [194840, 1, "\u707D"], [194841, 1, "\u7077"], [194842, 1, "\u70AD"], [194843, 1, "\u{20525}"], [194844, 1, "\u7145"], [194845, 1, "\u{24263}"], [194846, 1, "\u719C"], [194847, 3], [194848, 1, "\u7228"], [194849, 1, "\u7235"], [194850, 1, "\u7250"], [194851, 1, "\u{24608}"], [194852, 1, "\u7280"], [194853, 1, "\u7295"], [194854, 1, "\u{24735}"], [194855, 1, "\u{24814}"], [194856, 1, "\u737A"], [194857, 1, "\u738B"], [194858, 1, "\u3EAC"], [194859, 1, "\u73A5"], [[194860, 194861], 1, "\u3EB8"], [194862, 1, "\u7447"], [194863, 1, "\u745C"], [194864, 1, "\u7471"], [194865, 1, "\u7485"], [194866, 1, "\u74CA"], [194867, 1, "\u3F1B"], [194868, 1, "\u7524"], [194869, 1, "\u{24C36}"], [194870, 1, "\u753E"], [194871, 1, "\u{24C92}"], [194872, 1, "\u7570"], [194873, 1, "\u{2219F}"], [194874, 1, "\u7610"], [194875, 1, "\u{24FA1}"], [194876, 1, "\u{24FB8}"], [194877, 1, "\u{25044}"], [194878, 1, "\u3FFC"], [194879, 1, "\u4008"], [194880, 1, "\u76F4"], [194881, 1, "\u{250F3}"], [194882, 1, "\u{250F2}"], [194883, 1, "\u{25119}"], [194884, 1, "\u{25133}"], [194885, 1, "\u771E"], [[194886, 194887], 1, "\u771F"], [194888, 1, "\u774A"], [194889, 1, "\u4039"], [194890, 1, "\u778B"], [194891, 1, "\u4046"], [194892, 1, "\u4096"], [194893, 1, "\u{2541D}"], [194894, 1, "\u784E"], [194895, 1, "\u788C"], [194896, 1, "\u78CC"], [194897, 1, "\u40E3"], [194898, 1, "\u{25626}"], [194899, 1, "\u7956"], [194900, 1, "\u{2569A}"], [194901, 1, "\u{256C5}"], [194902, 1, "\u798F"], [194903, 1, "\u79EB"], [194904, 1, "\u412F"], [194905, 1, "\u7A40"], [194906, 1, "\u7A4A"], [194907, 1, "\u7A4F"], [194908, 1, "\u{2597C}"], [[194909, 194910], 1, "\u{25AA7}"], [194911, 3], [194912, 1, "\u4202"], [194913, 1, "\u{25BAB}"], [194914, 1, "\u7BC6"], [194915, 1, "\u7BC9"], [194916, 1, "\u4227"], [194917, 1, "\u{25C80}"], [194918, 1, "\u7CD2"], [194919, 1, "\u42A0"], [194920, 1, "\u7CE8"], [194921, 1, "\u7CE3"], [194922, 1, "\u7D00"], [194923, 1, "\u{25F86}"], [194924, 1, "\u7D63"], [194925, 1, "\u4301"], [194926, 1, "\u7DC7"], [194927, 1, "\u7E02"], [194928, 1, "\u7E45"], [194929, 1, "\u4334"], [194930, 1, "\u{26228}"], [194931, 1, "\u{26247}"], [194932, 1, "\u4359"], [194933, 1, "\u{262D9}"], [194934, 1, "\u7F7A"], [194935, 1, "\u{2633E}"], [194936, 1, "\u7F95"], [194937, 1, "\u7FFA"], [194938, 1, "\u8005"], [194939, 1, "\u{264DA}"], [194940, 1, "\u{26523}"], [194941, 1, "\u8060"], [194942, 1, "\u{265A8}"], [194943, 1, "\u8070"], [194944, 1, "\u{2335F}"], [194945, 1, "\u43D5"], [194946, 1, "\u80B2"], [194947, 1, "\u8103"], [194948, 1, "\u440B"], [194949, 1, "\u813E"], [194950, 1, "\u5AB5"], [194951, 1, "\u{267A7}"], [194952, 1, "\u{267B5}"], [194953, 1, "\u{23393}"], [194954, 1, "\u{2339C}"], [194955, 1, "\u8201"], [194956, 1, "\u8204"], [194957, 1, "\u8F9E"], [194958, 1, "\u446B"], [194959, 1, "\u8291"], [194960, 1, "\u828B"], [194961, 1, "\u829D"], [194962, 1, "\u52B3"], [194963, 1, "\u82B1"], [194964, 1, "\u82B3"], [194965, 1, "\u82BD"], [194966, 1, "\u82E6"], [194967, 1, "\u{26B3C}"], [194968, 1, "\u82E5"], [194969, 1, "\u831D"], [194970, 1, "\u8363"], [194971, 1, "\u83AD"], [194972, 1, "\u8323"], [194973, 1, "\u83BD"], [194974, 1, "\u83E7"], [194975, 1, "\u8457"], [194976, 1, "\u8353"], [194977, 1, "\u83CA"], [194978, 1, "\u83CC"], [194979, 1, "\u83DC"], [194980, 1, "\u{26C36}"], [194981, 1, "\u{26D6B}"], [194982, 1, "\u{26CD5}"], [194983, 1, "\u452B"], [194984, 1, "\u84F1"], [194985, 1, "\u84F3"], [194986, 1, "\u8516"], [194987, 1, "\u{273CA}"], [194988, 1, "\u8564"], [194989, 1, "\u{26F2C}"], [194990, 1, "\u455D"], [194991, 1, "\u4561"], [194992, 1, "\u{26FB1}"], [194993, 1, "\u{270D2}"], [194994, 1, "\u456B"], [194995, 1, "\u8650"], [194996, 1, "\u865C"], [194997, 1, "\u8667"], [194998, 1, "\u8669"], [194999, 1, "\u86A9"], [195e3, 1, "\u8688"], [195001, 1, "\u870E"], [195002, 1, "\u86E2"], [195003, 1, "\u8779"], [195004, 1, "\u8728"], [195005, 1, "\u876B"], [195006, 1, "\u8786"], [195007, 3], [195008, 1, "\u87E1"], [195009, 1, "\u8801"], [195010, 1, "\u45F9"], [195011, 1, "\u8860"], [195012, 1, "\u8863"], [195013, 1, "\u{27667}"], [195014, 1, "\u88D7"], [195015, 1, "\u88DE"], [195016, 1, "\u4635"], [195017, 1, "\u88FA"], [195018, 1, "\u34BB"], [195019, 1, "\u{278AE}"], [195020, 1, "\u{27966}"], [195021, 1, "\u46BE"], [195022, 1, "\u46C7"], [195023, 1, "\u8AA0"], [195024, 1, "\u8AED"], [195025, 1, "\u8B8A"], [195026, 1, "\u8C55"], [195027, 1, "\u{27CA8}"], [195028, 1, "\u8CAB"], [195029, 1, "\u8CC1"], [195030, 1, "\u8D1B"], [195031, 1, "\u8D77"], [195032, 1, "\u{27F2F}"], [195033, 1, "\u{20804}"], [195034, 1, "\u8DCB"], [195035, 1, "\u8DBC"], [195036, 1, "\u8DF0"], [195037, 1, "\u{208DE}"], [195038, 1, "\u8ED4"], [195039, 1, "\u8F38"], [195040, 1, "\u{285D2}"], [195041, 1, "\u{285ED}"], [195042, 1, "\u9094"], [195043, 1, "\u90F1"], [195044, 1, "\u9111"], [195045, 1, "\u{2872E}"], [195046, 1, "\u911B"], [195047, 1, "\u9238"], [195048, 1, "\u92D7"], [195049, 1, "\u92D8"], [195050, 1, "\u927C"], [195051, 1, "\u93F9"], [195052, 1, "\u9415"], [195053, 1, "\u{28BFA}"], [195054, 1, "\u958B"], [195055, 1, "\u4995"], [195056, 1, "\u95B7"], [195057, 1, "\u{28D77}"], [195058, 1, "\u49E6"], [195059, 1, "\u96C3"], [195060, 1, "\u5DB2"], [195061, 1, "\u9723"], [195062, 1, "\u{29145}"], [195063, 1, "\u{2921A}"], [195064, 1, "\u4A6E"], [195065, 1, "\u4A76"], [195066, 1, "\u97E0"], [195067, 1, "\u{2940A}"], [195068, 1, "\u4AB2"], [195069, 1, "\u{29496}"], [[195070, 195071], 1, "\u980B"], [195072, 1, "\u9829"], [195073, 1, "\u{295B6}"], [195074, 1, "\u98E2"], [195075, 1, "\u4B33"], [195076, 1, "\u9929"], [195077, 1, "\u99A7"], [195078, 1, "\u99C2"], [195079, 1, "\u99FE"], [195080, 1, "\u4BCE"], [195081, 1, "\u{29B30}"], [195082, 1, "\u9B12"], [195083, 1, "\u9C40"], [195084, 1, "\u9CFD"], [195085, 1, "\u4CCE"], [195086, 1, "\u4CED"], [195087, 1, "\u9D67"], [195088, 1, "\u{2A0CE}"], [195089, 1, "\u4CF8"], [195090, 1, "\u{2A105}"], [195091, 1, "\u{2A20E}"], [195092, 1, "\u{2A291}"], [195093, 1, "\u9EBB"], [195094, 1, "\u4D56"], [195095, 1, "\u9EF9"], [195096, 1, "\u9EFE"], [195097, 1, "\u9F05"], [195098, 1, "\u9F0F"], [195099, 1, "\u9F16"], [195100, 1, "\u9F3B"], [195101, 1, "\u{2A600}"], [[195102, 196605], 3], [[196606, 196607], 3], [[196608, 201546], 2], [[201547, 201551], 3], [[201552, 205743], 2], [[205744, 262141], 3], [[262142, 262143], 3], [[262144, 327677], 3], [[327678, 327679], 3], [[327680, 393213], 3], [[393214, 393215], 3], [[393216, 458749], 3], [[458750, 458751], 3], [[458752, 524285], 3], [[524286, 524287], 3], [[524288, 589821], 3], [[589822, 589823], 3], [[589824, 655357], 3], [[655358, 655359], 3], [[655360, 720893], 3], [[720894, 720895], 3], [[720896, 786429], 3], [[786430, 786431], 3], [[786432, 851965], 3], [[851966, 851967], 3], [[851968, 917501], 3], [[917502, 917503], 3], [917504, 3], [917505, 3], [[917506, 917535], 3], [[917536, 917631], 3], [[917632, 917759], 3], [[917760, 917999], 7], [[918e3, 983037], 3], [[983038, 983039], 3], [[983040, 1048573], 3], [[1048574, 1048575], 3], [[1048576, 1114109], 3], [[1114110, 1114111], 3]];
    }
  });

  // ../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/statusMapping.js
  var require_statusMapping = __commonJS({
    "../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/statusMapping.js"(exports, module) {
      "use strict";
      module.exports.STATUS_MAPPING = {
        mapped: 1,
        valid: 2,
        disallowed: 3,
        disallowed_STD3_valid: 4,
        disallowed_STD3_mapped: 5,
        deviation: 6,
        ignored: 7
      };
    }
  });

  // ../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/index.js
  var require_tr46 = __commonJS({
    "../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/index.js"(exports, module) {
      "use strict";
      var punycode2 = (init_punycode_es6(), __toCommonJS(punycode_es6_exports));
      var regexes = require_regexes();
      var mappingTable = require_mappingTable();
      var { STATUS_MAPPING } = require_statusMapping();
      function containsNonASCII(str) {
        return /[^\x00-\x7F]/u.test(str);
      }
      function findStatus(val, { useSTD3ASCIIRules }) {
        let start = 0;
        let end = mappingTable.length - 1;
        while (start <= end) {
          const mid = Math.floor((start + end) / 2);
          const target = mappingTable[mid];
          const min = Array.isArray(target[0]) ? target[0][0] : target[0];
          const max = Array.isArray(target[0]) ? target[0][1] : target[0];
          if (min <= val && max >= val) {
            if (useSTD3ASCIIRules && (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {
              return [STATUS_MAPPING.disallowed, ...target.slice(2)];
            } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {
              return [STATUS_MAPPING.valid, ...target.slice(2)];
            } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {
              return [STATUS_MAPPING.mapped, ...target.slice(2)];
            }
            return target.slice(1);
          } else if (min > val) {
            end = mid - 1;
          } else {
            start = mid + 1;
          }
        }
        return null;
      }
      function mapChars(domainName, { useSTD3ASCIIRules, transitionalProcessing }) {
        let processed = "";
        for (const ch of domainName) {
          const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
          switch (status) {
            case STATUS_MAPPING.disallowed:
              processed += ch;
              break;
            case STATUS_MAPPING.ignored:
              break;
            case STATUS_MAPPING.mapped:
              if (transitionalProcessing && ch === "\u1E9E") {
                processed += "ss";
              } else {
                processed += mapping;
              }
              break;
            case STATUS_MAPPING.deviation:
              if (transitionalProcessing) {
                processed += mapping;
              } else {
                processed += ch;
              }
              break;
            case STATUS_MAPPING.valid:
              processed += ch;
              break;
          }
        }
        return processed;
      }
      function validateLabel(label, {
        checkHyphens,
        checkBidi,
        checkJoiners,
        transitionalProcessing,
        useSTD3ASCIIRules,
        isBidi
      }) {
        if (label.length === 0) {
          return true;
        }
        if (label.normalize("NFC") !== label) {
          return false;
        }
        const codePoints = Array.from(label);
        if (checkHyphens) {
          if (codePoints[2] === "-" && codePoints[3] === "-" || (label.startsWith("-") || label.endsWith("-"))) {
            return false;
          }
        }
        if (label.includes(".")) {
          return false;
        }
        if (regexes.combiningMarks.test(codePoints[0])) {
          return false;
        }
        for (const ch of codePoints) {
          const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });
          if (transitionalProcessing) {
            if (status !== STATUS_MAPPING.valid) {
              return false;
            }
          } else if (status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {
            return false;
          }
        }
        if (checkJoiners) {
          let last = 0;
          for (const [i, ch] of codePoints.entries()) {
            if (ch === "\u200C" || ch === "\u200D") {
              if (i > 0) {
                if (regexes.combiningClassVirama.test(codePoints[i - 1])) {
                  continue;
                }
                if (ch === "\u200C") {
                  const next = codePoints.indexOf("\u200C", i + 1);
                  const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);
                  if (regexes.validZWNJ.test(test.join(""))) {
                    last = i + 1;
                    continue;
                  }
                }
              }
              return false;
            }
          }
        }
        if (checkBidi && isBidi) {
          let rtl;
          if (regexes.bidiS1LTR.test(codePoints[0])) {
            rtl = false;
          } else if (regexes.bidiS1RTL.test(codePoints[0])) {
            rtl = true;
          } else {
            return false;
          }
          if (rtl) {
            if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {
              return false;
            }
          } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {
            return false;
          }
        }
        return true;
      }
      function isBidiDomain(labels) {
        const domain = labels.map((label) => {
          if (label.startsWith("xn--")) {
            try {
              return punycode2.decode(label.substring(4));
            } catch (err) {
              return "";
            }
          }
          return label;
        }).join(".");
        return regexes.bidiDomain.test(domain);
      }
      function processing(domainName, options) {
        let string = mapChars(domainName, options);
        string = string.normalize("NFC");
        const labels = string.split(".");
        const isBidi = isBidiDomain(labels);
        let error2 = false;
        for (const [i, origLabel] of labels.entries()) {
          let label = origLabel;
          let transitionalProcessingForThisLabel = options.transitionalProcessing;
          if (label.startsWith("xn--")) {
            if (containsNonASCII(label)) {
              error2 = true;
              continue;
            }
            try {
              label = punycode2.decode(label.substring(4));
            } catch {
              if (!options.ignoreInvalidPunycode) {
                error2 = true;
                continue;
              }
            }
            labels[i] = label;
            transitionalProcessingForThisLabel = false;
          }
          if (error2) {
            continue;
          }
          const validation = validateLabel(label, {
            ...options,
            transitionalProcessing: transitionalProcessingForThisLabel,
            isBidi
          });
          if (!validation) {
            error2 = true;
          }
        }
        return {
          string: labels.join("."),
          error: error2
        };
      }
      function toASCII2(domainName, {
        checkHyphens = false,
        checkBidi = false,
        checkJoiners = false,
        useSTD3ASCIIRules = false,
        verifyDNSLength = false,
        transitionalProcessing = false,
        ignoreInvalidPunycode = false
      } = {}) {
        const result = processing(domainName, {
          checkHyphens,
          checkBidi,
          checkJoiners,
          useSTD3ASCIIRules,
          transitionalProcessing,
          ignoreInvalidPunycode
        });
        let labels = result.string.split(".");
        labels = labels.map((l) => {
          if (containsNonASCII(l)) {
            try {
              return `xn--${punycode2.encode(l)}`;
            } catch (e) {
              result.error = true;
            }
          }
          return l;
        });
        if (verifyDNSLength) {
          const total = labels.join(".").length;
          if (total > 253 || total === 0) {
            result.error = true;
          }
          for (let i = 0; i < labels.length; ++i) {
            if (labels[i].length > 63 || labels[i].length === 0) {
              result.error = true;
              break;
            }
          }
        }
        if (result.error) {
          return null;
        }
        return labels.join(".");
      }
      function toUnicode2(domainName, {
        checkHyphens = false,
        checkBidi = false,
        checkJoiners = false,
        useSTD3ASCIIRules = false,
        transitionalProcessing = false,
        ignoreInvalidPunycode = false
      } = {}) {
        const result = processing(domainName, {
          checkHyphens,
          checkBidi,
          checkJoiners,
          useSTD3ASCIIRules,
          transitionalProcessing,
          ignoreInvalidPunycode
        });
        return {
          domain: result.string,
          error: result.error
        };
      }
      module.exports = {
        toASCII: toASCII2,
        toUnicode: toUnicode2
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/infra.js
  var require_infra = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/infra.js"(exports, module) {
      "use strict";
      function isASCIIDigit(c) {
        return c >= 48 && c <= 57;
      }
      function isASCIIAlpha(c) {
        return c >= 65 && c <= 90 || c >= 97 && c <= 122;
      }
      function isASCIIAlphanumeric(c) {
        return isASCIIAlpha(c) || isASCIIDigit(c);
      }
      function isASCIIHex(c) {
        return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
      }
      module.exports = {
        isASCIIDigit,
        isASCIIAlpha,
        isASCIIAlphanumeric,
        isASCIIHex
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/encoding.js
  var require_encoding = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/encoding.js"(exports, module) {
      "use strict";
      var utf8Encoder = new TextEncoder();
      var utf8Decoder = new TextDecoder("utf-8", { ignoreBOM: true });
      function utf8Encode(string) {
        return utf8Encoder.encode(string);
      }
      function utf8DecodeWithoutBOM(bytes2) {
        return utf8Decoder.decode(bytes2);
      }
      module.exports = {
        utf8Encode,
        utf8DecodeWithoutBOM
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/percent-encoding.js
  var require_percent_encoding = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/percent-encoding.js"(exports, module) {
      "use strict";
      var { isASCIIHex } = require_infra();
      var { utf8Encode } = require_encoding();
      function p(char) {
        return char.codePointAt(0);
      }
      function percentEncode(c) {
        let hex = c.toString(16).toUpperCase();
        if (hex.length === 1) {
          hex = `0${hex}`;
        }
        return `%${hex}`;
      }
      function percentDecodeBytes(input) {
        const output2 = new Uint8Array(input.byteLength);
        let outputIndex = 0;
        for (let i = 0; i < input.byteLength; ++i) {
          const byte = input[i];
          if (byte !== 37) {
            output2[outputIndex++] = byte;
          } else if (byte === 37 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {
            output2[outputIndex++] = byte;
          } else {
            const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);
            output2[outputIndex++] = bytePoint;
            i += 2;
          }
        }
        return output2.slice(0, outputIndex);
      }
      function percentDecodeString(input) {
        const bytes2 = utf8Encode(input);
        return percentDecodeBytes(bytes2);
      }
      function isC0ControlPercentEncode(c) {
        return c <= 31 || c > 126;
      }
      var extraFragmentPercentEncodeSet = /* @__PURE__ */ new Set([p(" "), p('"'), p("<"), p(">"), p("`")]);
      function isFragmentPercentEncode(c) {
        return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);
      }
      var extraQueryPercentEncodeSet = /* @__PURE__ */ new Set([p(" "), p('"'), p("#"), p("<"), p(">")]);
      function isQueryPercentEncode(c) {
        return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);
      }
      function isSpecialQueryPercentEncode(c) {
        return isQueryPercentEncode(c) || c === p("'");
      }
      var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([p("?"), p("`"), p("{"), p("}")]);
      function isPathPercentEncode(c) {
        return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);
      }
      var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([p("/"), p(":"), p(";"), p("="), p("@"), p("["), p("\\"), p("]"), p("^"), p("|")]);
      function isUserinfoPercentEncode(c) {
        return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
      }
      var extraComponentPercentEncodeSet = /* @__PURE__ */ new Set([p("$"), p("%"), p("&"), p("+"), p(",")]);
      function isComponentPercentEncode(c) {
        return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);
      }
      var extraURLEncodedPercentEncodeSet = /* @__PURE__ */ new Set([p("!"), p("'"), p("("), p(")"), p("~")]);
      function isURLEncodedPercentEncode(c) {
        return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);
      }
      function utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {
        const bytes2 = utf8Encode(codePoint);
        let output2 = "";
        for (const byte of bytes2) {
          if (!percentEncodePredicate(byte)) {
            output2 += String.fromCharCode(byte);
          } else {
            output2 += percentEncode(byte);
          }
        }
        return output2;
      }
      function utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {
        return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);
      }
      function utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {
        let output2 = "";
        for (const codePoint of input) {
          if (spaceAsPlus && codePoint === " ") {
            output2 += "+";
          } else {
            output2 += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);
          }
        }
        return output2;
      }
      module.exports = {
        isC0ControlPercentEncode,
        isFragmentPercentEncode,
        isQueryPercentEncode,
        isSpecialQueryPercentEncode,
        isPathPercentEncode,
        isUserinfoPercentEncode,
        isURLEncodedPercentEncode,
        percentDecodeString,
        percentDecodeBytes,
        utf8PercentEncodeString,
        utf8PercentEncodeCodePoint
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/url-state-machine.js
  var require_url_state_machine = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/url-state-machine.js"(exports, module) {
      "use strict";
      var tr46 = require_tr46();
      var infra = require_infra();
      var { utf8DecodeWithoutBOM } = require_encoding();
      var {
        percentDecodeString,
        utf8PercentEncodeCodePoint,
        utf8PercentEncodeString,
        isC0ControlPercentEncode,
        isFragmentPercentEncode,
        isQueryPercentEncode,
        isSpecialQueryPercentEncode,
        isPathPercentEncode,
        isUserinfoPercentEncode
      } = require_percent_encoding();
      function p(char) {
        return char.codePointAt(0);
      }
      var specialSchemes = {
        ftp: 21,
        file: null,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      };
      var failure = Symbol("failure");
      function countSymbols(str) {
        return [...str].length;
      }
      function at(input, idx) {
        const c = input[idx];
        return isNaN(c) ? void 0 : String.fromCodePoint(c);
      }
      function isSingleDot(buffer) {
        return buffer === "." || buffer.toLowerCase() === "%2e";
      }
      function isDoubleDot(buffer) {
        buffer = buffer.toLowerCase();
        return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
      }
      function isWindowsDriveLetterCodePoints(cp1, cp2) {
        return infra.isASCIIAlpha(cp1) && (cp2 === p(":") || cp2 === p("|"));
      }
      function isWindowsDriveLetterString(string) {
        return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
      }
      function isNormalizedWindowsDriveLetterString(string) {
        return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
      }
      function containsForbiddenHostCodePoint(string) {
        return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|<|>|\?|@|\[|\\|\]|\^|\|/u) !== -1;
      }
      function containsForbiddenDomainCodePoint(string) {
        return containsForbiddenHostCodePoint(string) || string.search(/[\u0000-\u001F]|%|\u007F/u) !== -1;
      }
      function isSpecialScheme(scheme) {
        return specialSchemes[scheme] !== void 0;
      }
      function isSpecial(url) {
        return isSpecialScheme(url.scheme);
      }
      function isNotSpecial(url) {
        return !isSpecialScheme(url.scheme);
      }
      function defaultPort(scheme) {
        return specialSchemes[scheme];
      }
      function parseIPv4Number(input) {
        if (input === "") {
          return failure;
        }
        let R = 10;
        if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
          input = input.substring(2);
          R = 16;
        } else if (input.length >= 2 && input.charAt(0) === "0") {
          input = input.substring(1);
          R = 8;
        }
        if (input === "") {
          return 0;
        }
        let regex = /[^0-7]/u;
        if (R === 10) {
          regex = /[^0-9]/u;
        }
        if (R === 16) {
          regex = /[^0-9A-Fa-f]/u;
        }
        if (regex.test(input)) {
          return failure;
        }
        return parseInt(input, R);
      }
      function parseIPv4(input) {
        const parts = input.split(".");
        if (parts[parts.length - 1] === "") {
          if (parts.length > 1) {
            parts.pop();
          }
        }
        if (parts.length > 4) {
          return failure;
        }
        const numbers = [];
        for (const part of parts) {
          const n = parseIPv4Number(part);
          if (n === failure) {
            return failure;
          }
          numbers.push(n);
        }
        for (let i = 0; i < numbers.length - 1; ++i) {
          if (numbers[i] > 255) {
            return failure;
          }
        }
        if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {
          return failure;
        }
        let ipv4 = numbers.pop();
        let counter = 0;
        for (const n of numbers) {
          ipv4 += n * 256 ** (3 - counter);
          ++counter;
        }
        return ipv4;
      }
      function serializeIPv4(address) {
        let output2 = "";
        let n = address;
        for (let i = 1; i <= 4; ++i) {
          output2 = String(n % 256) + output2;
          if (i !== 4) {
            output2 = `.${output2}`;
          }
          n = Math.floor(n / 256);
        }
        return output2;
      }
      function parseIPv6(input) {
        const address = [0, 0, 0, 0, 0, 0, 0, 0];
        let pieceIndex = 0;
        let compress = null;
        let pointer = 0;
        input = Array.from(input, (c) => c.codePointAt(0));
        if (input[pointer] === p(":")) {
          if (input[pointer + 1] !== p(":")) {
            return failure;
          }
          pointer += 2;
          ++pieceIndex;
          compress = pieceIndex;
        }
        while (pointer < input.length) {
          if (pieceIndex === 8) {
            return failure;
          }
          if (input[pointer] === p(":")) {
            if (compress !== null) {
              return failure;
            }
            ++pointer;
            ++pieceIndex;
            compress = pieceIndex;
            continue;
          }
          let value = 0;
          let length = 0;
          while (length < 4 && infra.isASCIIHex(input[pointer])) {
            value = value * 16 + parseInt(at(input, pointer), 16);
            ++pointer;
            ++length;
          }
          if (input[pointer] === p(".")) {
            if (length === 0) {
              return failure;
            }
            pointer -= length;
            if (pieceIndex > 6) {
              return failure;
            }
            let numbersSeen = 0;
            while (input[pointer] !== void 0) {
              let ipv4Piece = null;
              if (numbersSeen > 0) {
                if (input[pointer] === p(".") && numbersSeen < 4) {
                  ++pointer;
                } else {
                  return failure;
                }
              }
              if (!infra.isASCIIDigit(input[pointer])) {
                return failure;
              }
              while (infra.isASCIIDigit(input[pointer])) {
                const number2 = parseInt(at(input, pointer));
                if (ipv4Piece === null) {
                  ipv4Piece = number2;
                } else if (ipv4Piece === 0) {
                  return failure;
                } else {
                  ipv4Piece = ipv4Piece * 10 + number2;
                }
                if (ipv4Piece > 255) {
                  return failure;
                }
                ++pointer;
              }
              address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
              ++numbersSeen;
              if (numbersSeen === 2 || numbersSeen === 4) {
                ++pieceIndex;
              }
            }
            if (numbersSeen !== 4) {
              return failure;
            }
            break;
          } else if (input[pointer] === p(":")) {
            ++pointer;
            if (input[pointer] === void 0) {
              return failure;
            }
          } else if (input[pointer] !== void 0) {
            return failure;
          }
          address[pieceIndex] = value;
          ++pieceIndex;
        }
        if (compress !== null) {
          let swaps = pieceIndex - compress;
          pieceIndex = 7;
          while (pieceIndex !== 0 && swaps > 0) {
            const temp = address[compress + swaps - 1];
            address[compress + swaps - 1] = address[pieceIndex];
            address[pieceIndex] = temp;
            --pieceIndex;
            --swaps;
          }
        } else if (compress === null && pieceIndex !== 8) {
          return failure;
        }
        return address;
      }
      function serializeIPv6(address) {
        let output2 = "";
        const compress = findTheIPv6AddressCompressedPieceIndex(address);
        let ignore0 = false;
        for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
          if (ignore0 && address[pieceIndex] === 0) {
            continue;
          } else if (ignore0) {
            ignore0 = false;
          }
          if (compress === pieceIndex) {
            const separator = pieceIndex === 0 ? "::" : ":";
            output2 += separator;
            ignore0 = true;
            continue;
          }
          output2 += address[pieceIndex].toString(16);
          if (pieceIndex !== 7) {
            output2 += ":";
          }
        }
        return output2;
      }
      function parseHost(input, isOpaque = false) {
        if (input[0] === "[") {
          if (input[input.length - 1] !== "]") {
            return failure;
          }
          return parseIPv6(input.substring(1, input.length - 1));
        }
        if (isOpaque) {
          return parseOpaqueHost(input);
        }
        const domain = utf8DecodeWithoutBOM(percentDecodeString(input));
        const asciiDomain = domainToASCII(domain);
        if (asciiDomain === failure) {
          return failure;
        }
        if (containsForbiddenDomainCodePoint(asciiDomain)) {
          return failure;
        }
        if (endsInANumber(asciiDomain)) {
          return parseIPv4(asciiDomain);
        }
        return asciiDomain;
      }
      function endsInANumber(input) {
        const parts = input.split(".");
        if (parts[parts.length - 1] === "") {
          if (parts.length === 1) {
            return false;
          }
          parts.pop();
        }
        const last = parts[parts.length - 1];
        if (parseIPv4Number(last) !== failure) {
          return true;
        }
        if (/^[0-9]+$/u.test(last)) {
          return true;
        }
        return false;
      }
      function parseOpaqueHost(input) {
        if (containsForbiddenHostCodePoint(input)) {
          return failure;
        }
        return utf8PercentEncodeString(input, isC0ControlPercentEncode);
      }
      function findTheIPv6AddressCompressedPieceIndex(address) {
        let longestIndex = null;
        let longestSize = 1;
        let foundIndex = null;
        let foundSize = 0;
        for (let pieceIndex = 0; pieceIndex < address.length; ++pieceIndex) {
          if (address[pieceIndex] !== 0) {
            if (foundSize > longestSize) {
              longestIndex = foundIndex;
              longestSize = foundSize;
            }
            foundIndex = null;
            foundSize = 0;
          } else {
            if (foundIndex === null) {
              foundIndex = pieceIndex;
            }
            ++foundSize;
          }
        }
        if (foundSize > longestSize) {
          return foundIndex;
        }
        return longestIndex;
      }
      function serializeHost(host) {
        if (typeof host === "number") {
          return serializeIPv4(host);
        }
        if (host instanceof Array) {
          return `[${serializeIPv6(host)}]`;
        }
        return host;
      }
      function domainToASCII(domain, beStrict = false) {
        const result = tr46.toASCII(domain, {
          checkBidi: true,
          checkHyphens: false,
          checkJoiners: true,
          useSTD3ASCIIRules: beStrict,
          verifyDNSLength: beStrict
        });
        if (result === null || result === "") {
          return failure;
        }
        return result;
      }
      function trimControlChars(url) {
        return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/ug, "");
      }
      function trimTabAndNewline(url) {
        return url.replace(/\u0009|\u000A|\u000D/ug, "");
      }
      function shortenPath(url) {
        const { path: path3 } = url;
        if (path3.length === 0) {
          return;
        }
        if (url.scheme === "file" && path3.length === 1 && isNormalizedWindowsDriveLetter(path3[0])) {
          return;
        }
        path3.pop();
      }
      function includesCredentials(url) {
        return url.username !== "" || url.password !== "";
      }
      function cannotHaveAUsernamePasswordPort(url) {
        return url.host === null || url.host === "" || url.scheme === "file";
      }
      function hasAnOpaquePath(url) {
        return typeof url.path === "string";
      }
      function isNormalizedWindowsDriveLetter(string) {
        return /^[A-Za-z]:$/u.test(string);
      }
      function URLStateMachine(input, base2, encodingOverride, url, stateOverride) {
        this.pointer = 0;
        this.input = input;
        this.base = base2 || null;
        this.encodingOverride = encodingOverride || "utf-8";
        this.stateOverride = stateOverride;
        this.url = url;
        this.failure = false;
        this.parseError = false;
        if (!this.url) {
          this.url = {
            scheme: "",
            username: "",
            password: "",
            host: null,
            port: null,
            path: [],
            query: null,
            fragment: null
          };
          const res2 = trimControlChars(this.input);
          if (res2 !== this.input) {
            this.parseError = true;
          }
          this.input = res2;
        }
        const res = trimTabAndNewline(this.input);
        if (res !== this.input) {
          this.parseError = true;
        }
        this.input = res;
        this.state = stateOverride || "scheme start";
        this.buffer = "";
        this.atFlag = false;
        this.arrFlag = false;
        this.passwordTokenSeenFlag = false;
        this.input = Array.from(this.input, (c) => c.codePointAt(0));
        for (; this.pointer <= this.input.length; ++this.pointer) {
          const c = this.input[this.pointer];
          const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
          const ret2 = this[`parse ${this.state}`](c, cStr);
          if (!ret2) {
            break;
          } else if (ret2 === failure) {
            this.failure = true;
            break;
          }
        }
      }
      URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
        if (infra.isASCIIAlpha(c)) {
          this.buffer += cStr.toLowerCase();
          this.state = "scheme";
        } else if (!this.stateOverride) {
          this.state = "no scheme";
          --this.pointer;
        } else {
          this.parseError = true;
          return failure;
        }
        return true;
      };
      URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
        if (infra.isASCIIAlphanumeric(c) || c === p("+") || c === p("-") || c === p(".")) {
          this.buffer += cStr.toLowerCase();
        } else if (c === p(":")) {
          if (this.stateOverride) {
            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
              return false;
            }
            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
              return false;
            }
            if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
              return false;
            }
            if (this.url.scheme === "file" && this.url.host === "") {
              return false;
            }
          }
          this.url.scheme = this.buffer;
          if (this.stateOverride) {
            if (this.url.port === defaultPort(this.url.scheme)) {
              this.url.port = null;
            }
            return false;
          }
          this.buffer = "";
          if (this.url.scheme === "file") {
            if (this.input[this.pointer + 1] !== p("/") || this.input[this.pointer + 2] !== p("/")) {
              this.parseError = true;
            }
            this.state = "file";
          } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
            this.state = "special relative or authority";
          } else if (isSpecial(this.url)) {
            this.state = "special authority slashes";
          } else if (this.input[this.pointer + 1] === p("/")) {
            this.state = "path or authority";
            ++this.pointer;
          } else {
            this.url.path = "";
            this.state = "opaque path";
          }
        } else if (!this.stateOverride) {
          this.buffer = "";
          this.state = "no scheme";
          this.pointer = -1;
        } else {
          this.parseError = true;
          return failure;
        }
        return true;
      };
      URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
        if (this.base === null || hasAnOpaquePath(this.base) && c !== p("#")) {
          return failure;
        } else if (hasAnOpaquePath(this.base) && c === p("#")) {
          this.url.scheme = this.base.scheme;
          this.url.path = this.base.path;
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else if (this.base.scheme === "file") {
          this.state = "file";
          --this.pointer;
        } else {
          this.state = "relative";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
        if (c === p("/") && this.input[this.pointer + 1] === p("/")) {
          this.state = "special authority ignore slashes";
          ++this.pointer;
        } else {
          this.parseError = true;
          this.state = "relative";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
        if (c === p("/")) {
          this.state = "authority";
        } else {
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
        this.url.scheme = this.base.scheme;
        if (c === p("/")) {
          this.state = "relative slash";
        } else if (isSpecial(this.url) && c === p("\\")) {
          this.parseError = true;
          this.state = "relative slash";
        } else {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          if (c === p("?")) {
            this.url.query = "";
            this.state = "query";
          } else if (c === p("#")) {
            this.url.fragment = "";
            this.state = "fragment";
          } else if (!isNaN(c)) {
            this.url.query = null;
            this.url.path.pop();
            this.state = "path";
            --this.pointer;
          }
        }
        return true;
      };
      URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
        if (isSpecial(this.url) && (c === p("/") || c === p("\\"))) {
          if (c === p("\\")) {
            this.parseError = true;
          }
          this.state = "special authority ignore slashes";
        } else if (c === p("/")) {
          this.state = "authority";
        } else {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
        if (c === p("/") && this.input[this.pointer + 1] === p("/")) {
          this.state = "special authority ignore slashes";
          ++this.pointer;
        } else {
          this.parseError = true;
          this.state = "special authority ignore slashes";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
        if (c !== p("/") && c !== p("\\")) {
          this.state = "authority";
          --this.pointer;
        } else {
          this.parseError = true;
        }
        return true;
      };
      URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
        if (c === p("@")) {
          this.parseError = true;
          if (this.atFlag) {
            this.buffer = `%40${this.buffer}`;
          }
          this.atFlag = true;
          const len = countSymbols(this.buffer);
          for (let pointer = 0; pointer < len; ++pointer) {
            const codePoint = this.buffer.codePointAt(pointer);
            if (codePoint === p(":") && !this.passwordTokenSeenFlag) {
              this.passwordTokenSeenFlag = true;
              continue;
            }
            const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);
            if (this.passwordTokenSeenFlag) {
              this.url.password += encodedCodePoints;
            } else {
              this.url.username += encodedCodePoints;
            }
          }
          this.buffer = "";
        } else if (isNaN(c) || c === p("/") || c === p("?") || c === p("#") || isSpecial(this.url) && c === p("\\")) {
          if (this.atFlag && this.buffer === "") {
            this.parseError = true;
            return failure;
          }
          this.pointer -= countSymbols(this.buffer) + 1;
          this.buffer = "";
          this.state = "host";
        } else {
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
        if (this.stateOverride && this.url.scheme === "file") {
          --this.pointer;
          this.state = "file host";
        } else if (c === p(":") && !this.arrFlag) {
          if (this.buffer === "") {
            this.parseError = true;
            return failure;
          }
          if (this.stateOverride === "hostname") {
            return false;
          }
          const host = parseHost(this.buffer, isNotSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          this.url.host = host;
          this.buffer = "";
          this.state = "port";
        } else if (isNaN(c) || c === p("/") || c === p("?") || c === p("#") || isSpecial(this.url) && c === p("\\")) {
          --this.pointer;
          if (isSpecial(this.url) && this.buffer === "") {
            this.parseError = true;
            return failure;
          } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
            this.parseError = true;
            return false;
          }
          const host = parseHost(this.buffer, isNotSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          this.url.host = host;
          this.buffer = "";
          this.state = "path start";
          if (this.stateOverride) {
            return false;
          }
        } else {
          if (c === p("[")) {
            this.arrFlag = true;
          } else if (c === p("]")) {
            this.arrFlag = false;
          }
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
        if (infra.isASCIIDigit(c)) {
          this.buffer += cStr;
        } else if (isNaN(c) || c === p("/") || c === p("?") || c === p("#") || isSpecial(this.url) && c === p("\\") || this.stateOverride) {
          if (this.buffer !== "") {
            const port = parseInt(this.buffer);
            if (port > 2 ** 16 - 1) {
              this.parseError = true;
              return failure;
            }
            this.url.port = port === defaultPort(this.url.scheme) ? null : port;
            this.buffer = "";
          }
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
          --this.pointer;
        } else {
          this.parseError = true;
          return failure;
        }
        return true;
      };
      var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([p("/"), p("\\"), p("?"), p("#")]);
      function startsWithWindowsDriveLetter(input, pointer) {
        const length = input.length - pointer;
        return length >= 2 && isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) && (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));
      }
      URLStateMachine.prototype["parse file"] = function parseFile(c) {
        this.url.scheme = "file";
        this.url.host = "";
        if (c === p("/") || c === p("\\")) {
          if (c === p("\\")) {
            this.parseError = true;
          }
          this.state = "file slash";
        } else if (this.base !== null && this.base.scheme === "file") {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          if (c === p("?")) {
            this.url.query = "";
            this.state = "query";
          } else if (c === p("#")) {
            this.url.fragment = "";
            this.state = "fragment";
          } else if (!isNaN(c)) {
            this.url.query = null;
            if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {
              shortenPath(this.url);
            } else {
              this.parseError = true;
              this.url.path = [];
            }
            this.state = "path";
            --this.pointer;
          }
        } else {
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
        if (c === p("/") || c === p("\\")) {
          if (c === p("\\")) {
            this.parseError = true;
          }
          this.state = "file host";
        } else {
          if (this.base !== null && this.base.scheme === "file") {
            if (!startsWithWindowsDriveLetter(this.input, this.pointer) && isNormalizedWindowsDriveLetterString(this.base.path[0])) {
              this.url.path.push(this.base.path[0]);
            }
            this.url.host = this.base.host;
          }
          this.state = "path";
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
        if (isNaN(c) || c === p("/") || c === p("\\") || c === p("?") || c === p("#")) {
          --this.pointer;
          if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
            this.parseError = true;
            this.state = "path";
          } else if (this.buffer === "") {
            this.url.host = "";
            if (this.stateOverride) {
              return false;
            }
            this.state = "path start";
          } else {
            let host = parseHost(this.buffer, isNotSpecial(this.url));
            if (host === failure) {
              return failure;
            }
            if (host === "localhost") {
              host = "";
            }
            this.url.host = host;
            if (this.stateOverride) {
              return false;
            }
            this.buffer = "";
            this.state = "path start";
          }
        } else {
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
        if (isSpecial(this.url)) {
          if (c === p("\\")) {
            this.parseError = true;
          }
          this.state = "path";
          if (c !== p("/") && c !== p("\\")) {
            --this.pointer;
          }
        } else if (!this.stateOverride && c === p("?")) {
          this.url.query = "";
          this.state = "query";
        } else if (!this.stateOverride && c === p("#")) {
          this.url.fragment = "";
          this.state = "fragment";
        } else if (c !== void 0) {
          this.state = "path";
          if (c !== p("/")) {
            --this.pointer;
          }
        } else if (this.stateOverride && this.url.host === null) {
          this.url.path.push("");
        }
        return true;
      };
      URLStateMachine.prototype["parse path"] = function parsePath2(c) {
        if (isNaN(c) || c === p("/") || isSpecial(this.url) && c === p("\\") || !this.stateOverride && (c === p("?") || c === p("#"))) {
          if (isSpecial(this.url) && c === p("\\")) {
            this.parseError = true;
          }
          if (isDoubleDot(this.buffer)) {
            shortenPath(this.url);
            if (c !== p("/") && !(isSpecial(this.url) && c === p("\\"))) {
              this.url.path.push("");
            }
          } else if (isSingleDot(this.buffer) && c !== p("/") && !(isSpecial(this.url) && c === p("\\"))) {
            this.url.path.push("");
          } else if (!isSingleDot(this.buffer)) {
            if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
              this.buffer = `${this.buffer[0]}:`;
            }
            this.url.path.push(this.buffer);
          }
          this.buffer = "";
          if (c === p("?")) {
            this.url.query = "";
            this.state = "query";
          }
          if (c === p("#")) {
            this.url.fragment = "";
            this.state = "fragment";
          }
        } else {
          if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);
        }
        return true;
      };
      URLStateMachine.prototype["parse opaque path"] = function parseOpaquePath(c) {
        if (c === p("?")) {
          this.url.query = "";
          this.state = "query";
        } else if (c === p("#")) {
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (!isNaN(c) && c !== p("%")) {
            this.parseError = true;
          }
          if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          if (!isNaN(c)) {
            this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);
          }
        }
        return true;
      };
      URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        if (!this.stateOverride && c === p("#") || isNaN(c)) {
          const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;
          this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);
          this.buffer = "";
          if (c === p("#")) {
            this.url.fragment = "";
            this.state = "fragment";
          }
        } else if (!isNaN(c)) {
          if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          this.buffer += cStr;
        }
        return true;
      };
      URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
        if (!isNaN(c)) {
          if (c === p("%") && (!infra.isASCIIHex(this.input[this.pointer + 1]) || !infra.isASCIIHex(this.input[this.pointer + 2]))) {
            this.parseError = true;
          }
          this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);
        }
        return true;
      };
      function serializeURL(url, excludeFragment) {
        let output2 = `${url.scheme}:`;
        if (url.host !== null) {
          output2 += "//";
          if (url.username !== "" || url.password !== "") {
            output2 += url.username;
            if (url.password !== "") {
              output2 += `:${url.password}`;
            }
            output2 += "@";
          }
          output2 += serializeHost(url.host);
          if (url.port !== null) {
            output2 += `:${url.port}`;
          }
        }
        if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === "") {
          output2 += "/.";
        }
        output2 += serializePath(url);
        if (url.query !== null) {
          output2 += `?${url.query}`;
        }
        if (!excludeFragment && url.fragment !== null) {
          output2 += `#${url.fragment}`;
        }
        return output2;
      }
      function serializeOrigin(tuple) {
        let result = `${tuple.scheme}://`;
        result += serializeHost(tuple.host);
        if (tuple.port !== null) {
          result += `:${tuple.port}`;
        }
        return result;
      }
      function serializePath(url) {
        if (hasAnOpaquePath(url)) {
          return url.path;
        }
        let output2 = "";
        for (const segment of url.path) {
          output2 += `/${segment}`;
        }
        return output2;
      }
      module.exports.serializeURL = serializeURL;
      module.exports.serializePath = serializePath;
      module.exports.serializeURLOrigin = function(url) {
        switch (url.scheme) {
          case "blob": {
            const pathURL = module.exports.parseURL(serializePath(url));
            if (pathURL === null) {
              return "null";
            }
            if (pathURL.scheme !== "http" && pathURL.scheme !== "https") {
              return "null";
            }
            return module.exports.serializeURLOrigin(pathURL);
          }
          case "ftp":
          case "http":
          case "https":
          case "ws":
          case "wss":
            return serializeOrigin({
              scheme: url.scheme,
              host: url.host,
              port: url.port
            });
          case "file":
            return "null";
          default:
            return "null";
        }
      };
      module.exports.basicURLParse = function(input, options) {
        if (options === void 0) {
          options = {};
        }
        const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
        if (usm.failure) {
          return null;
        }
        return usm.url;
      };
      module.exports.setTheUsername = function(url, username) {
        url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);
      };
      module.exports.setThePassword = function(url, password) {
        url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);
      };
      module.exports.serializeHost = serializeHost;
      module.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
      module.exports.hasAnOpaquePath = hasAnOpaquePath;
      module.exports.serializeInteger = function(integer) {
        return String(integer);
      };
      module.exports.parseURL = function(input, options) {
        if (options === void 0) {
          options = {};
        }
        return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/urlencoded.js
  var require_urlencoded = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/urlencoded.js"(exports, module) {
      "use strict";
      var { utf8Encode, utf8DecodeWithoutBOM } = require_encoding();
      var { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require_percent_encoding();
      function p(char) {
        return char.codePointAt(0);
      }
      function parseUrlencoded(input) {
        const sequences = strictlySplitByteSequence(input, p("&"));
        const output2 = [];
        for (const bytes2 of sequences) {
          if (bytes2.length === 0) {
            continue;
          }
          let name, value;
          const indexOfEqual = bytes2.indexOf(p("="));
          if (indexOfEqual >= 0) {
            name = bytes2.slice(0, indexOfEqual);
            value = bytes2.slice(indexOfEqual + 1);
          } else {
            name = bytes2;
            value = new Uint8Array(0);
          }
          name = replaceByteInByteSequence(name, 43, 32);
          value = replaceByteInByteSequence(value, 43, 32);
          const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));
          const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));
          output2.push([nameString, valueString]);
        }
        return output2;
      }
      function parseUrlencodedString(input) {
        return parseUrlencoded(utf8Encode(input));
      }
      function serializeUrlencoded(tuples, encodingOverride = void 0) {
        let encoding = "utf-8";
        if (encodingOverride !== void 0) {
          encoding = encodingOverride;
        }
        let output2 = "";
        for (const [i, tuple] of tuples.entries()) {
          const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);
          let value = tuple[1];
          if (tuple.length > 2 && tuple[2] !== void 0) {
            if (tuple[2] === "hidden" && name === "_charset_") {
              value = encoding;
            } else if (tuple[2] === "file") {
              value = value.name;
            }
          }
          value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);
          if (i !== 0) {
            output2 += "&";
          }
          output2 += `${name}=${value}`;
        }
        return output2;
      }
      function strictlySplitByteSequence(buf, cp) {
        const list = [];
        let last = 0;
        let i = buf.indexOf(cp);
        while (i >= 0) {
          list.push(buf.slice(last, i));
          last = i + 1;
          i = buf.indexOf(cp, last);
        }
        if (last !== buf.length) {
          list.push(buf.slice(last));
        }
        return list;
      }
      function replaceByteInByteSequence(buf, from, to) {
        let i = buf.indexOf(from);
        while (i >= 0) {
          buf[i] = to;
          i = buf.indexOf(from, i + 1);
        }
        return buf;
      }
      module.exports = {
        parseUrlencodedString,
        serializeUrlencoded
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/Function.js
  var require_Function = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/Function.js"(exports) {
      "use strict";
      var conversions = require_lib();
      var utils = require_utils();
      exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
        if (typeof value !== "function") {
          throw new globalObject.TypeError(context + " is not a function");
        }
        function invokeTheCallbackFunction(...args) {
          const thisArg = utils.tryWrapperForImpl(this);
          let callResult;
          for (let i = 0; i < args.length; i++) {
            args[i] = utils.tryWrapperForImpl(args[i]);
          }
          callResult = Reflect.apply(value, thisArg, args);
          callResult = conversions["any"](callResult, { context, globals: globalObject });
          return callResult;
        }
        invokeTheCallbackFunction.construct = (...args) => {
          for (let i = 0; i < args.length; i++) {
            args[i] = utils.tryWrapperForImpl(args[i]);
          }
          let callResult = Reflect.construct(value, args);
          callResult = conversions["any"](callResult, { context, globals: globalObject });
          return callResult;
        };
        invokeTheCallbackFunction[utils.wrapperSymbol] = value;
        invokeTheCallbackFunction.objectReference = value;
        return invokeTheCallbackFunction;
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URLSearchParams-impl.js
  var require_URLSearchParams_impl = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URLSearchParams-impl.js"(exports) {
      "use strict";
      var urlencoded = require_urlencoded();
      exports.implementation = class URLSearchParamsImpl {
        constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {
          let init = constructorArgs[0];
          this._list = [];
          this._url = null;
          if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
            init = init.slice(1);
          }
          if (Array.isArray(init)) {
            for (const pair of init) {
              if (pair.length !== 2) {
                throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not contain exactly two elements.");
              }
              this._list.push([pair[0], pair[1]]);
            }
          } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
            for (const name of Object.keys(init)) {
              const value = init[name];
              this._list.push([name, value]);
            }
          } else {
            this._list = urlencoded.parseUrlencodedString(init);
          }
        }
        _updateSteps() {
          if (this._url !== null) {
            let serializedQuery = urlencoded.serializeUrlencoded(this._list);
            if (serializedQuery === "") {
              serializedQuery = null;
            }
            this._url._url.query = serializedQuery;
            if (serializedQuery === null) {
              this._url._potentiallyStripTrailingSpacesFromAnOpaquePath();
            }
          }
        }
        get size() {
          return this._list.length;
        }
        append(name, value) {
          this._list.push([name, value]);
          this._updateSteps();
        }
        delete(name, value) {
          let i = 0;
          while (i < this._list.length) {
            if (this._list[i][0] === name && (value === void 0 || this._list[i][1] === value)) {
              this._list.splice(i, 1);
            } else {
              i++;
            }
          }
          this._updateSteps();
        }
        get(name) {
          for (const tuple of this._list) {
            if (tuple[0] === name) {
              return tuple[1];
            }
          }
          return null;
        }
        getAll(name) {
          const output2 = [];
          for (const tuple of this._list) {
            if (tuple[0] === name) {
              output2.push(tuple[1]);
            }
          }
          return output2;
        }
        has(name, value) {
          for (const tuple of this._list) {
            if (tuple[0] === name && (value === void 0 || tuple[1] === value)) {
              return true;
            }
          }
          return false;
        }
        set(name, value) {
          let found = false;
          let i = 0;
          while (i < this._list.length) {
            if (this._list[i][0] === name) {
              if (found) {
                this._list.splice(i, 1);
              } else {
                found = true;
                this._list[i][1] = value;
                i++;
              }
            } else {
              i++;
            }
          }
          if (!found) {
            this._list.push([name, value]);
          }
          this._updateSteps();
        }
        sort() {
          this._list.sort((a, b) => {
            if (a[0] < b[0]) {
              return -1;
            }
            if (a[0] > b[0]) {
              return 1;
            }
            return 0;
          });
          this._updateSteps();
        }
        [Symbol.iterator]() {
          return this._list[Symbol.iterator]();
        }
        toString() {
          return urlencoded.serializeUrlencoded(this._list);
        }
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URLSearchParams.js
  var require_URLSearchParams = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URLSearchParams.js"(exports) {
      "use strict";
      var conversions = require_lib();
      var utils = require_utils();
      var Function2 = require_Function();
      var newObjectInRealm = utils.newObjectInRealm;
      var implSymbol = utils.implSymbol;
      var ctorRegistrySymbol = utils.ctorRegistrySymbol;
      var interfaceName = "URLSearchParams";
      exports.is = (value) => {
        return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
      };
      exports.isImpl = (value) => {
        return utils.isObject(value) && value instanceof Impl.implementation;
      };
      exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
        if (exports.is(value)) {
          return utils.implForWrapper(value);
        }
        throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);
      };
      exports.createDefaultIterator = (globalObject, target, kind) => {
        const ctorRegistry = globalObject[ctorRegistrySymbol];
        const iteratorPrototype = ctorRegistry["URLSearchParams Iterator"];
        const iterator = Object.create(iteratorPrototype);
        Object.defineProperty(iterator, utils.iterInternalSymbol, {
          value: { target, kind, index: 0 },
          configurable: true
        });
        return iterator;
      };
      function makeWrapper(globalObject, newTarget) {
        let proto;
        if (newTarget !== void 0) {
          proto = newTarget.prototype;
        }
        if (!utils.isObject(proto)) {
          proto = globalObject[ctorRegistrySymbol]["URLSearchParams"].prototype;
        }
        return Object.create(proto);
      }
      exports.create = (globalObject, constructorArgs, privateData) => {
        const wrapper = makeWrapper(globalObject);
        return exports.setup(wrapper, globalObject, constructorArgs, privateData);
      };
      exports.createImpl = (globalObject, constructorArgs, privateData) => {
        const wrapper = exports.create(globalObject, constructorArgs, privateData);
        return utils.implForWrapper(wrapper);
      };
      exports._internalSetup = (wrapper, globalObject) => {
      };
      exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
        privateData.wrapper = wrapper;
        exports._internalSetup(wrapper, globalObject);
        Object.defineProperty(wrapper, implSymbol, {
          value: new Impl.implementation(globalObject, constructorArgs, privateData),
          configurable: true
        });
        wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
        if (Impl.init) {
          Impl.init(wrapper[implSymbol]);
        }
        return wrapper;
      };
      exports.new = (globalObject, newTarget) => {
        const wrapper = makeWrapper(globalObject, newTarget);
        exports._internalSetup(wrapper, globalObject);
        Object.defineProperty(wrapper, implSymbol, {
          value: Object.create(Impl.implementation.prototype),
          configurable: true
        });
        wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
        if (Impl.init) {
          Impl.init(wrapper[implSymbol]);
        }
        return wrapper[implSymbol];
      };
      var exposed = /* @__PURE__ */ new Set(["Window", "Worker"]);
      exports.install = (globalObject, globalNames) => {
        if (!globalNames.some((globalName) => exposed.has(globalName))) {
          return;
        }
        const ctorRegistry = utils.initCtorRegistry(globalObject);
        class URLSearchParams {
          constructor() {
            const args = [];
            {
              let curArg = arguments[0];
              if (curArg !== void 0) {
                if (utils.isObject(curArg)) {
                  if (curArg[Symbol.iterator] !== void 0) {
                    if (!utils.isObject(curArg)) {
                      throw new globalObject.TypeError(
                        "Failed to construct 'URLSearchParams': parameter 1 sequence is not an iterable object."
                      );
                    } else {
                      const V = [];
                      const tmp = curArg;
                      for (let nextItem of tmp) {
                        if (!utils.isObject(nextItem)) {
                          throw new globalObject.TypeError(
                            "Failed to construct 'URLSearchParams': parameter 1 sequence's element is not an iterable object."
                          );
                        } else {
                          const V2 = [];
                          const tmp2 = nextItem;
                          for (let nextItem2 of tmp2) {
                            nextItem2 = conversions["USVString"](nextItem2, {
                              context: "Failed to construct 'URLSearchParams': parameter 1 sequence's element's element",
                              globals: globalObject
                            });
                            V2.push(nextItem2);
                          }
                          nextItem = V2;
                        }
                        V.push(nextItem);
                      }
                      curArg = V;
                    }
                  } else {
                    if (!utils.isObject(curArg)) {
                      throw new globalObject.TypeError(
                        "Failed to construct 'URLSearchParams': parameter 1 record is not an object."
                      );
                    } else {
                      const result = /* @__PURE__ */ Object.create(null);
                      for (const key of Reflect.ownKeys(curArg)) {
                        const desc = Object.getOwnPropertyDescriptor(curArg, key);
                        if (desc && desc.enumerable) {
                          let typedKey = key;
                          typedKey = conversions["USVString"](typedKey, {
                            context: "Failed to construct 'URLSearchParams': parameter 1 record's key",
                            globals: globalObject
                          });
                          let typedValue = curArg[key];
                          typedValue = conversions["USVString"](typedValue, {
                            context: "Failed to construct 'URLSearchParams': parameter 1 record's value",
                            globals: globalObject
                          });
                          result[typedKey] = typedValue;
                        }
                      }
                      curArg = result;
                    }
                  }
                } else {
                  curArg = conversions["USVString"](curArg, {
                    context: "Failed to construct 'URLSearchParams': parameter 1",
                    globals: globalObject
                  });
                }
              } else {
                curArg = "";
              }
              args.push(curArg);
            }
            return exports.setup(Object.create(new.target.prototype), globalObject, args);
          }
          append(name, value) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError(
                "'append' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            if (arguments.length < 2) {
              throw new globalObject.TypeError(
                `Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'append' on 'URLSearchParams': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'append' on 'URLSearchParams': parameter 2",
                globals: globalObject
              });
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));
          }
          delete(name) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError(
                "'delete' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              if (curArg !== void 0) {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to execute 'delete' on 'URLSearchParams': parameter 2",
                  globals: globalObject
                });
              }
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));
          }
          get(name) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get' called on an object that is not a valid instance of URLSearchParams.");
            }
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'get' on 'URLSearchParams': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            return esValue[implSymbol].get(...args);
          }
          getAll(name) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError(
                "'getAll' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));
          }
          has(name) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'has' called on an object that is not a valid instance of URLSearchParams.");
            }
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'has' on 'URLSearchParams': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              if (curArg !== void 0) {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to execute 'has' on 'URLSearchParams': parameter 2",
                  globals: globalObject
                });
              }
              args.push(curArg);
            }
            return esValue[implSymbol].has(...args);
          }
          set(name, value) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set' called on an object that is not a valid instance of URLSearchParams.");
            }
            if (arguments.length < 2) {
              throw new globalObject.TypeError(
                `Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'set' on 'URLSearchParams': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'set' on 'URLSearchParams': parameter 2",
                globals: globalObject
              });
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));
          }
          sort() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'sort' called on an object that is not a valid instance of URLSearchParams.");
            }
            return utils.tryWrapperForImpl(esValue[implSymbol].sort());
          }
          toString() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError(
                "'toString' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            return esValue[implSymbol].toString();
          }
          keys() {
            if (!exports.is(this)) {
              throw new globalObject.TypeError("'keys' called on an object that is not a valid instance of URLSearchParams.");
            }
            return exports.createDefaultIterator(globalObject, this, "key");
          }
          values() {
            if (!exports.is(this)) {
              throw new globalObject.TypeError(
                "'values' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            return exports.createDefaultIterator(globalObject, this, "value");
          }
          entries() {
            if (!exports.is(this)) {
              throw new globalObject.TypeError(
                "'entries' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            return exports.createDefaultIterator(globalObject, this, "key+value");
          }
          forEach(callback) {
            if (!exports.is(this)) {
              throw new globalObject.TypeError(
                "'forEach' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                "Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present."
              );
            }
            callback = Function2.convert(globalObject, callback, {
              context: "Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1"
            });
            const thisArg = arguments[1];
            let pairs = Array.from(this[implSymbol]);
            let i = 0;
            while (i < pairs.length) {
              const [key, value] = pairs[i].map(utils.tryWrapperForImpl);
              callback.call(thisArg, value, key, this);
              pairs = Array.from(this[implSymbol]);
              i++;
            }
          }
          get size() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError(
                "'get size' called on an object that is not a valid instance of URLSearchParams."
              );
            }
            return esValue[implSymbol]["size"];
          }
        }
        Object.defineProperties(URLSearchParams.prototype, {
          append: { enumerable: true },
          delete: { enumerable: true },
          get: { enumerable: true },
          getAll: { enumerable: true },
          has: { enumerable: true },
          set: { enumerable: true },
          sort: { enumerable: true },
          toString: { enumerable: true },
          keys: { enumerable: true },
          values: { enumerable: true },
          entries: { enumerable: true },
          forEach: { enumerable: true },
          size: { enumerable: true },
          [Symbol.toStringTag]: { value: "URLSearchParams", configurable: true },
          [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }
        });
        ctorRegistry[interfaceName] = URLSearchParams;
        ctorRegistry["URLSearchParams Iterator"] = Object.create(ctorRegistry["%IteratorPrototype%"], {
          [Symbol.toStringTag]: {
            configurable: true,
            value: "URLSearchParams Iterator"
          }
        });
        utils.define(ctorRegistry["URLSearchParams Iterator"], {
          next() {
            const internal = this && this[utils.iterInternalSymbol];
            if (!internal) {
              throw new globalObject.TypeError("next() called on a value that is not a URLSearchParams iterator object");
            }
            const { target, kind, index } = internal;
            const values = Array.from(target[implSymbol]);
            const len = values.length;
            if (index >= len) {
              return newObjectInRealm(globalObject, { value: void 0, done: true });
            }
            const pair = values[index];
            internal.index = index + 1;
            return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));
          }
        });
        Object.defineProperty(globalObject, interfaceName, {
          configurable: true,
          writable: true,
          value: URLSearchParams
        });
      };
      var Impl = require_URLSearchParams_impl();
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URL-impl.js
  var require_URL_impl = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URL-impl.js"(exports) {
      "use strict";
      var usm = require_url_state_machine();
      var urlencoded = require_urlencoded();
      var URLSearchParams = require_URLSearchParams();
      exports.implementation = class URLImpl {
        // Unlike the spec, we duplicate some code between the constructor and canParse, because we want to give useful error
        // messages in the constructor that distinguish between the different causes of failure.
        constructor(globalObject, [url, base2]) {
          let parsedBase = null;
          if (base2 !== void 0) {
            parsedBase = usm.basicURLParse(base2);
            if (parsedBase === null) {
              throw new TypeError(`Invalid base URL: ${base2}`);
            }
          }
          const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
          if (parsedURL === null) {
            throw new TypeError(`Invalid URL: ${url}`);
          }
          const query = parsedURL.query !== null ? parsedURL.query : "";
          this._url = parsedURL;
          this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });
          this._query._url = this;
        }
        static parse(globalObject, input, base2) {
          try {
            return new URLImpl(globalObject, [input, base2]);
          } catch {
            return null;
          }
        }
        static canParse(url, base2) {
          let parsedBase = null;
          if (base2 !== void 0) {
            parsedBase = usm.basicURLParse(base2);
            if (parsedBase === null) {
              return false;
            }
          }
          const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
          if (parsedURL === null) {
            return false;
          }
          return true;
        }
        get href() {
          return usm.serializeURL(this._url);
        }
        set href(v) {
          const parsedURL = usm.basicURLParse(v);
          if (parsedURL === null) {
            throw new TypeError(`Invalid URL: ${v}`);
          }
          this._url = parsedURL;
          this._query._list.splice(0);
          const { query } = parsedURL;
          if (query !== null) {
            this._query._list = urlencoded.parseUrlencodedString(query);
          }
        }
        get origin() {
          return usm.serializeURLOrigin(this._url);
        }
        get protocol() {
          return `${this._url.scheme}:`;
        }
        set protocol(v) {
          usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: "scheme start" });
        }
        get username() {
          return this._url.username;
        }
        set username(v) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          usm.setTheUsername(this._url, v);
        }
        get password() {
          return this._url.password;
        }
        set password(v) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          usm.setThePassword(this._url, v);
        }
        get host() {
          const url = this._url;
          if (url.host === null) {
            return "";
          }
          if (url.port === null) {
            return usm.serializeHost(url.host);
          }
          return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;
        }
        set host(v) {
          if (usm.hasAnOpaquePath(this._url)) {
            return;
          }
          usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
        }
        get hostname() {
          if (this._url.host === null) {
            return "";
          }
          return usm.serializeHost(this._url.host);
        }
        set hostname(v) {
          if (usm.hasAnOpaquePath(this._url)) {
            return;
          }
          usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
        }
        get port() {
          if (this._url.port === null) {
            return "";
          }
          return usm.serializeInteger(this._url.port);
        }
        set port(v) {
          if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          if (v === "") {
            this._url.port = null;
          } else {
            usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
          }
        }
        get pathname() {
          return usm.serializePath(this._url);
        }
        set pathname(v) {
          if (usm.hasAnOpaquePath(this._url)) {
            return;
          }
          this._url.path = [];
          usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
        }
        get search() {
          if (this._url.query === null || this._url.query === "") {
            return "";
          }
          return `?${this._url.query}`;
        }
        set search(v) {
          const url = this._url;
          if (v === "") {
            url.query = null;
            this._query._list = [];
            this._potentiallyStripTrailingSpacesFromAnOpaquePath();
            return;
          }
          const input = v[0] === "?" ? v.substring(1) : v;
          url.query = "";
          usm.basicURLParse(input, { url, stateOverride: "query" });
          this._query._list = urlencoded.parseUrlencodedString(input);
        }
        get searchParams() {
          return this._query;
        }
        get hash() {
          if (this._url.fragment === null || this._url.fragment === "") {
            return "";
          }
          return `#${this._url.fragment}`;
        }
        set hash(v) {
          if (v === "") {
            this._url.fragment = null;
            this._potentiallyStripTrailingSpacesFromAnOpaquePath();
            return;
          }
          const input = v[0] === "#" ? v.substring(1) : v;
          this._url.fragment = "";
          usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
        }
        toJSON() {
          return this.href;
        }
        _potentiallyStripTrailingSpacesFromAnOpaquePath() {
          if (!usm.hasAnOpaquePath(this._url)) {
            return;
          }
          if (this._url.fragment !== null) {
            return;
          }
          if (this._url.query !== null) {
            return;
          }
          this._url.path = this._url.path.replace(/\u0020+$/u, "");
        }
      };
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URL.js
  var require_URL = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URL.js"(exports) {
      "use strict";
      var conversions = require_lib();
      var utils = require_utils();
      var implSymbol = utils.implSymbol;
      var ctorRegistrySymbol = utils.ctorRegistrySymbol;
      var interfaceName = "URL";
      exports.is = (value) => {
        return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;
      };
      exports.isImpl = (value) => {
        return utils.isObject(value) && value instanceof Impl.implementation;
      };
      exports.convert = (globalObject, value, { context = "The provided value" } = {}) => {
        if (exports.is(value)) {
          return utils.implForWrapper(value);
        }
        throw new globalObject.TypeError(`${context} is not of type 'URL'.`);
      };
      function makeWrapper(globalObject, newTarget) {
        let proto;
        if (newTarget !== void 0) {
          proto = newTarget.prototype;
        }
        if (!utils.isObject(proto)) {
          proto = globalObject[ctorRegistrySymbol]["URL"].prototype;
        }
        return Object.create(proto);
      }
      exports.create = (globalObject, constructorArgs, privateData) => {
        const wrapper = makeWrapper(globalObject);
        return exports.setup(wrapper, globalObject, constructorArgs, privateData);
      };
      exports.createImpl = (globalObject, constructorArgs, privateData) => {
        const wrapper = exports.create(globalObject, constructorArgs, privateData);
        return utils.implForWrapper(wrapper);
      };
      exports._internalSetup = (wrapper, globalObject) => {
      };
      exports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {
        privateData.wrapper = wrapper;
        exports._internalSetup(wrapper, globalObject);
        Object.defineProperty(wrapper, implSymbol, {
          value: new Impl.implementation(globalObject, constructorArgs, privateData),
          configurable: true
        });
        wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
        if (Impl.init) {
          Impl.init(wrapper[implSymbol]);
        }
        return wrapper;
      };
      exports.new = (globalObject, newTarget) => {
        const wrapper = makeWrapper(globalObject, newTarget);
        exports._internalSetup(wrapper, globalObject);
        Object.defineProperty(wrapper, implSymbol, {
          value: Object.create(Impl.implementation.prototype),
          configurable: true
        });
        wrapper[implSymbol][utils.wrapperSymbol] = wrapper;
        if (Impl.init) {
          Impl.init(wrapper[implSymbol]);
        }
        return wrapper[implSymbol];
      };
      var exposed = /* @__PURE__ */ new Set(["Window", "Worker"]);
      exports.install = (globalObject, globalNames) => {
        if (!globalNames.some((globalName) => exposed.has(globalName))) {
          return;
        }
        const ctorRegistry = utils.initCtorRegistry(globalObject);
        class URL3 {
          constructor(url) {
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to construct 'URL': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              if (curArg !== void 0) {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to construct 'URL': parameter 2",
                  globals: globalObject
                });
              }
              args.push(curArg);
            }
            return exports.setup(Object.create(new.target.prototype), globalObject, args);
          }
          toJSON() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'toJSON' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol].toJSON();
          }
          get href() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get href' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["href"];
          }
          set href(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set href' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'href' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["href"] = V;
          }
          toString() {
            const esValue = this;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'toString' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["href"];
          }
          get origin() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get origin' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["origin"];
          }
          get protocol() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get protocol' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["protocol"];
          }
          set protocol(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set protocol' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'protocol' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["protocol"] = V;
          }
          get username() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get username' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["username"];
          }
          set username(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set username' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'username' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["username"] = V;
          }
          get password() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get password' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["password"];
          }
          set password(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set password' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'password' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["password"] = V;
          }
          get host() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get host' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["host"];
          }
          set host(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set host' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'host' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["host"] = V;
          }
          get hostname() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get hostname' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["hostname"];
          }
          set hostname(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set hostname' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'hostname' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["hostname"] = V;
          }
          get port() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get port' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["port"];
          }
          set port(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set port' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'port' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["port"] = V;
          }
          get pathname() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get pathname' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["pathname"];
          }
          set pathname(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set pathname' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'pathname' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["pathname"] = V;
          }
          get search() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get search' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["search"];
          }
          set search(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set search' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'search' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["search"] = V;
          }
          get searchParams() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get searchParams' called on an object that is not a valid instance of URL.");
            }
            return utils.getSameObject(this, "searchParams", () => {
              return utils.tryWrapperForImpl(esValue[implSymbol]["searchParams"]);
            });
          }
          get hash() {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'get hash' called on an object that is not a valid instance of URL.");
            }
            return esValue[implSymbol]["hash"];
          }
          set hash(V) {
            const esValue = this !== null && this !== void 0 ? this : globalObject;
            if (!exports.is(esValue)) {
              throw new globalObject.TypeError("'set hash' called on an object that is not a valid instance of URL.");
            }
            V = conversions["USVString"](V, {
              context: "Failed to set the 'hash' property on 'URL': The provided value",
              globals: globalObject
            });
            esValue[implSymbol]["hash"] = V;
          }
          static parse(url) {
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to execute 'parse' on 'URL': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'parse' on 'URL': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              if (curArg !== void 0) {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to execute 'parse' on 'URL': parameter 2",
                  globals: globalObject
                });
              }
              args.push(curArg);
            }
            return utils.tryWrapperForImpl(Impl.implementation.parse(globalObject, ...args));
          }
          static canParse(url) {
            if (arguments.length < 1) {
              throw new globalObject.TypeError(
                `Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`
              );
            }
            const args = [];
            {
              let curArg = arguments[0];
              curArg = conversions["USVString"](curArg, {
                context: "Failed to execute 'canParse' on 'URL': parameter 1",
                globals: globalObject
              });
              args.push(curArg);
            }
            {
              let curArg = arguments[1];
              if (curArg !== void 0) {
                curArg = conversions["USVString"](curArg, {
                  context: "Failed to execute 'canParse' on 'URL': parameter 2",
                  globals: globalObject
                });
              }
              args.push(curArg);
            }
            return Impl.implementation.canParse(...args);
          }
        }
        Object.defineProperties(URL3.prototype, {
          toJSON: { enumerable: true },
          href: { enumerable: true },
          toString: { enumerable: true },
          origin: { enumerable: true },
          protocol: { enumerable: true },
          username: { enumerable: true },
          password: { enumerable: true },
          host: { enumerable: true },
          hostname: { enumerable: true },
          port: { enumerable: true },
          pathname: { enumerable: true },
          search: { enumerable: true },
          searchParams: { enumerable: true },
          hash: { enumerable: true },
          [Symbol.toStringTag]: { value: "URL", configurable: true }
        });
        Object.defineProperties(URL3, { parse: { enumerable: true }, canParse: { enumerable: true } });
        ctorRegistry[interfaceName] = URL3;
        Object.defineProperty(globalObject, interfaceName, {
          configurable: true,
          writable: true,
          value: URL3
        });
        if (globalNames.includes("Window")) {
          Object.defineProperty(globalObject, "webkitURL", {
            configurable: true,
            writable: true,
            value: URL3
          });
        }
      };
      var Impl = require_URL_impl();
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/webidl2js-wrapper.js
  var require_webidl2js_wrapper = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/webidl2js-wrapper.js"(exports) {
      "use strict";
      var URL3 = require_URL();
      var URLSearchParams = require_URLSearchParams();
      exports.URL = URL3;
      exports.URLSearchParams = URLSearchParams;
    }
  });

  // ../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/index.js
  var require_whatwg_url = __commonJS({
    "../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/index.js"(exports) {
      "use strict";
      var { URL: URL3, URLSearchParams } = require_webidl2js_wrapper();
      var urlStateMachine = require_url_state_machine();
      var percentEncoding = require_percent_encoding();
      var sharedGlobalObject = { Array, Object, Promise, String, TypeError };
      URL3.install(sharedGlobalObject, ["Window"]);
      URLSearchParams.install(sharedGlobalObject, ["Window"]);
      exports.URL = sharedGlobalObject.URL;
      exports.URLSearchParams = sharedGlobalObject.URLSearchParams;
      exports.parseURL = urlStateMachine.parseURL;
      exports.basicURLParse = urlStateMachine.basicURLParse;
      exports.serializeURL = urlStateMachine.serializeURL;
      exports.serializePath = urlStateMachine.serializePath;
      exports.serializeHost = urlStateMachine.serializeHost;
      exports.serializeInteger = urlStateMachine.serializeInteger;
      exports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;
      exports.setTheUsername = urlStateMachine.setTheUsername;
      exports.setThePassword = urlStateMachine.setThePassword;
      exports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;
      exports.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;
      exports.percentDecodeString = percentEncoding.percentDecodeString;
      exports.percentDecodeBytes = percentEncoding.percentDecodeBytes;
    }
  });

  // ../../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs
  var lib_exports = {};
  __export(lib_exports, {
    AbortError: () => AbortError,
    FetchError: () => FetchError,
    Headers: () => Headers2,
    Request: () => Request,
    Response: () => Response2,
    default: () => lib_default
  });
  function FetchError(message, type3, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type3;
    if (systemError) {
      this.code = this.errno = systemError.code;
    }
    Error.captureStackTrace(this, this.constructor);
  }
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === void 0 ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
    if (body == null) {
      body = null;
    } else if (isURLSearchParams(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof import_stream.default)
      ;
    else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof import_stream.default) {
      body.on("error", function(err) {
        const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
        _this[INTERNALS].error = error2;
      });
    }
  }
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    if (isBlob(body)) {
      body = body.stream();
    }
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }
    if (!(body instanceof import_stream.default)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
      let resTimeout;
      if (_this4.timeout) {
        resTimeout = setTimeout(function() {
          abort = true;
          reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
        }, _this4.timeout);
      }
      body.on("error", function(err) {
        if (err.name === "AbortError") {
          abort = true;
          reject(err);
        } else {
          reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
        }
      });
      body.on("data", function(chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on("end", function() {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
        }
      });
    });
  }
  function convertBody(buffer, headers) {
    if (typeof convert !== "function") {
      throw new Error("The package `encoding` must be installed to use the textConverted() function");
    }
    const ct = headers.get("content-type");
    let charset = "utf-8";
    let res, str;
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }
    str = buffer.slice(0, 1024).toString();
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (!res) {
        res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
        if (res) {
          res.pop();
        }
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    if (res) {
      charset = res.pop();
      if (charset === "gb2312" || charset === "gbk") {
        charset = "gb18030";
      }
    }
    return convert(buffer, "UTF-8", charset).toString();
  }
  function isURLSearchParams(obj) {
    if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
      return false;
    }
    return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
  }
  function isBlob(obj) {
    return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  function clone3(instance) {
    let p1, p2;
    let body = instance.body;
    if (instance.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      instance[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }
  function extractContentType(body) {
    if (body === null) {
      return null;
    } else if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    } else if (isURLSearchParams(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isBlob(body)) {
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      return null;
    } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      return null;
    } else if (ArrayBuffer.isView(body)) {
      return null;
    } else if (typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof import_stream.default) {
      return null;
    } else {
      return "text/plain;charset=UTF-8";
    }
  }
  function getTotalBytes(instance) {
    const body = instance.body;
    if (body === null) {
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      return body.length;
    } else if (body && typeof body.getLengthSync === "function") {
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
      body.hasKnownLength && body.hasKnownLength()) {
        return body.getLengthSync();
      }
      return null;
    } else {
      return null;
    }
  }
  function writeToStream(dest, instance) {
    const body = instance.body;
    if (body === null) {
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      dest.write(body);
      dest.end();
    } else {
      body.pipe(dest);
    }
  }
  function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === "") {
      throw new TypeError(`${name} is not a legal HTTP header name`);
    }
  }
  function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`);
    }
  }
  function find(map2, name) {
    name = name.toLowerCase();
    for (const key in map2) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return void 0;
  }
  function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
    const keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === "key" ? function(k) {
      return k.toLowerCase();
    } : kind === "value" ? function(k) {
      return headers[MAP][k].join(", ");
    } : function(k) {
      return [k.toLowerCase(), headers[MAP][k].join(", ")];
    });
  }
  function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target,
      kind,
      index: 0
    };
    return iterator;
  }
  function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({ __proto__: null }, headers[MAP]);
    const hostHeaderKey = find(headers[MAP], "Host");
    if (hostHeaderKey !== void 0) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }
  function createHeadersLenient(obj) {
    const headers = new Headers2();
    for (const name of Object.keys(obj)) {
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        for (const val of obj[name]) {
          if (invalidHeaderCharRegex.test(val)) {
            continue;
          }
          if (headers[MAP][name] === void 0) {
            headers[MAP][name] = [val];
          } else {
            headers[MAP][name].push(val);
          }
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  function parseURL(urlStr) {
    if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
      urlStr = new URL2(urlStr).toString();
    }
    return parse_url(urlStr);
  }
  function isRequest(input) {
    return typeof input === "object" && typeof input[INTERNALS$2] === "object";
  }
  function isAbortSignal(signal) {
    const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === "AbortSignal");
  }
  function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers2(request[INTERNALS$2].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError("Only absolute URLs are supported");
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError("Only HTTP(S) protocols are supported");
    }
    if (request.signal && request.body instanceof import_stream.default.Readable && !streamDestructionSupported) {
      throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
    }
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body != null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number") {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip,deflate");
    }
    let agent = request.agent;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent
    });
  }
  function AbortError(message) {
    Error.call(this, message);
    this.type = "aborted";
    this.message = message;
    Error.captureStackTrace(this, this.constructor);
  }
  function fetch2(url, opts) {
    if (!fetch2.Promise) {
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    }
    Body.Promise = fetch2.Promise;
    return new fetch2.Promise(function(resolve, reject) {
      const request = new Request(url, opts);
      const options = getNodeRequestOptions(request);
      const send = (options.protocol === "https:" ? import_https.default : import_http.default).request;
      const signal = request.signal;
      let response = null;
      const abort = function abort2() {
        let error2 = new AbortError("The user aborted a request.");
        reject(error2);
        if (request.body && request.body instanceof import_stream.default.Readable) {
          destroyStream(request.body, error2);
        }
        if (!response || !response.body)
          return;
        response.body.emit("error", error2);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = function abortAndFinalize2() {
        abort();
        finalize();
      };
      const req = send(options);
      let reqTimeout;
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once("socket", function(socket) {
          reqTimeout = setTimeout(function() {
            reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
            finalize();
          }, request.timeout);
        });
      }
      req.on("error", function(err) {
        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
        if (response && response.body) {
          destroyStream(response.body, err);
        }
        finalize();
      });
      fixResponseChunkedTransferBadEnding(req, function(err) {
        if (signal && signal.aborted) {
          return;
        }
        if (response && response.body) {
          destroyStream(response.body, err);
        }
      });
      if (parseInt(process.version.substring(1)) < 14) {
        req.on("socket", function(s) {
          s.addListener("close", function(hadError) {
            const hasDataListener = s.listenerCount("data") > 0;
            if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {
              const err = new Error("Premature close");
              err.code = "ERR_STREAM_PREMATURE_CLOSE";
              response.body.emit("error", err);
            }
          });
        });
      }
      req.on("response", function(res) {
        clearTimeout(reqTimeout);
        const headers = createHeadersLenient(res.headers);
        if (fetch2.isRedirect(res.statusCode)) {
          const location = headers.get("Location");
          let locationURL = null;
          try {
            locationURL = location === null ? null : new URL$1(location, request.url).toString();
          } catch (err) {
            if (request.redirect !== "manual") {
              reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
              finalize();
              return;
            }
          }
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              if (locationURL !== null) {
                try {
                  headers.set("Location", locationURL);
                } catch (err) {
                  reject(err);
                }
              }
              break;
            case "follow":
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOpts = {
                headers: new Headers2(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout,
                size: request.size
              };
              if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
                for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                  requestOpts.headers.delete(name);
                }
              }
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                requestOpts.method = "GET";
                requestOpts.body = void 0;
                requestOpts.headers.delete("content-length");
              }
              resolve(fetch2(new Request(locationURL, requestOpts)));
              finalize();
              return;
          }
        }
        res.once("end", function() {
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
        });
        let body = res.pipe(new PassThrough$1());
        const response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: import_zlib.default.Z_SYNC_FLUSH,
          finishFlush: import_zlib.default.Z_SYNC_FLUSH
        };
        if (codings == "gzip" || codings == "x-gzip") {
          body = body.pipe(import_zlib.default.createGunzip(zlibOptions));
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        if (codings == "deflate" || codings == "x-deflate") {
          const raw = res.pipe(new PassThrough$1());
          raw.once("data", function(chunk) {
            if ((chunk[0] & 15) === 8) {
              body = body.pipe(import_zlib.default.createInflate());
            } else {
              body = body.pipe(import_zlib.default.createInflateRaw());
            }
            response = new Response2(body, response_options);
            resolve(response);
          });
          raw.on("end", function() {
            if (!response) {
              response = new Response2(body, response_options);
              resolve(response);
            }
          });
          return;
        }
        if (codings == "br" && typeof import_zlib.default.createBrotliDecompress === "function") {
          body = body.pipe(import_zlib.default.createBrotliDecompress());
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        response = new Response2(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  function fixResponseChunkedTransferBadEnding(request, errorCallback) {
    let socket;
    request.on("socket", function(s) {
      socket = s;
    });
    request.on("response", function(response) {
      const headers = response.headers;
      if (headers["transfer-encoding"] === "chunked" && !headers["content-length"]) {
        response.once("close", function(hadError) {
          const hasDataListener = socket && socket.listenerCount("data") > 0;
          if (hasDataListener && !hadError) {
            const err = new Error("Premature close");
            err.code = "ERR_STREAM_PREMATURE_CLOSE";
            errorCallback(err);
          }
        });
      }
    });
  }
  function destroyStream(stream, err) {
    if (stream.destroy) {
      stream.destroy(err);
    } else {
      stream.emit("error", err);
      stream.end();
    }
  }
  var import_stream, import_http, import_url, import_whatwg_url, import_https, import_zlib, Readable, BUFFER, TYPE, Blob, convert, INTERNALS, PassThrough, invalidTokenRegex, invalidHeaderCharRegex, MAP, Headers2, INTERNAL, HeadersIteratorPrototype, INTERNALS$1, STATUS_CODES, Response2, INTERNALS$2, URL2, parse_url, format_url, streamDestructionSupported, Request, URL$1, PassThrough$1, isDomainOrSubdomain, isSameProtocol, lib_default;
  var init_lib = __esm({
    "../../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs"() {
      import_stream = __toESM(__require("stream"), 1);
      import_http = __toESM(__require("http"), 1);
      import_url = __toESM(__require("url"), 1);
      import_whatwg_url = __toESM(require_whatwg_url(), 1);
      import_https = __toESM(__require("https"), 1);
      import_zlib = __toESM(__require("zlib"), 1);
      Readable = import_stream.default.Readable;
      BUFFER = Symbol("buffer");
      TYPE = Symbol("type");
      Blob = class {
        constructor() {
          this[TYPE] = "";
          const blobParts = arguments[0];
          const options = arguments[1];
          const buffers = [];
          let size = 0;
          if (blobParts) {
            const a = blobParts;
            const length = Number(a.length);
            for (let i = 0; i < length; i++) {
              const element = a[i];
              let buffer;
              if (element instanceof Buffer) {
                buffer = element;
              } else if (ArrayBuffer.isView(element)) {
                buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
              } else if (element instanceof ArrayBuffer) {
                buffer = Buffer.from(element);
              } else if (element instanceof Blob) {
                buffer = element[BUFFER];
              } else {
                buffer = Buffer.from(typeof element === "string" ? element : String(element));
              }
              size += buffer.length;
              buffers.push(buffer);
            }
          }
          this[BUFFER] = Buffer.concat(buffers);
          let type3 = options && options.type !== void 0 && String(options.type).toLowerCase();
          if (type3 && !/[^\u0020-\u007E]/.test(type3)) {
            this[TYPE] = type3;
          }
        }
        get size() {
          return this[BUFFER].length;
        }
        get type() {
          return this[TYPE];
        }
        text() {
          return Promise.resolve(this[BUFFER].toString());
        }
        arrayBuffer() {
          const buf = this[BUFFER];
          const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
          return Promise.resolve(ab);
        }
        stream() {
          const readable = new Readable();
          readable._read = function() {
          };
          readable.push(this[BUFFER]);
          readable.push(null);
          return readable;
        }
        toString() {
          return "[object Blob]";
        }
        slice() {
          const size = this.size;
          const start = arguments[0];
          const end = arguments[1];
          let relativeStart, relativeEnd;
          if (start === void 0) {
            relativeStart = 0;
          } else if (start < 0) {
            relativeStart = Math.max(size + start, 0);
          } else {
            relativeStart = Math.min(start, size);
          }
          if (end === void 0) {
            relativeEnd = size;
          } else if (end < 0) {
            relativeEnd = Math.max(size + end, 0);
          } else {
            relativeEnd = Math.min(end, size);
          }
          const span = Math.max(relativeEnd - relativeStart, 0);
          const buffer = this[BUFFER];
          const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
          const blob = new Blob([], { type: arguments[2] });
          blob[BUFFER] = slicedBuffer;
          return blob;
        }
      };
      Object.defineProperties(Blob.prototype, {
        size: { enumerable: true },
        type: { enumerable: true },
        slice: { enumerable: true }
      });
      Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
        value: "Blob",
        writable: false,
        enumerable: false,
        configurable: true
      });
      FetchError.prototype = Object.create(Error.prototype);
      FetchError.prototype.constructor = FetchError;
      FetchError.prototype.name = "FetchError";
      try {
        convert = __require("encoding").convert;
      } catch (e) {
      }
      INTERNALS = Symbol("Body internals");
      PassThrough = import_stream.default.PassThrough;
      Body.prototype = {
        get body() {
          return this[INTERNALS].body;
        },
        get bodyUsed() {
          return this[INTERNALS].disturbed;
        },
        /**
         * Decode response as ArrayBuffer
         *
         * @return  Promise
         */
        arrayBuffer() {
          return consumeBody.call(this).then(function(buf) {
            return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
          });
        },
        /**
         * Return raw response as Blob
         *
         * @return Promise
         */
        blob() {
          let ct = this.headers && this.headers.get("content-type") || "";
          return consumeBody.call(this).then(function(buf) {
            return Object.assign(
              // Prevent copying
              new Blob([], {
                type: ct.toLowerCase()
              }),
              {
                [BUFFER]: buf
              }
            );
          });
        },
        /**
         * Decode response as json
         *
         * @return  Promise
         */
        json() {
          var _this2 = this;
          return consumeBody.call(this).then(function(buffer) {
            try {
              return JSON.parse(buffer.toString());
            } catch (err) {
              return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
            }
          });
        },
        /**
         * Decode response as text
         *
         * @return  Promise
         */
        text() {
          return consumeBody.call(this).then(function(buffer) {
            return buffer.toString();
          });
        },
        /**
         * Decode response as buffer (non-spec api)
         *
         * @return  Promise
         */
        buffer() {
          return consumeBody.call(this);
        },
        /**
         * Decode response as text, while automatically detecting the encoding and
         * trying to decode to UTF-8 (non-spec api)
         *
         * @return  Promise
         */
        textConverted() {
          var _this3 = this;
          return consumeBody.call(this).then(function(buffer) {
            return convertBody(buffer, _this3.headers);
          });
        }
      };
      Object.defineProperties(Body.prototype, {
        body: { enumerable: true },
        bodyUsed: { enumerable: true },
        arrayBuffer: { enumerable: true },
        blob: { enumerable: true },
        json: { enumerable: true },
        text: { enumerable: true }
      });
      Body.mixIn = function(proto) {
        for (const name of Object.getOwnPropertyNames(Body.prototype)) {
          if (!(name in proto)) {
            const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
            Object.defineProperty(proto, name, desc);
          }
        }
      };
      Body.Promise = global.Promise;
      invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
      invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
      MAP = Symbol("map");
      Headers2 = class {
        /**
         * Headers class
         *
         * @param   Object  headers  Response headers
         * @return  Void
         */
        constructor() {
          let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
          this[MAP] = /* @__PURE__ */ Object.create(null);
          if (init instanceof Headers2) {
            const rawHeaders = init.raw();
            const headerNames = Object.keys(rawHeaders);
            for (const headerName of headerNames) {
              for (const value of rawHeaders[headerName]) {
                this.append(headerName, value);
              }
            }
            return;
          }
          if (init == null)
            ;
          else if (typeof init === "object") {
            const method = init[Symbol.iterator];
            if (method != null) {
              if (typeof method !== "function") {
                throw new TypeError("Header pairs must be iterable");
              }
              const pairs = [];
              for (const pair of init) {
                if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                  throw new TypeError("Each header pair must be iterable");
                }
                pairs.push(Array.from(pair));
              }
              for (const pair of pairs) {
                if (pair.length !== 2) {
                  throw new TypeError("Each header pair must be a name/value tuple");
                }
                this.append(pair[0], pair[1]);
              }
            } else {
              for (const key of Object.keys(init)) {
                const value = init[key];
                this.append(key, value);
              }
            }
          } else {
            throw new TypeError("Provided initializer must be an object");
          }
        }
        /**
         * Return combined header value given name
         *
         * @param   String  name  Header name
         * @return  Mixed
         */
        get(name) {
          name = `${name}`;
          validateName(name);
          const key = find(this[MAP], name);
          if (key === void 0) {
            return null;
          }
          return this[MAP][key].join(", ");
        }
        /**
         * Iterate over all headers
         *
         * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
         * @param   Boolean   thisArg   `this` context for callback function
         * @return  Void
         */
        forEach(callback) {
          let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
          let pairs = getHeaders(this);
          let i = 0;
          while (i < pairs.length) {
            var _pairs$i = pairs[i];
            const name = _pairs$i[0], value = _pairs$i[1];
            callback.call(thisArg, value, name, this);
            pairs = getHeaders(this);
            i++;
          }
        }
        /**
         * Overwrite header values given name
         *
         * @param   String  name   Header name
         * @param   String  value  Header value
         * @return  Void
         */
        set(name, value) {
          name = `${name}`;
          value = `${value}`;
          validateName(name);
          validateValue(value);
          const key = find(this[MAP], name);
          this[MAP][key !== void 0 ? key : name] = [value];
        }
        /**
         * Append a value onto existing header
         *
         * @param   String  name   Header name
         * @param   String  value  Header value
         * @return  Void
         */
        append(name, value) {
          name = `${name}`;
          value = `${value}`;
          validateName(name);
          validateValue(value);
          const key = find(this[MAP], name);
          if (key !== void 0) {
            this[MAP][key].push(value);
          } else {
            this[MAP][name] = [value];
          }
        }
        /**
         * Check for header name existence
         *
         * @param   String   name  Header name
         * @return  Boolean
         */
        has(name) {
          name = `${name}`;
          validateName(name);
          return find(this[MAP], name) !== void 0;
        }
        /**
         * Delete all header values given name
         *
         * @param   String  name  Header name
         * @return  Void
         */
        delete(name) {
          name = `${name}`;
          validateName(name);
          const key = find(this[MAP], name);
          if (key !== void 0) {
            delete this[MAP][key];
          }
        }
        /**
         * Return raw headers (non-spec api)
         *
         * @return  Object
         */
        raw() {
          return this[MAP];
        }
        /**
         * Get an iterator on keys.
         *
         * @return  Iterator
         */
        keys() {
          return createHeadersIterator(this, "key");
        }
        /**
         * Get an iterator on values.
         *
         * @return  Iterator
         */
        values() {
          return createHeadersIterator(this, "value");
        }
        /**
         * Get an iterator on entries.
         *
         * This is the default iterator of the Headers object.
         *
         * @return  Iterator
         */
        [Symbol.iterator]() {
          return createHeadersIterator(this, "key+value");
        }
      };
      Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
      Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
        value: "Headers",
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperties(Headers2.prototype, {
        get: { enumerable: true },
        forEach: { enumerable: true },
        set: { enumerable: true },
        append: { enumerable: true },
        has: { enumerable: true },
        delete: { enumerable: true },
        keys: { enumerable: true },
        values: { enumerable: true },
        entries: { enumerable: true }
      });
      INTERNAL = Symbol("internal");
      HeadersIteratorPrototype = Object.setPrototypeOf({
        next() {
          if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
            throw new TypeError("Value of `this` is not a HeadersIterator");
          }
          var _INTERNAL = this[INTERNAL];
          const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
          const values = getHeaders(target, kind);
          const len = values.length;
          if (index >= len) {
            return {
              value: void 0,
              done: true
            };
          }
          this[INTERNAL].index = index + 1;
          return {
            value: values[index],
            done: false
          };
        }
      }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
      Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
        value: "HeadersIterator",
        writable: false,
        enumerable: false,
        configurable: true
      });
      INTERNALS$1 = Symbol("Response internals");
      STATUS_CODES = import_http.default.STATUS_CODES;
      Response2 = class {
        constructor() {
          let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
          let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          Body.call(this, body, opts);
          const status = opts.status || 200;
          const headers = new Headers2(opts.headers);
          if (body != null && !headers.has("Content-Type")) {
            const contentType = extractContentType(body);
            if (contentType) {
              headers.append("Content-Type", contentType);
            }
          }
          this[INTERNALS$1] = {
            url: opts.url,
            status,
            statusText: opts.statusText || STATUS_CODES[status],
            headers,
            counter: opts.counter
          };
        }
        get url() {
          return this[INTERNALS$1].url || "";
        }
        get status() {
          return this[INTERNALS$1].status;
        }
        /**
         * Convenience property representing if the request ended normally
         */
        get ok() {
          return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
        }
        get redirected() {
          return this[INTERNALS$1].counter > 0;
        }
        get statusText() {
          return this[INTERNALS$1].statusText;
        }
        get headers() {
          return this[INTERNALS$1].headers;
        }
        /**
         * Clone this response
         *
         * @return  Response
         */
        clone() {
          return new Response2(clone3(this), {
            url: this.url,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
            ok: this.ok,
            redirected: this.redirected
          });
        }
      };
      Body.mixIn(Response2.prototype);
      Object.defineProperties(Response2.prototype, {
        url: { enumerable: true },
        status: { enumerable: true },
        ok: { enumerable: true },
        redirected: { enumerable: true },
        statusText: { enumerable: true },
        headers: { enumerable: true },
        clone: { enumerable: true }
      });
      Object.defineProperty(Response2.prototype, Symbol.toStringTag, {
        value: "Response",
        writable: false,
        enumerable: false,
        configurable: true
      });
      INTERNALS$2 = Symbol("Request internals");
      URL2 = import_url.default.URL || import_whatwg_url.default.URL;
      parse_url = import_url.default.parse;
      format_url = import_url.default.format;
      streamDestructionSupported = "destroy" in import_stream.default.Readable.prototype;
      Request = class {
        constructor(input) {
          let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          let parsedURL;
          if (!isRequest(input)) {
            if (input && input.href) {
              parsedURL = parseURL(input.href);
            } else {
              parsedURL = parseURL(`${input}`);
            }
            input = {};
          } else {
            parsedURL = parseURL(input.url);
          }
          let method = init.method || input.method || "GET";
          method = method.toUpperCase();
          if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
            throw new TypeError("Request with GET/HEAD method cannot have body");
          }
          let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone3(input) : null;
          Body.call(this, inputBody, {
            timeout: init.timeout || input.timeout || 0,
            size: init.size || input.size || 0
          });
          const headers = new Headers2(init.headers || input.headers || {});
          if (inputBody != null && !headers.has("Content-Type")) {
            const contentType = extractContentType(inputBody);
            if (contentType) {
              headers.append("Content-Type", contentType);
            }
          }
          let signal = isRequest(input) ? input.signal : null;
          if ("signal" in init)
            signal = init.signal;
          if (signal != null && !isAbortSignal(signal)) {
            throw new TypeError("Expected signal to be an instanceof AbortSignal");
          }
          this[INTERNALS$2] = {
            method,
            redirect: init.redirect || input.redirect || "follow",
            headers,
            parsedURL,
            signal
          };
          this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
          this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
          this.counter = init.counter || input.counter || 0;
          this.agent = init.agent || input.agent;
        }
        get method() {
          return this[INTERNALS$2].method;
        }
        get url() {
          return format_url(this[INTERNALS$2].parsedURL);
        }
        get headers() {
          return this[INTERNALS$2].headers;
        }
        get redirect() {
          return this[INTERNALS$2].redirect;
        }
        get signal() {
          return this[INTERNALS$2].signal;
        }
        /**
         * Clone this request
         *
         * @return  Request
         */
        clone() {
          return new Request(this);
        }
      };
      Body.mixIn(Request.prototype);
      Object.defineProperty(Request.prototype, Symbol.toStringTag, {
        value: "Request",
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperties(Request.prototype, {
        method: { enumerable: true },
        url: { enumerable: true },
        headers: { enumerable: true },
        redirect: { enumerable: true },
        clone: { enumerable: true },
        signal: { enumerable: true }
      });
      AbortError.prototype = Object.create(Error.prototype);
      AbortError.prototype.constructor = AbortError;
      AbortError.prototype.name = "AbortError";
      URL$1 = import_url.default.URL || import_whatwg_url.default.URL;
      PassThrough$1 = import_stream.default.PassThrough;
      isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
        const orig = new URL$1(original).hostname;
        const dest = new URL$1(destination).hostname;
        return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
      };
      isSameProtocol = function isSameProtocol2(destination, original) {
        const orig = new URL$1(original).protocol;
        const dest = new URL$1(destination).protocol;
        return orig === dest;
      };
      fetch2.isRedirect = function(code) {
        return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
      };
      fetch2.Promise = global.Promise;
      lib_default = fetch2;
    }
  });

  // ../../node_modules/.pnpm/cross-fetch@4.0.0/node_modules/cross-fetch/dist/node-ponyfill.js
  var require_node_ponyfill = __commonJS({
    "../../node_modules/.pnpm/cross-fetch@4.0.0/node_modules/cross-fetch/dist/node-ponyfill.js"(exports, module) {
      var nodeFetch = (init_lib(), __toCommonJS(lib_exports));
      var realFetch = nodeFetch.default || nodeFetch;
      var fetch3 = function(url, options) {
        if (/^\/\//.test(url)) {
          url = "https:" + url;
        }
        return realFetch.call(this, url, options);
      };
      fetch3.ponyfill = true;
      module.exports = exports = fetch3;
      exports.fetch = fetch3;
      exports.Headers = nodeFetch.Headers;
      exports.Request = nodeFetch.Request;
      exports.Response = nodeFetch.Response;
      exports.default = fetch3;
    }
  });

  // ../../node_modules/.pnpm/@fuels+vm-asm@0.58.2/node_modules/@fuels/vm-asm/dist/node/index.cjs
  var require_node = __commonJS({
    "../../node_modules/.pnpm/@fuels+vm-asm@0.58.2/node_modules/@fuels/vm-asm/dist/node/index.cjs"(exports) {
      "use strict";
      var wasm$1;
      var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : { decode: () => {
        throw Error("TextDecoder not available");
      } };
      if (typeof TextDecoder !== "undefined") {
        cachedTextDecoder.decode();
      }
      var cachedUint8ArrayMemory0 = null;
      function getUint8ArrayMemory0() {
        if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {
          cachedUint8ArrayMemory0 = new Uint8Array(wasm$1.memory.buffer);
        }
        return cachedUint8ArrayMemory0;
      }
      function getStringFromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));
      }
      function _assertClass(instance, klass) {
        if (!(instance instanceof klass)) {
          throw new Error(`expected instance of ${klass.name}`);
        }
        return instance.ptr;
      }
      function gm_args(ra, args) {
        const ret3 = wasm$1.gm_args(ra, args);
        return Instruction.__wrap(ret3);
      }
      function gtf_args(ra, rb, args) {
        const ret3 = wasm$1.gtf_args(ra, rb, args);
        return Instruction.__wrap(ret3);
      }
      function wdcm_args(ra, rb, rc, args) {
        _assertClass(args, CompareArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wdcm_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wqcm_args(ra, rb, rc, args) {
        _assertClass(args, CompareArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wqcm_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wdop_args(ra, rb, rc, args) {
        _assertClass(args, MathArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wdop_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wqop_args(ra, rb, rc, args) {
        _assertClass(args, MathArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wqop_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wdml_args(ra, rb, rc, args) {
        _assertClass(args, MulArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wdml_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wqml_args(ra, rb, rc, args) {
        _assertClass(args, MulArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wqml_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wddv_args(ra, rb, rc, args) {
        _assertClass(args, DivArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wddv_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function wqdv_args(ra, rb, rc, args) {
        _assertClass(args, DivArgs);
        var ptr0 = args.__destroy_into_raw();
        const ret3 = wasm$1.wqdv_args(ra, rb, rc, ptr0);
        return Instruction.__wrap(ret3);
      }
      function add(dst, lhs, rhs) {
        const ret3 = wasm$1.add(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function and(dst, lhs, rhs) {
        const ret3 = wasm$1.and(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function div(dst, lhs, rhs) {
        const ret3 = wasm$1.div(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function eq(dst, lhs, rhs) {
        const ret3 = wasm$1.eq(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function exp(dst, lhs, rhs) {
        const ret3 = wasm$1.exp(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function gt(dst, lhs, rhs) {
        const ret3 = wasm$1.gt(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function lt(dst, lhs, rhs) {
        const ret3 = wasm$1.lt(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function mlog(dst, lhs, rhs) {
        const ret3 = wasm$1.mlog(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function mroo(dst, lhs, rhs) {
        const ret3 = wasm$1.mroo(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function mod_(dst, lhs, rhs) {
        const ret3 = wasm$1.mod_(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function move_(dst, src) {
        const ret3 = wasm$1.move_(dst, src);
        return Instruction.__wrap(ret3);
      }
      function mul(dst, lhs, rhs) {
        const ret3 = wasm$1.mul(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function not(dst, arg) {
        const ret3 = wasm$1.not(dst, arg);
        return Instruction.__wrap(ret3);
      }
      function or(dst, lhs, rhs) {
        const ret3 = wasm$1.or(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function sll(dst, lhs, rhs) {
        const ret3 = wasm$1.sll(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function srl(dst, lhs, rhs) {
        const ret3 = wasm$1.srl(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function sub(dst, lhs, rhs) {
        const ret3 = wasm$1.sub(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function xor(dst, lhs, rhs) {
        const ret3 = wasm$1.xor(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function mldv(dst, mul_lhs, mul_rhs, divisor) {
        const ret3 = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);
        return Instruction.__wrap(ret3);
      }
      function ret2(value) {
        const ret3 = wasm$1.ret(value);
        return Instruction.__wrap(ret3);
      }
      function retd(addr, len) {
        const ret3 = wasm$1.retd(addr, len);
        return Instruction.__wrap(ret3);
      }
      function aloc(bytes2) {
        const ret3 = wasm$1.aloc(bytes2);
        return Instruction.__wrap(ret3);
      }
      function mcl(dst_addr, len) {
        const ret3 = wasm$1.mcl(dst_addr, len);
        return Instruction.__wrap(ret3);
      }
      function mcp(dst_addr, src_addr, len) {
        const ret3 = wasm$1.mcp(dst_addr, src_addr, len);
        return Instruction.__wrap(ret3);
      }
      function meq(result, lhs_addr, rhs_addr, len) {
        const ret3 = wasm$1.meq(result, lhs_addr, rhs_addr, len);
        return Instruction.__wrap(ret3);
      }
      function bhsh(dst, heigth) {
        const ret3 = wasm$1.bhsh(dst, heigth);
        return Instruction.__wrap(ret3);
      }
      function bhei(dst) {
        const ret3 = wasm$1.bhei(dst);
        return Instruction.__wrap(ret3);
      }
      function burn(amount, sub_id_addr) {
        const ret3 = wasm$1.burn(amount, sub_id_addr);
        return Instruction.__wrap(ret3);
      }
      function call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {
        const ret3 = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);
        return Instruction.__wrap(ret3);
      }
      function ccp(dst_addr, contract_id_addr, offset, len) {
        const ret3 = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);
        return Instruction.__wrap(ret3);
      }
      function croo(dst_addr, contract_id_addr) {
        const ret3 = wasm$1.croo(dst_addr, contract_id_addr);
        return Instruction.__wrap(ret3);
      }
      function csiz(dst, contract_id_addr) {
        const ret3 = wasm$1.csiz(dst, contract_id_addr);
        return Instruction.__wrap(ret3);
      }
      function cb(dst) {
        const ret3 = wasm$1.cb(dst);
        return Instruction.__wrap(ret3);
      }
      function ldc(src_addr, offset, len, mode) {
        const ret3 = wasm$1.ldc(src_addr, offset, len, mode);
        return Instruction.__wrap(ret3);
      }
      function log(a, b, c, d) {
        const ret3 = wasm$1.log(a, b, c, d);
        return Instruction.__wrap(ret3);
      }
      function logd(a, b, addr, len) {
        const ret3 = wasm$1.logd(a, b, addr, len);
        return Instruction.__wrap(ret3);
      }
      function mint(amount, sub_id_addr) {
        const ret3 = wasm$1.mint(amount, sub_id_addr);
        return Instruction.__wrap(ret3);
      }
      function rvrt(value) {
        const ret3 = wasm$1.rvrt(value);
        return Instruction.__wrap(ret3);
      }
      function scwq(key_addr, status, lenq) {
        const ret3 = wasm$1.scwq(key_addr, status, lenq);
        return Instruction.__wrap(ret3);
      }
      function srw(dst, status, key_addr) {
        const ret3 = wasm$1.srw(dst, status, key_addr);
        return Instruction.__wrap(ret3);
      }
      function srwq(dst_addr, status, key_addr, lenq) {
        const ret3 = wasm$1.srwq(dst_addr, status, key_addr, lenq);
        return Instruction.__wrap(ret3);
      }
      function sww(key_addr, status, value) {
        const ret3 = wasm$1.sww(key_addr, status, value);
        return Instruction.__wrap(ret3);
      }
      function swwq(key_addr, status, src_addr, lenq) {
        const ret3 = wasm$1.swwq(key_addr, status, src_addr, lenq);
        return Instruction.__wrap(ret3);
      }
      function tr2(contract_id_addr, amount, asset_id_addr) {
        const ret3 = wasm$1.tr(contract_id_addr, amount, asset_id_addr);
        return Instruction.__wrap(ret3);
      }
      function tro(contract_id_addr, output_index, amount, asset_id_addr) {
        const ret3 = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);
        return Instruction.__wrap(ret3);
      }
      function eck1(dst_addr, sig_addr, msg_hash_addr) {
        const ret3 = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);
        return Instruction.__wrap(ret3);
      }
      function ecr1(dst_addr, sig_addr, msg_hash_addr) {
        const ret3 = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);
        return Instruction.__wrap(ret3);
      }
      function ed19(pub_key_addr, sig_addr, msg_addr, msg_len) {
        const ret3 = wasm$1.ed19(pub_key_addr, sig_addr, msg_addr, msg_len);
        return Instruction.__wrap(ret3);
      }
      function k256(dst_addr, src_addr, len) {
        const ret3 = wasm$1.k256(dst_addr, src_addr, len);
        return Instruction.__wrap(ret3);
      }
      function s256(dst_addr, src_addr, len) {
        const ret3 = wasm$1.s256(dst_addr, src_addr, len);
        return Instruction.__wrap(ret3);
      }
      function time(dst, heigth) {
        const ret3 = wasm$1.time(dst, heigth);
        return Instruction.__wrap(ret3);
      }
      function noop() {
        const ret3 = wasm$1.noop();
        return Instruction.__wrap(ret3);
      }
      function flag(value) {
        const ret3 = wasm$1.flag(value);
        return Instruction.__wrap(ret3);
      }
      function bal(dst, asset_id_addr, contract_id_addr) {
        const ret3 = wasm$1.bal(dst, asset_id_addr, contract_id_addr);
        return Instruction.__wrap(ret3);
      }
      function jmp(abs_target) {
        const ret3 = wasm$1.jmp(abs_target);
        return Instruction.__wrap(ret3);
      }
      function jne(abs_target, lhs, rhs) {
        const ret3 = wasm$1.jne(abs_target, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function smo(recipient_addr, data_addr, data_len, coins) {
        const ret3 = wasm$1.smo(recipient_addr, data_addr, data_len, coins);
        return Instruction.__wrap(ret3);
      }
      function addi2(dst, lhs, rhs) {
        const ret3 = wasm$1.addi(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function andi(dst, lhs, rhs) {
        const ret3 = wasm$1.andi(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function divi(dst, lhs, rhs) {
        const ret3 = wasm$1.divi(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function expi(dst, lhs, rhs) {
        const ret3 = wasm$1.expi(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function modi(dst, lhs, rhs) {
        const ret3 = wasm$1.modi(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function muli(dst, lhs, rhs) {
        const ret3 = wasm$1.muli(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function ori(dst, lhs, rhs) {
        const ret3 = wasm$1.ori(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function slli(dst, lhs, rhs) {
        const ret3 = wasm$1.slli(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function srli(dst, lhs, rhs) {
        const ret3 = wasm$1.srli(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function subi(dst, lhs, rhs) {
        const ret3 = wasm$1.subi(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function xori(dst, lhs, rhs) {
        const ret3 = wasm$1.xori(dst, lhs, rhs);
        return Instruction.__wrap(ret3);
      }
      function jnei(cond_lhs, cond_rhs, abs_target) {
        const ret3 = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);
        return Instruction.__wrap(ret3);
      }
      function lb(dst, addr, offset) {
        const ret3 = wasm$1.lb(dst, addr, offset);
        return Instruction.__wrap(ret3);
      }
      function lw2(dst, addr, offset) {
        const ret3 = wasm$1.lw(dst, addr, offset);
        return Instruction.__wrap(ret3);
      }
      function sb(addr, value, offset) {
        const ret3 = wasm$1.sb(addr, value, offset);
        return Instruction.__wrap(ret3);
      }
      function sw(addr, value, offset) {
        const ret3 = wasm$1.sw(addr, value, offset);
        return Instruction.__wrap(ret3);
      }
      function mcpi(dst_addr, src_addr, len) {
        const ret3 = wasm$1.mcpi(dst_addr, src_addr, len);
        return Instruction.__wrap(ret3);
      }
      function gtf2(dst, arg, selector) {
        const ret3 = wasm$1.gtf(dst, arg, selector);
        return Instruction.__wrap(ret3);
      }
      function mcli(addr, count) {
        const ret3 = wasm$1.mcli(addr, count);
        return Instruction.__wrap(ret3);
      }
      function gm(dst, selector) {
        const ret3 = wasm$1.gm(dst, selector);
        return Instruction.__wrap(ret3);
      }
      function movi(dst, val) {
        const ret3 = wasm$1.movi(dst, val);
        return Instruction.__wrap(ret3);
      }
      function jnzi(cond_nz, abs_target) {
        const ret3 = wasm$1.jnzi(cond_nz, abs_target);
        return Instruction.__wrap(ret3);
      }
      function jmpf(dynamic, fixed) {
        const ret3 = wasm$1.jmpf(dynamic, fixed);
        return Instruction.__wrap(ret3);
      }
      function jmpb(dynamic, fixed) {
        const ret3 = wasm$1.jmpb(dynamic, fixed);
        return Instruction.__wrap(ret3);
      }
      function jnzf(cond_nz, dynamic, fixed) {
        const ret3 = wasm$1.jnzf(cond_nz, dynamic, fixed);
        return Instruction.__wrap(ret3);
      }
      function jnzb(cond_nz, dynamic, fixed) {
        const ret3 = wasm$1.jnzb(cond_nz, dynamic, fixed);
        return Instruction.__wrap(ret3);
      }
      function jnef(cond_lhs, cond_rhs, dynamic, fixed) {
        const ret3 = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);
        return Instruction.__wrap(ret3);
      }
      function jneb(cond_lhs, cond_rhs, dynamic, fixed) {
        const ret3 = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);
        return Instruction.__wrap(ret3);
      }
      function ji(abs_target) {
        const ret3 = wasm$1.ji(abs_target);
        return Instruction.__wrap(ret3);
      }
      function cfei(amount) {
        const ret3 = wasm$1.cfei(amount);
        return Instruction.__wrap(ret3);
      }
      function cfsi(amount) {
        const ret3 = wasm$1.cfsi(amount);
        return Instruction.__wrap(ret3);
      }
      function cfe(amount) {
        const ret3 = wasm$1.cfe(amount);
        return Instruction.__wrap(ret3);
      }
      function cfs(amount) {
        const ret3 = wasm$1.cfs(amount);
        return Instruction.__wrap(ret3);
      }
      function pshl(bitmask) {
        const ret3 = wasm$1.pshl(bitmask);
        return Instruction.__wrap(ret3);
      }
      function pshh(bitmask) {
        const ret3 = wasm$1.pshh(bitmask);
        return Instruction.__wrap(ret3);
      }
      function popl(bitmask) {
        const ret3 = wasm$1.popl(bitmask);
        return Instruction.__wrap(ret3);
      }
      function poph(bitmask) {
        const ret3 = wasm$1.poph(bitmask);
        return Instruction.__wrap(ret3);
      }
      function wdcm(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wdcm(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wqcm(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wqcm(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wdop(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wdop(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wqop(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wqop(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wdml(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wdml(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wqml(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wqml(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wddv(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wddv(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wqdv(dst, lhs, rhs, flags) {
        const ret3 = wasm$1.wqdv(dst, lhs, rhs, flags);
        return Instruction.__wrap(ret3);
      }
      function wdmd(dst, mul_lhs, mul_rhs, divisor) {
        const ret3 = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);
        return Instruction.__wrap(ret3);
      }
      function wqmd(dst, mul_lhs, mul_rhs, divisor) {
        const ret3 = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);
        return Instruction.__wrap(ret3);
      }
      function wdam(dst, add_lhs, add_rhs, modulo) {
        const ret3 = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);
        return Instruction.__wrap(ret3);
      }
      function wqam(dst, add_lhs, add_rhs, modulo) {
        const ret3 = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);
        return Instruction.__wrap(ret3);
      }
      function wdmm(dst, mul_lhs, mul_rhs, modulo) {
        const ret3 = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);
        return Instruction.__wrap(ret3);
      }
      function wqmm(dst, mul_lhs, mul_rhs, modulo) {
        const ret3 = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);
        return Instruction.__wrap(ret3);
      }
      function ecal(a, b, c, d) {
        const ret3 = wasm$1.ecal(a, b, c, d);
        return Instruction.__wrap(ret3);
      }
      function bsiz(dst, blob_id_ptr) {
        const ret3 = wasm$1.bsiz(dst, blob_id_ptr);
        return Instruction.__wrap(ret3);
      }
      function bldd(dst_ptr, blob_id_ptr, offset, len) {
        const ret3 = wasm$1.bldd(dst_ptr, blob_id_ptr, offset, len);
        return Instruction.__wrap(ret3);
      }
      var cachedDataViewMemory0 = null;
      function getDataViewMemory0() {
        if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || cachedDataViewMemory0.buffer.detached === void 0 && cachedDataViewMemory0.buffer !== wasm$1.memory.buffer) {
          cachedDataViewMemory0 = new DataView(wasm$1.memory.buffer);
        }
        return cachedDataViewMemory0;
      }
      function getArrayU8FromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);
      }
      var GTFArgs2 = Object.freeze({
        /**
        *r" Set `$rA` to `tx.type`
        */
        Type: 1,
        "1": "Type",
        /**
        *r" Set `$rA` to `tx.scriptGasLimit`
        */
        ScriptGasLimit: 2,
        "2": "ScriptGasLimit",
        /**
        *r" Set `$rA` to `tx.scriptLength`
        */
        ScriptLength: 3,
        "3": "ScriptLength",
        /**
        *r" Set `$rA` to `tx.scriptDataLength`
        */
        ScriptDataLength: 4,
        "4": "ScriptDataLength",
        /**
        *r" Set `$rA` to `tx.inputsCount`
        */
        ScriptInputsCount: 5,
        "5": "ScriptInputsCount",
        /**
        *r" Set `$rA` to `tx.outputsCount`
        */
        ScriptOutputsCount: 6,
        "6": "ScriptOutputsCount",
        /**
        *r" Set `$rA` to `tx.witnessesCount`
        */
        ScriptWitnessesCount: 7,
        "7": "ScriptWitnessesCount",
        /**
        *r" Set `$rA` to `Memory address of tx.script`
        */
        Script: 9,
        "9": "Script",
        /**
        *r" Set `$rA` to `Memory address of tx.scriptData`
        */
        ScriptData: 10,
        "10": "ScriptData",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB]`
        */
        ScriptInputAtIndex: 11,
        "11": "ScriptInputAtIndex",
        /**
        *r" Set `$rA` to `Memory address of t.outputs[$rB]`
        */
        ScriptOutputAtIndex: 12,
        "12": "ScriptOutputAtIndex",
        /**
        *r" Set `$rA` to `Memory address of tx.witnesses[$rB]`
        */
        ScriptWitnessAtIndex: 13,
        "13": "ScriptWitnessAtIndex",
        /**
        *r" Set `$rA` to size of the transaction in memory, in bytes
        */
        TxLength: 14,
        "14": "TxLength",
        /**
        *r" Set `$rA` to `tx.bytecodeWitnessIndex`
        */
        CreateBytecodeWitnessIndex: 257,
        "257": "CreateBytecodeWitnessIndex",
        /**
        *r" Set `$rA` to `tx.storageSlotsCount`
        */
        CreateStorageSlotsCount: 258,
        "258": "CreateStorageSlotsCount",
        /**
        *r" Set `$rA` to `tx.inputsCount`
        */
        CreateInputsCount: 259,
        "259": "CreateInputsCount",
        /**
        *r" Set `$rA` to `tx.outputsCount`
        */
        CreateOutputsCount: 260,
        "260": "CreateOutputsCount",
        /**
        *r" Set `$rA` to `tx.witnessesCount`
        */
        CreateWitnessesCount: 261,
        "261": "CreateWitnessesCount",
        /**
        *r" Set `$rA` to `Memory address of tx.salt`
        */
        CreateSalt: 262,
        "262": "CreateSalt",
        /**
        *r" Set `$rA` to `Memory address of tx.storageSlots[$rB]`
        */
        CreateStorageSlotAtIndex: 263,
        "263": "CreateStorageSlotAtIndex",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB]`
        */
        CreateInputAtIndex: 264,
        "264": "CreateInputAtIndex",
        /**
        *r" Set `$rA` to `Memory address of t.outputs[$rB]`
        */
        CreateOutputAtIndex: 265,
        "265": "CreateOutputAtIndex",
        /**
        *r" Set `$rA` to `Memory address of tx.witnesses[$rB]`
        */
        CreateWitnessAtIndex: 266,
        "266": "CreateWitnessAtIndex",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].type`
        */
        InputType: 512,
        "512": "InputType",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].txID`
        */
        InputCoinTxId: 513,
        "513": "InputCoinTxId",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].outputIndex`
        */
        InputCoinOutputIndex: 514,
        "514": "InputCoinOutputIndex",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].owner`
        */
        InputCoinOwner: 515,
        "515": "InputCoinOwner",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].amount`
        */
        InputCoinAmount: 516,
        "516": "InputCoinAmount",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`
        */
        InputCoinAssetId: 517,
        "517": "InputCoinAssetId",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`
        */
        InputCoinTxPointer: 518,
        "518": "InputCoinTxPointer",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].witnessIndex`
        */
        InputCoinWitnessIndex: 519,
        "519": "InputCoinWitnessIndex",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].predicateLength`
        */
        InputCoinPredicateLength: 521,
        "521": "InputCoinPredicateLength",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].predicateDataLength`
        */
        InputCoinPredicateDataLength: 522,
        "522": "InputCoinPredicateDataLength",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`
        */
        InputCoinPredicate: 523,
        "523": "InputCoinPredicate",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`
        */
        InputCoinPredicateData: 524,
        "524": "InputCoinPredicateData",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`
        */
        InputCoinPredicateGasUsed: 525,
        "525": "InputCoinPredicateGasUsed",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].txID`
        */
        InputContractTxId: 544,
        "544": "InputContractTxId",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].outputIndex`
        */
        InputContractOutputIndex: 545,
        "545": "InputContractOutputIndex",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`
        */
        InputContractId: 549,
        "549": "InputContractId",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].sender`
        */
        InputMessageSender: 576,
        "576": "InputMessageSender",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`
        */
        InputMessageRecipient: 577,
        "577": "InputMessageRecipient",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].amount`
        */
        InputMessageAmount: 578,
        "578": "InputMessageAmount",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`
        */
        InputMessageNonce: 579,
        "579": "InputMessageNonce",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].witnessIndex`
        */
        InputMessageWitnessIndex: 580,
        "580": "InputMessageWitnessIndex",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].dataLength`
        */
        InputMessageDataLength: 581,
        "581": "InputMessageDataLength",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].predicateLength`
        */
        InputMessagePredicateLength: 582,
        "582": "InputMessagePredicateLength",
        /**
        *r" Set `$rA` to `tx.inputs[$rB].predicateDataLength`
        */
        InputMessagePredicateDataLength: 583,
        "583": "InputMessagePredicateDataLength",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].data`
        */
        InputMessageData: 584,
        "584": "InputMessageData",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`
        */
        InputMessagePredicate: 585,
        "585": "InputMessagePredicate",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`
        */
        InputMessagePredicateData: 586,
        "586": "InputMessagePredicateData",
        /**
        *r" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`
        */
        InputMessagePredicateGasUsed: 587,
        "587": "InputMessagePredicateGasUsed",
        /**
        *r" Set `$rA` to `tx.outputs[$rB].type`
        */
        OutputType: 768,
        "768": "OutputType",
        /**
        *r" Set `$rA` to `Memory address of tx.outputs[$rB].to`
        */
        OutputCoinTo: 769,
        "769": "OutputCoinTo",
        /**
        *r" Set `$rA` to `tx.outputs[$rB].amount`
        */
        OutputCoinAmount: 770,
        "770": "OutputCoinAmount",
        /**
        *r" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`
        */
        OutputCoinAssetId: 771,
        "771": "OutputCoinAssetId",
        /**
        *r" Set `$rA` to `tx.outputs[$rB].inputIndex`
        */
        OutputContractInputIndex: 772,
        "772": "OutputContractInputIndex",
        /**
        *r" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`
        */
        OutputContractCreatedContractId: 775,
        "775": "OutputContractCreatedContractId",
        /**
        *r" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`
        */
        OutputContractCreatedStateRoot: 776,
        "776": "OutputContractCreatedStateRoot",
        /**
        *r" Set `$rA` to `tx.witnesses[$rB].dataLength`
        */
        WitnessDataLength: 1024,
        "1024": "WitnessDataLength",
        /**
        *r" Set `$rA` to `Memory address of tx.witnesses[$rB].data`
        */
        WitnessData: 1025,
        "1025": "WitnessData",
        /**
        *r" Set `$rA` to `tx.policyTypes`
        */
        PolicyTypes: 1280,
        "1280": "PolicyTypes",
        /**
        *r" Set `$rA` to `tx.policies[0x00].gasPrice`
        */
        PolicyTip: 1281,
        "1281": "PolicyTip",
        /**
        *r" Set `$rA` to `tx.policies[count_ones(0b11 & tx.policyTypes) - 1].witnessLimit`
        */
        PolicyWitnessLimit: 1282,
        "1282": "PolicyWitnessLimit",
        /**
        *r" Set `$rA` to `tx.policies[count_ones(0b111 & tx.policyTypes) - 1].maturity`
        */
        PolicyMaturity: 1283,
        "1283": "PolicyMaturity",
        /**
        *r" Set `$rA` to `tx.policies[count_ones(0b1111 & tx.policyTypes) - 1].maxFee`
        */
        PolicyMaxFee: 1284,
        "1284": "PolicyMaxFee"
      });
      var CompareMode = Object.freeze({
        /**
        * Equality (`==`)
        */
        EQ: 0,
        "0": "EQ",
        /**
        * Inequality (`!=`)
        */
        NE: 1,
        "1": "NE",
        /**
        * Less than (`<`)
        */
        LT: 2,
        "2": "LT",
        /**
        * Greater than (`>`)
        */
        GT: 3,
        "3": "GT",
        /**
        * Less than or equals (`>=`)
        */
        LTE: 4,
        "4": "LTE",
        /**
        * Greater than or equals (`>=`)
        */
        GTE: 5,
        "5": "GTE",
        /**
        * Number of leading zeroes in lhs (`lzcnt`) (discards rhs)
        */
        LZC: 6,
        "6": "LZC"
      });
      var PanicReason = Object.freeze({
        /**
        *r" The byte can't be mapped to any known `PanicReason`.
        */
        UnknownPanicReason: 0,
        "0": "UnknownPanicReason",
        /**
        *r" Found `RVRT` instruction.
        */
        Revert: 1,
        "1": "Revert",
        /**
        *r" Execution ran out of gas.
        */
        OutOfGas: 2,
        "2": "OutOfGas",
        /**
        *r" The transaction validity is violated.
        */
        TransactionValidity: 3,
        "3": "TransactionValidity",
        /**
        *r" Attempt to write outside interpreter memory boundaries.
        */
        MemoryOverflow: 4,
        "4": "MemoryOverflow",
        /**
        *r" Overflow while executing arithmetic operation.
        *r" These errors are ignored using the WRAPPING flag.
        */
        ArithmeticOverflow: 5,
        "5": "ArithmeticOverflow",
        /**
        *r" Designed contract was not found in the storage.
        */
        ContractNotFound: 6,
        "6": "ContractNotFound",
        /**
        *r" Memory ownership rules are violated.
        */
        MemoryOwnership: 7,
        "7": "MemoryOwnership",
        /**
        *r" The asset ID balance isn't enough for the instruction.
        */
        NotEnoughBalance: 8,
        "8": "NotEnoughBalance",
        /**
        *r" The interpreter is expected to be in internal context.
        */
        ExpectedInternalContext: 9,
        "9": "ExpectedInternalContext",
        /**
        *r" The queried asset ID was not found in the state.
        */
        AssetIdNotFound: 10,
        "10": "AssetIdNotFound",
        /**
        *r" The provided input is not found in the transaction.
        */
        InputNotFound: 11,
        "11": "InputNotFound",
        /**
        *r" The provided output is not found in the transaction.
        */
        OutputNotFound: 12,
        "12": "OutputNotFound",
        /**
        *r" The provided witness is not found in the transaction.
        */
        WitnessNotFound: 13,
        "13": "WitnessNotFound",
        /**
        *r" The transaction maturity is not valid for this request.
        */
        TransactionMaturity: 14,
        "14": "TransactionMaturity",
        /**
        *r" The metadata identifier is invalid.
        */
        InvalidMetadataIdentifier: 15,
        "15": "InvalidMetadataIdentifier",
        /**
        *r" The call structure is not valid.
        */
        MalformedCallStructure: 16,
        "16": "MalformedCallStructure",
        /**
        *r" The provided register does not allow write operations.
        */
        ReservedRegisterNotWritable: 17,
        "17": "ReservedRegisterNotWritable",
        /**
        *r" The execution resulted in an erroneous state of the interpreter.
        */
        InvalidFlags: 18,
        "18": "InvalidFlags",
        /**
        *r" The provided immediate value is not valid for this instruction.
        */
        InvalidImmediateValue: 19,
        "19": "InvalidImmediateValue",
        /**
        *r" The provided transaction input is not of type `Coin`.
        */
        ExpectedCoinInput: 20,
        "20": "ExpectedCoinInput",
        /**
        *r" `ECAL` instruction failed.
        */
        EcalError: 21,
        "21": "EcalError",
        /**
        *r" Two segments of the interpreter memory should not intersect for write operations.
        */
        MemoryWriteOverlap: 22,
        "22": "MemoryWriteOverlap",
        /**
        *r" The requested contract is not listed in the transaction inputs.
        */
        ContractNotInInputs: 23,
        "23": "ContractNotInInputs",
        /**
        *r" The internal asset ID balance overflowed with the provided instruction.
        */
        InternalBalanceOverflow: 24,
        "24": "InternalBalanceOverflow",
        /**
        *r" The maximum allowed contract size is violated.
        */
        ContractMaxSize: 25,
        "25": "ContractMaxSize",
        /**
        *r" This instruction expects the stack area to be unallocated for this call.
        */
        ExpectedUnallocatedStack: 26,
        "26": "ExpectedUnallocatedStack",
        /**
        *r" The maximum allowed number of static contracts was reached for this transaction.
        */
        MaxStaticContractsReached: 27,
        "27": "MaxStaticContractsReached",
        /**
        *r" The requested transfer amount cannot be zero.
        */
        TransferAmountCannotBeZero: 28,
        "28": "TransferAmountCannotBeZero",
        /**
        *r" The provided transaction output should be of type `Variable`.
        */
        ExpectedOutputVariable: 29,
        "29": "ExpectedOutputVariable",
        /**
        *r" The expected context of the stack parent is internal.
        */
        ExpectedParentInternalContext: 30,
        "30": "ExpectedParentInternalContext",
        /**
        *r" The predicate returned non `1`. The `1` means successful verification
        *r" of the predicate, all other values means unsuccessful.
        */
        PredicateReturnedNonOne: 31,
        "31": "PredicateReturnedNonOne",
        /**
        *r" The contract ID is already deployed and can't be overwritten.
        */
        ContractIdAlreadyDeployed: 32,
        "32": "ContractIdAlreadyDeployed",
        /**
        *r" The loaded contract mismatch expectations.
        */
        ContractMismatch: 33,
        "33": "ContractMismatch",
        /**
        *r" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`
        */
        MessageDataTooLong: 34,
        "34": "MessageDataTooLong",
        /**
        *r" Mathematically invalid arguments where given to an arithmetic instruction.
        *r" For instance, division by zero produces this.
        *r" These errors are ignored using the UNSAFEMATH flag.
        */
        ArithmeticError: 35,
        "35": "ArithmeticError",
        /**
        *r" The contract instruction is not allowed in predicates.
        */
        ContractInstructionNotAllowed: 36,
        "36": "ContractInstructionNotAllowed",
        /**
        *r" Transfer of zero coins is not allowed.
        */
        TransferZeroCoins: 37,
        "37": "TransferZeroCoins",
        /**
        *r" Attempted to execute an invalid instruction
        */
        InvalidInstruction: 38,
        "38": "InvalidInstruction",
        /**
        *r" Memory outside $is..$ssp range is not executable
        */
        MemoryNotExecutable: 39,
        "39": "MemoryNotExecutable",
        /**
        *r" The policy is not set.
        */
        PolicyIsNotSet: 40,
        "40": "PolicyIsNotSet",
        /**
        *r" The policy is not found across policies.
        */
        PolicyNotFound: 41,
        "41": "PolicyNotFound",
        /**
        *r" Receipt context is full
        */
        TooManyReceipts: 42,
        "42": "TooManyReceipts",
        /**
        *r" Balance of a contract overflowed
        */
        BalanceOverflow: 43,
        "43": "BalanceOverflow",
        /**
        *r" Block height value is invalid, typically because it is too large
        */
        InvalidBlockHeight: 44,
        "44": "InvalidBlockHeight",
        /**
        *r" Attempt to use sequential memory instructions with too large slot count,
        *r" typically because it cannot fit into usize
        */
        TooManySlots: 45,
        "45": "TooManySlots",
        /**
        *r" Caller of this internal context is also expected to be internal,
        *r" i.e. $fp->$fp must be non-zero.
        */
        ExpectedNestedCaller: 46,
        "46": "ExpectedNestedCaller",
        /**
        *r" During memory growth, the stack overlapped with the heap
        */
        MemoryGrowthOverlap: 47,
        "47": "MemoryGrowthOverlap",
        /**
        *r" Attempting to read or write uninitialized memory.
        *r" Also occurs when boundary crosses from stack to heap.
        */
        UninitalizedMemoryAccess: 48,
        "48": "UninitalizedMemoryAccess",
        /**
        *r" Overriding consensus parameters is not allowed.
        */
        OverridingConsensusParameters: 49,
        "49": "OverridingConsensusParameters",
        /**
        *r" The storage doesn't know about the hash of the state transition bytecode.
        */
        UnknownStateTransactionBytecodeRoot: 50,
        "50": "UnknownStateTransactionBytecodeRoot",
        /**
        *r" Overriding the state transition bytecode is not allowed.
        */
        OverridingStateTransactionBytecode: 51,
        "51": "OverridingStateTransactionBytecode",
        /**
        *r" The bytecode is already uploaded and cannot be uploaded again.
        */
        BytecodeAlreadyUploaded: 52,
        "52": "BytecodeAlreadyUploaded",
        /**
        *r" The part of the bytecode is not sequentially connected to the previous parts.
        */
        ThePartIsNotSequentiallyConnected: 53,
        "53": "ThePartIsNotSequentiallyConnected",
        /**
        *r" The requested blob is not found.
        */
        BlobNotFound: 54,
        "54": "BlobNotFound",
        /**
        *r" The blob was already
        */
        BlobIdAlreadyUploaded: 55,
        "55": "BlobIdAlreadyUploaded",
        /**
        *r" Active gas costs do not define the cost for this instruction.
        */
        GasCostNotDefined: 56,
        "56": "GasCostNotDefined"
      });
      var MathOp = Object.freeze({
        /**
        * Add
        */
        ADD: 0,
        "0": "ADD",
        /**
        * Subtract
        */
        SUB: 1,
        "1": "SUB",
        /**
        * Invert bits (discards rhs)
        */
        NOT: 2,
        "2": "NOT",
        /**
        * Bitwise or
        */
        OR: 3,
        "3": "OR",
        /**
        * Bitwise exclusive or
        */
        XOR: 4,
        "4": "XOR",
        /**
        * Bitwise and
        */
        AND: 5,
        "5": "AND",
        /**
        * Shift left
        */
        SHL: 6,
        "6": "SHL",
        /**
        * Shift right
        */
        SHR: 7,
        "7": "SHR"
      });
      var GMArgs = Object.freeze({
        /**
        *r" Get if caller is external.
        */
        IsCallerExternal: 1,
        "1": "IsCallerExternal",
        /**
        *r" Get caller's contract ID.
        */
        GetCaller: 2,
        "2": "GetCaller",
        /**
        *r" Get index of current predicate.
        */
        GetVerifyingPredicate: 3,
        "3": "GetVerifyingPredicate",
        /**
        *r" Get the Chain ID this VM is operating within
        */
        GetChainId: 4,
        "4": "GetChainId",
        /**
        *r" Get memory address where the transaction is located
        */
        TxStart: 5,
        "5": "TxStart",
        /**
        *r" Get memory address of base asset ID
        */
        BaseAssetId: 6,
        "6": "BaseAssetId"
      });
      var ADDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_add_free(ptr >>> 0, 1));
      var ADD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ADDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_add_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ADDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ADDIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_addi_free(ptr >>> 0, 1));
      var ADDI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ADDIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_addi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ADDIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var ALOCFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_aloc_free(ptr >>> 0, 1));
      var ALOC = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ALOCFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_aloc_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} bytes
        */
        constructor(bytes2) {
          _assertClass(bytes2, RegId);
          var ptr0 = bytes2.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          ALOCFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ANDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_and_free(ptr >>> 0, 1));
      var AND = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ANDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_and_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ANDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ANDIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_andi_free(ptr >>> 0, 1));
      var ANDI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ANDIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_andi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ANDIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var BALFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bal_free(ptr >>> 0, 1));
      var BAL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          BALFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_bal_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} asset_id_addr
        * @param {RegId} contract_id_addr
        */
        constructor(dst, asset_id_addr, contract_id_addr) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(asset_id_addr, RegId);
          var ptr1 = asset_id_addr.__destroy_into_raw();
          _assertClass(contract_id_addr, RegId);
          var ptr2 = contract_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          BALFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var BHEIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bhei_free(ptr >>> 0, 1));
      var BHEI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          BHEIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_bhei_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        */
        constructor(dst) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          BHEIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var BHSHFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bhsh_free(ptr >>> 0, 1));
      var BHSH = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          BHSHFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_bhsh_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} heigth
        */
        constructor(dst, heigth) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(heigth, RegId);
          var ptr1 = heigth.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          BHSHFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var BLDDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bldd_free(ptr >>> 0, 1));
      var BLDD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          BLDDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_bldd_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_ptr
        * @param {RegId} blob_id_ptr
        * @param {RegId} offset
        * @param {RegId} len
        */
        constructor(dst_ptr, blob_id_ptr, offset, len) {
          _assertClass(dst_ptr, RegId);
          var ptr0 = dst_ptr.__destroy_into_raw();
          _assertClass(blob_id_ptr, RegId);
          var ptr1 = blob_id_ptr.__destroy_into_raw();
          _assertClass(offset, RegId);
          var ptr2 = offset.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr3 = len.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          BLDDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var BSIZFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_bsiz_free(ptr >>> 0, 1));
      var BSIZ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          BSIZFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_bsiz_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} blob_id_ptr
        */
        constructor(dst, blob_id_ptr) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(blob_id_ptr, RegId);
          var ptr1 = blob_id_ptr.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          BSIZFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var BURNFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_burn_free(ptr >>> 0, 1));
      var BURN = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          BURNFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_burn_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} amount
        * @param {RegId} sub_id_addr
        */
        constructor(amount, sub_id_addr) {
          _assertClass(amount, RegId);
          var ptr0 = amount.__destroy_into_raw();
          _assertClass(sub_id_addr, RegId);
          var ptr1 = sub_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          BURNFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CALLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_call_free(ptr >>> 0, 1));
      var CALL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CALLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_call_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} target_struct
        * @param {RegId} fwd_coins
        * @param {RegId} asset_id_addr
        * @param {RegId} fwd_gas
        */
        constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {
          _assertClass(target_struct, RegId);
          var ptr0 = target_struct.__destroy_into_raw();
          _assertClass(fwd_coins, RegId);
          var ptr1 = fwd_coins.__destroy_into_raw();
          _assertClass(asset_id_addr, RegId);
          var ptr2 = asset_id_addr.__destroy_into_raw();
          _assertClass(fwd_gas, RegId);
          var ptr3 = fwd_gas.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          CALLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cb_free(ptr >>> 0, 1));
      var CB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_cb_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        */
        constructor(dst) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          CBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CCPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ccp_free(ptr >>> 0, 1));
      var CCP = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CCPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ccp_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} contract_id_addr
        * @param {RegId} offset
        * @param {RegId} len
        */
        constructor(dst_addr, contract_id_addr, offset, len) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(contract_id_addr, RegId);
          var ptr1 = contract_id_addr.__destroy_into_raw();
          _assertClass(offset, RegId);
          var ptr2 = offset.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr3 = len.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          CCPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CFEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfe_free(ptr >>> 0, 1));
      var CFE = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CFEFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_cfe_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} amount
        */
        constructor(amount) {
          _assertClass(amount, RegId);
          var ptr0 = amount.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          CFEFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CFEIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfei_free(ptr >>> 0, 1));
      var CFEI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CFEIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_cfei_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} amount
        */
        constructor(amount) {
          _assertClass(amount, Imm24);
          var ptr0 = amount.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          CFEIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var CFSFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfs_free(ptr >>> 0, 1));
      var CFS = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CFSFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_cfs_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} amount
        */
        constructor(amount) {
          _assertClass(amount, RegId);
          var ptr0 = amount.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          CFSFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CFSIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_cfsi_free(ptr >>> 0, 1));
      var CFSI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CFSIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_cfsi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} amount
        */
        constructor(amount) {
          _assertClass(amount, Imm24);
          var ptr0 = amount.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          CFSIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var CROOFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_croo_free(ptr >>> 0, 1));
      var CROO = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CROOFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_croo_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} contract_id_addr
        */
        constructor(dst_addr, contract_id_addr) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(contract_id_addr, RegId);
          var ptr1 = contract_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          CROOFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CSIZFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_csiz_free(ptr >>> 0, 1));
      var CSIZ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CSIZFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_csiz_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} contract_id_addr
        */
        constructor(dst, contract_id_addr) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(contract_id_addr, RegId);
          var ptr1 = contract_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          CSIZFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var CompareArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_compareargs_free(ptr >>> 0, 1));
      var CompareArgs = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(CompareArgs.prototype);
          obj.__wbg_ptr = ptr;
          CompareArgsFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          CompareArgsFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_compareargs_free(ptr, 0);
        }
        /**
        * Comparison mode
        * @returns {CompareMode}
        */
        get mode() {
          const ret3 = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);
          return ret3;
        }
        /**
        * Comparison mode
        * @param {CompareMode} arg0
        */
        set mode(arg0) {
          wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @returns {boolean}
        */
        get indirect_rhs() {
          const ret3 = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);
          return ret3 !== 0;
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @param {boolean} arg0
        */
        set indirect_rhs(arg0) {
          wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);
        }
        /**
        * Convert to immediate value.
        * @returns {Imm06}
        */
        to_imm() {
          const ptr = this.__destroy_into_raw();
          const ret3 = wasm$1.compareargs_to_imm(ptr);
          return Imm06.__wrap(ret3);
        }
        /**
        * Construct from `Imm06`. Returns `None` if the value has reserved flags set.
        * @param {Imm06} bits
        * @returns {CompareArgs | undefined}
        */
        static from_imm(bits) {
          _assertClass(bits, Imm06);
          var ptr0 = bits.__destroy_into_raw();
          const ret3 = wasm$1.compareargs_from_imm(ptr0);
          return ret3 === 0 ? void 0 : CompareArgs.__wrap(ret3);
        }
      };
      var DIVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_div_free(ptr >>> 0, 1));
      var DIV = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          DIVFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_div_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          DIVFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var DIVIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_divi_free(ptr >>> 0, 1));
      var DIVI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          DIVIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_divi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          DIVIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var DivArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_divargs_free(ptr >>> 0, 1));
      var DivArgs = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          DivArgsFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_divargs_free(ptr, 0);
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @returns {boolean}
        */
        get indirect_rhs() {
          const ret3 = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);
          return ret3 !== 0;
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @param {boolean} arg0
        */
        set indirect_rhs(arg0) {
          wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);
        }
      };
      var ECALFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ecal_free(ptr >>> 0, 1));
      var ECAL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ECALFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ecal_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} a
        * @param {RegId} b
        * @param {RegId} c
        * @param {RegId} d
        */
        constructor(a, b, c, d) {
          _assertClass(a, RegId);
          var ptr0 = a.__destroy_into_raw();
          _assertClass(b, RegId);
          var ptr1 = b.__destroy_into_raw();
          _assertClass(c, RegId);
          var ptr2 = c.__destroy_into_raw();
          _assertClass(d, RegId);
          var ptr3 = d.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          ECALFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ECK1Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_eck1_free(ptr >>> 0, 1));
      var ECK1 = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ECK1Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_eck1_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} sig_addr
        * @param {RegId} msg_hash_addr
        */
        constructor(dst_addr, sig_addr, msg_hash_addr) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(sig_addr, RegId);
          var ptr1 = sig_addr.__destroy_into_raw();
          _assertClass(msg_hash_addr, RegId);
          var ptr2 = msg_hash_addr.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ECK1Finalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ECR1Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ecr1_free(ptr >>> 0, 1));
      var ECR1 = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ECR1Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ecr1_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} sig_addr
        * @param {RegId} msg_hash_addr
        */
        constructor(dst_addr, sig_addr, msg_hash_addr) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(sig_addr, RegId);
          var ptr1 = sig_addr.__destroy_into_raw();
          _assertClass(msg_hash_addr, RegId);
          var ptr2 = msg_hash_addr.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ECR1Finalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ED19Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ed19_free(ptr >>> 0, 1));
      var ED19 = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ED19Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ed19_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} pub_key_addr
        * @param {RegId} sig_addr
        * @param {RegId} msg_addr
        * @param {RegId} msg_len
        */
        constructor(pub_key_addr, sig_addr, msg_addr, msg_len) {
          _assertClass(pub_key_addr, RegId);
          var ptr0 = pub_key_addr.__destroy_into_raw();
          _assertClass(sig_addr, RegId);
          var ptr1 = sig_addr.__destroy_into_raw();
          _assertClass(msg_addr, RegId);
          var ptr2 = msg_addr.__destroy_into_raw();
          _assertClass(msg_len, RegId);
          var ptr3 = msg_len.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          ED19Finalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var EQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_eq_free(ptr >>> 0, 1));
      var EQ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          EQFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_eq_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          EQFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var EXPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_exp_free(ptr >>> 0, 1));
      var EXP = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          EXPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_exp_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          EXPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var EXPIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_expi_free(ptr >>> 0, 1));
      var EXPI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          EXPIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_expi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          EXPIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var FLAGFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_flag_free(ptr >>> 0, 1));
      var FLAG = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          FLAGFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_flag_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} value
        */
        constructor(value) {
          _assertClass(value, RegId);
          var ptr0 = value.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          FLAGFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var GMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_gm_free(ptr >>> 0, 1));
      var GM = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(GM.prototype);
          obj.__wbg_ptr = ptr;
          GMFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          GMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_gm_free(ptr, 0);
        }
        /**
        * Construct a `GM` instruction from its arguments.
        * @param {RegId} ra
        * @param {GMArgs} args
        * @returns {GM}
        */
        static from_args(ra, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          const ret3 = wasm$1.gm_from_args(ptr0, args);
          return GM.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {Imm18} selector
        */
        constructor(dst, selector) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(selector, Imm18);
          var ptr1 = selector.__destroy_into_raw();
          const ret3 = wasm$1.gm_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          GMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 18-bit immediate value.
        * @returns {Imm18}
        */
        imm18() {
          const ret3 = wasm$1.gm_imm18(this.__wbg_ptr);
          return Imm18.__wrap(ret3);
        }
      };
      var GTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_gt_free(ptr >>> 0, 1));
      var GT = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          GTFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_gt_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          GTFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var GTFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_gtf_free(ptr >>> 0, 1));
      var GTF = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(GTF.prototype);
          obj.__wbg_ptr = ptr;
          GTFFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          GTFFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_gtf_free(ptr, 0);
        }
        /**
        * Construct a `GTF` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {GTFArgs} args
        * @returns {GTF}
        */
        static from_args(ra, rb, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          const ret3 = wasm$1.gtf_from_args(ptr0, ptr1, args);
          return GTF.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} arg
        * @param {Imm12} selector
        */
        constructor(dst, arg, selector) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(arg, RegId);
          var ptr1 = arg.__destroy_into_raw();
          _assertClass(selector, Imm12);
          var ptr2 = selector.__destroy_into_raw();
          const ret3 = wasm$1.gtf_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          GTFFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var Imm06Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm06_free(ptr >>> 0, 1));
      var Imm06 = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Imm06.prototype);
          obj.__wbg_ptr = ptr;
          Imm06Finalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          Imm06Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_imm06_free(ptr, 0);
        }
      };
      var Imm12Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm12_free(ptr >>> 0, 1));
      var Imm12 = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Imm12.prototype);
          obj.__wbg_ptr = ptr;
          Imm12Finalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          Imm12Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_imm12_free(ptr, 0);
        }
      };
      var Imm18Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm18_free(ptr >>> 0, 1));
      var Imm18 = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Imm18.prototype);
          obj.__wbg_ptr = ptr;
          Imm18Finalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          Imm18Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_imm18_free(ptr, 0);
        }
      };
      var Imm24Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_imm24_free(ptr >>> 0, 1));
      var Imm24 = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Imm24.prototype);
          obj.__wbg_ptr = ptr;
          Imm24Finalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          Imm24Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_imm24_free(ptr, 0);
        }
      };
      var InstructionFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_instruction_free(ptr >>> 0, 1));
      var Instruction = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(Instruction.prototype);
          obj.__wbg_ptr = ptr;
          InstructionFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          InstructionFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_instruction_free(ptr, 0);
        }
        /**
        * Convenience method for converting to bytes
        * @returns {Uint8Array}
        */
        to_bytes() {
          try {
            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);
            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);
            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);
            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);
            var v1 = getArrayU8FromWasm0(r0, r1).slice();
            wasm$1.__wbindgen_export_0(r0, r1 * 1, 1);
            return v1;
          } finally {
            wasm$1.__wbindgen_add_to_stack_pointer(16);
          }
        }
        /**
        * Size of an instruction in bytes
        * @returns {number}
        */
        static size() {
          const ret3 = wasm$1.instruction_size();
          return ret3 >>> 0;
        }
      };
      var JIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ji_free(ptr >>> 0, 1));
      var JI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ji_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} abs_target
        */
        constructor(abs_target) {
          _assertClass(abs_target, Imm24);
          var ptr0 = abs_target.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          JIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var JMPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jmp_free(ptr >>> 0, 1));
      var JMP = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JMPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jmp_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} abs_target
        */
        constructor(abs_target) {
          _assertClass(abs_target, RegId);
          var ptr0 = abs_target.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          JMPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var JMPBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jmpb_free(ptr >>> 0, 1));
      var JMPB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JMPBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jmpb_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dynamic
        * @param {Imm18} fixed
        */
        constructor(dynamic, fixed) {
          _assertClass(dynamic, RegId);
          var ptr0 = dynamic.__destroy_into_raw();
          _assertClass(fixed, Imm18);
          var ptr1 = fixed.__destroy_into_raw();
          const ret3 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          JMPBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 18-bit immediate value.
        * @returns {Imm18}
        */
        imm18() {
          const ret3 = wasm$1.gm_imm18(this.__wbg_ptr);
          return Imm18.__wrap(ret3);
        }
      };
      var JMPFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jmpf_free(ptr >>> 0, 1));
      var JMPF = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JMPFFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jmpf_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dynamic
        * @param {Imm18} fixed
        */
        constructor(dynamic, fixed) {
          _assertClass(dynamic, RegId);
          var ptr0 = dynamic.__destroy_into_raw();
          _assertClass(fixed, Imm18);
          var ptr1 = fixed.__destroy_into_raw();
          const ret3 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          JMPFFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 18-bit immediate value.
        * @returns {Imm18}
        */
        imm18() {
          const ret3 = wasm$1.gm_imm18(this.__wbg_ptr);
          return Imm18.__wrap(ret3);
        }
      };
      var JNEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jne_free(ptr >>> 0, 1));
      var JNE = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNEFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jne_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} abs_target
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(abs_target, lhs, rhs) {
          _assertClass(abs_target, RegId);
          var ptr0 = abs_target.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          JNEFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var JNEBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jneb_free(ptr >>> 0, 1));
      var JNEB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNEBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jneb_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} cond_lhs
        * @param {RegId} cond_rhs
        * @param {RegId} dynamic
        * @param {Imm06} fixed
        */
        constructor(cond_lhs, cond_rhs, dynamic, fixed) {
          _assertClass(cond_lhs, RegId);
          var ptr0 = cond_lhs.__destroy_into_raw();
          _assertClass(cond_rhs, RegId);
          var ptr1 = cond_rhs.__destroy_into_raw();
          _assertClass(dynamic, RegId);
          var ptr2 = dynamic.__destroy_into_raw();
          _assertClass(fixed, Imm06);
          var ptr3 = fixed.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          JNEBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var JNEFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnef_free(ptr >>> 0, 1));
      var JNEF = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNEFFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jnef_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} cond_lhs
        * @param {RegId} cond_rhs
        * @param {RegId} dynamic
        * @param {Imm06} fixed
        */
        constructor(cond_lhs, cond_rhs, dynamic, fixed) {
          _assertClass(cond_lhs, RegId);
          var ptr0 = cond_lhs.__destroy_into_raw();
          _assertClass(cond_rhs, RegId);
          var ptr1 = cond_rhs.__destroy_into_raw();
          _assertClass(dynamic, RegId);
          var ptr2 = dynamic.__destroy_into_raw();
          _assertClass(fixed, Imm06);
          var ptr3 = fixed.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          JNEFFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var JNEIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnei_free(ptr >>> 0, 1));
      var JNEI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNEIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jnei_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} cond_lhs
        * @param {RegId} cond_rhs
        * @param {Imm12} abs_target
        */
        constructor(cond_lhs, cond_rhs, abs_target) {
          _assertClass(cond_lhs, RegId);
          var ptr0 = cond_lhs.__destroy_into_raw();
          _assertClass(cond_rhs, RegId);
          var ptr1 = cond_rhs.__destroy_into_raw();
          _assertClass(abs_target, Imm12);
          var ptr2 = abs_target.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          JNEIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var JNZBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnzb_free(ptr >>> 0, 1));
      var JNZB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNZBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jnzb_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} cond_nz
        * @param {RegId} dynamic
        * @param {Imm12} fixed
        */
        constructor(cond_nz, dynamic, fixed) {
          _assertClass(cond_nz, RegId);
          var ptr0 = cond_nz.__destroy_into_raw();
          _assertClass(dynamic, RegId);
          var ptr1 = dynamic.__destroy_into_raw();
          _assertClass(fixed, Imm12);
          var ptr2 = fixed.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          JNZBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var JNZFFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnzf_free(ptr >>> 0, 1));
      var JNZF = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNZFFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jnzf_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} cond_nz
        * @param {RegId} dynamic
        * @param {Imm12} fixed
        */
        constructor(cond_nz, dynamic, fixed) {
          _assertClass(cond_nz, RegId);
          var ptr0 = cond_nz.__destroy_into_raw();
          _assertClass(dynamic, RegId);
          var ptr1 = dynamic.__destroy_into_raw();
          _assertClass(fixed, Imm12);
          var ptr2 = fixed.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          JNZFFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var JNZIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_jnzi_free(ptr >>> 0, 1));
      var JNZI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          JNZIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_jnzi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} cond_nz
        * @param {Imm18} abs_target
        */
        constructor(cond_nz, abs_target) {
          _assertClass(cond_nz, RegId);
          var ptr0 = cond_nz.__destroy_into_raw();
          _assertClass(abs_target, Imm18);
          var ptr1 = abs_target.__destroy_into_raw();
          const ret3 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          JNZIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 18-bit immediate value.
        * @returns {Imm18}
        */
        imm18() {
          const ret3 = wasm$1.gm_imm18(this.__wbg_ptr);
          return Imm18.__wrap(ret3);
        }
      };
      var K256Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_k256_free(ptr >>> 0, 1));
      var K256 = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          K256Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_k256_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} src_addr
        * @param {RegId} len
        */
        constructor(dst_addr, src_addr, len) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(src_addr, RegId);
          var ptr1 = src_addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr2 = len.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          K256Finalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var LBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_lb_free(ptr >>> 0, 1));
      var LB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          LBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_lb_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} addr
        * @param {Imm12} offset
        */
        constructor(dst, addr, offset) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(addr, RegId);
          var ptr1 = addr.__destroy_into_raw();
          _assertClass(offset, Imm12);
          var ptr2 = offset.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          LBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var LDCFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ldc_free(ptr >>> 0, 1));
      var LDC = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          LDCFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ldc_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} src_addr
        * @param {RegId} offset
        * @param {RegId} len
        * @param {Imm06} mode
        */
        constructor(src_addr, offset, len, mode) {
          _assertClass(src_addr, RegId);
          var ptr0 = src_addr.__destroy_into_raw();
          _assertClass(offset, RegId);
          var ptr1 = offset.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr2 = len.__destroy_into_raw();
          _assertClass(mode, Imm06);
          var ptr3 = mode.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          LDCFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var LOGFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_log_free(ptr >>> 0, 1));
      var LOG = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          LOGFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_log_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} a
        * @param {RegId} b
        * @param {RegId} c
        * @param {RegId} d
        */
        constructor(a, b, c, d) {
          _assertClass(a, RegId);
          var ptr0 = a.__destroy_into_raw();
          _assertClass(b, RegId);
          var ptr1 = b.__destroy_into_raw();
          _assertClass(c, RegId);
          var ptr2 = c.__destroy_into_raw();
          _assertClass(d, RegId);
          var ptr3 = d.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          LOGFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var LOGDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_logd_free(ptr >>> 0, 1));
      var LOGD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          LOGDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_logd_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} a
        * @param {RegId} b
        * @param {RegId} addr
        * @param {RegId} len
        */
        constructor(a, b, addr, len) {
          _assertClass(a, RegId);
          var ptr0 = a.__destroy_into_raw();
          _assertClass(b, RegId);
          var ptr1 = b.__destroy_into_raw();
          _assertClass(addr, RegId);
          var ptr2 = addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr3 = len.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          LOGDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var LTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_lt_free(ptr >>> 0, 1));
      var LT = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          LTFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_lt_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          LTFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var LWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_lw_free(ptr >>> 0, 1));
      var LW = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          LWFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_lw_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} addr
        * @param {Imm12} offset
        */
        constructor(dst, addr, offset) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(addr, RegId);
          var ptr1 = addr.__destroy_into_raw();
          _assertClass(offset, Imm12);
          var ptr2 = offset.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          LWFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var MCLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcl_free(ptr >>> 0, 1));
      var MCL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MCLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mcl_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} len
        */
        constructor(dst_addr, len) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr1 = len.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          MCLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MCLIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcli_free(ptr >>> 0, 1));
      var MCLI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MCLIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mcli_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} addr
        * @param {Imm18} count
        */
        constructor(addr, count) {
          _assertClass(addr, RegId);
          var ptr0 = addr.__destroy_into_raw();
          _assertClass(count, Imm18);
          var ptr1 = count.__destroy_into_raw();
          const ret3 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          MCLIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 18-bit immediate value.
        * @returns {Imm18}
        */
        imm18() {
          const ret3 = wasm$1.gm_imm18(this.__wbg_ptr);
          return Imm18.__wrap(ret3);
        }
      };
      var MCPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcp_free(ptr >>> 0, 1));
      var MCP = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MCPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mcp_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} src_addr
        * @param {RegId} len
        */
        constructor(dst_addr, src_addr, len) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(src_addr, RegId);
          var ptr1 = src_addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr2 = len.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MCPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MCPIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mcpi_free(ptr >>> 0, 1));
      var MCPI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MCPIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mcpi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} src_addr
        * @param {Imm12} len
        */
        constructor(dst_addr, src_addr, len) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(src_addr, RegId);
          var ptr1 = src_addr.__destroy_into_raw();
          _assertClass(len, Imm12);
          var ptr2 = len.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MCPIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var MEQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_meq_free(ptr >>> 0, 1));
      var MEQ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MEQFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_meq_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} result
        * @param {RegId} lhs_addr
        * @param {RegId} rhs_addr
        * @param {RegId} len
        */
        constructor(result, lhs_addr, rhs_addr, len) {
          _assertClass(result, RegId);
          var ptr0 = result.__destroy_into_raw();
          _assertClass(lhs_addr, RegId);
          var ptr1 = lhs_addr.__destroy_into_raw();
          _assertClass(rhs_addr, RegId);
          var ptr2 = rhs_addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr3 = len.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          MEQFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MINTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mint_free(ptr >>> 0, 1));
      var MINT = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MINTFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mint_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} amount
        * @param {RegId} sub_id_addr
        */
        constructor(amount, sub_id_addr) {
          _assertClass(amount, RegId);
          var ptr0 = amount.__destroy_into_raw();
          _assertClass(sub_id_addr, RegId);
          var ptr1 = sub_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          MINTFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MLDVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mldv_free(ptr >>> 0, 1));
      var MLDV = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MLDVFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mldv_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} mul_lhs
        * @param {RegId} mul_rhs
        * @param {RegId} divisor
        */
        constructor(dst, mul_lhs, mul_rhs, divisor) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(mul_lhs, RegId);
          var ptr1 = mul_lhs.__destroy_into_raw();
          _assertClass(mul_rhs, RegId);
          var ptr2 = mul_rhs.__destroy_into_raw();
          _assertClass(divisor, RegId);
          var ptr3 = divisor.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          MLDVFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MLOGFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mlog_free(ptr >>> 0, 1));
      var MLOG = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MLOGFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mlog_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MLOGFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MODFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mod_free(ptr >>> 0, 1));
      var MOD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MODFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mod_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MODFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MODIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_modi_free(ptr >>> 0, 1));
      var MODI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MODIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_modi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MODIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var MOVEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_move_free(ptr >>> 0, 1));
      var MOVE = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MOVEFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_move_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} src
        */
        constructor(dst, src) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(src, RegId);
          var ptr1 = src.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          MOVEFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MOVIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_movi_free(ptr >>> 0, 1));
      var MOVI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MOVIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_movi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {Imm18} val
        */
        constructor(dst, val) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(val, Imm18);
          var ptr1 = val.__destroy_into_raw();
          const ret3 = wasm$1.jmpb_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          MOVIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 18-bit immediate value.
        * @returns {Imm18}
        */
        imm18() {
          const ret3 = wasm$1.gm_imm18(this.__wbg_ptr);
          return Imm18.__wrap(ret3);
        }
      };
      var MROOFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mroo_free(ptr >>> 0, 1));
      var MROO = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MROOFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mroo_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MROOFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MULFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mul_free(ptr >>> 0, 1));
      var MUL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MULFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mul_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MULFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var MULIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_muli_free(ptr >>> 0, 1));
      var MULI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MULIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_muli_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          MULIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var MathArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mathargs_free(ptr >>> 0, 1));
      var MathArgs = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MathArgsFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mathargs_free(ptr, 0);
        }
        /**
        * The operation to perform
        * @returns {MathOp}
        */
        get op() {
          const ret3 = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);
          return ret3;
        }
        /**
        * The operation to perform
        * @param {MathOp} arg0
        */
        set op(arg0) {
          wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @returns {boolean}
        */
        get indirect_rhs() {
          const ret3 = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);
          return ret3 !== 0;
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @param {boolean} arg0
        */
        set indirect_rhs(arg0) {
          wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);
        }
      };
      var MulArgsFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_mulargs_free(ptr >>> 0, 1));
      var MulArgs = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          MulArgsFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_mulargs_free(ptr, 0);
        }
        /**
        * Load LHSS from register if true, otherwise zero-extend register value
        * @returns {boolean}
        */
        get indirect_lhs() {
          const ret3 = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);
          return ret3 !== 0;
        }
        /**
        * Load LHSS from register if true, otherwise zero-extend register value
        * @param {boolean} arg0
        */
        set indirect_lhs(arg0) {
          wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @returns {boolean}
        */
        get indirect_rhs() {
          const ret3 = wasm$1.__wbg_get_mulargs_indirect_rhs(this.__wbg_ptr);
          return ret3 !== 0;
        }
        /**
        * Load RHS from register if true, otherwise zero-extend register value
        * @param {boolean} arg0
        */
        set indirect_rhs(arg0) {
          wasm$1.__wbg_set_mulargs_indirect_rhs(this.__wbg_ptr, arg0);
        }
      };
      var NOOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_noop_free(ptr >>> 0, 1));
      var NOOP = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          NOOPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_noop_free(ptr, 0);
        }
        /**
        * Construct the instruction.
        */
        constructor() {
          const ret3 = wasm$1.noop_new_typescript();
          this.__wbg_ptr = ret3 >>> 0;
          NOOPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
      };
      var NOTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_not_free(ptr >>> 0, 1));
      var NOT = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          NOTFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_not_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} arg
        */
        constructor(dst, arg) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(arg, RegId);
          var ptr1 = arg.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          NOTFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ORFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_or_free(ptr >>> 0, 1));
      var OR = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ORFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_or_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ORFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var ORIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ori_free(ptr >>> 0, 1));
      var ORI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          ORIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ori_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          ORIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var POPHFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_poph_free(ptr >>> 0, 1));
      var POPH = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          POPHFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_poph_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} bitmask
        */
        constructor(bitmask) {
          _assertClass(bitmask, Imm24);
          var ptr0 = bitmask.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          POPHFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var POPLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_popl_free(ptr >>> 0, 1));
      var POPL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          POPLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_popl_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} bitmask
        */
        constructor(bitmask) {
          _assertClass(bitmask, Imm24);
          var ptr0 = bitmask.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          POPLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var PSHHFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_pshh_free(ptr >>> 0, 1));
      var PSHH = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          PSHHFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_pshh_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} bitmask
        */
        constructor(bitmask) {
          _assertClass(bitmask, Imm24);
          var ptr0 = bitmask.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          PSHHFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var PSHLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_pshl_free(ptr >>> 0, 1));
      var PSHL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          PSHLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_pshl_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {Imm24} bitmask
        */
        constructor(bitmask) {
          _assertClass(bitmask, Imm24);
          var ptr0 = bitmask.__destroy_into_raw();
          const ret3 = wasm$1.cfei_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          PSHLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the 24-bit immediate value.
        * @returns {Imm24}
        */
        imm24() {
          const ret3 = wasm$1.cfei_imm24(this.__wbg_ptr);
          return Imm24.__wrap(ret3);
        }
      };
      var PanicInstructionFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_panicinstruction_free(ptr >>> 0, 1));
      var PanicInstruction = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          PanicInstructionFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_panicinstruction_free(ptr, 0);
        }
        /**
        * Represents an error described by a reason and an instruction.
        * @param {PanicReason} reason
        * @param {number} instruction
        */
        constructor(reason, instruction) {
          const ret3 = wasm$1.panicinstruction_error_typescript(reason, instruction);
          this.__wbg_ptr = ret3 >>> 0;
          PanicInstructionFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Underlying panic reason
        * @returns {PanicReason}
        */
        reason() {
          const ret3 = wasm$1.panicinstruction_reason(this.__wbg_ptr);
          return ret3;
        }
        /**
        * Underlying instruction
        * @returns {number}
        */
        instruction() {
          const ret3 = wasm$1.panicinstruction_instruction(this.__wbg_ptr);
          return ret3 >>> 0;
        }
      };
      var RETFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_ret_free(ptr >>> 0, 1));
      var RET = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          RETFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_ret_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} value
        */
        constructor(value) {
          _assertClass(value, RegId);
          var ptr0 = value.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          RETFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var RETDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_retd_free(ptr >>> 0, 1));
      var RETD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          RETDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_retd_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} addr
        * @param {RegId} len
        */
        constructor(addr, len) {
          _assertClass(addr, RegId);
          var ptr0 = addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr1 = len.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          RETDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var RVRTFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_rvrt_free(ptr >>> 0, 1));
      var RVRT = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          RVRTFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_rvrt_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} value
        */
        constructor(value) {
          _assertClass(value, RegId);
          var ptr0 = value.__destroy_into_raw();
          const ret3 = wasm$1.aloc_new_typescript(ptr0);
          this.__wbg_ptr = ret3 >>> 0;
          RVRTFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.aloc_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var RegIdFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_regid_free(ptr >>> 0, 1));
      var RegId = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(RegId.prototype);
          obj.__wbg_ptr = ptr;
          RegIdFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          RegIdFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_regid_free(ptr, 0);
        }
        /**
        * Construct a register ID from the given value.
        *
        * Returns `None` if the value is outside the 6-bit value range.
        * @param {number} u
        * @returns {RegId | undefined}
        */
        static new_checked(u) {
          const ret3 = wasm$1.regid_new_checked(u);
          return ret3 === 0 ? void 0 : RegId.__wrap(ret3);
        }
        /**
        * Received balance for this context.
        * @returns {RegId}
        */
        static bal() {
          const ret3 = wasm$1.regid_bal();
          return RegId.__wrap(ret3);
        }
        /**
        * Remaining gas in the context.
        * @returns {RegId}
        */
        static cgas() {
          const ret3 = wasm$1.regid_cgas();
          return RegId.__wrap(ret3);
        }
        /**
        * Error codes for particular operations.
        * @returns {RegId}
        */
        static err() {
          const ret3 = wasm$1.regid_err();
          return RegId.__wrap(ret3);
        }
        /**
        * Flags register.
        * @returns {RegId}
        */
        static flag() {
          const ret3 = wasm$1.regid_flag();
          return RegId.__wrap(ret3);
        }
        /**
        * Frame pointer. Memory address of beginning of current call frame.
        * @returns {RegId}
        */
        static fp() {
          const ret3 = wasm$1.regid_fp();
          return RegId.__wrap(ret3);
        }
        /**
        * Remaining gas globally.
        * @returns {RegId}
        */
        static ggas() {
          const ret3 = wasm$1.regid_ggas();
          return RegId.__wrap(ret3);
        }
        /**
        * Heap pointer. Memory address below the current bottom of the heap (points to free
        * memory).
        * @returns {RegId}
        */
        static hp() {
          const ret3 = wasm$1.regid_hp();
          return RegId.__wrap(ret3);
        }
        /**
        * Instructions start. Pointer to the start of the currently-executing code.
        * @returns {RegId}
        */
        static is() {
          const ret3 = wasm$1.regid_is();
          return RegId.__wrap(ret3);
        }
        /**
        * Contains overflow/underflow of addition, subtraction, and multiplication.
        * @returns {RegId}
        */
        static of() {
          const ret3 = wasm$1.regid_of();
          return RegId.__wrap(ret3);
        }
        /**
        * Contains one (1), for convenience.
        * @returns {RegId}
        */
        static one() {
          const ret3 = wasm$1.regid_one();
          return RegId.__wrap(ret3);
        }
        /**
        * The program counter. Memory address of the current instruction.
        * @returns {RegId}
        */
        static pc() {
          const ret3 = wasm$1.regid_pc();
          return RegId.__wrap(ret3);
        }
        /**
        * Return value or pointer.
        * @returns {RegId}
        */
        static ret() {
          const ret3 = wasm$1.regid_ret();
          return RegId.__wrap(ret3);
        }
        /**
        * Return value length in bytes.
        * @returns {RegId}
        */
        static retl() {
          const ret3 = wasm$1.regid_retl();
          return RegId.__wrap(ret3);
        }
        /**
        * Stack pointer. Memory address on top of current writable stack area (points to
        * free memory).
        * @returns {RegId}
        */
        static sp() {
          const ret3 = wasm$1.regid_sp();
          return RegId.__wrap(ret3);
        }
        /**
        * Stack start pointer. Memory address of bottom of current writable stack area.
        * @returns {RegId}
        */
        static spp() {
          const ret3 = wasm$1.regid_spp();
          return RegId.__wrap(ret3);
        }
        /**
        * Smallest writable register.
        * @returns {RegId}
        */
        static writable() {
          const ret3 = wasm$1.regid_writable();
          return RegId.__wrap(ret3);
        }
        /**
        * Contains zero (0), for convenience.
        * @returns {RegId}
        */
        static zero() {
          const ret3 = wasm$1.regid_zero();
          return RegId.__wrap(ret3);
        }
        /**
        * Construct a register ID from the given value.
        *
        * The given value will be masked to 6 bits.
        * @param {number} u
        */
        constructor(u) {
          const ret3 = wasm$1.regid_new_typescript(u);
          this.__wbg_ptr = ret3 >>> 0;
          RegIdFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * A const alternative to the `Into<u8>` implementation.
        * @returns {number}
        */
        to_u8() {
          const ptr = this.__destroy_into_raw();
          const ret3 = wasm$1.regid_to_u8(ptr);
          return ret3;
        }
      };
      var S256Finalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_s256_free(ptr >>> 0, 1));
      var S256 = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          S256Finalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_s256_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} src_addr
        * @param {RegId} len
        */
        constructor(dst_addr, src_addr, len) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(src_addr, RegId);
          var ptr1 = src_addr.__destroy_into_raw();
          _assertClass(len, RegId);
          var ptr2 = len.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          S256Finalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sb_free(ptr >>> 0, 1));
      var SB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_sb_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} addr
        * @param {RegId} value
        * @param {Imm12} offset
        */
        constructor(addr, value, offset) {
          _assertClass(addr, RegId);
          var ptr0 = addr.__destroy_into_raw();
          _assertClass(value, RegId);
          var ptr1 = value.__destroy_into_raw();
          _assertClass(offset, Imm12);
          var ptr2 = offset.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var SCWQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_scwq_free(ptr >>> 0, 1));
      var SCWQ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SCWQFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_scwq_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} key_addr
        * @param {RegId} status
        * @param {RegId} lenq
        */
        constructor(key_addr, status, lenq) {
          _assertClass(key_addr, RegId);
          var ptr0 = key_addr.__destroy_into_raw();
          _assertClass(status, RegId);
          var ptr1 = status.__destroy_into_raw();
          _assertClass(lenq, RegId);
          var ptr2 = lenq.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SCWQFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SLLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sll_free(ptr >>> 0, 1));
      var SLL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SLLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_sll_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SLLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SLLIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_slli_free(ptr >>> 0, 1));
      var SLLI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SLLIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_slli_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SLLIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var SMOFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_smo_free(ptr >>> 0, 1));
      var SMO = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SMOFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_smo_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} recipient_addr
        * @param {RegId} data_addr
        * @param {RegId} data_len
        * @param {RegId} coins
        */
        constructor(recipient_addr, data_addr, data_len, coins) {
          _assertClass(recipient_addr, RegId);
          var ptr0 = recipient_addr.__destroy_into_raw();
          _assertClass(data_addr, RegId);
          var ptr1 = data_addr.__destroy_into_raw();
          _assertClass(data_len, RegId);
          var ptr2 = data_len.__destroy_into_raw();
          _assertClass(coins, RegId);
          var ptr3 = coins.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          SMOFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SRLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srl_free(ptr >>> 0, 1));
      var SRL = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SRLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_srl_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SRLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SRLIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srli_free(ptr >>> 0, 1));
      var SRLI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SRLIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_srli_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SRLIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var SRWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srw_free(ptr >>> 0, 1));
      var SRW = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SRWFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_srw_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} status
        * @param {RegId} key_addr
        */
        constructor(dst, status, key_addr) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(status, RegId);
          var ptr1 = status.__destroy_into_raw();
          _assertClass(key_addr, RegId);
          var ptr2 = key_addr.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SRWFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SRWQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_srwq_free(ptr >>> 0, 1));
      var SRWQ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SRWQFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_srwq_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst_addr
        * @param {RegId} status
        * @param {RegId} key_addr
        * @param {RegId} lenq
        */
        constructor(dst_addr, status, key_addr, lenq) {
          _assertClass(dst_addr, RegId);
          var ptr0 = dst_addr.__destroy_into_raw();
          _assertClass(status, RegId);
          var ptr1 = status.__destroy_into_raw();
          _assertClass(key_addr, RegId);
          var ptr2 = key_addr.__destroy_into_raw();
          _assertClass(lenq, RegId);
          var ptr3 = lenq.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          SRWQFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SUBFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sub_free(ptr >>> 0, 1));
      var SUB = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SUBFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_sub_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SUBFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SUBIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_subi_free(ptr >>> 0, 1));
      var SUBI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SUBIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_subi_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SUBIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var SWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sw_free(ptr >>> 0, 1));
      var SW = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SWFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_sw_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} addr
        * @param {RegId} value
        * @param {Imm12} offset
        */
        constructor(addr, value, offset) {
          _assertClass(addr, RegId);
          var ptr0 = addr.__destroy_into_raw();
          _assertClass(value, RegId);
          var ptr1 = value.__destroy_into_raw();
          _assertClass(offset, Imm12);
          var ptr2 = offset.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SWFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      var SWWFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_sww_free(ptr >>> 0, 1));
      var SWW = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SWWFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_sww_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} key_addr
        * @param {RegId} status
        * @param {RegId} value
        */
        constructor(key_addr, status, value) {
          _assertClass(key_addr, RegId);
          var ptr0 = key_addr.__destroy_into_raw();
          _assertClass(status, RegId);
          var ptr1 = status.__destroy_into_raw();
          _assertClass(value, RegId);
          var ptr2 = value.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          SWWFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var SWWQFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_swwq_free(ptr >>> 0, 1));
      var SWWQ = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          SWWQFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_swwq_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} key_addr
        * @param {RegId} status
        * @param {RegId} src_addr
        * @param {RegId} lenq
        */
        constructor(key_addr, status, src_addr, lenq) {
          _assertClass(key_addr, RegId);
          var ptr0 = key_addr.__destroy_into_raw();
          _assertClass(status, RegId);
          var ptr1 = status.__destroy_into_raw();
          _assertClass(src_addr, RegId);
          var ptr2 = src_addr.__destroy_into_raw();
          _assertClass(lenq, RegId);
          var ptr3 = lenq.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          SWWQFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var TIMEFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_time_free(ptr >>> 0, 1));
      var TIME = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          TIMEFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_time_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} heigth
        */
        constructor(dst, heigth) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(heigth, RegId);
          var ptr1 = heigth.__destroy_into_raw();
          const ret3 = wasm$1.bhsh_new_typescript(ptr0, ptr1);
          this.__wbg_ptr = ret3 >>> 0;
          TIMEFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var TRFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_tr_free(ptr >>> 0, 1));
      var TR = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          TRFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_tr_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} contract_id_addr
        * @param {RegId} amount
        * @param {RegId} asset_id_addr
        */
        constructor(contract_id_addr, amount, asset_id_addr) {
          _assertClass(contract_id_addr, RegId);
          var ptr0 = contract_id_addr.__destroy_into_raw();
          _assertClass(amount, RegId);
          var ptr1 = amount.__destroy_into_raw();
          _assertClass(asset_id_addr, RegId);
          var ptr2 = asset_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          TRFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var TROFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_tro_free(ptr >>> 0, 1));
      var TRO = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          TROFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_tro_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} contract_id_addr
        * @param {RegId} output_index
        * @param {RegId} amount
        * @param {RegId} asset_id_addr
        */
        constructor(contract_id_addr, output_index, amount, asset_id_addr) {
          _assertClass(contract_id_addr, RegId);
          var ptr0 = contract_id_addr.__destroy_into_raw();
          _assertClass(output_index, RegId);
          var ptr1 = output_index.__destroy_into_raw();
          _assertClass(amount, RegId);
          var ptr2 = amount.__destroy_into_raw();
          _assertClass(asset_id_addr, RegId);
          var ptr3 = asset_id_addr.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          TROFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WDAMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdam_free(ptr >>> 0, 1));
      var WDAM = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDAMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wdam_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} add_lhs
        * @param {RegId} add_rhs
        * @param {RegId} modulo
        */
        constructor(dst, add_lhs, add_rhs, modulo) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(add_lhs, RegId);
          var ptr1 = add_lhs.__destroy_into_raw();
          _assertClass(add_rhs, RegId);
          var ptr2 = add_rhs.__destroy_into_raw();
          _assertClass(modulo, RegId);
          var ptr3 = modulo.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDAMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WDCMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdcm_free(ptr >>> 0, 1));
      var WDCM = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WDCM.prototype);
          obj.__wbg_ptr = ptr;
          WDCMFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDCMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wdcm_free(ptr, 0);
        }
        /**
        * Construct a `WDCM` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {CompareArgs} args
        * @returns {WDCM}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, CompareArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);
          return WDCM.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDCMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WDDVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wddv_free(ptr >>> 0, 1));
      var WDDV = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WDDV.prototype);
          obj.__wbg_ptr = ptr;
          WDDVFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDDVFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wddv_free(ptr, 0);
        }
        /**
        * Construct a `WDDV` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {DivArgs} args
        * @returns {WDDV}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, DivArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);
          return WDDV.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDDVFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WDMDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdmd_free(ptr >>> 0, 1));
      var WDMD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDMDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wdmd_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} mul_lhs
        * @param {RegId} mul_rhs
        * @param {RegId} divisor
        */
        constructor(dst, mul_lhs, mul_rhs, divisor) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(mul_lhs, RegId);
          var ptr1 = mul_lhs.__destroy_into_raw();
          _assertClass(mul_rhs, RegId);
          var ptr2 = mul_rhs.__destroy_into_raw();
          _assertClass(divisor, RegId);
          var ptr3 = divisor.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDMDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WDMLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdml_free(ptr >>> 0, 1));
      var WDML = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WDML.prototype);
          obj.__wbg_ptr = ptr;
          WDMLFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDMLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wdml_free(ptr, 0);
        }
        /**
        * Construct a `WDML` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {MulArgs} args
        * @returns {WDML}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, MulArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);
          return WDML.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDMLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WDMMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdmm_free(ptr >>> 0, 1));
      var WDMM = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDMMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wdmm_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} mul_lhs
        * @param {RegId} mul_rhs
        * @param {RegId} modulo
        */
        constructor(dst, mul_lhs, mul_rhs, modulo) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(mul_lhs, RegId);
          var ptr1 = mul_lhs.__destroy_into_raw();
          _assertClass(mul_rhs, RegId);
          var ptr2 = mul_rhs.__destroy_into_raw();
          _assertClass(modulo, RegId);
          var ptr3 = modulo.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDMMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WDOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wdop_free(ptr >>> 0, 1));
      var WDOP = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WDOP.prototype);
          obj.__wbg_ptr = ptr;
          WDOPFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WDOPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wdop_free(ptr, 0);
        }
        /**
        * Construct a `WDOP` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {MathArgs} args
        * @returns {WDOP}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, MathArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);
          return WDOP.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WDOPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WQAMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqam_free(ptr >>> 0, 1));
      var WQAM = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQAMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqam_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} add_lhs
        * @param {RegId} add_rhs
        * @param {RegId} modulo
        */
        constructor(dst, add_lhs, add_rhs, modulo) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(add_lhs, RegId);
          var ptr1 = add_lhs.__destroy_into_raw();
          _assertClass(add_rhs, RegId);
          var ptr2 = add_rhs.__destroy_into_raw();
          _assertClass(modulo, RegId);
          var ptr3 = modulo.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQAMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WQCMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqcm_free(ptr >>> 0, 1));
      var WQCM = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WQCM.prototype);
          obj.__wbg_ptr = ptr;
          WQCMFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQCMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqcm_free(ptr, 0);
        }
        /**
        * Construct a `WQCM` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {CompareArgs} args
        * @returns {WQCM}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, CompareArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);
          return WQCM.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQCMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WQDVFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqdv_free(ptr >>> 0, 1));
      var WQDV = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WQDV.prototype);
          obj.__wbg_ptr = ptr;
          WQDVFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQDVFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqdv_free(ptr, 0);
        }
        /**
        * Construct a `WQDV` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {DivArgs} args
        * @returns {WQDV}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, DivArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);
          return WQDV.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQDVFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WQMDFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqmd_free(ptr >>> 0, 1));
      var WQMD = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQMDFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqmd_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} mul_lhs
        * @param {RegId} mul_rhs
        * @param {RegId} divisor
        */
        constructor(dst, mul_lhs, mul_rhs, divisor) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(mul_lhs, RegId);
          var ptr1 = mul_lhs.__destroy_into_raw();
          _assertClass(mul_rhs, RegId);
          var ptr2 = mul_rhs.__destroy_into_raw();
          _assertClass(divisor, RegId);
          var ptr3 = divisor.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQMDFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WQMLFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqml_free(ptr >>> 0, 1));
      var WQML = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WQML.prototype);
          obj.__wbg_ptr = ptr;
          WQMLFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQMLFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqml_free(ptr, 0);
        }
        /**
        * Construct a `WQML` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {MulArgs} args
        * @returns {WQML}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, MulArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);
          return WQML.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQMLFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var WQMMFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqmm_free(ptr >>> 0, 1));
      var WQMM = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQMMFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqmm_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} mul_lhs
        * @param {RegId} mul_rhs
        * @param {RegId} modulo
        */
        constructor(dst, mul_lhs, mul_rhs, modulo) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(mul_lhs, RegId);
          var ptr1 = mul_lhs.__destroy_into_raw();
          _assertClass(mul_rhs, RegId);
          var ptr2 = mul_rhs.__destroy_into_raw();
          _assertClass(modulo, RegId);
          var ptr3 = modulo.__destroy_into_raw();
          const ret3 = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQMMFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register D.
        * @returns {RegId}
        */
        rd() {
          const ret3 = wasm$1.bldd_rd(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var WQOPFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_wqop_free(ptr >>> 0, 1));
      var WQOP = class {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(WQOP.prototype);
          obj.__wbg_ptr = ptr;
          WQOPFinalization.register(obj, obj.__wbg_ptr, obj);
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          WQOPFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_wqop_free(ptr, 0);
        }
        /**
        * Construct a `WQOP` instruction from its arguments.
        * @param {RegId} ra
        * @param {RegId} rb
        * @param {RegId} rc
        * @param {MathArgs} args
        * @returns {WQOP}
        */
        static from_args(ra, rb, rc, args) {
          _assertClass(ra, RegId);
          var ptr0 = ra.__destroy_into_raw();
          _assertClass(rb, RegId);
          var ptr1 = rb.__destroy_into_raw();
          _assertClass(rc, RegId);
          var ptr2 = rc.__destroy_into_raw();
          _assertClass(args, MathArgs);
          var ptr3 = args.__destroy_into_raw();
          const ret3 = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);
          return WQOP.__wrap(ret3);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        * @param {Imm06} flags
        */
        constructor(dst, lhs, rhs, flags) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          _assertClass(flags, Imm06);
          var ptr3 = flags.__destroy_into_raw();
          const ret3 = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);
          this.__wbg_ptr = ret3 >>> 0;
          WQOPFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 6-bit immediate value.
        * @returns {Imm06}
        */
        imm06() {
          const ret3 = wasm$1.jneb_imm06(this.__wbg_ptr);
          return Imm06.__wrap(ret3);
        }
      };
      var XORFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_xor_free(ptr >>> 0, 1));
      var XOR = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          XORFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_xor_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {RegId} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, RegId);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          XORFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register C.
        * @returns {RegId}
        */
        rc() {
          const ret3 = wasm$1.add_rc(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
      };
      var XORIFinalization = typeof FinalizationRegistry === "undefined" ? { register: () => {
      }, unregister: () => {
      } } : new FinalizationRegistry((ptr) => wasm$1.__wbg_xori_free(ptr >>> 0, 1));
      var XORI = class {
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          XORIFinalization.unregister(this);
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm$1.__wbg_xori_free(ptr, 0);
        }
        /**
        * Construct the instruction from its parts.
        * @param {RegId} dst
        * @param {RegId} lhs
        * @param {Imm12} rhs
        */
        constructor(dst, lhs, rhs) {
          _assertClass(dst, RegId);
          var ptr0 = dst.__destroy_into_raw();
          _assertClass(lhs, RegId);
          var ptr1 = lhs.__destroy_into_raw();
          _assertClass(rhs, Imm12);
          var ptr2 = rhs.__destroy_into_raw();
          const ret3 = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);
          this.__wbg_ptr = ret3 >>> 0;
          XORIFinalization.register(this, this.__wbg_ptr, this);
          return this;
        }
        /**
        * Access the ID for register A.
        * @returns {RegId}
        */
        ra() {
          const ret3 = wasm$1.add_ra(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the ID for register B.
        * @returns {RegId}
        */
        rb() {
          const ret3 = wasm$1.add_rb(this.__wbg_ptr);
          return RegId.__wrap(ret3);
        }
        /**
        * Access the 12-bit immediate value.
        * @returns {Imm12}
        */
        imm12() {
          const ret3 = wasm$1.addi_imm12(this.__wbg_ptr);
          return Imm12.__wrap(ret3);
        }
      };
      async function __wbg_load(module2, imports) {
        if (typeof Response === "function" && module2 instanceof Response) {
          if (typeof WebAssembly.instantiateStreaming === "function") {
            try {
              return await WebAssembly.instantiateStreaming(module2, imports);
            } catch (e) {
              if (module2.headers.get("Content-Type") != "application/wasm") {
                console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
              } else {
                throw e;
              }
            }
          }
          const bytes2 = await module2.arrayBuffer();
          return await WebAssembly.instantiate(bytes2, imports);
        } else {
          const instance = await WebAssembly.instantiate(module2, imports);
          if (instance instanceof WebAssembly.Instance) {
            return { instance, module: module2 };
          } else {
            return instance;
          }
        }
      }
      function __wbg_get_imports() {
        const imports = {};
        imports.wbg = {};
        imports.wbg.__wbindgen_throw = function(arg0, arg1) {
          throw new Error(getStringFromWasm0(arg0, arg1));
        };
        return imports;
      }
      function __wbg_finalize_init(instance, module2) {
        wasm$1 = instance.exports;
        __wbg_init.__wbindgen_wasm_module = module2;
        cachedDataViewMemory0 = null;
        cachedUint8ArrayMemory0 = null;
        return wasm$1;
      }
      function initSync(module2) {
        if (wasm$1 !== void 0)
          return wasm$1;
        if (typeof module2 !== "undefined" && Object.getPrototypeOf(module2) === Object.prototype)
          ({ module: module2 } = module2);
        else
          console.warn("using deprecated parameters for `initSync()`; pass a single object instead");
        const imports = __wbg_get_imports();
        if (!(module2 instanceof WebAssembly.Module)) {
          module2 = new WebAssembly.Module(module2);
        }
        const instance = new WebAssembly.Instance(module2, imports);
        return __wbg_finalize_init(instance, module2);
      }
      async function __wbg_init(module_or_path) {
        if (wasm$1 !== void 0)
          return wasm$1;
        if (typeof module_or_path !== "undefined" && Object.getPrototypeOf(module_or_path) === Object.prototype)
          ({ module_or_path } = module_or_path);
        else
          console.warn("using deprecated parameters for the initialization function; pass a single object instead");
        const imports = __wbg_get_imports();
        const { instance, module: module2 } = await __wbg_load(await module_or_path, imports);
        return __wbg_finalize_init(instance, module2);
      }
      function _loadWasmModule(sync, filepath, src, imports) {
        function _instantiateOrCompile(source, imports2, stream) {
          var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;
          var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;
          if (imports2) {
            return instantiateFunc(source, imports2);
          } else {
            return compileFunc(source);
          }
        }
        var buf = null;
        var isNode2 = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
        if (isNode2) {
          buf = Buffer.from(src, "base64");
        } else {
          var raw = globalThis.atob(src);
          var rawLength = raw.length;
          buf = new Uint8Array(new ArrayBuffer(rawLength));
          for (var i = 0; i < rawLength; i++) {
            buf[i] = raw.charCodeAt(i);
          }
        }
        if (sync) {
          var mod2 = new WebAssembly.Module(buf);
          return imports ? new WebAssembly.Instance(mod2, imports) : mod2;
        } else {
          return _instantiateOrCompile(buf, imports, false);
        }
      }
      function wasm(imports) {
        return _loadWasmModule(1, null, "", imports);
      }
      async function initWasm2() {
        return await __wbg_init(wasm());
      }
      initWasm2();
      exports.ADD = ADD;
      exports.ADDI = ADDI;
      exports.ALOC = ALOC;
      exports.AND = AND;
      exports.ANDI = ANDI;
      exports.BAL = BAL;
      exports.BHEI = BHEI;
      exports.BHSH = BHSH;
      exports.BLDD = BLDD;
      exports.BSIZ = BSIZ;
      exports.BURN = BURN;
      exports.CALL = CALL;
      exports.CB = CB;
      exports.CCP = CCP;
      exports.CFE = CFE;
      exports.CFEI = CFEI;
      exports.CFS = CFS;
      exports.CFSI = CFSI;
      exports.CROO = CROO;
      exports.CSIZ = CSIZ;
      exports.CompareArgs = CompareArgs;
      exports.CompareMode = CompareMode;
      exports.DIV = DIV;
      exports.DIVI = DIVI;
      exports.DivArgs = DivArgs;
      exports.ECAL = ECAL;
      exports.ECK1 = ECK1;
      exports.ECR1 = ECR1;
      exports.ED19 = ED19;
      exports.EQ = EQ;
      exports.EXP = EXP;
      exports.EXPI = EXPI;
      exports.FLAG = FLAG;
      exports.GM = GM;
      exports.GMArgs = GMArgs;
      exports.GT = GT;
      exports.GTF = GTF;
      exports.GTFArgs = GTFArgs2;
      exports.Imm06 = Imm06;
      exports.Imm12 = Imm12;
      exports.Imm18 = Imm18;
      exports.Imm24 = Imm24;
      exports.Instruction = Instruction;
      exports.JI = JI;
      exports.JMP = JMP;
      exports.JMPB = JMPB;
      exports.JMPF = JMPF;
      exports.JNE = JNE;
      exports.JNEB = JNEB;
      exports.JNEF = JNEF;
      exports.JNEI = JNEI;
      exports.JNZB = JNZB;
      exports.JNZF = JNZF;
      exports.JNZI = JNZI;
      exports.K256 = K256;
      exports.LB = LB;
      exports.LDC = LDC;
      exports.LOG = LOG;
      exports.LOGD = LOGD;
      exports.LT = LT;
      exports.LW = LW;
      exports.MCL = MCL;
      exports.MCLI = MCLI;
      exports.MCP = MCP;
      exports.MCPI = MCPI;
      exports.MEQ = MEQ;
      exports.MINT = MINT;
      exports.MLDV = MLDV;
      exports.MLOG = MLOG;
      exports.MOD = MOD;
      exports.MODI = MODI;
      exports.MOVE = MOVE;
      exports.MOVI = MOVI;
      exports.MROO = MROO;
      exports.MUL = MUL;
      exports.MULI = MULI;
      exports.MathArgs = MathArgs;
      exports.MathOp = MathOp;
      exports.MulArgs = MulArgs;
      exports.NOOP = NOOP;
      exports.NOT = NOT;
      exports.OR = OR;
      exports.ORI = ORI;
      exports.POPH = POPH;
      exports.POPL = POPL;
      exports.PSHH = PSHH;
      exports.PSHL = PSHL;
      exports.PanicInstruction = PanicInstruction;
      exports.PanicReason = PanicReason;
      exports.RET = RET;
      exports.RETD = RETD;
      exports.RVRT = RVRT;
      exports.RegId = RegId;
      exports.S256 = S256;
      exports.SB = SB;
      exports.SCWQ = SCWQ;
      exports.SLL = SLL;
      exports.SLLI = SLLI;
      exports.SMO = SMO;
      exports.SRL = SRL;
      exports.SRLI = SRLI;
      exports.SRW = SRW;
      exports.SRWQ = SRWQ;
      exports.SUB = SUB;
      exports.SUBI = SUBI;
      exports.SW = SW;
      exports.SWW = SWW;
      exports.SWWQ = SWWQ;
      exports.TIME = TIME;
      exports.TR = TR;
      exports.TRO = TRO;
      exports.WDAM = WDAM;
      exports.WDCM = WDCM;
      exports.WDDV = WDDV;
      exports.WDMD = WDMD;
      exports.WDML = WDML;
      exports.WDMM = WDMM;
      exports.WDOP = WDOP;
      exports.WQAM = WQAM;
      exports.WQCM = WQCM;
      exports.WQDV = WQDV;
      exports.WQMD = WQMD;
      exports.WQML = WQML;
      exports.WQMM = WQMM;
      exports.WQOP = WQOP;
      exports.XOR = XOR;
      exports.XORI = XORI;
      exports.add = add;
      exports.addi = addi2;
      exports.aloc = aloc;
      exports.and = and;
      exports.andi = andi;
      exports.bal = bal;
      exports.bhei = bhei;
      exports.bhsh = bhsh;
      exports.bldd = bldd;
      exports.bsiz = bsiz;
      exports.burn = burn;
      exports.call = call;
      exports.cb = cb;
      exports.ccp = ccp;
      exports.cfe = cfe;
      exports.cfei = cfei;
      exports.cfs = cfs;
      exports.cfsi = cfsi;
      exports.croo = croo;
      exports.csiz = csiz;
      exports.div = div;
      exports.divi = divi;
      exports.ecal = ecal;
      exports.eck1 = eck1;
      exports.ecr1 = ecr1;
      exports.ed19 = ed19;
      exports.eq = eq;
      exports.exp = exp;
      exports.expi = expi;
      exports.flag = flag;
      exports.gm = gm;
      exports.gm_args = gm_args;
      exports.gt = gt;
      exports.gtf = gtf2;
      exports.gtf_args = gtf_args;
      exports.initSync = initSync;
      exports.initWasm = initWasm2;
      exports.ji = ji;
      exports.jmp = jmp;
      exports.jmpb = jmpb;
      exports.jmpf = jmpf;
      exports.jne = jne;
      exports.jneb = jneb;
      exports.jnef = jnef;
      exports.jnei = jnei;
      exports.jnzb = jnzb;
      exports.jnzf = jnzf;
      exports.jnzi = jnzi;
      exports.k256 = k256;
      exports.lb = lb;
      exports.ldc = ldc;
      exports.log = log;
      exports.logd = logd;
      exports.lt = lt;
      exports.lw = lw2;
      exports.mcl = mcl;
      exports.mcli = mcli;
      exports.mcp = mcp;
      exports.mcpi = mcpi;
      exports.meq = meq;
      exports.mint = mint;
      exports.mldv = mldv;
      exports.mlog = mlog;
      exports.mod_ = mod_;
      exports.modi = modi;
      exports.move_ = move_;
      exports.movi = movi;
      exports.mroo = mroo;
      exports.mul = mul;
      exports.muli = muli;
      exports.noop = noop;
      exports.not = not;
      exports.or = or;
      exports.ori = ori;
      exports.poph = poph;
      exports.popl = popl;
      exports.pshh = pshh;
      exports.pshl = pshl;
      exports.ret = ret2;
      exports.retd = retd;
      exports.rvrt = rvrt;
      exports.s256 = s256;
      exports.sb = sb;
      exports.scwq = scwq;
      exports.sll = sll;
      exports.slli = slli;
      exports.smo = smo;
      exports.srl = srl;
      exports.srli = srli;
      exports.srw = srw;
      exports.srwq = srwq;
      exports.sub = sub;
      exports.subi = subi;
      exports.sw = sw;
      exports.sww = sww;
      exports.swwq = swwq;
      exports.time = time;
      exports.tr = tr2;
      exports.tro = tro;
      exports.wdam = wdam;
      exports.wdcm = wdcm;
      exports.wdcm_args = wdcm_args;
      exports.wddv = wddv;
      exports.wddv_args = wddv_args;
      exports.wdmd = wdmd;
      exports.wdml = wdml;
      exports.wdml_args = wdml_args;
      exports.wdmm = wdmm;
      exports.wdop = wdop;
      exports.wdop_args = wdop_args;
      exports.wqam = wqam;
      exports.wqcm = wqcm;
      exports.wqcm_args = wqcm_args;
      exports.wqdv = wqdv;
      exports.wqdv_args = wqdv_args;
      exports.wqmd = wqmd;
      exports.wqml = wqml;
      exports.wqml_args = wqml_args;
      exports.wqmm = wqmm;
      exports.wqop = wqop;
      exports.wqop_args = wqop_args;
      exports.xor = xor;
      exports.xori = xori;
    }
  });

  // ../versions/dist/index.mjs
  function getBuiltinVersions() {
    return {
      FORC: "0.66.5",
      FUEL_CORE: "0.40.2",
      FUELS: "0.98.0"
    };
  }
  function parseVersion(version) {
    const [major, minor, patch] = version.split(".").map((v) => parseInt(v, 10));
    return { major, minor, patch };
  }
  function versionDiffs(version1, version2) {
    const semver1 = parseVersion(version1);
    const semver2 = parseVersion(version2);
    const major = semver1.major - semver2.major;
    const minor = semver1.minor - semver2.minor;
    const patch = semver1.patch - semver2.patch;
    return {
      major,
      minor,
      patch,
      fullVersionDiff: major || minor || patch
    };
  }
  function majorEq(version1, version2) {
    const { major } = versionDiffs(version1, version2);
    return major === 0;
  }
  function minorEq(version1, version2) {
    const { minor } = versionDiffs(version1, version2);
    return minor === 0;
  }
  function patchEq(version1, version2) {
    const { patch } = versionDiffs(version1, version2);
    return patch === 0;
  }
  function checkFuelCoreVersionCompatibility(networkVersion) {
    const { FUEL_CORE: supportedVersion } = getBuiltinVersions();
    if (/^\d+\.\d+\.\d+\D+/m.test(networkVersion)) {
      console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      
This unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);
    }
    return {
      supportedVersion,
      isMajorSupported: majorEq(networkVersion, supportedVersion),
      isMinorSupported: minorEq(networkVersion, supportedVersion),
      isPatchSupported: patchEq(networkVersion, supportedVersion)
    };
  }
  var versions = getBuiltinVersions();

  // ../errors/dist/index.mjs
  var __defProp2 = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var ErrorCode = /* @__PURE__ */ ((ErrorCode22) => {
    ErrorCode22["NO_ABIS_FOUND"] = "no-abis-found";
    ErrorCode22["ABI_TYPES_AND_VALUES_MISMATCH"] = "abi-types-and-values-mismatch";
    ErrorCode22["ABI_MAIN_METHOD_MISSING"] = "abi-main-method-missing";
    ErrorCode22["INVALID_COMPONENT"] = "invalid-component";
    ErrorCode22["CONFIGURABLE_NOT_FOUND"] = "configurable-not-found";
    ErrorCode22["TYPE_NOT_FOUND"] = "type-not-found";
    ErrorCode22["LOG_TYPE_NOT_FOUND"] = "log-type-not-found";
    ErrorCode22["TYPE_NOT_SUPPORTED"] = "type-not-supported";
    ErrorCode22["INVALID_DECODE_VALUE"] = "invalid-decode-value";
    ErrorCode22["JSON_ABI_ERROR"] = "json-abi-error";
    ErrorCode22["TYPE_ID_NOT_FOUND"] = "type-id-not-found";
    ErrorCode22["BIN_FILE_NOT_FOUND"] = "bin-file-not-found";
    ErrorCode22["CODER_NOT_FOUND"] = "coder-not-found";
    ErrorCode22["INVALID_DATA"] = "invalid-data";
    ErrorCode22["FUNCTION_NOT_FOUND"] = "function-not-found";
    ErrorCode22["UNSUPPORTED_ENCODING_VERSION"] = "unsupported-encoding-version";
    ErrorCode22["TIMEOUT_EXCEEDED"] = "timeout-exceeded";
    ErrorCode22["CONFIG_FILE_NOT_FOUND"] = "config-file-not-found";
    ErrorCode22["CONFIG_FILE_ALREADY_EXISTS"] = "config-file-already-exists";
    ErrorCode22["WORKSPACE_NOT_DETECTED"] = "workspace-not-detected";
    ErrorCode22["INVALID_ADDRESS"] = "invalid-address";
    ErrorCode22["INVALID_EVM_ADDRESS"] = "invalid-evm-address";
    ErrorCode22["INVALID_B256_ADDRESS"] = "invalid-b256-address";
    ErrorCode22["CHAIN_INFO_CACHE_EMPTY"] = "chain-info-cache-empty";
    ErrorCode22["NODE_INFO_CACHE_EMPTY"] = "node-info-cache-empty";
    ErrorCode22["MISSING_PROVIDER"] = "missing-provider";
    ErrorCode22["INVALID_PROVIDER"] = "invalid-provider";
    ErrorCode22["CONNECTION_REFUSED"] = "connection-refused";
    ErrorCode22["INVALID_URL"] = "invalid-url";
    ErrorCode22["INVALID_PUBLIC_KEY"] = "invalid-public-key";
    ErrorCode22["WALLET_MANAGER_ERROR"] = "wallet-manager-error";
    ErrorCode22["HD_WALLET_ERROR"] = "hd-wallet-error";
    ErrorCode22["MISSING_CONNECTOR"] = "missing-connector";
    ErrorCode22["PARSE_FAILED"] = "parse-failed";
    ErrorCode22["ENCODE_ERROR"] = "encode-error";
    ErrorCode22["DECODE_ERROR"] = "decode-error";
    ErrorCode22["ENV_DEPENDENCY_MISSING"] = "env-dependency-missing";
    ErrorCode22["INVALID_TTL"] = "invalid-ttl";
    ErrorCode22["INVALID_INPUT_PARAMETERS"] = "invalid-input-parameters";
    ErrorCode22["NOT_IMPLEMENTED"] = "not-implemented";
    ErrorCode22["NOT_SUPPORTED"] = "not-supported";
    ErrorCode22["CONVERTING_FAILED"] = "converting-error";
    ErrorCode22["ELEMENT_NOT_FOUND"] = "element-not-found";
    ErrorCode22["MISSING_REQUIRED_PARAMETER"] = "missing-required-parameter";
    ErrorCode22["INVALID_REQUEST"] = "invalid-request";
    ErrorCode22["INVALID_TRANSFER_AMOUNT"] = "invalid-transfer-amount";
    ErrorCode22["NOT_ENOUGH_FUNDS"] = "not-enough-funds";
    ErrorCode22["INVALID_CREDENTIALS"] = "invalid-credentials";
    ErrorCode22["HASHER_LOCKED"] = "hasher-locked";
    ErrorCode22["GAS_PRICE_TOO_LOW"] = "gas-price-too-low";
    ErrorCode22["GAS_LIMIT_TOO_LOW"] = "gas-limit-too-low";
    ErrorCode22["MAX_FEE_TOO_LOW"] = "max-fee-too-low";
    ErrorCode22["TRANSACTION_NOT_FOUND"] = "transaction-not-found";
    ErrorCode22["TRANSACTION_FAILED"] = "transaction-failed";
    ErrorCode22["INVALID_CONFIGURABLE_CONSTANTS"] = "invalid-configurable-constants";
    ErrorCode22["INVALID_TRANSACTION_INPUT"] = "invalid-transaction-input";
    ErrorCode22["INVALID_TRANSACTION_OUTPUT"] = "invalid-transaction-output";
    ErrorCode22["INVALID_TRANSACTION_STATUS"] = "invalid-transaction-status";
    ErrorCode22["UNSUPPORTED_TRANSACTION_TYPE"] = "unsupported-transaction-type";
    ErrorCode22["TRANSACTION_ERROR"] = "transaction-error";
    ErrorCode22["INVALID_POLICY_TYPE"] = "invalid-policy-type";
    ErrorCode22["DUPLICATED_POLICY"] = "duplicated-policy";
    ErrorCode22["TRANSACTION_SQUEEZED_OUT"] = "transaction-squeezed-out";
    ErrorCode22["CONTRACT_SIZE_EXCEEDS_LIMIT"] = "contract-size-exceeds-limit";
    ErrorCode22["INVALID_CHUNK_SIZE_MULTIPLIER"] = "invalid-chunk-size-multiplier";
    ErrorCode22["MAX_INPUTS_EXCEEDED"] = "max-inputs-exceeded";
    ErrorCode22["FUNDS_TOO_LOW"] = "funds-too-low";
    ErrorCode22["MAX_OUTPUTS_EXCEEDED"] = "max-outputs-exceeded";
    ErrorCode22["MAX_COINS_REACHED"] = "max-coins-reached";
    ErrorCode22["ASSET_BURN_DETECTED"] = "asset-burn-detected";
    ErrorCode22["INVALID_RECEIPT_TYPE"] = "invalid-receipt-type";
    ErrorCode22["INVALID_WORD_LIST"] = "invalid-word-list";
    ErrorCode22["INVALID_MNEMONIC"] = "invalid-mnemonic";
    ErrorCode22["INVALID_ENTROPY"] = "invalid-entropy";
    ErrorCode22["INVALID_SEED"] = "invalid-seed";
    ErrorCode22["INVALID_CHECKSUM"] = "invalid-checksum";
    ErrorCode22["INVALID_PASSWORD"] = "invalid-password";
    ErrorCode22["ACCOUNT_REQUIRED"] = "account-required";
    ErrorCode22["UNLOCKED_WALLET_REQUIRED"] = "unlocked-wallet-required";
    ErrorCode22["ERROR_BUILDING_BLOCK_EXPLORER_URL"] = "error-building-block-explorer-url";
    ErrorCode22["VITEPRESS_PLUGIN_ERROR"] = "vitepress-plugin-error";
    ErrorCode22["SCRIPT_REVERTED"] = "script-reverted";
    ErrorCode22["SCRIPT_RETURN_INVALID_TYPE"] = "script-return-invalid-type";
    ErrorCode22["STREAM_PARSING_ERROR"] = "stream-parsing-error";
    ErrorCode22["NODE_LAUNCH_FAILED"] = "node-launch-failed";
    ErrorCode22["UNKNOWN"] = "unknown";
    return ErrorCode22;
  })(ErrorCode || {});
  var _FuelError = class extends Error {
    VERSIONS = versions;
    metadata;
    rawError;
    static parse(e) {
      const error2 = e;
      if (error2.code === void 0) {
        throw new _FuelError(
          "parse-failed",
          "Failed to parse the error object. The required 'code' property is missing."
        );
      }
      const enumValues = Object.values(ErrorCode);
      const codeIsKnown = enumValues.includes(error2.code);
      if (!codeIsKnown) {
        throw new _FuelError(
          "parse-failed",
          `Unknown error code: ${error2.code}. Accepted codes: ${enumValues.join(", ")}.`
        );
      }
      return new _FuelError(error2.code, error2.message);
    }
    code;
    constructor(code, message, metadata = {}, rawError = null) {
      super(message);
      this.code = code;
      this.name = "FuelError";
      this.metadata = metadata;
      this.rawError = rawError;
    }
    toObject() {
      const { code, name, message, metadata, VERSIONS, rawError } = this;
      return { code, name, message, metadata, VERSIONS, rawError };
    }
  };
  var FuelError = _FuelError;
  __publicField(FuelError, "CODES", ErrorCode);

  // ../math/dist/index.mjs
  var import_bn = __toESM(require_bn(), 1);
  var DEFAULT_PRECISION = 9;
  var DEFAULT_MIN_PRECISION = 3;
  var DEFAULT_DECIMAL_UNITS = 9;
  var BN = class extends import_bn.default {
    MAX_U64 = "0xFFFFFFFFFFFFFFFF";
    constructor(value, base2, endian) {
      let bnValue = value;
      let bnBase = base2;
      if (BN.isBN(value)) {
        bnValue = value.toArray();
      } else if (typeof value === "string" && value.slice(0, 2) === "0x") {
        bnValue = value.substring(2);
        bnBase = base2 || "hex";
      }
      super(bnValue == null ? 0 : bnValue, bnBase, endian);
    }
    // ANCHOR: HELPERS
    // make sure we always include `0x` in hex strings
    toString(base2, length) {
      const output2 = super.toString(base2, length);
      if (base2 === 16 || base2 === "hex") {
        return `0x${output2}`;
      }
      return output2;
    }
    toHex(bytesPadding) {
      const bytes2 = bytesPadding || 0;
      const bytesLength = bytes2 * 2;
      if (this.isNeg()) {
        throw new FuelError(ErrorCode.CONVERTING_FAILED, "Cannot convert negative value to hex.");
      }
      if (bytesPadding && this.byteLength() > bytesPadding) {
        throw new FuelError(
          ErrorCode.CONVERTING_FAILED,
          `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`
        );
      }
      return this.toString(16, bytesLength);
    }
    toBytes(bytesPadding) {
      if (this.isNeg()) {
        throw new FuelError(ErrorCode.CONVERTING_FAILED, "Cannot convert negative value to bytes.");
      }
      return Uint8Array.from(this.toArray(void 0, bytesPadding));
    }
    toJSON() {
      return this.toString(16);
    }
    valueOf() {
      return this.toString();
    }
    format(options) {
      const {
        units = DEFAULT_DECIMAL_UNITS,
        precision: initialPrecision = DEFAULT_PRECISION,
        minPrecision: initialMinPrecision = DEFAULT_MIN_PRECISION
      } = options || {};
      if (units === 0) {
        return this.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      const minPrecision = initialMinPrecision > initialPrecision ? initialPrecision : initialMinPrecision;
      const precision = initialPrecision > initialMinPrecision ? initialPrecision : initialMinPrecision;
      const formattedUnits = this.formatUnits(units);
      const [integerPart, fractionalPart = ""] = formattedUnits.split(".");
      const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      if (precision === 0) {
        return formattedInteger;
      }
      let formattedFractional = fractionalPart.replace(/0+$/, "");
      if (formattedFractional.length > precision) {
        if (integerPart === "0") {
          const firstNonZeroIndex = formattedFractional.search(/[1-9]/);
          if (firstNonZeroIndex >= 0 && firstNonZeroIndex < precision) {
            formattedFractional = formattedFractional.slice(0, precision);
          } else {
            formattedFractional = formattedFractional.slice(0, firstNonZeroIndex + 1);
          }
        } else {
          formattedFractional = formattedFractional.slice(0, precision);
        }
      } else {
        formattedFractional = formattedFractional.slice(0, precision);
      }
      if (formattedFractional.length < minPrecision) {
        formattedFractional = formattedFractional.padEnd(minPrecision, "0");
      }
      if (formattedFractional === "" && minPrecision === 0) {
        return formattedInteger;
      }
      return formattedFractional ? `${formattedInteger}.${formattedFractional}` : formattedInteger;
    }
    formatUnits(units = DEFAULT_DECIMAL_UNITS) {
      const valueString = this.toString();
      const valueLength = valueString.length;
      if (valueLength <= units) {
        const paddedZeros = "0".repeat(units - valueLength);
        return `0.${paddedZeros}${valueString}`;
      }
      const integerPart = valueString.slice(0, valueLength - units);
      const fractionalPart = valueString.slice(valueLength - units);
      return `${integerPart}.${fractionalPart}`;
    }
    // END ANCHOR: HELPERS
    // ANCHOR: OVERRIDES to accept better inputs
    add(v) {
      return this.caller(v, "add");
    }
    pow(v) {
      return this.caller(v, "pow");
    }
    sub(v) {
      return this.caller(v, "sub");
    }
    div(v) {
      return this.caller(v, "div");
    }
    mul(v) {
      return this.caller(v, "mul");
    }
    mod(v) {
      return this.caller(v, "mod");
    }
    divRound(v) {
      return this.caller(v, "divRound");
    }
    lt(v) {
      return this.caller(v, "lt");
    }
    lte(v) {
      return this.caller(v, "lte");
    }
    gt(v) {
      return this.caller(v, "gt");
    }
    gte(v) {
      return this.caller(v, "gte");
    }
    eq(v) {
      return this.caller(v, "eq");
    }
    cmp(v) {
      return this.caller(v, "cmp");
    }
    // END ANCHOR: OVERRIDES to accept better inputs
    // ANCHOR: OVERRIDES to output our BN type
    sqr() {
      return new BN(super.sqr().toArray());
    }
    neg() {
      return new BN(super.neg().toArray());
    }
    abs() {
      return new BN(super.abs().toArray());
    }
    toTwos(width) {
      return new BN(super.toTwos(width).toArray());
    }
    fromTwos(width) {
      return new BN(super.fromTwos(width).toArray());
    }
    // END ANCHOR: OVERRIDES to output our BN type
    // ANCHOR: OVERRIDES to avoid losing references
    caller(v, methodName) {
      const output2 = super[methodName](new BN(v));
      if (BN.isBN(output2)) {
        return new BN(output2.toArray());
      }
      if (typeof output2 === "boolean") {
        return output2;
      }
      return output2;
    }
    clone() {
      return new BN(this.toArray());
    }
    mulTo(num, out) {
      const output2 = new import_bn.default(this.toArray()).mulTo(num, out);
      return new BN(output2.toArray());
    }
    egcd(p) {
      const { a, b, gcd } = new import_bn.default(this.toArray()).egcd(p);
      return {
        a: new BN(a.toArray()),
        b: new BN(b.toArray()),
        gcd: new BN(gcd.toArray())
      };
    }
    divmod(num, mode, positive) {
      const { div, mod: mod2 } = new import_bn.default(this.toArray()).divmod(new BN(num), mode, positive);
      return {
        div: new BN(div?.toArray()),
        mod: new BN(mod2?.toArray())
      };
    }
    maxU64() {
      return this.gte(this.MAX_U64) ? new BN(this.MAX_U64) : this;
    }
    max(num) {
      return this.gte(num) ? new BN(num) : this;
    }
    normalizeZeroToOne() {
      return this.isZero() ? new BN(1) : this;
    }
    // END ANCHOR: OVERRIDES to avoid losing references
  };
  var bn = (value, base2, endian) => new BN(value, base2, endian);
  bn.parseUnits = (value, units = DEFAULT_DECIMAL_UNITS) => {
    const valueToParse = value === "." ? "0." : value;
    const [valueUnits = "0", valueDecimals = "0"] = valueToParse.split(".");
    const length = valueDecimals.length;
    if (units === 0) {
      const valueWithoutDecimals = valueToParse.replace(",", "").split(".")[0];
      return bn(valueWithoutDecimals);
    }
    if (length > units) {
      throw new FuelError(
        ErrorCode.CONVERTING_FAILED,
        `Decimal can't have more than ${units} digits.`
      );
    }
    const decimals = Array.from({ length: units }).fill("0");
    decimals.splice(0, length, valueDecimals);
    const amount = `${valueUnits.replaceAll(",", "")}${decimals.join("")}`;
    return bn(amount);
  };
  function toNumber(value) {
    return bn(value).toNumber();
  }
  function toHex(value, bytesPadding) {
    return bn(value).toHex(bytesPadding);
  }
  function toBytes(value, bytesPadding) {
    return bn(value).toBytes(bytesPadding);
  }

  // ../utils/dist/index.mjs
  var __defProp3 = Object.defineProperty;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField2 = (obj, key, value) => {
    __defNormalProp2(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var arrayify = (value, name, copy = true) => {
    if (value instanceof Uint8Array) {
      if (copy) {
        return new Uint8Array(value);
      }
      return value;
    }
    if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
      const result = new Uint8Array((value.length - 2) / 2);
      let offset = 2;
      for (let i = 0; i < result.length; i++) {
        result[i] = parseInt(value.substring(offset, offset + 2), 16);
        offset += 2;
      }
      return result;
    }
    const nameMessage = name ? ` ${name} -` : "";
    const message = `invalid data:${nameMessage} ${value}
If you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;
    throw new FuelError(ErrorCode.INVALID_DATA, message);
  };
  var concatBytes = (arrays) => {
    const byteArrays = arrays.map((array) => {
      if (array instanceof Uint8Array) {
        return array;
      }
      return Uint8Array.from(array);
    });
    const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);
    const concatenated = new Uint8Array(totalSize);
    byteArrays.reduce((offset, object) => {
      concatenated.set(object, offset);
      return offset + object.length;
    }, 0);
    return concatenated;
  };
  var concat = (arrays) => {
    const bytes2 = arrays.map((v) => arrayify(v));
    return concatBytes(bytes2);
  };
  var HexCharacters = "0123456789abcdef";
  function hexlify(data) {
    const bytes2 = arrayify(data);
    let result = "0x";
    for (let i = 0; i < bytes2.length; i++) {
      const v = bytes2[i];
      result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
    }
    return result;
  }
  var TAI64_LEAP_SECONDS = 37;
  var TAI64_UNIX_OFFSET = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);
  var msToSeconds = (ms) => Math.floor(ms / 1e3);
  var secondsToMs = (seconds) => seconds * 1e3;
  var tai64ToUnixSeconds = (tai64) => Number(BigInt(tai64) - TAI64_UNIX_OFFSET);
  var unixSecondsToTai64 = (unixSeconds) => String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET);
  var tai64ToUnixMilliseconds = (tai64) => secondsToMs(tai64ToUnixSeconds(tai64));
  var _DateTime = class extends Date {
    /**
     * Generates a new DateTime instance from a Tai64 timestamp.
     *
     * @param tai64 - Tai64 timestamp
     * @returns a new DateTime instance
     */
    static fromTai64(tai64) {
      return new _DateTime(tai64ToUnixMilliseconds(tai64));
    }
    /**
     * @param unixMilliseconds - unix milliseconds timestamp
     * @returns a new DateTime instance
     */
    static fromUnixMilliseconds(unixMilliseconds) {
      return new _DateTime(unixMilliseconds);
    }
    /**
     * @param unixSeconds - unix seconds timestamp
     * @returns a new DateTime instance
     */
    static fromUnixSeconds(unixSeconds) {
      return new _DateTime(secondsToMs(unixSeconds));
    }
    /**
     * Hide the constructor to prevent direct instantiation.
     */
    constructor(date) {
      super(date);
    }
    /**
     * Returns the Tai64 timestamp.
     *
     * @returns the Tai64 timestamp
     */
    toTai64() {
      return unixSecondsToTai64(this.toUnixSeconds());
    }
    /**
     * @returns the unix milliseconds timestamp
     */
    toUnixMilliseconds() {
      return this.getTime();
    }
    /**
     * @returns the unix seconds timestamp
     */
    toUnixSeconds() {
      return msToSeconds(this.getTime());
    }
  };
  var DateTime = _DateTime;
  __publicField2(DateTime, "TAI64_NULL", "");
  function sleep(time) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(true);
      }, time);
    });
  }
  var chainConfig_default = {
    chain_name: "local_testnet",
    consensus_parameters: {
      V2: {
        tx_params: {
          V1: {
            max_inputs: 255,
            max_outputs: 255,
            max_witnesses: 255,
            max_gas_per_tx: 3e7,
            max_size: 112640,
            max_bytecode_subsections: 256
          }
        },
        predicate_params: {
          V1: {
            max_predicate_length: 24576,
            max_predicate_data_length: 24576,
            max_message_data_length: 102400,
            max_gas_per_predicate: 1e6
          }
        },
        script_params: {
          V1: {
            max_script_length: 102400,
            max_script_data_length: 102400
          }
        },
        contract_params: {
          V1: {
            contract_max_size: 112640,
            max_storage_slots: 1760
          }
        },
        fee_params: {
          V1: {
            gas_price_factor: 115e4,
            gas_per_byte: 63
          }
        },
        chain_id: 0,
        gas_costs: {
          V4: {
            add: 2,
            addi: 2,
            and: 2,
            andi: 2,
            bal: 274,
            bhei: 2,
            bhsh: 2,
            burn: 7566,
            cb: 2,
            cfsi: 2,
            div: 2,
            divi: 2,
            eck1: 1489,
            ecr1: 20513,
            eq: 2,
            exp: 2,
            expi: 2,
            flag: 2,
            gm: 2,
            gt: 2,
            gtf: 3,
            ji: 2,
            jmp: 2,
            jne: 2,
            jnei: 2,
            jnzi: 2,
            jmpf: 2,
            jmpb: 2,
            jnzf: 2,
            jnzb: 2,
            jnef: 2,
            jneb: 2,
            lb: 2,
            log: 80,
            lt: 2,
            lw: 2,
            mint: 6566,
            mlog: 2,
            mod: 2,
            modi: 2,
            move: 2,
            movi: 1,
            mroo: 3,
            mul: 2,
            muli: 2,
            mldv: 3,
            noop: 1,
            not: 2,
            or: 1,
            ori: 2,
            poph: 2,
            popl: 2,
            pshh: 5,
            pshl: 5,
            ret_contract: 43,
            rvrt_contract: 39,
            sb: 2,
            sll: 2,
            slli: 2,
            srl: 2,
            srli: 2,
            srw: 237,
            sub: 2,
            subi: 2,
            sw: 2,
            sww: 5708,
            time: 106,
            tr: 9253,
            tro: 7199,
            wdcm: 2,
            wqcm: 2,
            wdop: 2,
            wqop: 3,
            wdml: 3,
            wqml: 3,
            wddv: 3,
            wqdv: 4,
            wdmd: 6,
            wqmd: 9,
            wdam: 6,
            wqam: 6,
            wdmm: 6,
            wqmm: 6,
            xor: 2,
            xori: 2,
            aloc: {
              LightOperation: {
                base: 2,
                units_per_gas: 35
              }
            },
            bsiz: {
              LightOperation: {
                base: 25,
                units_per_gas: 564
              }
            },
            bldd: {
              LightOperation: {
                base: 33,
                units_per_gas: 130
              }
            },
            cfe: {
              LightOperation: {
                base: 10,
                units_per_gas: 62
              }
            },
            cfei: {
              LightOperation: {
                base: 10,
                units_per_gas: 66
              }
            },
            call: {
              LightOperation: {
                base: 6934,
                units_per_gas: 14
              }
            },
            ccp: {
              LightOperation: {
                base: 21,
                units_per_gas: 155
              }
            },
            croo: {
              LightOperation: {
                base: 69,
                units_per_gas: 4
              }
            },
            csiz: {
              LightOperation: {
                base: 25,
                units_per_gas: 580
              }
            },
            ed19: {
              LightOperation: {
                base: 3232,
                units_per_gas: 7
              }
            },
            k256: {
              LightOperation: {
                base: 21,
                units_per_gas: 6
              }
            },
            ldc: {
              LightOperation: {
                base: 84,
                units_per_gas: 113
              }
            },
            logd: {
              LightOperation: {
                base: 278,
                units_per_gas: 5
              }
            },
            mcl: {
              LightOperation: {
                base: 2,
                units_per_gas: 1282
              }
            },
            mcli: {
              LightOperation: {
                base: 2,
                units_per_gas: 1250
              }
            },
            mcp: {
              LightOperation: {
                base: 3,
                units_per_gas: 385
              }
            },
            mcpi: {
              LightOperation: {
                base: 7,
                units_per_gas: 585
              }
            },
            meq: {
              LightOperation: {
                base: 2,
                units_per_gas: 1234
              }
            },
            retd_contract: {
              LightOperation: {
                base: 227,
                units_per_gas: 5
              }
            },
            s256: {
              LightOperation: {
                base: 25,
                units_per_gas: 5
              }
            },
            scwq: {
              HeavyOperation: {
                base: 5666,
                gas_per_unit: 6628
              }
            },
            smo: {
              LightOperation: {
                base: 14635,
                units_per_gas: 3
              }
            },
            srwq: {
              HeavyOperation: {
                base: 245,
                gas_per_unit: 243
              }
            },
            swwq: {
              HeavyOperation: {
                base: 5661,
                gas_per_unit: 5776
              }
            },
            contract_root: {
              LightOperation: {
                base: 24,
                units_per_gas: 3
              }
            },
            state_root: {
              HeavyOperation: {
                base: 189,
                gas_per_unit: 96
              }
            },
            new_storage_per_byte: 63,
            vm_initialization: {
              LightOperation: {
                base: 3127,
                units_per_gas: 61
              }
            }
          }
        },
        base_asset_id: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07",
        block_gas_limit: 3e7,
        block_transaction_size_limit: 260096,
        privileged_address: "0000000000000000000000000000000000000000000000000000000000000000"
      }
    },
    consensus: {
      PoA: {
        signing_key: "0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d"
      }
    }
  };
  var metadata_default = {
    chain_config: "chainConfig.json",
    table_encoding: {
      Json: {
        filepath: "stateConfig.json"
      }
    }
  };
  var stateConfig_default = {
    coins: [],
    messages: [],
    contracts: [],
    blobs: [],
    block_height: 0,
    da_block_height: 0
  };
  var defaultSnapshotConfigs = {
    chainConfig: chainConfig_default,
    metadata: metadata_default,
    stateConfig: stateConfig_default
  };
  var defaultConsensusKey = "0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298";
  function isDefined(value) {
    return value !== void 0;
  }
  var BN_0 = bn(0);
  var BN_58 = bn(58);
  var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
  var Lookup = null;
  function getAlpha(letter) {
    if (Lookup == null) {
      Lookup = {};
      for (let i = 0; i < Alphabet.length; i++) {
        Lookup[Alphabet[i]] = bn(i);
      }
    }
    const result = Lookup[letter];
    if (result == null) {
      throw new FuelError(ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);
    }
    return bn(result);
  }
  function encodeBase58(_value) {
    const bytes2 = arrayify(_value);
    let value = bn(bytes2);
    let result = "";
    while (value.gt(BN_0)) {
      result = Alphabet[Number(value.mod(BN_58))] + result;
      value = value.div(BN_58);
    }
    for (let i = 0; i < bytes2.length; i++) {
      if (bytes2[i]) {
        break;
      }
      result = Alphabet[0] + result;
    }
    return result;
  }
  function decodeBase58(value) {
    let result = BN_0;
    for (let i = 0; i < value.length; i++) {
      result = result.mul(BN_58);
      result = result.add(getAlpha(value[i].toString()));
    }
    return result;
  }
  function dataSlice(data, start, end) {
    const bytes2 = arrayify(data);
    if (end != null && end > bytes2.length) {
      throw new FuelError(ErrorCode.INVALID_DATA, "cannot slice beyond data bounds");
    }
    return hexlify(bytes2.slice(start == null ? 0 : start, end == null ? bytes2.length : end));
  }
  function toUtf8Bytes(stri, form = true) {
    let str = stri;
    if (form) {
      str = stri.normalize("NFC");
    }
    const result = [];
    for (let i = 0; i < str.length; i += 1) {
      const c = str.charCodeAt(i);
      if (c < 128) {
        result.push(c);
      } else if (c < 2048) {
        result.push(c >> 6 | 192);
        result.push(c & 63 | 128);
      } else if ((c & 64512) === 55296) {
        i += 1;
        const c2 = str.charCodeAt(i);
        if (i >= str.length || (c2 & 64512) !== 56320) {
          throw new FuelError(
            ErrorCode.INVALID_INPUT_PARAMETERS,
            "Invalid UTF-8 in the input string."
          );
        }
        const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
        result.push(pair >> 18 | 240);
        result.push(pair >> 12 & 63 | 128);
        result.push(pair >> 6 & 63 | 128);
        result.push(pair & 63 | 128);
      } else {
        result.push(c >> 12 | 224);
        result.push(c >> 6 & 63 | 128);
        result.push(c & 63 | 128);
      }
    }
    return new Uint8Array(result);
  }
  function onError(reason, offset, bytes2, output2, badCodepoint) {
    console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes2}`);
    return offset;
  }
  function helper(codePoints) {
    return codePoints.map((codePoint) => {
      if (codePoint <= 65535) {
        return String.fromCharCode(codePoint);
      }
      codePoint -= 65536;
      return String.fromCharCode(
        (codePoint >> 10 & 1023) + 55296,
        (codePoint & 1023) + 56320
      );
    }).join("");
  }
  function getUtf8CodePoints(_bytes) {
    const bytes2 = arrayify(_bytes, "bytes");
    const result = [];
    let i = 0;
    while (i < bytes2.length) {
      const c = bytes2[i++];
      if (c >> 7 === 0) {
        result.push(c);
        continue;
      }
      let extraLength = null;
      let overlongMask = null;
      if ((c & 224) === 192) {
        extraLength = 1;
        overlongMask = 127;
      } else if ((c & 240) === 224) {
        extraLength = 2;
        overlongMask = 2047;
      } else if ((c & 248) === 240) {
        extraLength = 3;
        overlongMask = 65535;
      } else {
        if ((c & 192) === 128) {
          i += onError("UNEXPECTED_CONTINUE", i - 1, bytes2, result);
        } else {
          i += onError("BAD_PREFIX", i - 1, bytes2, result);
        }
        continue;
      }
      if (i - 1 + extraLength >= bytes2.length) {
        i += onError("OVERRUN", i - 1, bytes2, result);
        continue;
      }
      let res = c & (1 << 8 - extraLength - 1) - 1;
      for (let j = 0; j < extraLength; j++) {
        const nextChar = bytes2[i];
        if ((nextChar & 192) !== 128) {
          i += onError("MISSING_CONTINUE", i, bytes2, result);
          res = null;
          break;
        }
        res = res << 6 | nextChar & 63;
        i++;
      }
      if (res === null) {
        continue;
      }
      if (res > 1114111) {
        i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res >= 55296 && res <= 57343) {
        i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes2, result, res);
        continue;
      }
      if (res <= overlongMask) {
        i += onError("OVERLONG", i - 1 - extraLength, bytes2, result, res);
        continue;
      }
      result.push(res);
    }
    return result;
  }
  function toUtf8String(bytes2) {
    return helper(getUtf8CodePoints(bytes2));
  }
  function assertUnreachable(_x) {
    throw new Error("Didn't expect to get here");
  }

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_assert.js
  function number(n) {
    if (!Number.isSafeInteger(n) || n < 0)
      throw new Error(`positive integer expected, not ${n}`);
  }
  function isBytes(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function bytes(b, ...lengths) {
    if (!isBytes(b))
      throw new Error("Uint8Array expected");
    if (lengths.length > 0 && !lengths.includes(b.length))
      throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
  }
  function hash(h) {
    if (typeof h !== "function" || typeof h.create !== "function")
      throw new Error("Hash should be wrapped by utils.wrapConstructor");
    number(h.outputLen);
    number(h.blockLen);
  }
  function exists(instance, checkFinished = true) {
    if (instance.destroyed)
      throw new Error("Hash instance has been destroyed");
    if (checkFinished && instance.finished)
      throw new Error("Hash#digest() has already been called");
  }
  function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
      throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
  }

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/cryptoNode.js
  var nc = __toESM(__require("crypto"), 1);
  var crypto = nc && typeof nc === "object" && "webcrypto" in nc ? nc.webcrypto : nc && typeof nc === "object" && "randomBytes" in nc ? nc : void 0;

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/utils.js
  var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
  var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  var rotr = (word, shift) => word << 32 - shift | word >>> shift;
  var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
  var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  var byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
  function byteSwap32(arr) {
    for (let i = 0; i < arr.length; i++) {
      arr[i] = byteSwap(arr[i]);
    }
  }
  function utf8ToBytes(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  function toBytes2(data) {
    if (typeof data === "string")
      data = utf8ToBytes(data);
    bytes(data);
    return data;
  }
  function concatBytes2(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      bytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  var Hash = class {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  };
  var toStr = {}.toString;
  function checkOpts(defaults, opts) {
    if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    const merged = Object.assign(defaults, opts);
    return merged;
  }
  function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
  }
  function wrapXOFConstructorWithOpts(hashCons) {
    const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
    const tmp = hashCons({});
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = (opts) => hashCons(opts);
    return hashC;
  }
  function randomBytes(bytesLength = 32) {
    if (crypto && typeof crypto.getRandomValues === "function") {
      return crypto.getRandomValues(new Uint8Array(bytesLength));
    }
    if (crypto && typeof crypto.randomBytes === "function") {
      return crypto.randomBytes(bytesLength);
    }
    throw new Error("crypto.getRandomValues must be defined");
  }

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_md.js
  function setBigUint64(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === "function")
      return view.setBigUint64(byteOffset, value, isLE2);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number(value >> _32n2 & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE2 ? 4 : 0;
    const l = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE2);
    view.setUint32(byteOffset + l, wl, isLE2);
  }
  var Chi = (a, b, c) => a & b ^ ~a & c;
  var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
  var HashMD = class extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
      super();
      this.blockLen = blockLen;
      this.outputLen = outputLen;
      this.padOffset = padOffset;
      this.isLE = isLE2;
      this.finished = false;
      this.length = 0;
      this.pos = 0;
      this.destroyed = false;
      this.buffer = new Uint8Array(blockLen);
      this.view = createView(this.buffer);
    }
    update(data) {
      exists(this);
      const { view, buffer, blockLen } = this;
      data = toBytes2(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        if (take === blockLen) {
          const dataView = createView(data);
          for (; blockLen <= len - pos; pos += blockLen)
            this.process(dataView, pos);
          continue;
        }
        buffer.set(data.subarray(pos, pos + take), this.pos);
        this.pos += take;
        pos += take;
        if (this.pos === blockLen) {
          this.process(view, 0);
          this.pos = 0;
        }
      }
      this.length += data.length;
      this.roundClean();
      return this;
    }
    digestInto(out) {
      exists(this);
      output(out, this);
      this.finished = true;
      const { buffer, view, blockLen, isLE: isLE2 } = this;
      let { pos } = this;
      buffer[pos++] = 128;
      this.buffer.subarray(pos).fill(0);
      if (this.padOffset > blockLen - pos) {
        this.process(view, 0);
        pos = 0;
      }
      for (let i = pos; i < blockLen; i++)
        buffer[i] = 0;
      setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
      this.process(view, 0);
      const oview = createView(out);
      const len = this.outputLen;
      if (len % 4)
        throw new Error("_sha2: outputLen should be aligned to 32bit");
      const outLen = len / 4;
      const state = this.get();
      if (outLen > state.length)
        throw new Error("_sha2: outputLen bigger than state");
      for (let i = 0; i < outLen; i++)
        oview.setUint32(4 * i, state[i], isLE2);
    }
    digest() {
      const { buffer, outputLen } = this;
      this.digestInto(buffer);
      const res = buffer.slice(0, outputLen);
      this.destroy();
      return res;
    }
    _cloneInto(to) {
      to || (to = new this.constructor());
      to.set(...this.get());
      const { blockLen, buffer, length, finished, destroyed, pos } = this;
      to.length = length;
      to.pos = pos;
      to.finished = finished;
      to.destroyed = destroyed;
      if (length % blockLen)
        to.buffer.set(buffer);
      return to;
    }
  };

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha256.js
  var SHA256_K = /* @__PURE__ */ new Uint32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  var SHA256_IV = /* @__PURE__ */ new Uint32Array([
    1779033703,
    3144134277,
    1013904242,
    2773480762,
    1359893119,
    2600822924,
    528734635,
    1541459225
  ]);
  var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
  var SHA256 = class extends HashMD {
    constructor() {
      super(64, 32, 8, false);
      this.A = SHA256_IV[0] | 0;
      this.B = SHA256_IV[1] | 0;
      this.C = SHA256_IV[2] | 0;
      this.D = SHA256_IV[3] | 0;
      this.E = SHA256_IV[4] | 0;
      this.F = SHA256_IV[5] | 0;
      this.G = SHA256_IV[6] | 0;
      this.H = SHA256_IV[7] | 0;
    }
    get() {
      const { A, B, C, D, E, F, G, H } = this;
      return [A, B, C, D, E, F, G, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G, H) {
      this.A = A | 0;
      this.B = B | 0;
      this.C = C | 0;
      this.D = D | 0;
      this.E = E | 0;
      this.F = F | 0;
      this.G = G | 0;
      this.H = H | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        SHA256_W[i] = view.getUint32(offset, false);
      for (let i = 16; i < 64; i++) {
        const W15 = SHA256_W[i - 15];
        const W2 = SHA256_W[i - 2];
        const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
        const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
        SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
      }
      let { A, B, C, D, E, F, G, H } = this;
      for (let i = 0; i < 64; i++) {
        const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
        const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
        const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
        const T2 = sigma0 + Maj(A, B, C) | 0;
        H = G;
        G = F;
        F = E;
        E = D + T1 | 0;
        D = C;
        C = B;
        B = A;
        A = T1 + T2 | 0;
      }
      A = A + this.A | 0;
      B = B + this.B | 0;
      C = C + this.C | 0;
      D = D + this.D | 0;
      E = E + this.E | 0;
      F = F + this.F | 0;
      G = G + this.G | 0;
      H = H + this.H | 0;
      this.set(A, B, C, D, E, F, G, H);
    }
    roundClean() {
      SHA256_W.fill(0);
    }
    destroy() {
      this.set(0, 0, 0, 0, 0, 0, 0, 0);
      this.buffer.fill(0);
    }
  };
  var sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/hmac.js
  var HMAC = class extends Hash {
    constructor(hash3, _key) {
      super();
      this.finished = false;
      this.destroyed = false;
      hash(hash3);
      const key = toBytes2(_key);
      this.iHash = hash3.create();
      if (typeof this.iHash.update !== "function")
        throw new Error("Expected instance of class which extends utils.Hash");
      this.blockLen = this.iHash.blockLen;
      this.outputLen = this.iHash.outputLen;
      const blockLen = this.blockLen;
      const pad = new Uint8Array(blockLen);
      pad.set(key.length > blockLen ? hash3.create().update(key).digest() : key);
      for (let i = 0; i < pad.length; i++)
        pad[i] ^= 54;
      this.iHash.update(pad);
      this.oHash = hash3.create();
      for (let i = 0; i < pad.length; i++)
        pad[i] ^= 54 ^ 92;
      this.oHash.update(pad);
      pad.fill(0);
    }
    update(buf) {
      exists(this);
      this.iHash.update(buf);
      return this;
    }
    digestInto(out) {
      exists(this);
      bytes(out, this.outputLen);
      this.finished = true;
      this.iHash.digestInto(out);
      this.oHash.update(out);
      this.oHash.digestInto(out);
      this.destroy();
    }
    digest() {
      const out = new Uint8Array(this.oHash.outputLen);
      this.digestInto(out);
      return out;
    }
    _cloneInto(to) {
      to || (to = Object.create(Object.getPrototypeOf(this), {}));
      const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
      to = to;
      to.finished = finished;
      to.destroyed = destroyed;
      to.blockLen = blockLen;
      to.outputLen = outputLen;
      to.oHash = oHash._cloneInto(to.oHash);
      to.iHash = iHash._cloneInto(to.iHash);
      return to;
    }
    destroy() {
      this.destroyed = true;
      this.oHash.destroy();
      this.iHash.destroy();
    }
  };
  var hmac = (hash3, key, message) => new HMAC(hash3, key).update(message).digest();
  hmac.create = (hash3, key) => new HMAC(hash3, key);

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/pbkdf2.js
  function pbkdf2Init(hash3, _password, _salt, _opts) {
    hash(hash3);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    number(c);
    number(dkLen);
    number(asyncTick);
    if (c < 1)
      throw new Error("PBKDF2: iterations (c) should be >= 1");
    const password = toBytes2(_password);
    const salt = toBytes2(_salt);
    const DK = new Uint8Array(dkLen);
    const PRF = hmac.create(hash3, password);
    const PRFSalt = PRF._cloneInto().update(salt);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
  }
  function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW)
      prfW.destroy();
    u.fill(0);
    return DK;
  }
  function pbkdf2(hash3, password, salt, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash3, password, salt, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
      const Ti = DK.subarray(pos, pos + PRF.outputLen);
      view.setInt32(0, ti, false);
      (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
      Ti.set(u.subarray(0, Ti.length));
      for (let ui = 1; ui < c; ui++) {
        PRF._cloneInto(prfW).update(u).digestInto(u);
        for (let i = 0; i < Ti.length; i++)
          Ti[i] ^= u[i];
      }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
  }

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/scrypt.js
  function XorAndSalsa(prev, pi, input, ii, out, oi) {
    let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
    let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
    let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
    let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
    let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
    let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
    let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
    let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
    let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
    for (let i = 0; i < 8; i += 2) {
      x04 ^= rotl(x00 + x12 | 0, 7);
      x08 ^= rotl(x04 + x00 | 0, 9);
      x12 ^= rotl(x08 + x04 | 0, 13);
      x00 ^= rotl(x12 + x08 | 0, 18);
      x09 ^= rotl(x05 + x01 | 0, 7);
      x13 ^= rotl(x09 + x05 | 0, 9);
      x01 ^= rotl(x13 + x09 | 0, 13);
      x05 ^= rotl(x01 + x13 | 0, 18);
      x14 ^= rotl(x10 + x06 | 0, 7);
      x02 ^= rotl(x14 + x10 | 0, 9);
      x06 ^= rotl(x02 + x14 | 0, 13);
      x10 ^= rotl(x06 + x02 | 0, 18);
      x03 ^= rotl(x15 + x11 | 0, 7);
      x07 ^= rotl(x03 + x15 | 0, 9);
      x11 ^= rotl(x07 + x03 | 0, 13);
      x15 ^= rotl(x11 + x07 | 0, 18);
      x01 ^= rotl(x00 + x03 | 0, 7);
      x02 ^= rotl(x01 + x00 | 0, 9);
      x03 ^= rotl(x02 + x01 | 0, 13);
      x00 ^= rotl(x03 + x02 | 0, 18);
      x06 ^= rotl(x05 + x04 | 0, 7);
      x07 ^= rotl(x06 + x05 | 0, 9);
      x04 ^= rotl(x07 + x06 | 0, 13);
      x05 ^= rotl(x04 + x07 | 0, 18);
      x11 ^= rotl(x10 + x09 | 0, 7);
      x08 ^= rotl(x11 + x10 | 0, 9);
      x09 ^= rotl(x08 + x11 | 0, 13);
      x10 ^= rotl(x09 + x08 | 0, 18);
      x12 ^= rotl(x15 + x14 | 0, 7);
      x13 ^= rotl(x12 + x15 | 0, 9);
      x14 ^= rotl(x13 + x12 | 0, 13);
      x15 ^= rotl(x14 + x13 | 0, 18);
    }
    out[oi++] = y00 + x00 | 0;
    out[oi++] = y01 + x01 | 0;
    out[oi++] = y02 + x02 | 0;
    out[oi++] = y03 + x03 | 0;
    out[oi++] = y04 + x04 | 0;
    out[oi++] = y05 + x05 | 0;
    out[oi++] = y06 + x06 | 0;
    out[oi++] = y07 + x07 | 0;
    out[oi++] = y08 + x08 | 0;
    out[oi++] = y09 + x09 | 0;
    out[oi++] = y10 + x10 | 0;
    out[oi++] = y11 + x11 | 0;
    out[oi++] = y12 + x12 | 0;
    out[oi++] = y13 + x13 | 0;
    out[oi++] = y14 + x14 | 0;
    out[oi++] = y15 + x15 | 0;
  }
  function BlockMix(input, ii, out, oi, r) {
    let head = oi + 0;
    let tail = oi + 16 * r;
    for (let i = 0; i < 16; i++)
      out[tail + i] = input[ii + (2 * r - 1) * 16 + i];
    for (let i = 0; i < r; i++, head += 16, ii += 16) {
      XorAndSalsa(out, tail, input, ii, out, head);
      if (i > 0)
        tail += 16;
      XorAndSalsa(out, head, input, ii += 16, out, tail);
    }
  }
  function scryptInit(password, salt, _opts) {
    const opts = checkOpts({
      dkLen: 32,
      asyncTick: 10,
      maxmem: 1024 ** 3 + 1024
    }, _opts);
    const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;
    number(N);
    number(r);
    number(p);
    number(dkLen);
    number(asyncTick);
    number(maxmem);
    if (onProgress !== void 0 && typeof onProgress !== "function")
      throw new Error("progressCb should be function");
    const blockSize = 128 * r;
    const blockSize32 = blockSize / 4;
    if (N <= 1 || (N & N - 1) !== 0 || N > 2 ** 32) {
      throw new Error("Scrypt: N must be larger than 1, a power of 2, and less than 2^32");
    }
    if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
      throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
    }
    if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
      throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
    }
    const memUsed = blockSize * (N + p);
    if (memUsed > maxmem) {
      throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
    }
    const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
    const B32 = u32(B);
    const V = u32(new Uint8Array(blockSize * N));
    const tmp = u32(new Uint8Array(blockSize));
    let blockMixCb = () => {
    };
    if (onProgress) {
      const totalBlockMix = 2 * N * p;
      const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
      let blockMixCnt = 0;
      blockMixCb = () => {
        blockMixCnt++;
        if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
          onProgress(blockMixCnt / totalBlockMix);
      };
    }
    return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
  }
  function scryptOutput(password, dkLen, B, V, tmp) {
    const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
    B.fill(0);
    V.fill(0);
    tmp.fill(0);
    return res;
  }
  function scrypt(password, salt, opts) {
    const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
    if (!isLE)
      byteSwap32(B32);
    for (let pi = 0; pi < p; pi++) {
      const Pi2 = blockSize32 * pi;
      for (let i = 0; i < blockSize32; i++)
        V[i] = B32[Pi2 + i];
      for (let i = 0, pos = 0; i < N - 1; i++) {
        BlockMix(V, pos, V, pos += blockSize32, r);
        blockMixCb();
      }
      BlockMix(V, (N - 1) * blockSize32, B32, Pi2, r);
      blockMixCb();
      for (let i = 0; i < N; i++) {
        const j = B32[Pi2 + blockSize32 - 16] % N;
        for (let k = 0; k < blockSize32; k++)
          tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
        BlockMix(tmp, 0, B32, Pi2, r);
        blockMixCb();
      }
    }
    if (!isLE)
      byteSwap32(B32);
    return scryptOutput(password, dkLen, B, V, tmp);
  }

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/_u64.js
  var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
  var _32n = /* @__PURE__ */ BigInt(32);
  function fromBig(n, le = false) {
    if (le)
      return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
    return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
  }
  function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
      const { h, l } = fromBig(lst[i], le);
      [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
  }
  var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
  var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
  var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
  var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/sha3.js
  var SHA3_PI = [];
  var SHA3_ROTL = [];
  var _SHA3_IOTA = [];
  var _0n = /* @__PURE__ */ BigInt(0);
  var _1n = /* @__PURE__ */ BigInt(1);
  var _2n = /* @__PURE__ */ BigInt(2);
  var _7n = /* @__PURE__ */ BigInt(7);
  var _256n = /* @__PURE__ */ BigInt(256);
  var _0x71n = /* @__PURE__ */ BigInt(113);
  for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
    [x, y] = [y, (2 * x + 3 * y) % 5];
    SHA3_PI.push(2 * (5 * y + x));
    SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
    let t = _0n;
    for (let j = 0; j < 7; j++) {
      R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
      if (R & _2n)
        t ^= _1n << (_1n << /* @__PURE__ */ BigInt(j)) - _1n;
    }
    _SHA3_IOTA.push(t);
  }
  var [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
  var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
  var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
  function keccakP(s, rounds = 24) {
    const B = new Uint32Array(5 * 2);
    for (let round = 24 - rounds; round < 24; round++) {
      for (let x = 0; x < 10; x++)
        B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
      for (let x = 0; x < 10; x += 2) {
        const idx1 = (x + 8) % 10;
        const idx0 = (x + 2) % 10;
        const B0 = B[idx0];
        const B1 = B[idx0 + 1];
        const Th = rotlH(B0, B1, 1) ^ B[idx1];
        const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
        for (let y = 0; y < 50; y += 10) {
          s[x + y] ^= Th;
          s[x + y + 1] ^= Tl;
        }
      }
      let curH = s[2];
      let curL = s[3];
      for (let t = 0; t < 24; t++) {
        const shift = SHA3_ROTL[t];
        const Th = rotlH(curH, curL, shift);
        const Tl = rotlL(curH, curL, shift);
        const PI = SHA3_PI[t];
        curH = s[PI];
        curL = s[PI + 1];
        s[PI] = Th;
        s[PI + 1] = Tl;
      }
      for (let y = 0; y < 50; y += 10) {
        for (let x = 0; x < 10; x++)
          B[x] = s[y + x];
        for (let x = 0; x < 10; x++)
          s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
      }
      s[0] ^= SHA3_IOTA_H[round];
      s[1] ^= SHA3_IOTA_L[round];
    }
    B.fill(0);
  }
  var Keccak = class extends Hash {
    // NOTE: we accept arguments in bytes instead of bits here.
    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
      super();
      this.blockLen = blockLen;
      this.suffix = suffix;
      this.outputLen = outputLen;
      this.enableXOF = enableXOF;
      this.rounds = rounds;
      this.pos = 0;
      this.posOut = 0;
      this.finished = false;
      this.destroyed = false;
      number(outputLen);
      if (0 >= this.blockLen || this.blockLen >= 200)
        throw new Error("Sha3 supports only keccak-f1600 function");
      this.state = new Uint8Array(200);
      this.state32 = u32(this.state);
    }
    keccak() {
      if (!isLE)
        byteSwap32(this.state32);
      keccakP(this.state32, this.rounds);
      if (!isLE)
        byteSwap32(this.state32);
      this.posOut = 0;
      this.pos = 0;
    }
    update(data) {
      exists(this);
      const { blockLen, state } = this;
      data = toBytes2(data);
      const len = data.length;
      for (let pos = 0; pos < len; ) {
        const take = Math.min(blockLen - this.pos, len - pos);
        for (let i = 0; i < take; i++)
          state[this.pos++] ^= data[pos++];
        if (this.pos === blockLen)
          this.keccak();
      }
      return this;
    }
    finish() {
      if (this.finished)
        return;
      this.finished = true;
      const { state, suffix, pos, blockLen } = this;
      state[pos] ^= suffix;
      if ((suffix & 128) !== 0 && pos === blockLen - 1)
        this.keccak();
      state[blockLen - 1] ^= 128;
      this.keccak();
    }
    writeInto(out) {
      exists(this, false);
      bytes(out);
      this.finish();
      const bufferOut = this.state;
      const { blockLen } = this;
      for (let pos = 0, len = out.length; pos < len; ) {
        if (this.posOut >= blockLen)
          this.keccak();
        const take = Math.min(blockLen - this.posOut, len - pos);
        out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
        this.posOut += take;
        pos += take;
      }
      return out;
    }
    xofInto(out) {
      if (!this.enableXOF)
        throw new Error("XOF is not possible for this instance");
      return this.writeInto(out);
    }
    xof(bytes2) {
      number(bytes2);
      return this.xofInto(new Uint8Array(bytes2));
    }
    digestInto(out) {
      output(out, this);
      if (this.finished)
        throw new Error("digest() was already called");
      this.writeInto(out);
      this.destroy();
      return out;
    }
    digest() {
      return this.digestInto(new Uint8Array(this.outputLen));
    }
    destroy() {
      this.destroyed = true;
      this.state.fill(0);
    }
    _cloneInto(to) {
      const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
      to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
      to.state32.set(this.state32);
      to.pos = this.pos;
      to.posOut = this.posOut;
      to.finished = this.finished;
      to.rounds = rounds;
      to.suffix = suffix;
      to.outputLen = outputLen;
      to.enableXOF = enableXOF;
      to.destroyed = this.destroyed;
      return to;
    }
  };
  var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
  var sha3_224 = /* @__PURE__ */ gen(6, 144, 224 / 8);
  var sha3_256 = /* @__PURE__ */ gen(6, 136, 256 / 8);
  var sha3_384 = /* @__PURE__ */ gen(6, 104, 384 / 8);
  var sha3_512 = /* @__PURE__ */ gen(6, 72, 512 / 8);
  var keccak_224 = /* @__PURE__ */ gen(1, 144, 224 / 8);
  var keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
  var keccak_384 = /* @__PURE__ */ gen(1, 104, 384 / 8);
  var keccak_512 = /* @__PURE__ */ gen(1, 72, 512 / 8);
  var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
  var shake128 = /* @__PURE__ */ genShake(31, 168, 128 / 8);
  var shake256 = /* @__PURE__ */ genShake(31, 136, 256 / 8);

  // ../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/esm/ripemd160.js
  var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
  var Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));
  var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
  var idxL = [Id];
  var idxR = [Pi];
  for (let i = 0; i < 4; i++)
    for (let j of [idxL, idxR])
      j.push(j[i].map((k) => Rho[k]));
  var shifts = /* @__PURE__ */ [
    [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
    [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
    [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
    [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
    [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
  ].map((i) => new Uint8Array(i));
  var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
  var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
  var Kl = /* @__PURE__ */ new Uint32Array([
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
  ]);
  var Kr = /* @__PURE__ */ new Uint32Array([
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
  ]);
  function f(group, x, y, z) {
    if (group === 0)
      return x ^ y ^ z;
    else if (group === 1)
      return x & y | ~x & z;
    else if (group === 2)
      return (x | ~y) ^ z;
    else if (group === 3)
      return x & z | y & ~z;
    else
      return x ^ (y | ~z);
  }
  var R_BUF = /* @__PURE__ */ new Uint32Array(16);
  var RIPEMD160 = class extends HashMD {
    constructor() {
      super(64, 20, 8, true);
      this.h0 = 1732584193 | 0;
      this.h1 = 4023233417 | 0;
      this.h2 = 2562383102 | 0;
      this.h3 = 271733878 | 0;
      this.h4 = 3285377520 | 0;
    }
    get() {
      const { h0, h1, h2, h3, h4 } = this;
      return [h0, h1, h2, h3, h4];
    }
    set(h0, h1, h2, h3, h4) {
      this.h0 = h0 | 0;
      this.h1 = h1 | 0;
      this.h2 = h2 | 0;
      this.h3 = h3 | 0;
      this.h4 = h4 | 0;
    }
    process(view, offset) {
      for (let i = 0; i < 16; i++, offset += 4)
        R_BUF[i] = view.getUint32(offset, true);
      let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
      for (let group = 0; group < 5; group++) {
        const rGroup = 4 - group;
        const hbl = Kl[group], hbr = Kr[group];
        const rl = idxL[group], rr = idxR[group];
        const sl = shiftsL[group], sr = shiftsR[group];
        for (let i = 0; i < 16; i++) {
          const tl = rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el | 0;
          al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
        }
        for (let i = 0; i < 16; i++) {
          const tr2 = rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er | 0;
          ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr2;
        }
      }
      this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
    }
    roundClean() {
      R_BUF.fill(0);
    }
    destroy() {
      this.destroyed = true;
      this.buffer.fill(0);
      this.set(0, 0, 0, 0, 0);
    }
  };
  var ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());

  // ../crypto/dist/index.mjs
  var import_crypto2 = __toESM(__require("crypto"), 1);
  var import_crypto3 = __require("crypto");
  var import_crypto4 = __toESM(__require("crypto"), 1);
  var import_crypto5 = __toESM(__require("crypto"), 1);
  var import_crypto6 = __require("crypto");
  var import_crypto7 = __require("crypto");
  var scrypt2 = (params) => {
    const { password, salt, n, p, r, dklen } = params;
    const derivedKey = scrypt(password, salt, { N: n, r, p, dkLen: dklen });
    return derivedKey;
  };
  var keccak256 = (data) => keccak_256(data);
  function ripemd1602(_data) {
    const data = arrayify(_data, "data");
    return ripemd160(data);
  }
  var bufferFromString = (string, encoding = "base64") => Uint8Array.from(Buffer.from(string, encoding));
  function pbkdf22(_password, _salt, iterations, keylen, algo) {
    const password = arrayify(_password, "password");
    const salt = arrayify(_salt, "salt");
    return hexlify((0, import_crypto3.pbkdf2Sync)(password, salt, iterations, keylen, algo));
  }
  var randomBytes2 = (length) => {
    const randomValues = Uint8Array.from(import_crypto4.default.randomBytes(length));
    return randomValues;
  };
  var stringFromBuffer = (buffer, encoding = "base64") => Buffer.from(buffer).toString(encoding);
  var ALGORITHM = "aes-256-ctr";
  var keyFromPassword = (password, saltBuffer) => {
    const passBuffer = bufferFromString(String(password).normalize("NFKC"), "utf-8");
    const key = pbkdf22(passBuffer, saltBuffer, 1e5, 32, "sha256");
    return arrayify(key);
  };
  var encrypt = async (password, data) => {
    const iv = randomBytes2(16);
    const salt = randomBytes2(32);
    const secret = keyFromPassword(password, salt);
    const dataBuffer = Uint8Array.from(Buffer.from(JSON.stringify(data), "utf-8"));
    const cipher = await import_crypto2.default.createCipheriv(ALGORITHM, secret, iv);
    let cipherData = cipher.update(dataBuffer);
    cipherData = Buffer.concat([cipherData, cipher.final()]);
    return {
      data: stringFromBuffer(cipherData),
      iv: stringFromBuffer(iv),
      salt: stringFromBuffer(salt)
    };
  };
  var decrypt = async (password, keystore) => {
    const iv = bufferFromString(keystore.iv);
    const salt = bufferFromString(keystore.salt);
    const secret = keyFromPassword(password, salt);
    const encryptedText = bufferFromString(keystore.data);
    const decipher = await import_crypto2.default.createDecipheriv(ALGORITHM, secret, iv);
    const decrypted = decipher.update(encryptedText);
    const deBuff = Buffer.concat([decrypted, decipher.final()]);
    const decryptedData = Buffer.from(deBuff).toString("utf-8");
    try {
      return JSON.parse(decryptedData);
    } catch {
      throw new FuelError(ErrorCode.INVALID_CREDENTIALS, "Invalid credentials.");
    }
  };
  async function encryptJsonWalletData(data, key, iv) {
    const cipher = await import_crypto5.default.createCipheriv("aes-128-ctr", key.subarray(0, 16), iv);
    const encrypted = Buffer.concat([cipher.update(data), cipher.final()]);
    return new Uint8Array(encrypted);
  }
  async function decryptJsonWalletData(data, key, iv) {
    const decipher = import_crypto5.default.createDecipheriv("aes-128-ctr", key.subarray(0, 16), iv);
    const decrypted = await Buffer.concat([decipher.update(data), decipher.final()]);
    return new Uint8Array(decrypted);
  }
  function computeHmac(algorithm, _key, _data) {
    const key = arrayify(_key, "key");
    const data = arrayify(_data, "data");
    return hexlify((0, import_crypto6.createHmac)(algorithm, key).update(data).digest());
  }
  var randomUUID = () => (0, import_crypto7.randomUUID)();
  var api = {
    bufferFromString,
    stringFromBuffer,
    decrypt,
    encrypt,
    keyFromPassword,
    randomBytes: randomBytes2,
    scrypt: scrypt2,
    keccak256,
    decryptJsonWalletData,
    encryptJsonWalletData,
    computeHmac,
    pbkdf2: pbkdf22,
    ripemd160: ripemd1602,
    randomUUID
  };
  var node_default = api;
  var {
    bufferFromString: bufferFromString2,
    decrypt: decrypt2,
    encrypt: encrypt2,
    keyFromPassword: keyFromPassword2,
    randomBytes: randomBytes22,
    stringFromBuffer: stringFromBuffer2,
    scrypt: scrypt22,
    keccak256: keccak2562,
    decryptJsonWalletData: decryptJsonWalletData2,
    encryptJsonWalletData: encryptJsonWalletData2,
    computeHmac: computeHmac2,
    pbkdf2: pbkdf222,
    ripemd160: ripemd16022,
    randomUUID: randomUUID2
  } = node_default;

  // ../hasher/dist/index.mjs
  function sha2562(data) {
    return hexlify(sha256(arrayify(data)));
  }
  function hash2(data) {
    return sha2562(data);
  }
  function uint64ToBytesBE(value) {
    const bigIntValue = BigInt(value);
    const buffer = new ArrayBuffer(8);
    const dataView = new DataView(buffer);
    dataView.setBigUint64(0, bigIntValue, false);
    return new Uint8Array(dataView.buffer);
  }
  function hashMessage(msg) {
    return hash2(bufferFromString2(msg, "utf-8"));
  }

  // ../abi-coder/dist/index.mjs
  var __defProp4 = Object.defineProperty;
  var __defNormalProp3 = (obj, key, value) => key in obj ? __defProp4(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField3 = (obj, key, value) => {
    __defNormalProp3(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var Coder = class {
    name;
    type;
    encodedLength;
    constructor(name, type3, encodedLength) {
      this.name = name;
      this.type = type3;
      this.encodedLength = encodedLength;
    }
  };
  var U8_CODER_TYPE = "u8";
  var U16_CODER_TYPE = "u16";
  var U32_CODER_TYPE = "u32";
  var U64_CODER_TYPE = "u64";
  var U256_CODER_TYPE = "u256";
  var RAW_PTR_CODER_TYPE = "raw untyped ptr";
  var RAW_SLICE_CODER_TYPE = "raw untyped slice";
  var BOOL_CODER_TYPE = "bool";
  var B256_CODER_TYPE = "b256";
  var B512_CODER_TYPE = "struct std::b512::B512";
  var OPTION_CODER_TYPE = "enum std::option::Option";
  var VEC_CODER_TYPE = "struct std::vec::Vec";
  var BYTES_CODER_TYPE = "struct std::bytes::Bytes";
  var STD_STRING_CODER_TYPE = "struct std::string::String";
  var STR_SLICE_CODER_TYPE = "str";
  var VOID_TYPE = "()";
  var optionRegEx = /^enum (std::option::)?Option$/m;
  var stringRegEx = /^str\[(?<length>[0-9]+)\]/;
  var arrayRegEx = /^\[(?<item>[\w\s\\[\]]+);\s*(?<length>[0-9]+)\]/;
  var structRegEx = /^struct.+/;
  var enumRegEx = /^enum.+$/;
  var tupleRegEx = /^\((?<items>.*)\)$/;
  var genericRegEx = /^generic.+$/;
  var fullNameRegExMatch = /([^\s]+)$/m;
  var ENCODING_V1 = "1";
  var WORD_SIZE = 8;
  var BYTES_32 = 32;
  var UTXO_ID_LEN = BYTES_32 + 2;
  var ASSET_ID_LEN = BYTES_32;
  var CONTRACT_ID_LEN = BYTES_32;
  var ADDRESS_LEN = BYTES_32;
  var NONCE_LEN = BYTES_32;
  var TX_LEN = WORD_SIZE * 4;
  var TX_POINTER_LEN = WORD_SIZE * 2;
  var MAX_BYTES = 2 ** 32 - 1;
  var SCRIPT_FIXED_SIZE = WORD_SIZE + // Identifier
  WORD_SIZE + // Gas limit
  WORD_SIZE + // Script size
  WORD_SIZE + // Script data size
  WORD_SIZE + // Policies
  WORD_SIZE + // Inputs size
  WORD_SIZE + // Outputs size
  WORD_SIZE + // Witnesses size
  BYTES_32;
  var INPUT_COIN_FIXED_SIZE = WORD_SIZE + // Identifier
  TX_LEN + // Utxo Length
  WORD_SIZE + // Output Index
  ADDRESS_LEN + // Owner
  WORD_SIZE + // Amount
  ASSET_ID_LEN + // Asset id
  TX_POINTER_LEN + // TxPointer
  WORD_SIZE + // Witnesses index
  WORD_SIZE + // Predicate size
  WORD_SIZE + // Predicate data size
  WORD_SIZE;
  var INPUT_MESSAGE_FIXED_SIZE = WORD_SIZE + // Identifier
  ADDRESS_LEN + // Sender
  ADDRESS_LEN + // Recipient
  WORD_SIZE + // Amount
  NONCE_LEN + // Nonce
  WORD_SIZE + // witness_index
  WORD_SIZE + // Data size
  WORD_SIZE + // Predicate size
  WORD_SIZE + // Predicate data size
  WORD_SIZE;
  var isUint8Array = (value) => value instanceof Uint8Array;
  var hasNestedOption = (coders) => {
    const array = Array.isArray(coders) ? coders : Object.values(coders);
    for (const node of array) {
      if (node.type === OPTION_CODER_TYPE) {
        return true;
      }
      if ("coder" in node && node.coder.type === OPTION_CODER_TYPE) {
        return true;
      }
      if ("coders" in node) {
        const child = hasNestedOption(node.coders);
        if (child) {
          return true;
        }
      }
    }
    return false;
  };
  var ArrayCoder = class extends Coder {
    coder;
    length;
    #hasNestedOption;
    constructor(coder, length) {
      super("array", `[${coder.type}; ${length}]`, length * coder.encodedLength);
      this.coder = coder;
      this.length = length;
      this.#hasNestedOption = hasNestedOption([coder]);
    }
    encode(value) {
      if (!Array.isArray(value)) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);
      }
      if (this.length !== value.length) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);
      }
      return concat(Array.from(value).map((v) => this.coder.encode(v)));
    }
    decode(data, offset) {
      if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid array data size.`);
      }
      let newOffset = offset;
      const decodedValue = Array(this.length).fill(0).map(() => {
        let decoded;
        [decoded, newOffset] = this.coder.decode(data, newOffset);
        return decoded;
      });
      return [decodedValue, newOffset];
    }
  };
  var B256Coder = class extends Coder {
    constructor() {
      super("b256", "b256", WORD_SIZE * 4);
    }
    encode(value) {
      let encodedValue;
      try {
        encodedValue = arrayify(value);
      } catch (error2) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
      }
      if (encodedValue.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
      }
      return encodedValue;
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 data size.`);
      }
      let bytes2 = data.slice(offset, offset + this.encodedLength);
      const decoded = bn(bytes2);
      if (decoded.isZero()) {
        bytes2 = new Uint8Array(32);
      }
      if (bytes2.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 byte data size.`);
      }
      return [toHex(bytes2, 32), offset + 32];
    }
  };
  var B512Coder = class extends Coder {
    constructor() {
      super("b512", "struct B512", WORD_SIZE * 8);
    }
    encode(value) {
      let encodedValue;
      try {
        encodedValue = arrayify(value);
      } catch (error2) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
      }
      if (encodedValue.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
      }
      return encodedValue;
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 data size.`);
      }
      let bytes2 = data.slice(offset, offset + this.encodedLength);
      const decoded = bn(bytes2);
      if (decoded.isZero()) {
        bytes2 = new Uint8Array(64);
      }
      if (bytes2.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 byte data size.`);
      }
      return [toHex(bytes2, this.encodedLength), offset + this.encodedLength];
    }
  };
  var encodedLengths = {
    u64: WORD_SIZE,
    u256: WORD_SIZE * 4
  };
  var BigNumberCoder = class extends Coder {
    constructor(baseType) {
      super("bigNumber", baseType, encodedLengths[baseType]);
    }
    encode(value) {
      let bytes2;
      if (typeof value === "number" && value > Number.MAX_SAFE_INTEGER) {
        throw new FuelError(
          ErrorCode.ENCODE_ERROR,
          `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`
        );
      }
      try {
        bytes2 = toBytes(value, this.encodedLength);
      } catch (error2) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);
      }
      return bytes2;
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} data size.`);
      }
      let bytes2 = data.slice(offset, offset + this.encodedLength);
      bytes2 = bytes2.slice(0, this.encodedLength);
      if (bytes2.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} byte data size.`);
      }
      return [bn(bytes2), offset + this.encodedLength];
    }
  };
  var BooleanCoder = class extends Coder {
    options;
    constructor(options = {
      padToWordSize: false
    }) {
      const encodedLength = options.padToWordSize ? WORD_SIZE : 1;
      super("boolean", "boolean", encodedLength);
      this.options = options;
    }
    encode(value) {
      const isTrueBool = value === true || value === false;
      if (!isTrueBool) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid boolean value.`);
      }
      return toBytes(value ? 1 : 0, this.encodedLength);
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean data size.`);
      }
      const bytes2 = bn(data.slice(offset, offset + this.encodedLength));
      if (bytes2.isZero()) {
        return [false, offset + this.encodedLength];
      }
      if (!bytes2.eq(bn(1))) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean value.`);
      }
      return [true, offset + this.encodedLength];
    }
  };
  var ByteCoder = class extends Coder {
    constructor() {
      super("struct", "struct Bytes", WORD_SIZE);
    }
    encode(value) {
      const bytes2 = value instanceof Uint8Array ? value : new Uint8Array(value);
      const lengthBytes = new BigNumberCoder("u64").encode(bytes2.length);
      return new Uint8Array([...lengthBytes, ...bytes2]);
    }
    decode(data, offset) {
      if (data.length < WORD_SIZE) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid byte data size.`);
      }
      const offsetAndLength = offset + WORD_SIZE;
      const lengthBytes = data.slice(offset, offsetAndLength);
      const length = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
      const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);
      if (dataBytes.length !== length) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid bytes byte data size.`);
      }
      return [dataBytes, offsetAndLength + length];
    }
  };
  __publicField3(ByteCoder, "memorySize", 1);
  var EnumCoder = class extends Coder {
    name;
    coders;
    #caseIndexCoder;
    #encodedValueSize;
    #shouldValidateLength;
    constructor(name, coders) {
      const caseIndexCoder = new BigNumberCoder("u64");
      const encodedValueSize = Object.values(coders).reduce(
        (min, coder) => Math.min(min, coder.encodedLength),
        0
      );
      super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);
      this.name = name;
      this.coders = coders;
      this.#caseIndexCoder = caseIndexCoder;
      this.#encodedValueSize = encodedValueSize;
      this.#shouldValidateLength = !(optionRegEx.test(this.type) || hasNestedOption(coders));
    }
    // Checks that we're handling a native enum that is of type void.
    #isNativeEnum(coder) {
      return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;
    }
    #encodeNativeEnum(value) {
      const valueCoder = this.coders[value];
      const encodedValue = valueCoder.encode([]);
      const caseIndex = Object.keys(this.coders).indexOf(value);
      const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);
      return concat([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);
    }
    encode(value) {
      if (typeof value === "string" && this.coders[value]) {
        return this.#encodeNativeEnum(value);
      }
      const [caseKey, ...empty] = Object.keys(value);
      if (!caseKey) {
        throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, "A field for the case must be provided.");
      }
      if (empty.length !== 0) {
        throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, "Only one field must be provided.");
      }
      const valueCoder = this.coders[caseKey];
      const caseIndex = Object.keys(this.coders).indexOf(caseKey);
      if (caseIndex === -1) {
        const validCases = Object.keys(this.coders).map((v) => `'${v}'`).join(", ");
        throw new FuelError(
          ErrorCode.INVALID_DECODE_VALUE,
          `Invalid case '${caseKey}'. Valid cases: ${validCases}.`
        );
      }
      const encodedValue = valueCoder.encode(value[caseKey]);
      return new Uint8Array([...this.#caseIndexCoder.encode(caseIndex), ...encodedValue]);
    }
    #decodeNativeEnum(caseKey, newOffset) {
      return [caseKey, newOffset];
    }
    decode(data, offset) {
      if (this.#shouldValidateLength && data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);
      }
      const caseBytes = new BigNumberCoder("u64").decode(data, offset)[0];
      const caseIndex = toNumber(caseBytes);
      const caseKey = Object.keys(this.coders)[caseIndex];
      if (!caseKey) {
        throw new FuelError(
          ErrorCode.INVALID_DECODE_VALUE,
          `Invalid caseIndex "${caseIndex}". Valid cases: ${Object.keys(this.coders)}.`
        );
      }
      const valueCoder = this.coders[caseKey];
      const offsetAndCase = offset + this.#caseIndexCoder.encodedLength;
      if (this.#shouldValidateLength && data.length < offsetAndCase + valueCoder.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);
      }
      const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);
      if (this.#isNativeEnum(this.coders[caseKey])) {
        return this.#decodeNativeEnum(caseKey, newOffset);
      }
      return [{ [caseKey]: decoded }, newOffset];
    }
  };
  var getLength = (baseType) => {
    switch (baseType) {
      case "u8":
        return 1;
      case "u16":
        return 2;
      case "u32":
        return 4;
      default:
        throw new FuelError(ErrorCode.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);
    }
  };
  var NumberCoder = class extends Coder {
    baseType;
    options;
    constructor(baseType, options = {
      padToWordSize: false
    }) {
      const length = options.padToWordSize ? WORD_SIZE : getLength(baseType);
      super("number", baseType, length);
      this.baseType = baseType;
      this.options = options;
    }
    encode(value) {
      let bytes2;
      try {
        bytes2 = toBytes(value);
      } catch (error2) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}.`);
      }
      if (bytes2.length > this.encodedLength) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);
      }
      return toBytes(bytes2, this.encodedLength);
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number data size.`);
      }
      const bytes2 = data.slice(offset, offset + this.encodedLength);
      if (bytes2.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number byte data size.`);
      }
      return [toNumber(bytes2), offset + this.encodedLength];
    }
  };
  var OptionCoder = class extends EnumCoder {
    encode(value) {
      const result = super.encode(this.toSwayOption(value));
      return result;
    }
    toSwayOption(input) {
      if (input !== void 0) {
        return { Some: input };
      }
      return { None: [] };
    }
    decode(data, offset) {
      const [decoded, newOffset] = super.decode(data, offset);
      return [this.toOption(decoded), newOffset];
    }
    toOption(output2) {
      if (output2 && "Some" in output2) {
        return output2.Some;
      }
      return void 0;
    }
  };
  var RawSliceCoder = class extends Coder {
    constructor() {
      super("raw untyped slice", "raw untyped slice", WORD_SIZE);
    }
    encode(value) {
      if (!Array.isArray(value)) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);
      }
      const internalCoder = new ArrayCoder(new NumberCoder("u8"), value.length);
      const bytes2 = internalCoder.encode(value);
      const lengthBytes = new BigNumberCoder("u64").encode(bytes2.length);
      return new Uint8Array([...lengthBytes, ...bytes2]);
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice data size.`);
      }
      const offsetAndLength = offset + WORD_SIZE;
      const lengthBytes = data.slice(offset, offsetAndLength);
      const length = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
      const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);
      if (dataBytes.length !== length) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice byte data size.`);
      }
      const internalCoder = new ArrayCoder(new NumberCoder("u8"), length);
      const [decodedValue] = internalCoder.decode(dataBytes, 0);
      return [decodedValue, offsetAndLength + length];
    }
  };
  var StdStringCoder = class extends Coder {
    constructor() {
      super("struct", "struct String", WORD_SIZE);
    }
    encode(value) {
      const bytes2 = toUtf8Bytes(value);
      const lengthBytes = new BigNumberCoder("u64").encode(value.length);
      return new Uint8Array([...lengthBytes, ...bytes2]);
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string data size.`);
      }
      const offsetAndLength = offset + WORD_SIZE;
      const lengthBytes = data.slice(offset, offsetAndLength);
      const length = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
      const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);
      if (dataBytes.length !== length) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string byte data size.`);
      }
      return [toUtf8String(dataBytes), offsetAndLength + length];
    }
  };
  __publicField3(StdStringCoder, "memorySize", 1);
  var StrSliceCoder = class extends Coder {
    constructor() {
      super("strSlice", "str", WORD_SIZE);
    }
    encode(value) {
      const bytes2 = toUtf8Bytes(value);
      const lengthBytes = new BigNumberCoder("u64").encode(value.length);
      return new Uint8Array([...lengthBytes, ...bytes2]);
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice data size.`);
      }
      const offsetAndLength = offset + WORD_SIZE;
      const lengthBytes = data.slice(offset, offsetAndLength);
      const length = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
      const bytes2 = data.slice(offsetAndLength, offsetAndLength + length);
      if (bytes2.length !== length) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice byte data size.`);
      }
      return [toUtf8String(bytes2), offsetAndLength + length];
    }
  };
  __publicField3(StrSliceCoder, "memorySize", 1);
  var StringCoder = class extends Coder {
    constructor(length) {
      super("string", `str[${length}]`, length);
    }
    encode(value) {
      if (value.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Value length mismatch during encode.`);
      }
      return toUtf8Bytes(value);
    }
    decode(data, offset) {
      if (data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string data size.`);
      }
      const bytes2 = data.slice(offset, offset + this.encodedLength);
      if (bytes2.length !== this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string byte data size.`);
      }
      return [toUtf8String(bytes2), offset + this.encodedLength];
    }
  };
  var StructCoder = class extends Coder {
    name;
    coders;
    #hasNestedOption;
    constructor(name, coders) {
      const encodedLength = Object.values(coders).reduce(
        (acc, coder) => acc + coder.encodedLength,
        0
      );
      super("struct", `struct ${name}`, encodedLength);
      this.name = name;
      this.coders = coders;
      this.#hasNestedOption = hasNestedOption(coders);
    }
    encode(value) {
      return concatBytes(
        Object.keys(this.coders).map((fieldName) => {
          const fieldCoder = this.coders[fieldName];
          const fieldValue = value[fieldName];
          if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {
            throw new FuelError(
              ErrorCode.ENCODE_ERROR,
              `Invalid ${this.type}. Field "${fieldName}" not present.`
            );
          }
          return fieldCoder.encode(fieldValue);
        })
      );
    }
    decode(data, offset) {
      if (!this.#hasNestedOption && data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid struct data size.`);
      }
      let newOffset = offset;
      const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {
        const fieldCoder = this.coders[fieldName];
        let decoded;
        [decoded, newOffset] = fieldCoder.decode(data, newOffset);
        obj[fieldName] = decoded;
        return obj;
      }, {});
      return [decodedValue, newOffset];
    }
  };
  var TupleCoder = class extends Coder {
    coders;
    #hasNestedOption;
    constructor(coders) {
      const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);
      super("tuple", `(${coders.map((coder) => coder.type).join(", ")})`, encodedLength);
      this.coders = coders;
      this.#hasNestedOption = hasNestedOption(coders);
    }
    encode(value) {
      if (this.coders.length !== value.length) {
        throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);
      }
      return concatBytes(this.coders.map((coder, i) => coder.encode(value[i])));
    }
    decode(data, offset) {
      if (!this.#hasNestedOption && data.length < this.encodedLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid tuple data size.`);
      }
      let newOffset = offset;
      const decodedValue = this.coders.map((coder) => {
        let decoded;
        [decoded, newOffset] = coder.decode(data, newOffset);
        return decoded;
      });
      return [decodedValue, newOffset];
    }
  };
  var VecCoder = class extends Coder {
    coder;
    #hasNestedOption;
    constructor(coder) {
      super("struct", `struct Vec`, WORD_SIZE);
      this.coder = coder;
      this.#hasNestedOption = hasNestedOption([coder]);
    }
    encode(value) {
      if (!Array.isArray(value) && !isUint8Array(value)) {
        throw new FuelError(
          ErrorCode.ENCODE_ERROR,
          `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`
        );
      }
      const lengthCoder = new BigNumberCoder("u64");
      if (isUint8Array(value)) {
        return new Uint8Array([...lengthCoder.encode(value.length), ...value]);
      }
      const bytes2 = value.map((v) => this.coder.encode(v));
      const lengthBytes = lengthCoder.encode(value.length);
      return new Uint8Array([...lengthBytes, ...concatBytes(bytes2)]);
    }
    decode(data, offset) {
      if (!this.#hasNestedOption && data.length < this.encodedLength || data.length > MAX_BYTES) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec data size.`);
      }
      const offsetAndLength = offset + WORD_SIZE;
      const lengthBytes = data.slice(offset, offsetAndLength);
      const length = bn(new BigNumberCoder("u64").decode(lengthBytes, 0)[0]).toNumber();
      const dataLength = length * this.coder.encodedLength;
      const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);
      if (!this.#hasNestedOption && dataBytes.length !== dataLength) {
        throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec byte data size.`);
      }
      let newOffset = offsetAndLength;
      const chunks = [];
      for (let i = 0; i < length; i++) {
        const [decoded, optionOffset] = this.coder.decode(data, newOffset);
        chunks.push(decoded);
        newOffset = optionOffset;
      }
      return [chunks, newOffset];
    }
  };
  var getEncodingVersion = (encoding) => {
    switch (encoding) {
      case void 0:
      case ENCODING_V1:
        return ENCODING_V1;
      default:
        throw new FuelError(
          ErrorCode.UNSUPPORTED_ENCODING_VERSION,
          `Encoding version '${encoding}' is unsupported.`
        );
    }
  };
  var findTypeById = (abi, typeId) => {
    const type3 = abi.types.find((t) => t.typeId === typeId);
    if (!type3) {
      throw new FuelError(
        ErrorCode.TYPE_NOT_FOUND,
        `Type with typeId '${typeId}' doesn't exist in the ABI.`
      );
    }
    return type3;
  };
  var findNonVoidInputs = (abi, inputs) => inputs.filter((input) => findTypeById(abi, input.type).type !== VOID_TYPE);
  var findVectorBufferArgument = (components) => {
    const bufferComponent = components.find((c) => c.name === "buf");
    const bufferTypeArgument = bufferComponent?.originalTypeArguments?.[0];
    if (!bufferComponent || !bufferTypeArgument) {
      throw new FuelError(
        ErrorCode.INVALID_COMPONENT,
        `The Vec type provided is missing or has a malformed 'buf' component.`
      );
    }
    return bufferTypeArgument;
  };
  var ResolvedAbiType = class {
    abi;
    name;
    type;
    originalTypeArguments;
    components;
    constructor(abi, argument) {
      this.abi = abi;
      this.name = argument.name;
      const jsonABIType = findTypeById(abi, argument.type);
      if (jsonABIType.type.length > 256) {
        throw new FuelError(
          ErrorCode.INVALID_COMPONENT,
          `The provided ABI type is too long: ${jsonABIType.type}.`
        );
      }
      this.type = jsonABIType.type;
      this.originalTypeArguments = argument.typeArguments;
      this.components = ResolvedAbiType.getResolvedGenericComponents(
        abi,
        argument,
        jsonABIType.components,
        jsonABIType.typeParameters ?? ResolvedAbiType.getImplicitGenericTypeParameters(abi, jsonABIType.components)
      );
    }
    static getResolvedGenericComponents(abi, arg, components, typeParameters) {
      if (components === null) {
        return null;
      }
      if (typeParameters === null || typeParameters.length === 0) {
        return components.map((c) => new ResolvedAbiType(abi, c));
      }
      const typeParametersAndArgsMap = typeParameters.reduce(
        (obj, typeParameter, typeParameterIndex) => {
          const o = { ...obj };
          o[typeParameter] = structuredClone(
            arg.typeArguments?.[typeParameterIndex]
          );
          return o;
        },
        {}
      );
      const resolvedComponents = this.resolveGenericArgTypes(
        abi,
        components,
        typeParametersAndArgsMap
      );
      return resolvedComponents.map((c) => new ResolvedAbiType(abi, c));
    }
    static resolveGenericArgTypes(abi, args, typeParametersAndArgsMap) {
      return args.map((arg) => {
        if (typeParametersAndArgsMap[arg.type] !== void 0) {
          return {
            ...typeParametersAndArgsMap[arg.type],
            name: arg.name
          };
        }
        if (arg.typeArguments) {
          return {
            ...structuredClone(arg),
            typeArguments: this.resolveGenericArgTypes(
              abi,
              arg.typeArguments,
              typeParametersAndArgsMap
            )
          };
        }
        const argType = findTypeById(abi, arg.type);
        const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);
        if (implicitTypeParameters && implicitTypeParameters.length > 0) {
          return {
            ...structuredClone(arg),
            typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp])
          };
        }
        return arg;
      });
    }
    static getImplicitGenericTypeParameters(abi, args, implicitGenericParametersParam) {
      if (!Array.isArray(args)) {
        return null;
      }
      const implicitGenericParameters = implicitGenericParametersParam ?? [];
      args.forEach((a) => {
        const argType = findTypeById(abi, a.type);
        if (genericRegEx.test(argType.type)) {
          implicitGenericParameters.push(argType.typeId);
          return;
        }
        if (!Array.isArray(a.typeArguments)) {
          return;
        }
        this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);
      });
      return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;
    }
    getSignature() {
      const prefix = this.getArgSignaturePrefix();
      const content = this.getArgSignatureContent();
      return `${prefix}${content}`;
    }
    getArgSignaturePrefix() {
      const structMatch = structRegEx.test(this.type);
      if (structMatch) {
        return "s";
      }
      const arrayMatch = arrayRegEx.test(this.type);
      if (arrayMatch) {
        return "a";
      }
      const enumMatch = enumRegEx.test(this.type);
      if (enumMatch) {
        return "e";
      }
      return "";
    }
    getArgSignatureContent() {
      if (this.type === "raw untyped ptr") {
        return "rawptr";
      }
      if (this.type === "raw untyped slice") {
        return "rawslice";
      }
      const strMatch = stringRegEx.exec(this.type)?.groups;
      if (strMatch) {
        return `str[${strMatch.length}]`;
      }
      if (this.components === null) {
        return this.type;
      }
      const arrayMatch = arrayRegEx.exec(this.type)?.groups;
      if (arrayMatch) {
        return `[${this.components[0].getSignature()};${arrayMatch.length}]`;
      }
      const typeArgumentsSignature = this.originalTypeArguments !== null ? `<${this.originalTypeArguments.map((a) => new ResolvedAbiType(this.abi, a).getSignature()).join(",")}>` : "";
      const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(",")})`;
      return `${typeArgumentsSignature}${componentsSignature}`;
    }
  };
  var VoidCoder = class extends Coder {
    constructor() {
      super("void", VOID_TYPE, 0);
    }
    encode(_value) {
      return new Uint8Array([]);
    }
    decode(_data, offset) {
      return [void 0, offset];
    }
  };
  function getCoders(components, options) {
    const { getCoder: getCoder2 } = options;
    return components.reduce((obj, component) => {
      const o = obj;
      o[component.name] = getCoder2(component, options);
      return o;
    }, {});
  }
  var getCoder = (resolvedAbiType, _options) => {
    switch (resolvedAbiType.type) {
      case U8_CODER_TYPE:
      case U16_CODER_TYPE:
      case U32_CODER_TYPE:
        return new NumberCoder(resolvedAbiType.type);
      case U64_CODER_TYPE:
      case RAW_PTR_CODER_TYPE:
        return new BigNumberCoder("u64");
      case U256_CODER_TYPE:
        return new BigNumberCoder("u256");
      case RAW_SLICE_CODER_TYPE:
        return new RawSliceCoder();
      case BOOL_CODER_TYPE:
        return new BooleanCoder();
      case B256_CODER_TYPE:
        return new B256Coder();
      case B512_CODER_TYPE:
        return new B512Coder();
      case BYTES_CODER_TYPE:
        return new ByteCoder();
      case STD_STRING_CODER_TYPE:
        return new StdStringCoder();
      case STR_SLICE_CODER_TYPE:
        return new StrSliceCoder();
      case VOID_TYPE:
        return new VoidCoder();
      default:
        break;
    }
    const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;
    if (stringMatch) {
      const length = parseInt(stringMatch.length, 10);
      return new StringCoder(length);
    }
    const components = resolvedAbiType.components;
    const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;
    if (arrayMatch) {
      const length = parseInt(arrayMatch.length, 10);
      const arg = components[0];
      if (!arg) {
        throw new FuelError(
          ErrorCode.INVALID_COMPONENT,
          `The provided Array type is missing an item of 'component'.`
        );
      }
      const arrayElementCoder = getCoder(arg);
      return new ArrayCoder(arrayElementCoder, length);
    }
    if (resolvedAbiType.type === VEC_CODER_TYPE) {
      const arg = findVectorBufferArgument(components);
      const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);
      const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });
      return new VecCoder(itemCoder);
    }
    const coderName = resolvedAbiType.type.match(fullNameRegExMatch)?.[0];
    const structMatch = structRegEx.test(resolvedAbiType.type);
    if (structMatch && coderName) {
      const coders = getCoders(components, { getCoder });
      return new StructCoder(coderName, coders);
    }
    const enumMatch = enumRegEx.test(resolvedAbiType.type);
    if (enumMatch && coderName) {
      const coders = getCoders(components, { getCoder });
      const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;
      if (isOptionEnum) {
        return new OptionCoder(coderName, coders);
      }
      return new EnumCoder(coderName, coders);
    }
    const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;
    if (tupleMatch) {
      const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));
      return new TupleCoder(coders);
    }
    throw new FuelError(
      ErrorCode.CODER_NOT_FOUND,
      `Coder not found: ${JSON.stringify(resolvedAbiType)}.`
    );
  };
  function getCoderForEncoding(encoding = ENCODING_V1) {
    switch (encoding) {
      case ENCODING_V1:
        return getCoder;
      default:
        throw new FuelError(
          ErrorCode.UNSUPPORTED_ENCODING_VERSION,
          `Encoding version ${encoding} is unsupported.`
        );
    }
  }
  var AbiCoder = class {
    static getCoder(abi, argument, options = {
      padToWordSize: false
    }) {
      const resolvedAbiType = new ResolvedAbiType(abi, argument);
      return getCoderForEncoding(options.encoding)(resolvedAbiType, options);
    }
    static encode(abi, argument, value, options) {
      return this.getCoder(abi, argument, options).encode(value);
    }
    static decode(abi, argument, data, offset, options) {
      return this.getCoder(abi, argument, options).decode(data, offset);
    }
  };
  var getFunctionInputs = (params) => {
    const { jsonAbi, inputs } = params;
    let isMandatory = false;
    return inputs.reduceRight((result, input) => {
      const type3 = findTypeById(jsonAbi, input.type);
      isMandatory = isMandatory || type3.type !== VOID_TYPE && !optionRegEx.test(type3.type);
      return [{ ...input, isOptional: !isMandatory }, ...result];
    }, []);
  };
  var padValuesWithUndefined = (values, inputs) => {
    if (values.length >= inputs.length) {
      return values;
    }
    const paddedValues = values.slice();
    paddedValues.length = inputs.length;
    paddedValues.fill(void 0, values.length);
    return paddedValues;
  };
  var FunctionFragment = class {
    signature;
    selector;
    selectorBytes;
    encoding;
    name;
    jsonFn;
    attributes;
    jsonAbiOld;
    jsonFnOld;
    constructor(jsonAbi, fn) {
      this.jsonFn = fn;
      this.jsonAbiOld = jsonAbi;
      this.jsonFnOld = jsonAbi.functions.find((f2) => f2.name === fn.name);
      this.name = fn.name;
      this.signature = FunctionFragment.getSignature(this.jsonAbiOld, this.jsonFnOld);
      this.selector = FunctionFragment.getFunctionSelector(this.signature);
      this.selectorBytes = new StdStringCoder().encode(this.name);
      this.encoding = getEncodingVersion(jsonAbi.encoding);
      this.attributes = this.jsonFn.attributes ?? [];
    }
    static getSignature(abi, fn) {
      const inputsSignatures = fn.inputs.map(
        (input) => new ResolvedAbiType(abi, input).getSignature()
      );
      return `${fn.name}(${inputsSignatures.join(",")})`;
    }
    static getFunctionSelector(functionSignature) {
      const hashedFunctionSignature = sha2562(bufferFromString2(functionSignature, "utf-8"));
      return bn(hashedFunctionSignature.slice(0, 10)).toHex(8);
    }
    encodeArguments(values) {
      const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });
      const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;
      if (values.length < mandatoryInputLength) {
        throw new FuelError(
          ErrorCode.ABI_TYPES_AND_VALUES_MISMATCH,
          `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values.length}`
        );
      }
      const coders = this.jsonFnOld.inputs.map(
        (t) => AbiCoder.getCoder(this.jsonAbiOld, t, {
          encoding: this.encoding
        })
      );
      const argumentValues = padValuesWithUndefined(values, this.jsonFn.inputs);
      return new TupleCoder(coders).encode(argumentValues);
    }
    decodeArguments(data) {
      const bytes2 = arrayify(data);
      const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);
      if (nonVoidInputs.length === 0) {
        if (bytes2.length === 0) {
          return void 0;
        }
        throw new FuelError(
          ErrorCode.DECODE_ERROR,
          `Types/values length mismatch during decode. ${JSON.stringify({
            count: {
              types: this.jsonFn.inputs.length,
              nonVoidInputs: nonVoidInputs.length,
              values: bytes2.length
            },
            value: {
              args: this.jsonFn.inputs,
              nonVoidInputs,
              values: bytes2
            }
          })}`
        );
      }
      const result = this.jsonFnOld.inputs.reduce(
        (obj, input) => {
          const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });
          const [decodedValue, decodedValueByteSize] = coder.decode(bytes2, obj.offset);
          return {
            decoded: [...obj.decoded, decodedValue],
            offset: obj.offset + decodedValueByteSize
          };
        },
        { decoded: [], offset: 0 }
      );
      return result.decoded;
    }
    decodeOutput(data) {
      const bytes2 = arrayify(data);
      const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {
        encoding: this.encoding
      });
      return coder.decode(bytes2, 0);
    }
    /**
     * Checks if the function is read-only i.e. it only reads from storage, does not write to it.
     *
     * @returns True if the function is read-only or pure, false otherwise.
     */
    isReadOnly() {
      const storageAttribute = this.attributes.find((attr) => attr.name === "storage");
      return !storageAttribute?.arguments?.includes("write");
    }
  };
  var findTypeByConcreteId = (types, id) => types.find((x) => x.concreteTypeId === id);
  var findConcreteTypeById = (abi, id) => abi.concreteTypes.find((x) => x.concreteTypeId === id);
  function finsertTypeIdByConcreteTypeId(abi, types, id) {
    const concreteType = findConcreteTypeById(abi, id);
    if (concreteType.metadataTypeId !== void 0) {
      return concreteType.metadataTypeId;
    }
    const type3 = findTypeByConcreteId(types, id);
    if (type3) {
      return type3.typeId;
    }
    types.push({
      typeId: types.length,
      type: concreteType.type,
      components: parseComponents(concreteType.components),
      concreteTypeId: id,
      typeParameters: concreteType.typeParameters ?? null,
      originalConcreteTypeId: concreteType?.concreteTypeId
    });
    return types.length - 1;
  }
  function parseFunctionTypeArguments(abi, types, concreteType) {
    return concreteType.typeArguments?.map((cTypeId) => {
      const self = findConcreteTypeById(abi, cTypeId);
      const type3 = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi, types, cTypeId);
      return {
        name: "",
        type: type3,
        // originalTypeId: cTypeId,
        typeArguments: parseFunctionTypeArguments(abi, types, self)
      };
    }) ?? null;
  }
  function parseConcreteType(abi, types, concreteTypeId, name) {
    const type3 = finsertTypeIdByConcreteTypeId(abi, types, concreteTypeId);
    const concrete = findConcreteTypeById(abi, concreteTypeId);
    return {
      name: name ?? "",
      type: type3,
      // concreteTypeId,
      typeArguments: parseFunctionTypeArguments(abi, types, concrete)
    };
  }
  function parseComponents(abi, types, components) {
    return components?.map((component) => {
      const { typeId, name, typeArguments } = component;
      const type3 = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi, types, typeId);
      return {
        name,
        type: type3,
        // originalTypeId: typeId,
        typeArguments: parseComponents(abi, types, typeArguments)
      };
    }) ?? null;
  }
  function transpileAbi(abi) {
    if (!abi.specVersion) {
      return abi;
    }
    const types = [];
    abi.metadataTypes.forEach((m) => {
      const t = {
        typeId: m.metadataTypeId,
        type: m.type,
        components: m.components ?? (m.type === "()" ? [] : null),
        typeParameters: m.typeParameters ?? null
      };
      types.push(t);
    });
    types.forEach((t) => {
      t.components = parseComponents(abi, types, t.components);
    });
    const functions = abi.functions.map((fn) => {
      const inputs = fn.inputs.map(
        ({ concreteTypeId, name }) => parseConcreteType(abi, types, concreteTypeId, name)
      );
      const output2 = parseConcreteType(abi, types, fn.output, "");
      return { ...fn, inputs, output: output2 };
    });
    const configurables = abi.configurables.map((conf) => ({
      name: conf.name,
      configurableType: parseConcreteType(abi, types, conf.concreteTypeId),
      offset: conf.offset
    }));
    const loggedTypes = abi.loggedTypes.map((log) => ({
      logId: log.logId,
      loggedType: parseConcreteType(abi, types, log.concreteTypeId)
    }));
    const transpiled = {
      encoding: abi.encodingVersion,
      types,
      functions,
      loggedTypes,
      messagesTypes: abi.messagesTypes,
      configurables
    };
    return transpiled;
  }
  var Interface = class {
    functions;
    configurables;
    jsonAbi;
    encoding;
    jsonAbiOld;
    constructor(jsonAbi) {
      this.jsonAbi = jsonAbi;
      this.encoding = getEncodingVersion(jsonAbi.encodingVersion);
      this.jsonAbiOld = transpileAbi(jsonAbi);
      this.functions = Object.fromEntries(
        this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])
      );
      this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));
    }
    /**
     * Returns function fragment for a dynamic input.
     * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment
     */
    getFunction(nameOrSignatureOrSelector) {
      const fn = Object.values(this.functions).find(
        (f2) => f2.name === nameOrSignatureOrSelector || f2.signature === nameOrSignatureOrSelector || f2.selector === nameOrSignatureOrSelector
      );
      if (fn !== void 0) {
        return fn;
      }
      throw new FuelError(
        ErrorCode.FUNCTION_NOT_FOUND,
        `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`
      );
    }
    // Decode the result of a function call
    decodeFunctionResult(functionFragment, data) {
      const fragment = typeof functionFragment === "string" ? this.getFunction(functionFragment) : functionFragment;
      return fragment.decodeOutput(data);
    }
    decodeLog(data, logId) {
      const loggedType = this.jsonAbiOld.loggedTypes.find((type3) => type3.logId === logId);
      if (!loggedType) {
        throw new FuelError(
          ErrorCode.LOG_TYPE_NOT_FOUND,
          `Log type with logId '${logId}' doesn't exist in the ABI.`
        );
      }
      return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, arrayify(data), 0, {
        encoding: this.encoding
      });
    }
    encodeConfigurable(name, value) {
      const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);
      if (!configurable) {
        throw new FuelError(
          ErrorCode.CONFIGURABLE_NOT_FOUND,
          `A configurable with the '${name}' was not found in the ABI.`
        );
      }
      return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {
        encoding: this.encoding
      });
    }
    encodeType(concreteTypeId, value) {
      const typeArg = parseConcreteType(
        this.jsonAbi,
        this.jsonAbiOld.types,
        concreteTypeId,
        ""
      );
      return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {
        encoding: this.encoding
      });
    }
    decodeType(concreteTypeId, data) {
      const typeArg = parseConcreteType(
        this.jsonAbi,
        this.jsonAbiOld.types,
        concreteTypeId,
        ""
      );
      return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });
    }
  };

  // ../account/dist/test-utils.mjs
  var import_fs = __require("fs");
  var import_os = __toESM(__require("os"), 1);
  var import_path = __toESM(__require("path"), 1);

  // ../address/dist/index.mjs
  function isB256(address) {
    return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);
  }
  function isPublicKey(address) {
    return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);
  }
  function isEvmAddress(address) {
    return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);
  }
  function normalizeB256(address) {
    return address.toLowerCase();
  }
  function isAddress(address) {
    return "b256Address" in address;
  }
  var addressify = (addressLike) => {
    if (isAddress(addressLike)) {
      return addressLike;
    }
    if ("address" in addressLike && isAddress(addressLike.address)) {
      return addressLike.address;
    }
    if ("id" in addressLike && isAddress(addressLike.id)) {
      return addressLike.id;
    }
    throw new FuelError(FuelError.CODES.INVALID_ADDRESS, "Invalid address");
  };
  var getRandomB256 = () => hexlify(randomBytes22(32));
  var toB256AddressEvm = (b256) => {
    try {
      if (!isB256(b256)) {
        throw new FuelError(FuelError.CODES.INVALID_B256_ADDRESS, `Invalid B256 Address: ${b256}.`);
      }
      const evmBytes = arrayify(b256).slice(12);
      const paddedBytes = new Uint8Array(12).fill(0);
      return hexlify(concat([paddedBytes, evmBytes]));
    } catch (error2) {
      throw new FuelError(
        FuelError.CODES.PARSE_FAILED,
        `Cannot generate EVM Address B256 from: ${b256}.`
      );
    }
  };
  var padFirst12BytesOfEvmAddress = (address) => {
    if (!isEvmAddress(address)) {
      throw new FuelError(FuelError.CODES.INVALID_EVM_ADDRESS, "Invalid EVM address format.");
    }
    return address.replace("0x", "0x000000000000000000000000");
  };
  var Address = class {
    // #region address-2
    b256Address;
    // #endregion address-2
    /**
     * @param address - A B256 address
     */
    constructor(address) {
      if (!isB256(address)) {
        throw new FuelError(
          FuelError.CODES.INVALID_B256_ADDRESS,
          `Invalid B256 Address: ${address}.`
        );
      }
      this.b256Address = normalizeB256(address);
    }
    /**
     * Takes an B256 Address and returns back an checksum address.
     * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.
     *
     * @returns A new `ChecksumAddress` instance
     */
    toChecksum() {
      return Address.toChecksum(this.b256Address);
    }
    /**
     * Returns the `b256Address` property
     */
    toAddress() {
      return this.b256Address;
    }
    /**
     * Returns the B256 hash address as a string
     *
     * @returns The B256 address
     */
    toB256() {
      return this.b256Address;
    }
    /**
     * Returns the B256 hash address as a Uint8Array
     *
     * @returns The B256 address as a Uint8Array
     */
    toBytes() {
      return arrayify(this.b256Address);
    }
    /**
     * Returns the B256 hash address as a string
     *
     * @returns The B256 address
     */
    toHexString() {
      return this.toB256();
    }
    /**
     * returns the address `checksum` as a string
     *
     * @returns The `b256Address` property as a string
     */
    toString() {
      return this.toChecksum();
    }
    /**
     * Converts and returns the `b256Address` property as a string
     * @returns The `b256Address` property as a JSON string
     */
    toJSON() {
      return this.b256Address;
    }
    /**
     * Converts to an EVM address
     *
     * @returns an {@link EvmAddress | `EvmAddress`} representation of the address
     */
    toEvmAddress() {
      return {
        bits: toB256AddressEvm(this.b256Address)
      };
    }
    /**
     * Wraps the B256 property and returns as an `AssetId`.
     * @returns The B256 property as an {@link AssetId | `AssetId`}
     */
    toAssetId() {
      return {
        bits: this.b256Address
      };
    }
    /**
     * Wraps the B256 address `checksum` and returns it as a string
     * @returns The B256 address `checksum` as a string
     */
    valueOf() {
      return this.toChecksum();
    }
    /**
     * Compares this the `b256Address` property to another for direct equality
     * @param other - Another address to compare against
     * @returns The equality of the comparison
     */
    equals(other) {
      return this.toChecksum() === other.toChecksum();
    }
    /**
     * Takes a Public Key, hashes it, and creates an `Address`
     *
     * @param publicKey - A wallets public key
     * @returns A new `Address` instance
     */
    static fromPublicKey(publicKey) {
      if (!isPublicKey(publicKey)) {
        throw new FuelError(FuelError.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);
      }
      const b256Address = hexlify(sha256(arrayify(publicKey)));
      return new Address(b256Address);
    }
    /**
     * Takes a B256 Address and creates an `Address`
     *
     * @param b256Address - A b256 hash
     * @returns A new `Address` instance
     */
    static fromB256(b256Address) {
      if (!isB256(b256Address)) {
        throw new FuelError(
          FuelError.CODES.INVALID_B256_ADDRESS,
          `Invalid B256 Address: ${b256Address}.`
        );
      }
      return new Address(b256Address);
    }
    /**
     * Creates an `Address` with a randomized `b256Address` property
     *
     * @returns A new `Address` instance
     */
    static fromRandom() {
      return this.fromB256(getRandomB256());
    }
    /**
     * Takes an ambiguous string and attempts to create an `Address`
     *
     * @param address - An ambiguous string
     * @returns A new `Address` instance
     */
    static fromString(address) {
      return this.fromB256(address);
    }
    /**
     * Takes an ambiguous string or address and creates an `Address`
     *
     * @returns a new `Address` instance
     */
    static fromAddressOrString(address) {
      return typeof address === "string" ? this.fromString(address) : address;
    }
    /**
     * Takes a dynamic string or `Address` and creates an `Address`
     *
     * @param addressId - A string containing B256, or Public Key
     * @throws Error - Unknown address if the format is not recognised
     * @returns A new `Address` instance
     */
    static fromDynamicInput(address) {
      if (typeof address !== "string" && "toB256" in address) {
        return Address.fromB256(address.toB256());
      }
      if (isPublicKey(address)) {
        return Address.fromPublicKey(address);
      }
      if (isB256(address)) {
        return Address.fromB256(address);
      }
      if (isEvmAddress(address)) {
        return Address.fromEvmAddress(address);
      }
      throw new FuelError(
        FuelError.CODES.PARSE_FAILED,
        `Unknown address format: only 'B256', or 'Public Key (512)' are supported.`
      );
    }
    /**
     * Takes an Evm Address and returns back an `Address`
     *
     * @returns A new `Address` instance
     */
    static fromEvmAddress(evmAddress) {
      if (!isEvmAddress(evmAddress)) {
        throw new FuelError(
          FuelError.CODES.INVALID_EVM_ADDRESS,
          `Invalid Evm Address: ${evmAddress}.`
        );
      }
      const paddedAddress = padFirst12BytesOfEvmAddress(evmAddress);
      return new Address(paddedAddress);
    }
    /**
     * Takes an ChecksumAddress and validates if it is a valid checksum address.
     *
     * @returns A `boolean` instance indicating if the address is valid.
     */
    static isChecksumValid(address) {
      let addressParsed = address;
      if (!address.startsWith("0x")) {
        addressParsed = `0x${address}`;
      }
      if (addressParsed.trim().length !== 66) {
        return false;
      }
      return Address.toChecksum(hexlify(addressParsed)) === addressParsed;
    }
    /** @hidden */
    static toChecksum(address) {
      if (!isB256(address)) {
        throw new FuelError(
          FuelError.CODES.INVALID_B256_ADDRESS,
          `Invalid B256 Address: ${address}.`
        );
      }
      const addressHex = hexlify(address).toLowerCase().slice(2);
      const checksum = sha256(addressHex);
      let ret2 = "0x";
      for (let i = 0; i < 32; ++i) {
        const byte = checksum[i];
        const ha = addressHex.charAt(i * 2);
        const hb = addressHex.charAt(i * 2 + 1);
        ret2 += (byte & 240) >= 128 ? ha.toUpperCase() : ha;
        ret2 += (byte & 15) >= 8 ? hb.toUpperCase() : hb;
      }
      return ret2;
    }
  };

  // ../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    aInRange: () => aInRange,
    abool: () => abool,
    abytes: () => abytes,
    bitGet: () => bitGet,
    bitLen: () => bitLen,
    bitMask: () => bitMask,
    bitSet: () => bitSet,
    bytesToHex: () => bytesToHex,
    bytesToNumberBE: () => bytesToNumberBE,
    bytesToNumberLE: () => bytesToNumberLE,
    concatBytes: () => concatBytes3,
    createHmacDrbg: () => createHmacDrbg,
    ensureBytes: () => ensureBytes,
    equalBytes: () => equalBytes,
    hexToBytes: () => hexToBytes,
    hexToNumber: () => hexToNumber,
    inRange: () => inRange,
    isBytes: () => isBytes2,
    memoized: () => memoized,
    notImplemented: () => notImplemented,
    numberToBytesBE: () => numberToBytesBE,
    numberToBytesLE: () => numberToBytesLE,
    numberToHexUnpadded: () => numberToHexUnpadded,
    numberToVarBytesBE: () => numberToVarBytesBE,
    utf8ToBytes: () => utf8ToBytes2,
    validateObject: () => validateObject
  });
  var _0n2 = /* @__PURE__ */ BigInt(0);
  var _1n2 = /* @__PURE__ */ BigInt(1);
  var _2n2 = /* @__PURE__ */ BigInt(2);
  function isBytes2(a) {
    return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
  }
  function abytes(item) {
    if (!isBytes2(item))
      throw new Error("Uint8Array expected");
  }
  function abool(title, value) {
    if (typeof value !== "boolean")
      throw new Error(`${title} must be valid boolean, got "${value}".`);
  }
  var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
  function bytesToHex(bytes2) {
    abytes(bytes2);
    let hex = "";
    for (let i = 0; i < bytes2.length; i++) {
      hex += hexes[bytes2[i]];
    }
    return hex;
  }
  function numberToHexUnpadded(num) {
    const hex = num.toString(16);
    return hex.length & 1 ? `0${hex}` : hex;
  }
  function hexToNumber(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    return BigInt(hex === "" ? "0" : `0x${hex}`);
  }
  var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
  function asciiToBase16(char) {
    if (char >= asciis._0 && char <= asciis._9)
      return char - asciis._0;
    if (char >= asciis._A && char <= asciis._F)
      return char - (asciis._A - 10);
    if (char >= asciis._a && char <= asciis._f)
      return char - (asciis._a - 10);
    return;
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    const hl = hex.length;
    const al = hl / 2;
    if (hl % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + hl);
    const array = new Uint8Array(al);
    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
      const n1 = asciiToBase16(hex.charCodeAt(hi));
      const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
      if (n1 === void 0 || n2 === void 0) {
        const char = hex[hi] + hex[hi + 1];
        throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
      }
      array[ai] = n1 * 16 + n2;
    }
    return array;
  }
  function bytesToNumberBE(bytes2) {
    return hexToNumber(bytesToHex(bytes2));
  }
  function bytesToNumberLE(bytes2) {
    abytes(bytes2);
    return hexToNumber(bytesToHex(Uint8Array.from(bytes2).reverse()));
  }
  function numberToBytesBE(n, len) {
    return hexToBytes(n.toString(16).padStart(len * 2, "0"));
  }
  function numberToBytesLE(n, len) {
    return numberToBytesBE(n, len).reverse();
  }
  function numberToVarBytesBE(n) {
    return hexToBytes(numberToHexUnpadded(n));
  }
  function ensureBytes(title, hex, expectedLength) {
    let res;
    if (typeof hex === "string") {
      try {
        res = hexToBytes(hex);
      } catch (e) {
        throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
      }
    } else if (isBytes2(hex)) {
      res = Uint8Array.from(hex);
    } else {
      throw new Error(`${title} must be hex string or Uint8Array`);
    }
    const len = res.length;
    if (typeof expectedLength === "number" && len !== expectedLength)
      throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
    return res;
  }
  function concatBytes3(...arrays) {
    let sum = 0;
    for (let i = 0; i < arrays.length; i++) {
      const a = arrays[i];
      abytes(a);
      sum += a.length;
    }
    const res = new Uint8Array(sum);
    for (let i = 0, pad = 0; i < arrays.length; i++) {
      const a = arrays[i];
      res.set(a, pad);
      pad += a.length;
    }
    return res;
  }
  function equalBytes(a, b) {
    if (a.length !== b.length)
      return false;
    let diff = 0;
    for (let i = 0; i < a.length; i++)
      diff |= a[i] ^ b[i];
    return diff === 0;
  }
  function utf8ToBytes2(str) {
    if (typeof str !== "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
    return new Uint8Array(new TextEncoder().encode(str));
  }
  var isPosBig = (n) => typeof n === "bigint" && _0n2 <= n;
  function inRange(n, min, max) {
    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;
  }
  function aInRange(title, n, min, max) {
    if (!inRange(n, min, max))
      throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);
  }
  function bitLen(n) {
    let len;
    for (len = 0; n > _0n2; n >>= _1n2, len += 1)
      ;
    return len;
  }
  function bitGet(n, pos) {
    return n >> BigInt(pos) & _1n2;
  }
  function bitSet(n, pos, value) {
    return n | (value ? _1n2 : _0n2) << BigInt(pos);
  }
  var bitMask = (n) => (_2n2 << BigInt(n - 1)) - _1n2;
  var u8n = (data) => new Uint8Array(data);
  var u8fr = (arr) => Uint8Array.from(arr);
  function createHmacDrbg(hashLen, qByteLen, hmacFn) {
    if (typeof hashLen !== "number" || hashLen < 2)
      throw new Error("hashLen must be a number");
    if (typeof qByteLen !== "number" || qByteLen < 2)
      throw new Error("qByteLen must be a number");
    if (typeof hmacFn !== "function")
      throw new Error("hmacFn must be a function");
    let v = u8n(hashLen);
    let k = u8n(hashLen);
    let i = 0;
    const reset = () => {
      v.fill(1);
      k.fill(0);
      i = 0;
    };
    const h = (...b) => hmacFn(k, v, ...b);
    const reseed = (seed = u8n()) => {
      k = h(u8fr([0]), seed);
      v = h();
      if (seed.length === 0)
        return;
      k = h(u8fr([1]), seed);
      v = h();
    };
    const gen2 = () => {
      if (i++ >= 1e3)
        throw new Error("drbg: tried 1000 values");
      let len = 0;
      const out = [];
      while (len < qByteLen) {
        v = h();
        const sl = v.slice();
        out.push(sl);
        len += v.length;
      }
      return concatBytes3(...out);
    };
    const genUntil = (seed, pred) => {
      reset();
      reseed(seed);
      let res = void 0;
      while (!(res = pred(gen2())))
        reseed();
      reset();
      return res;
    };
    return genUntil;
  }
  var validatorFns = {
    bigint: (val) => typeof val === "bigint",
    function: (val) => typeof val === "function",
    boolean: (val) => typeof val === "boolean",
    string: (val) => typeof val === "string",
    stringOrUint8Array: (val) => typeof val === "string" || isBytes2(val),
    isSafeInteger: (val) => Number.isSafeInteger(val),
    array: (val) => Array.isArray(val),
    field: (val, object) => object.Fp.isValid(val),
    hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
  };
  function validateObject(object, validators, optValidators = {}) {
    const checkField = (fieldName, type3, isOptional) => {
      const checkVal = validatorFns[type3];
      if (typeof checkVal !== "function")
        throw new Error(`Invalid validator "${type3}", expected function`);
      const val = object[fieldName];
      if (isOptional && val === void 0)
        return;
      if (!checkVal(val, object)) {
        throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type3}`);
      }
    };
    for (const [fieldName, type3] of Object.entries(validators))
      checkField(fieldName, type3, false);
    for (const [fieldName, type3] of Object.entries(optValidators))
      checkField(fieldName, type3, true);
    return object;
  }
  var notImplemented = () => {
    throw new Error("not implemented");
  };
  function memoized(fn) {
    const map2 = /* @__PURE__ */ new WeakMap();
    return (arg, ...args) => {
      const val = map2.get(arg);
      if (val !== void 0)
        return val;
      const computed = fn(arg, ...args);
      map2.set(arg, computed);
      return computed;
    };
  }

  // ../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/modular.js
  var _0n3 = BigInt(0);
  var _1n3 = BigInt(1);
  var _2n3 = BigInt(2);
  var _3n = BigInt(3);
  var _4n = BigInt(4);
  var _5n = BigInt(5);
  var _8n = BigInt(8);
  var _9n = BigInt(9);
  var _16n = BigInt(16);
  function mod(a, b) {
    const result = a % b;
    return result >= _0n3 ? result : b + result;
  }
  function pow(num, power, modulo) {
    if (modulo <= _0n3 || power < _0n3)
      throw new Error("Expected power/modulo > 0");
    if (modulo === _1n3)
      return _0n3;
    let res = _1n3;
    while (power > _0n3) {
      if (power & _1n3)
        res = res * num % modulo;
      num = num * num % modulo;
      power >>= _1n3;
    }
    return res;
  }
  function pow2(x, power, modulo) {
    let res = x;
    while (power-- > _0n3) {
      res *= res;
      res %= modulo;
    }
    return res;
  }
  function invert(number2, modulo) {
    if (number2 === _0n3 || modulo <= _0n3) {
      throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
    }
    let a = mod(number2, modulo);
    let b = modulo;
    let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
    while (a !== _0n3) {
      const q = b / a;
      const r = b % a;
      const m = x - u * q;
      const n = y - v * q;
      b = a, a = r, x = u, y = v, u = m, v = n;
    }
    const gcd = b;
    if (gcd !== _1n3)
      throw new Error("invert: does not exist");
    return mod(x, modulo);
  }
  function tonelliShanks(P) {
    const legendreC = (P - _1n3) / _2n3;
    let Q, S, Z;
    for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)
      ;
    for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
      ;
    if (S === 1) {
      const p1div4 = (P + _1n3) / _4n;
      return function tonelliFast(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    const Q1div2 = (Q + _1n3) / _2n3;
    return function tonelliSlow(Fp2, n) {
      if (Fp2.pow(n, legendreC) === Fp2.neg(Fp2.ONE))
        throw new Error("Cannot find square root");
      let r = S;
      let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
      let x = Fp2.pow(n, Q1div2);
      let b = Fp2.pow(n, Q);
      while (!Fp2.eql(b, Fp2.ONE)) {
        if (Fp2.eql(b, Fp2.ZERO))
          return Fp2.ZERO;
        let m = 1;
        for (let t2 = Fp2.sqr(b); m < r; m++) {
          if (Fp2.eql(t2, Fp2.ONE))
            break;
          t2 = Fp2.sqr(t2);
        }
        const ge = Fp2.pow(g, _1n3 << BigInt(r - m - 1));
        g = Fp2.sqr(ge);
        x = Fp2.mul(x, ge);
        b = Fp2.mul(b, g);
        r = m;
      }
      return x;
    };
  }
  function FpSqrt(P) {
    if (P % _4n === _3n) {
      const p1div4 = (P + _1n3) / _4n;
      return function sqrt3mod4(Fp2, n) {
        const root = Fp2.pow(n, p1div4);
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _8n === _5n) {
      const c1 = (P - _5n) / _8n;
      return function sqrt5mod8(Fp2, n) {
        const n2 = Fp2.mul(n, _2n3);
        const v = Fp2.pow(n2, c1);
        const nv = Fp2.mul(n, v);
        const i = Fp2.mul(Fp2.mul(nv, _2n3), v);
        const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
        if (!Fp2.eql(Fp2.sqr(root), n))
          throw new Error("Cannot find square root");
        return root;
      };
    }
    if (P % _16n === _9n) {
    }
    return tonelliShanks(P);
  }
  var FIELD_FIELDS = [
    "create",
    "isValid",
    "is0",
    "neg",
    "inv",
    "sqrt",
    "sqr",
    "eql",
    "add",
    "sub",
    "mul",
    "pow",
    "div",
    "addN",
    "subN",
    "mulN",
    "sqrN"
  ];
  function validateField(field) {
    const initial = {
      ORDER: "bigint",
      MASK: "bigint",
      BYTES: "isSafeInteger",
      BITS: "isSafeInteger"
    };
    const opts = FIELD_FIELDS.reduce((map2, val) => {
      map2[val] = "function";
      return map2;
    }, initial);
    return validateObject(field, opts);
  }
  function FpPow(f2, num, power) {
    if (power < _0n3)
      throw new Error("Expected power > 0");
    if (power === _0n3)
      return f2.ONE;
    if (power === _1n3)
      return num;
    let p = f2.ONE;
    let d = num;
    while (power > _0n3) {
      if (power & _1n3)
        p = f2.mul(p, d);
      d = f2.sqr(d);
      power >>= _1n3;
    }
    return p;
  }
  function FpInvertBatch(f2, nums) {
    const tmp = new Array(nums.length);
    const lastMultiplied = nums.reduce((acc, num, i) => {
      if (f2.is0(num))
        return acc;
      tmp[i] = acc;
      return f2.mul(acc, num);
    }, f2.ONE);
    const inverted = f2.inv(lastMultiplied);
    nums.reduceRight((acc, num, i) => {
      if (f2.is0(num))
        return acc;
      tmp[i] = f2.mul(acc, tmp[i]);
      return f2.mul(acc, num);
    }, inverted);
    return tmp;
  }
  function nLength(n, nBitLength) {
    const _nBitLength = nBitLength !== void 0 ? nBitLength : n.toString(2).length;
    const nByteLength = Math.ceil(_nBitLength / 8);
    return { nBitLength: _nBitLength, nByteLength };
  }
  function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
    if (ORDER <= _0n3)
      throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
    const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
    if (BYTES > 2048)
      throw new Error("Field lengths over 2048 bytes are not supported");
    const sqrtP = FpSqrt(ORDER);
    const f2 = Object.freeze({
      ORDER,
      BITS,
      BYTES,
      MASK: bitMask(BITS),
      ZERO: _0n3,
      ONE: _1n3,
      create: (num) => mod(num, ORDER),
      isValid: (num) => {
        if (typeof num !== "bigint")
          throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
        return _0n3 <= num && num < ORDER;
      },
      is0: (num) => num === _0n3,
      isOdd: (num) => (num & _1n3) === _1n3,
      neg: (num) => mod(-num, ORDER),
      eql: (lhs, rhs) => lhs === rhs,
      sqr: (num) => mod(num * num, ORDER),
      add: (lhs, rhs) => mod(lhs + rhs, ORDER),
      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
      pow: (num, power) => FpPow(f2, num, power),
      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
      // Same as above, but doesn't normalize
      sqrN: (num) => num * num,
      addN: (lhs, rhs) => lhs + rhs,
      subN: (lhs, rhs) => lhs - rhs,
      mulN: (lhs, rhs) => lhs * rhs,
      inv: (num) => invert(num, ORDER),
      sqrt: redef.sqrt || ((n) => sqrtP(f2, n)),
      invertBatch: (lst) => FpInvertBatch(f2, lst),
      // TODO: do we really need constant cmov?
      // We don't have const-time bigints anyway, so probably will be not very useful
      cmov: (a, b, c) => c ? b : a,
      toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
      fromBytes: (bytes2) => {
        if (bytes2.length !== BYTES)
          throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
        return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
      }
    });
    return Object.freeze(f2);
  }
  function getFieldBytesLength(fieldOrder) {
    if (typeof fieldOrder !== "bigint")
      throw new Error("field order must be bigint");
    const bitLength = fieldOrder.toString(2).length;
    return Math.ceil(bitLength / 8);
  }
  function getMinHashLength(fieldOrder) {
    const length = getFieldBytesLength(fieldOrder);
    return length + Math.ceil(length / 2);
  }
  function mapHashToField(key, fieldOrder, isLE2 = false) {
    const len = key.length;
    const fieldLen = getFieldBytesLength(fieldOrder);
    const minLen = getMinHashLength(fieldOrder);
    if (len < 16 || len < minLen || len > 1024)
      throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
    const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
    const reduced = mod(num, fieldOrder - _1n3) + _1n3;
    return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
  }

  // ../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/curve.js
  var _0n4 = BigInt(0);
  var _1n4 = BigInt(1);
  var pointPrecomputes = /* @__PURE__ */ new WeakMap();
  var pointWindowSizes = /* @__PURE__ */ new WeakMap();
  function wNAF(c, bits) {
    const constTimeNegate = (condition, item) => {
      const neg = item.negate();
      return condition ? neg : item;
    };
    const validateW = (W) => {
      if (!Number.isSafeInteger(W) || W <= 0 || W > bits)
        throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);
    };
    const opts = (W) => {
      validateW(W);
      const windows = Math.ceil(bits / W) + 1;
      const windowSize = 2 ** (W - 1);
      return { windows, windowSize };
    };
    return {
      constTimeNegate,
      // non-const time multiplication ladder
      unsafeLadder(elm, n) {
        let p = c.ZERO;
        let d = elm;
        while (n > _0n4) {
          if (n & _1n4)
            p = p.add(d);
          d = d.double();
          n >>= _1n4;
        }
        return p;
      },
      /**
       * Creates a wNAF precomputation window. Used for caching.
       * Default window size is set by `utils.precompute()` and is equal to 8.
       * Number of precomputed points depends on the curve size:
       * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
       * - 𝑊 is the window size
       * - 𝑛 is the bitlength of the curve order.
       * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
       * @returns precomputed point tables flattened to a single array
       */
      precomputeWindow(elm, W) {
        const { windows, windowSize } = opts(W);
        const points = [];
        let p = elm;
        let base2 = p;
        for (let window2 = 0; window2 < windows; window2++) {
          base2 = p;
          points.push(base2);
          for (let i = 1; i < windowSize; i++) {
            base2 = base2.add(p);
            points.push(base2);
          }
          p = base2.double();
        }
        return points;
      },
      /**
       * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
       * @param W window size
       * @param precomputes precomputed tables
       * @param n scalar (we don't check here, but should be less than curve order)
       * @returns real and fake (for const-time) points
       */
      wNAF(W, precomputes, n) {
        const { windows, windowSize } = opts(W);
        let p = c.ZERO;
        let f2 = c.BASE;
        const mask = BigInt(2 ** W - 1);
        const maxNumber = 2 ** W;
        const shiftBy = BigInt(W);
        for (let window2 = 0; window2 < windows; window2++) {
          const offset = window2 * windowSize;
          let wbits = Number(n & mask);
          n >>= shiftBy;
          if (wbits > windowSize) {
            wbits -= maxNumber;
            n += _1n4;
          }
          const offset1 = offset;
          const offset2 = offset + Math.abs(wbits) - 1;
          const cond1 = window2 % 2 !== 0;
          const cond2 = wbits < 0;
          if (wbits === 0) {
            f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
          } else {
            p = p.add(constTimeNegate(cond2, precomputes[offset2]));
          }
        }
        return { p, f: f2 };
      },
      wNAFCached(P, n, transform) {
        const W = pointWindowSizes.get(P) || 1;
        let comp = pointPrecomputes.get(P);
        if (!comp) {
          comp = this.precomputeWindow(P, W);
          if (W !== 1)
            pointPrecomputes.set(P, transform(comp));
        }
        return this.wNAF(W, comp, n);
      },
      // We calculate precomputes for elliptic curve point multiplication
      // using windowed method. This specifies window size and
      // stores precomputed values. Usually only base point would be precomputed.
      setWindowSize(P, W) {
        validateW(W);
        pointWindowSizes.set(P, W);
        pointPrecomputes.delete(P);
      }
    };
  }
  function pippenger(c, field, points, scalars) {
    if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)
      throw new Error("arrays of points and scalars must have equal length");
    scalars.forEach((s, i) => {
      if (!field.isValid(s))
        throw new Error(`wrong scalar at index ${i}`);
    });
    points.forEach((p, i) => {
      if (!(p instanceof c))
        throw new Error(`wrong point at index ${i}`);
    });
    const wbits = bitLen(BigInt(points.length));
    const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1;
    const MASK = (1 << windowSize) - 1;
    const buckets = new Array(MASK + 1).fill(c.ZERO);
    const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;
    let sum = c.ZERO;
    for (let i = lastBits; i >= 0; i -= windowSize) {
      buckets.fill(c.ZERO);
      for (let j = 0; j < scalars.length; j++) {
        const scalar = scalars[j];
        const wbits2 = Number(scalar >> BigInt(i) & BigInt(MASK));
        buckets[wbits2] = buckets[wbits2].add(points[j]);
      }
      let resI = c.ZERO;
      for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {
        sumI = sumI.add(buckets[j]);
        resI = resI.add(sumI);
      }
      sum = sum.add(resI);
      if (i !== 0)
        for (let j = 0; j < windowSize; j++)
          sum = sum.double();
    }
    return sum;
  }
  function validateBasic(curve) {
    validateField(curve.Fp);
    validateObject(curve, {
      n: "bigint",
      h: "bigint",
      Gx: "field",
      Gy: "field"
    }, {
      nBitLength: "isSafeInteger",
      nByteLength: "isSafeInteger"
    });
    return Object.freeze({
      ...nLength(curve.n, curve.nBitLength),
      ...curve,
      ...{ p: curve.Fp.ORDER }
    });
  }

  // ../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/abstract/weierstrass.js
  function validateSigVerOpts(opts) {
    if (opts.lowS !== void 0)
      abool("lowS", opts.lowS);
    if (opts.prehash !== void 0)
      abool("prehash", opts.prehash);
  }
  function validatePointOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      a: "field",
      b: "field"
    }, {
      allowedPrivateKeyLengths: "array",
      wrapPrivateKey: "boolean",
      isTorsionFree: "function",
      clearCofactor: "function",
      allowInfinityPoint: "boolean",
      fromBytes: "function",
      toBytes: "function"
    });
    const { endo, Fp: Fp2, a } = opts;
    if (endo) {
      if (!Fp2.eql(a, Fp2.ZERO)) {
        throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
      }
      if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
        throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
      }
    }
    return Object.freeze({ ...opts });
  }
  var { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports;
  var DER = {
    // asn.1 DER encoding utils
    Err: class DERErr extends Error {
      constructor(m = "") {
        super(m);
      }
    },
    // Basic building block is TLV (Tag-Length-Value)
    _tlv: {
      encode: (tag, data) => {
        const { Err: E } = DER;
        if (tag < 0 || tag > 256)
          throw new E("tlv.encode: wrong tag");
        if (data.length & 1)
          throw new E("tlv.encode: unpadded data");
        const dataLen = data.length / 2;
        const len = numberToHexUnpadded(dataLen);
        if (len.length / 2 & 128)
          throw new E("tlv.encode: long form length too big");
        const lenLen = dataLen > 127 ? numberToHexUnpadded(len.length / 2 | 128) : "";
        return `${numberToHexUnpadded(tag)}${lenLen}${len}${data}`;
      },
      // v - value, l - left bytes (unparsed)
      decode(tag, data) {
        const { Err: E } = DER;
        let pos = 0;
        if (tag < 0 || tag > 256)
          throw new E("tlv.encode: wrong tag");
        if (data.length < 2 || data[pos++] !== tag)
          throw new E("tlv.decode: wrong tlv");
        const first = data[pos++];
        const isLong = !!(first & 128);
        let length = 0;
        if (!isLong)
          length = first;
        else {
          const lenLen = first & 127;
          if (!lenLen)
            throw new E("tlv.decode(long): indefinite length not supported");
          if (lenLen > 4)
            throw new E("tlv.decode(long): byte length is too big");
          const lengthBytes = data.subarray(pos, pos + lenLen);
          if (lengthBytes.length !== lenLen)
            throw new E("tlv.decode: length bytes not complete");
          if (lengthBytes[0] === 0)
            throw new E("tlv.decode(long): zero leftmost byte");
          for (const b of lengthBytes)
            length = length << 8 | b;
          pos += lenLen;
          if (length < 128)
            throw new E("tlv.decode(long): not minimal encoding");
        }
        const v = data.subarray(pos, pos + length);
        if (v.length !== length)
          throw new E("tlv.decode: wrong value length");
        return { v, l: data.subarray(pos + length) };
      }
    },
    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
    // since we always use positive integers here. It must always be empty:
    // - add zero byte if exists
    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
    _int: {
      encode(num) {
        const { Err: E } = DER;
        if (num < _0n5)
          throw new E("integer: negative integers are not allowed");
        let hex = numberToHexUnpadded(num);
        if (Number.parseInt(hex[0], 16) & 8)
          hex = "00" + hex;
        if (hex.length & 1)
          throw new E("unexpected assertion");
        return hex;
      },
      decode(data) {
        const { Err: E } = DER;
        if (data[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (data[0] === 0 && !(data[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return b2n(data);
      }
    },
    toSig(hex) {
      const { Err: E, _int: int, _tlv: tlv } = DER;
      const data = typeof hex === "string" ? h2b(hex) : hex;
      abytes(data);
      const { v: seqBytes, l: seqLeftBytes } = tlv.decode(48, data);
      if (seqLeftBytes.length)
        throw new E("Invalid signature: left bytes after parsing");
      const { v: rBytes, l: rLeftBytes } = tlv.decode(2, seqBytes);
      const { v: sBytes, l: sLeftBytes } = tlv.decode(2, rLeftBytes);
      if (sLeftBytes.length)
        throw new E("Invalid signature: left bytes after parsing");
      return { r: int.decode(rBytes), s: int.decode(sBytes) };
    },
    hexFromSig(sig) {
      const { _tlv: tlv, _int: int } = DER;
      const seq = `${tlv.encode(2, int.encode(sig.r))}${tlv.encode(2, int.encode(sig.s))}`;
      return tlv.encode(48, seq);
    }
  };
  var _0n5 = BigInt(0);
  var _1n5 = BigInt(1);
  var _2n4 = BigInt(2);
  var _3n2 = BigInt(3);
  var _4n2 = BigInt(4);
  function weierstrassPoints(opts) {
    const CURVE = validatePointOpts(opts);
    const { Fp: Fp2 } = CURVE;
    const Fn = Field(CURVE.n, CURVE.nBitLength);
    const toBytes3 = CURVE.toBytes || ((_c, point, _isCompressed) => {
      const a = point.toAffine();
      return concatBytes3(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
    });
    const fromBytes = CURVE.fromBytes || ((bytes2) => {
      const tail = bytes2.subarray(1);
      const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
      const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
      return { x, y };
    });
    function weierstrassEquation(x) {
      const { a, b } = CURVE;
      const x2 = Fp2.sqr(x);
      const x3 = Fp2.mul(x2, x);
      return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b);
    }
    if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
      throw new Error("bad generator point: equation left != right");
    function isWithinCurveOrder(num) {
      return inRange(num, _1n5, CURVE.n);
    }
    function normPrivateKeyToScalar(key) {
      const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;
      if (lengths && typeof key !== "bigint") {
        if (isBytes2(key))
          key = bytesToHex(key);
        if (typeof key !== "string" || !lengths.includes(key.length))
          throw new Error("Invalid key");
        key = key.padStart(nByteLength * 2, "0");
      }
      let num;
      try {
        num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
      } catch (error2) {
        throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
      }
      if (wrapPrivateKey)
        num = mod(num, N);
      aInRange("private key", num, _1n5, N);
      return num;
    }
    function assertPrjPoint(other) {
      if (!(other instanceof Point2))
        throw new Error("ProjectivePoint expected");
    }
    const toAffineMemo = memoized((p, iz) => {
      const { px: x, py: y, pz: z } = p;
      if (Fp2.eql(z, Fp2.ONE))
        return { x, y };
      const is0 = p.is0();
      if (iz == null)
        iz = is0 ? Fp2.ONE : Fp2.inv(z);
      const ax = Fp2.mul(x, iz);
      const ay = Fp2.mul(y, iz);
      const zz = Fp2.mul(z, iz);
      if (is0)
        return { x: Fp2.ZERO, y: Fp2.ZERO };
      if (!Fp2.eql(zz, Fp2.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    });
    const assertValidMemo = memoized((p) => {
      if (p.is0()) {
        if (CURVE.allowInfinityPoint && !Fp2.is0(p.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = p.toAffine();
      if (!Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp2.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp2.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!p.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
      return true;
    });
    class Point2 {
      constructor(px, py, pz) {
        this.px = px;
        this.py = py;
        this.pz = pz;
        if (px == null || !Fp2.isValid(px))
          throw new Error("x required");
        if (py == null || !Fp2.isValid(py))
          throw new Error("y required");
        if (pz == null || !Fp2.isValid(pz))
          throw new Error("z required");
        Object.freeze(this);
      }
      // Does not validate if the point is on-curve.
      // Use fromHex instead, or call assertValidity() later.
      static fromAffine(p) {
        const { x, y } = p || {};
        if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
          throw new Error("invalid affine point");
        if (p instanceof Point2)
          throw new Error("projective point not allowed");
        const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
        if (is0(x) && is0(y))
          return Point2.ZERO;
        return new Point2(x, y, Fp2.ONE);
      }
      get x() {
        return this.toAffine().x;
      }
      get y() {
        return this.toAffine().y;
      }
      /**
       * Takes a bunch of Projective Points but executes only one
       * inversion on all of them. Inversion is very slow operation,
       * so this improves performance massively.
       * Optimization: converts a list of projective points to a list of identical points with Z=1.
       */
      static normalizeZ(points) {
        const toInv = Fp2.invertBatch(points.map((p) => p.pz));
        return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
      }
      /**
       * Converts hash string or Uint8Array to Point.
       * @param hex short/long ECDSA hex
       */
      static fromHex(hex) {
        const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
        P.assertValidity();
        return P;
      }
      // Multiplies generator point by privateKey.
      static fromPrivateKey(privateKey) {
        return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
      }
      // Multiscalar Multiplication
      static msm(points, scalars) {
        return pippenger(Point2, Fn, points, scalars);
      }
      // "Private method", don't use it directly
      _setWindowSize(windowSize) {
        wnaf.setWindowSize(this, windowSize);
      }
      // A point on curve is valid if it conforms to equation.
      assertValidity() {
        assertValidMemo(this);
      }
      hasEvenY() {
        const { y } = this.toAffine();
        if (Fp2.isOdd)
          return !Fp2.isOdd(y);
        throw new Error("Field doesn't support isOdd");
      }
      /**
       * Compare one point to another.
       */
      equals(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
        const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
        return U1 && U2;
      }
      /**
       * Flips point to one corresponding to (x, -y) in Affine coordinates.
       */
      negate() {
        return new Point2(this.px, Fp2.neg(this.py), this.pz);
      }
      // Renes-Costello-Batina exception-free doubling formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 3
      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
      double() {
        const { a, b } = CURVE;
        const b3 = Fp2.mul(b, _3n2);
        const { px: X1, py: Y1, pz: Z1 } = this;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        let t0 = Fp2.mul(X1, X1);
        let t1 = Fp2.mul(Y1, Y1);
        let t2 = Fp2.mul(Z1, Z1);
        let t3 = Fp2.mul(X1, Y1);
        t3 = Fp2.add(t3, t3);
        Z3 = Fp2.mul(X1, Z1);
        Z3 = Fp2.add(Z3, Z3);
        X3 = Fp2.mul(a, Z3);
        Y3 = Fp2.mul(b3, t2);
        Y3 = Fp2.add(X3, Y3);
        X3 = Fp2.sub(t1, Y3);
        Y3 = Fp2.add(t1, Y3);
        Y3 = Fp2.mul(X3, Y3);
        X3 = Fp2.mul(t3, X3);
        Z3 = Fp2.mul(b3, Z3);
        t2 = Fp2.mul(a, t2);
        t3 = Fp2.sub(t0, t2);
        t3 = Fp2.mul(a, t3);
        t3 = Fp2.add(t3, Z3);
        Z3 = Fp2.add(t0, t0);
        t0 = Fp2.add(Z3, t0);
        t0 = Fp2.add(t0, t2);
        t0 = Fp2.mul(t0, t3);
        Y3 = Fp2.add(Y3, t0);
        t2 = Fp2.mul(Y1, Z1);
        t2 = Fp2.add(t2, t2);
        t0 = Fp2.mul(t2, t3);
        X3 = Fp2.sub(X3, t0);
        Z3 = Fp2.mul(t2, t1);
        Z3 = Fp2.add(Z3, Z3);
        Z3 = Fp2.add(Z3, Z3);
        return new Point2(X3, Y3, Z3);
      }
      // Renes-Costello-Batina exception-free addition formula.
      // There is 30% faster Jacobian formula, but it is not complete.
      // https://eprint.iacr.org/2015/1060, algorithm 1
      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
      add(other) {
        assertPrjPoint(other);
        const { px: X1, py: Y1, pz: Z1 } = this;
        const { px: X2, py: Y2, pz: Z2 } = other;
        let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
        const a = CURVE.a;
        const b3 = Fp2.mul(CURVE.b, _3n2);
        let t0 = Fp2.mul(X1, X2);
        let t1 = Fp2.mul(Y1, Y2);
        let t2 = Fp2.mul(Z1, Z2);
        let t3 = Fp2.add(X1, Y1);
        let t4 = Fp2.add(X2, Y2);
        t3 = Fp2.mul(t3, t4);
        t4 = Fp2.add(t0, t1);
        t3 = Fp2.sub(t3, t4);
        t4 = Fp2.add(X1, Z1);
        let t5 = Fp2.add(X2, Z2);
        t4 = Fp2.mul(t4, t5);
        t5 = Fp2.add(t0, t2);
        t4 = Fp2.sub(t4, t5);
        t5 = Fp2.add(Y1, Z1);
        X3 = Fp2.add(Y2, Z2);
        t5 = Fp2.mul(t5, X3);
        X3 = Fp2.add(t1, t2);
        t5 = Fp2.sub(t5, X3);
        Z3 = Fp2.mul(a, t4);
        X3 = Fp2.mul(b3, t2);
        Z3 = Fp2.add(X3, Z3);
        X3 = Fp2.sub(t1, Z3);
        Z3 = Fp2.add(t1, Z3);
        Y3 = Fp2.mul(X3, Z3);
        t1 = Fp2.add(t0, t0);
        t1 = Fp2.add(t1, t0);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.mul(b3, t4);
        t1 = Fp2.add(t1, t2);
        t2 = Fp2.sub(t0, t2);
        t2 = Fp2.mul(a, t2);
        t4 = Fp2.add(t4, t2);
        t0 = Fp2.mul(t1, t4);
        Y3 = Fp2.add(Y3, t0);
        t0 = Fp2.mul(t5, t4);
        X3 = Fp2.mul(t3, X3);
        X3 = Fp2.sub(X3, t0);
        t0 = Fp2.mul(t3, t1);
        Z3 = Fp2.mul(t5, Z3);
        Z3 = Fp2.add(Z3, t0);
        return new Point2(X3, Y3, Z3);
      }
      subtract(other) {
        return this.add(other.negate());
      }
      is0() {
        return this.equals(Point2.ZERO);
      }
      wNAF(n) {
        return wnaf.wNAFCached(this, n, Point2.normalizeZ);
      }
      /**
       * Non-constant-time multiplication. Uses double-and-add algorithm.
       * It's faster, but should only be used when you don't care about
       * an exposed private key e.g. sig verification, which works over *public* keys.
       */
      multiplyUnsafe(sc) {
        aInRange("scalar", sc, _0n5, CURVE.n);
        const I = Point2.ZERO;
        if (sc === _0n5)
          return I;
        if (sc === _1n5)
          return this;
        const { endo } = CURVE;
        if (!endo)
          return wnaf.unsafeLadder(this, sc);
        let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);
        let k1p = I;
        let k2p = I;
        let d = this;
        while (k1 > _0n5 || k2 > _0n5) {
          if (k1 & _1n5)
            k1p = k1p.add(d);
          if (k2 & _1n5)
            k2p = k2p.add(d);
          d = d.double();
          k1 >>= _1n5;
          k2 >>= _1n5;
        }
        if (k1neg)
          k1p = k1p.negate();
        if (k2neg)
          k2p = k2p.negate();
        k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        return k1p.add(k2p);
      }
      /**
       * Constant time multiplication.
       * Uses wNAF method. Windowed method may be 10% faster,
       * but takes 2x longer to generate and consumes 2x memory.
       * Uses precomputes when available.
       * Uses endomorphism for Koblitz curves.
       * @param scalar by which the point would be multiplied
       * @returns New point
       */
      multiply(scalar) {
        const { endo, n: N } = CURVE;
        aInRange("scalar", scalar, _1n5, N);
        let point, fake;
        if (endo) {
          const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);
          let { p: k1p, f: f1p } = this.wNAF(k1);
          let { p: k2p, f: f2p } = this.wNAF(k2);
          k1p = wnaf.constTimeNegate(k1neg, k1p);
          k2p = wnaf.constTimeNegate(k2neg, k2p);
          k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          point = k1p.add(k2p);
          fake = f1p.add(f2p);
        } else {
          const { p, f: f2 } = this.wNAF(scalar);
          point = p;
          fake = f2;
        }
        return Point2.normalizeZ([point, fake])[0];
      }
      /**
       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
       * Not using Strauss-Shamir trick: precomputation tables are faster.
       * The trick could be useful if both P and Q are not G (not in our case).
       * @returns non-zero affine point
       */
      multiplyAndAddUnsafe(Q, a, b) {
        const G = Point2.BASE;
        const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
        const sum = mul(this, a).add(mul(Q, b));
        return sum.is0() ? void 0 : sum;
      }
      // Converts Projective point to affine (x, y) coordinates.
      // Can accept precomputed Z^-1 - for example, from invertBatch.
      // (x, y, z) ∋ (x=x/z, y=y/z)
      toAffine(iz) {
        return toAffineMemo(this, iz);
      }
      isTorsionFree() {
        const { h: cofactor, isTorsionFree } = CURVE;
        if (cofactor === _1n5)
          return true;
        if (isTorsionFree)
          return isTorsionFree(Point2, this);
        throw new Error("isTorsionFree() has not been declared for the elliptic curve");
      }
      clearCofactor() {
        const { h: cofactor, clearCofactor } = CURVE;
        if (cofactor === _1n5)
          return this;
        if (clearCofactor)
          return clearCofactor(Point2, this);
        return this.multiplyUnsafe(CURVE.h);
      }
      toRawBytes(isCompressed = true) {
        abool("isCompressed", isCompressed);
        this.assertValidity();
        return toBytes3(Point2, this, isCompressed);
      }
      toHex(isCompressed = true) {
        abool("isCompressed", isCompressed);
        return bytesToHex(this.toRawBytes(isCompressed));
      }
    }
    Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
    Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
    const _bits = CURVE.nBitLength;
    const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
    return {
      CURVE,
      ProjectivePoint: Point2,
      normPrivateKeyToScalar,
      weierstrassEquation,
      isWithinCurveOrder
    };
  }
  function validateOpts(curve) {
    const opts = validateBasic(curve);
    validateObject(opts, {
      hash: "hash",
      hmac: "function",
      randomBytes: "function"
    }, {
      bits2int: "function",
      bits2int_modN: "function",
      lowS: "boolean"
    });
    return Object.freeze({ lowS: true, ...opts });
  }
  function weierstrass(curveDef) {
    const CURVE = validateOpts(curveDef);
    const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
    const compressedLen = Fp2.BYTES + 1;
    const uncompressedLen = 2 * Fp2.BYTES + 1;
    function modN(a) {
      return mod(a, CURVE_ORDER);
    }
    function invN(a) {
      return invert(a, CURVE_ORDER);
    }
    const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
      ...CURVE,
      toBytes(_c, point, isCompressed) {
        const a = point.toAffine();
        const x = Fp2.toBytes(a.x);
        const cat = concatBytes3;
        abool("isCompressed", isCompressed);
        if (isCompressed) {
          return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
        } else {
          return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
        }
      },
      fromBytes(bytes2) {
        const len = bytes2.length;
        const head = bytes2[0];
        const tail = bytes2.subarray(1);
        if (len === compressedLen && (head === 2 || head === 3)) {
          const x = bytesToNumberBE(tail);
          if (!inRange(x, _1n5, Fp2.ORDER))
            throw new Error("Point is not on curve");
          const y2 = weierstrassEquation(x);
          let y;
          try {
            y = Fp2.sqrt(y2);
          } catch (sqrtError) {
            const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
            throw new Error("Point is not on curve" + suffix);
          }
          const isYOdd = (y & _1n5) === _1n5;
          const isHeadOdd = (head & 1) === 1;
          if (isHeadOdd !== isYOdd)
            y = Fp2.neg(y);
          return { x, y };
        } else if (len === uncompressedLen && head === 4) {
          const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
          const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
          return { x, y };
        } else {
          throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
        }
      }
    });
    const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
    function isBiggerThanHalfOrder(number2) {
      const HALF = CURVE_ORDER >> _1n5;
      return number2 > HALF;
    }
    function normalizeS(s) {
      return isBiggerThanHalfOrder(s) ? modN(-s) : s;
    }
    const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
    class Signature {
      constructor(r, s, recovery) {
        this.r = r;
        this.s = s;
        this.recovery = recovery;
        this.assertValidity();
      }
      // pair (bytes of r, bytes of s)
      static fromCompact(hex) {
        const l = CURVE.nByteLength;
        hex = ensureBytes("compactSignature", hex, l * 2);
        return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
      }
      // DER encoded ECDSA signature
      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
      static fromDER(hex) {
        const { r, s } = DER.toSig(ensureBytes("DER", hex));
        return new Signature(r, s);
      }
      assertValidity() {
        aInRange("r", this.r, _1n5, CURVE_ORDER);
        aInRange("s", this.s, _1n5, CURVE_ORDER);
      }
      addRecoveryBit(recovery) {
        return new Signature(this.r, this.s, recovery);
      }
      recoverPublicKey(msgHash) {
        const { r, s, recovery: rec } = this;
        const h = bits2int_modN(ensureBytes("msgHash", msgHash));
        if (rec == null || ![0, 1, 2, 3].includes(rec))
          throw new Error("recovery id invalid");
        const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
        if (radj >= Fp2.ORDER)
          throw new Error("recovery id 2 or 3 invalid");
        const prefix = (rec & 1) === 0 ? "02" : "03";
        const R = Point2.fromHex(prefix + numToNByteStr(radj));
        const ir = invN(radj);
        const u1 = modN(-h * ir);
        const u2 = modN(s * ir);
        const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
        if (!Q)
          throw new Error("point at infinify");
        Q.assertValidity();
        return Q;
      }
      // Signatures should be low-s, to prevent malleability.
      hasHighS() {
        return isBiggerThanHalfOrder(this.s);
      }
      normalizeS() {
        return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
      }
      // DER-encoded
      toDERRawBytes() {
        return hexToBytes(this.toDERHex());
      }
      toDERHex() {
        return DER.hexFromSig({ r: this.r, s: this.s });
      }
      // padded bytes of r, then padded bytes of s
      toCompactRawBytes() {
        return hexToBytes(this.toCompactHex());
      }
      toCompactHex() {
        return numToNByteStr(this.r) + numToNByteStr(this.s);
      }
    }
    const utils = {
      isValidPrivateKey(privateKey) {
        try {
          normPrivateKeyToScalar(privateKey);
          return true;
        } catch (error2) {
          return false;
        }
      },
      normPrivateKeyToScalar,
      /**
       * Produces cryptographically secure private key from random of size
       * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
       */
      randomPrivateKey: () => {
        const length = getMinHashLength(CURVE.n);
        return mapHashToField(CURVE.randomBytes(length), CURVE.n);
      },
      /**
       * Creates precompute table for an arbitrary EC point. Makes point "cached".
       * Allows to massively speed-up `point.multiply(scalar)`.
       * @returns cached point
       * @example
       * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
       * fast.multiply(privKey); // much faster ECDH now
       */
      precompute(windowSize = 8, point = Point2.BASE) {
        point._setWindowSize(windowSize);
        point.multiply(BigInt(3));
        return point;
      }
    };
    function getPublicKey(privateKey, isCompressed = true) {
      return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
    }
    function isProbPub(item) {
      const arr = isBytes2(item);
      const str = typeof item === "string";
      const len = (arr || str) && item.length;
      if (arr)
        return len === compressedLen || len === uncompressedLen;
      if (str)
        return len === 2 * compressedLen || len === 2 * uncompressedLen;
      if (item instanceof Point2)
        return true;
      return false;
    }
    function getSharedSecret(privateA, publicB, isCompressed = true) {
      if (isProbPub(privateA))
        throw new Error("first arg must be private key");
      if (!isProbPub(publicB))
        throw new Error("second arg must be public key");
      const b = Point2.fromHex(publicB);
      return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
    }
    const bits2int = CURVE.bits2int || function(bytes2) {
      const num = bytesToNumberBE(bytes2);
      const delta = bytes2.length * 8 - CURVE.nBitLength;
      return delta > 0 ? num >> BigInt(delta) : num;
    };
    const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
      return modN(bits2int(bytes2));
    };
    const ORDER_MASK = bitMask(CURVE.nBitLength);
    function int2octets(num) {
      aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n5, ORDER_MASK);
      return numberToBytesBE(num, CURVE.nByteLength);
    }
    function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
      if (["recovered", "canonical"].some((k) => k in opts))
        throw new Error("sign() legacy options not supported");
      const { hash: hash3, randomBytes: randomBytes3 } = CURVE;
      let { lowS, prehash, extraEntropy: ent } = opts;
      if (lowS == null)
        lowS = true;
      msgHash = ensureBytes("msgHash", msgHash);
      validateSigVerOpts(opts);
      if (prehash)
        msgHash = ensureBytes("prehashed msgHash", hash3(msgHash));
      const h1int = bits2int_modN(msgHash);
      const d = normPrivateKeyToScalar(privateKey);
      const seedArgs = [int2octets(d), int2octets(h1int)];
      if (ent != null && ent !== false) {
        const e = ent === true ? randomBytes3(Fp2.BYTES) : ent;
        seedArgs.push(ensureBytes("extraEntropy", e));
      }
      const seed = concatBytes3(...seedArgs);
      const m = h1int;
      function k2sig(kBytes) {
        const k = bits2int(kBytes);
        if (!isWithinCurveOrder(k))
          return;
        const ik = invN(k);
        const q = Point2.BASE.multiply(k).toAffine();
        const r = modN(q.x);
        if (r === _0n5)
          return;
        const s = modN(ik * modN(m + r * d));
        if (s === _0n5)
          return;
        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n5);
        let normS = s;
        if (lowS && isBiggerThanHalfOrder(s)) {
          normS = normalizeS(s);
          recovery ^= 1;
        }
        return new Signature(r, normS, recovery);
      }
      return { seed, k2sig };
    }
    const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
    const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
    function sign(msgHash, privKey, opts = defaultSigOpts) {
      const { seed, k2sig } = prepSig(msgHash, privKey, opts);
      const C = CURVE;
      const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
      return drbg(seed, k2sig);
    }
    Point2.BASE._setWindowSize(8);
    function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
      const sg = signature;
      msgHash = ensureBytes("msgHash", msgHash);
      publicKey = ensureBytes("publicKey", publicKey);
      if ("strict" in opts)
        throw new Error("options.strict was renamed to lowS");
      validateSigVerOpts(opts);
      const { lowS, prehash } = opts;
      let _sig = void 0;
      let P;
      try {
        if (typeof sg === "string" || isBytes2(sg)) {
          try {
            _sig = Signature.fromDER(sg);
          } catch (derError) {
            if (!(derError instanceof DER.Err))
              throw derError;
            _sig = Signature.fromCompact(sg);
          }
        } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
          const { r: r2, s: s2 } = sg;
          _sig = new Signature(r2, s2);
        } else {
          throw new Error("PARSE");
        }
        P = Point2.fromHex(publicKey);
      } catch (error2) {
        if (error2.message === "PARSE")
          throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
        return false;
      }
      if (lowS && _sig.hasHighS())
        return false;
      if (prehash)
        msgHash = CURVE.hash(msgHash);
      const { r, s } = _sig;
      const h = bits2int_modN(msgHash);
      const is = invN(s);
      const u1 = modN(h * is);
      const u2 = modN(r * is);
      const R = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine();
      if (!R)
        return false;
      const v = modN(R.x);
      return v === r;
    }
    return {
      CURVE,
      getPublicKey,
      getSharedSecret,
      sign,
      verify,
      ProjectivePoint: Point2,
      Signature,
      utils
    };
  }

  // ../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/_shortw_utils.js
  function getHash(hash3) {
    return {
      hash: hash3,
      hmac: (key, ...msgs) => hmac(hash3, key, concatBytes2(...msgs)),
      randomBytes
    };
  }
  function createCurve(curveDef, defHash) {
    const create = (hash3) => weierstrass({ ...curveDef, ...getHash(hash3) });
    return Object.freeze({ ...create(defHash), create });
  }

  // ../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/esm/secp256k1.js
  var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
  var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
  var _1n6 = BigInt(1);
  var _2n5 = BigInt(2);
  var divNearest = (a, b) => (a + b / _2n5) / b;
  function sqrtMod(y) {
    const P = secp256k1P;
    const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
    const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
    const b2 = y * y * y % P;
    const b3 = b2 * b2 * y % P;
    const b6 = pow2(b3, _3n3, P) * b3 % P;
    const b9 = pow2(b6, _3n3, P) * b3 % P;
    const b11 = pow2(b9, _2n5, P) * b2 % P;
    const b22 = pow2(b11, _11n, P) * b11 % P;
    const b44 = pow2(b22, _22n, P) * b22 % P;
    const b88 = pow2(b44, _44n, P) * b44 % P;
    const b176 = pow2(b88, _88n, P) * b88 % P;
    const b220 = pow2(b176, _44n, P) * b44 % P;
    const b223 = pow2(b220, _3n3, P) * b3 % P;
    const t1 = pow2(b223, _23n, P) * b22 % P;
    const t2 = pow2(t1, _6n, P) * b2 % P;
    const root = pow2(t2, _2n5, P);
    if (!Fp.eql(Fp.sqr(root), y))
      throw new Error("Cannot find square root");
    return root;
  }
  var Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
  var secp256k1 = createCurve({
    a: BigInt(0),
    // equation params: a, b
    b: BigInt(7),
    // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
    Fp,
    // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
    n: secp256k1N,
    // Curve order, total count of valid points in the field
    // Base point (x, y) aka generator point
    Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
    Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
    h: BigInt(1),
    // Cofactor
    lowS: true,
    // Allow only low-S signatures by default in sign() and verify()
    /**
     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
     */
    endo: {
      beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
      splitScalar: (k) => {
        const n = secp256k1N;
        const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
        const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
        const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
        const b2 = a1;
        const POW_2_128 = BigInt("0x100000000000000000000000000000000");
        const c1 = divNearest(b2 * k, n);
        const c2 = divNearest(-b1 * k, n);
        let k1 = mod(k - c1 * a1 - c2 * a2, n);
        let k2 = mod(-c1 * b1 - c2 * b2, n);
        const k1neg = k1 > POW_2_128;
        const k2neg = k2 > POW_2_128;
        if (k1neg)
          k1 = n - k1;
        if (k2neg)
          k2 = n - k2;
        if (k1 > POW_2_128 || k2 > POW_2_128) {
          throw new Error("splitScalar: Endomorphism failed, k=" + k);
        }
        return { k1neg, k1, k2neg, k2 };
      }
    }
  }, sha256);
  var _0n6 = BigInt(0);
  var Point = secp256k1.ProjectivePoint;

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isPlaceholder.js
  function _isPlaceholder(a) {
    return a != null && typeof a === "object" && a["@@functional/placeholder"] === true;
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry1.js
  function _curry1(fn) {
    return function f1(a) {
      if (arguments.length === 0 || _isPlaceholder(a)) {
        return f1;
      } else {
        return fn.apply(this, arguments);
      }
    };
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry2.js
  function _curry2(fn) {
    return function f2(a, b) {
      switch (arguments.length) {
        case 0:
          return f2;
        case 1:
          return _isPlaceholder(a) ? f2 : _curry1(function(_b) {
            return fn(a, _b);
          });
        default:
          return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function(_a) {
            return fn(_a, b);
          }) : _isPlaceholder(b) ? _curry1(function(_b) {
            return fn(a, _b);
          }) : fn(a, b);
      }
    };
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry3.js
  function _curry3(fn) {
    return function f3(a, b, c) {
      switch (arguments.length) {
        case 0:
          return f3;
        case 1:
          return _isPlaceholder(a) ? f3 : _curry2(function(_b, _c) {
            return fn(a, _b, _c);
          });
        case 2:
          return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function(_a, _c) {
            return fn(_a, b, _c);
          }) : _isPlaceholder(b) ? _curry2(function(_b, _c) {
            return fn(a, _b, _c);
          }) : _curry1(function(_c) {
            return fn(a, b, _c);
          });
        default:
          return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) {
            return fn(_a, _b, c);
          }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) {
            return fn(_a, b, _c);
          }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) {
            return fn(a, _b, _c);
          }) : _isPlaceholder(a) ? _curry1(function(_a) {
            return fn(_a, b, c);
          }) : _isPlaceholder(b) ? _curry1(function(_b) {
            return fn(a, _b, c);
          }) : _isPlaceholder(c) ? _curry1(function(_c) {
            return fn(a, b, _c);
          }) : fn(a, b, c);
      }
    };
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_has.js
  function _has(prop, obj) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/type.js
  var type = /* @__PURE__ */ _curry1(function type2(val) {
    return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
  });
  var type_default = type;

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isObject.js
  function _isObject(x) {
    return Object.prototype.toString.call(x) === "[object Object]";
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_cloneRegExp.js
  function _cloneRegExp(pattern) {
    return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : "") + (pattern.dotAll ? "s" : ""));
  }

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_clone.js
  function _clone(value, deep, map2) {
    map2 || (map2 = new _ObjectMap());
    if (_isPrimitive(value)) {
      return value;
    }
    var copy = function copy2(copiedValue) {
      var cachedCopy = map2.get(value);
      if (cachedCopy) {
        return cachedCopy;
      }
      map2.set(value, copiedValue);
      for (var key in value) {
        if (Object.prototype.hasOwnProperty.call(value, key)) {
          copiedValue[key] = deep ? _clone(value[key], true, map2) : value[key];
        }
      }
      return copiedValue;
    };
    switch (type_default(value)) {
      case "Object":
        return copy(Object.create(Object.getPrototypeOf(value)));
      case "Array":
        return copy(Array(value.length));
      case "Date":
        return new Date(value.valueOf());
      case "RegExp":
        return _cloneRegExp(value);
      case "Int8Array":
      case "Uint8Array":
      case "Uint8ClampedArray":
      case "Int16Array":
      case "Uint16Array":
      case "Int32Array":
      case "Uint32Array":
      case "Float32Array":
      case "Float64Array":
      case "BigInt64Array":
      case "BigUint64Array":
        return value.slice();
      default:
        return value;
    }
  }
  function _isPrimitive(param) {
    var type3 = typeof param;
    return param == null || type3 != "object" && type3 != "function";
  }
  var _ObjectMap = /* @__PURE__ */ function() {
    function _ObjectMap2() {
      this.map = {};
      this.length = 0;
    }
    _ObjectMap2.prototype.set = function(key, value) {
      var hashedKey = this.hash(key);
      var bucket = this.map[hashedKey];
      if (!bucket) {
        this.map[hashedKey] = bucket = [];
      }
      bucket.push([key, value]);
      this.length += 1;
    };
    _ObjectMap2.prototype.hash = function(key) {
      var hashedKey = [];
      for (var value in key) {
        hashedKey.push(Object.prototype.toString.call(key[value]));
      }
      return hashedKey.join();
    };
    _ObjectMap2.prototype.get = function(key) {
      if (this.length <= 180) {
        for (var p in this.map) {
          var bucket = this.map[p];
          for (var i = 0; i < bucket.length; i += 1) {
            var element = bucket[i];
            if (element[0] === key) {
              return element[1];
            }
          }
        }
        return;
      }
      var hashedKey = this.hash(key);
      var bucket = this.map[hashedKey];
      if (!bucket) {
        return;
      }
      for (var i = 0; i < bucket.length; i += 1) {
        var element = bucket[i];
        if (element[0] === key) {
          return element[1];
        }
      }
    };
    return _ObjectMap2;
  }();

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/clone.js
  var clone = /* @__PURE__ */ _curry1(function clone2(value) {
    return value != null && typeof value.clone === "function" ? value.clone() : _clone(value, true);
  });
  var clone_default = clone;

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/mergeWithKey.js
  var mergeWithKey = /* @__PURE__ */ _curry3(function mergeWithKey2(fn, l, r) {
    var result = {};
    var k;
    l = l || {};
    r = r || {};
    for (k in l) {
      if (_has(k, l)) {
        result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];
      }
    }
    for (k in r) {
      if (_has(k, r) && !_has(k, result)) {
        result[k] = r[k];
      }
    }
    return result;
  });
  var mergeWithKey_default = mergeWithKey;

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/mergeDeepWithKey.js
  var mergeDeepWithKey = /* @__PURE__ */ _curry3(function mergeDeepWithKey2(fn, lObj, rObj) {
    return mergeWithKey_default(function(k, lVal, rVal) {
      if (_isObject(lVal) && _isObject(rVal)) {
        return mergeDeepWithKey2(fn, lVal, rVal);
      } else {
        return fn(k, lVal, rVal);
      }
    }, lObj, rObj);
  });
  var mergeDeepWithKey_default = mergeDeepWithKey;

  // ../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/mergeDeepRight.js
  var mergeDeepRight = /* @__PURE__ */ _curry2(function mergeDeepRight2(lObj, rObj) {
    return mergeDeepWithKey_default(function(k, lVal, rVal) {
      return rVal;
    }, lObj, rObj);
  });
  var mergeDeepRight_default = mergeDeepRight;

  // ../transactions/dist/index.mjs
  var ByteArrayCoder = class extends Coder {
    length;
    #paddingLength;
    constructor(length) {
      const paddingLength = (8 - length % 8) % 8;
      const encodedLength = length + paddingLength;
      super(
        "ByteArray",
        // While this might sound like a [u8; N] coder it's actually not.
        // A [u8; N] coder would pad every u8 to 8 bytes which would
        // make every u8 have the same size as a u64.
        // We are packing four u8s into u64s here, avoiding this padding.
        `[u64; ${encodedLength / 4}]`,
        encodedLength
      );
      this.length = length;
      this.#paddingLength = paddingLength;
    }
    encode(value) {
      const parts = [];
      const data = arrayify(value);
      parts.push(data);
      if (this.#paddingLength) {
        parts.push(new Uint8Array(this.#paddingLength));
      }
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];
      const value = decoded;
      if (this.#paddingLength) {
        [decoded, o] = [null, o + this.#paddingLength];
      }
      return [value, o];
    }
  };
  var TxPointerCoder = class extends StructCoder {
    constructor() {
      super("TxPointer", {
        blockHeight: new NumberCoder("u32", { padToWordSize: true }),
        txIndex: new NumberCoder("u16", { padToWordSize: true })
      });
    }
    static decodeFromGqlScalar(value) {
      if (value.length !== 12) {
        throw new FuelError(
          ErrorCode.DECODE_ERROR,
          `Invalid TxPointer scalar string length ${value.length}. It must have length 12.`
        );
      }
      const [blockHeight, txIndex] = [value.substring(0, 8), value.substring(8)];
      return {
        blockHeight: parseInt(blockHeight, 16),
        txIndex: parseInt(txIndex, 16)
      };
    }
  };
  var InputType = /* @__PURE__ */ ((InputType2) => {
    InputType2[InputType2["Coin"] = 0] = "Coin";
    InputType2[InputType2["Contract"] = 1] = "Contract";
    InputType2[InputType2["Message"] = 2] = "Message";
    return InputType2;
  })(InputType || {});
  var InputCoinCoder = class extends Coder {
    constructor() {
      super("InputCoin", "struct InputCoin", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.txID));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputIndex));
      parts.push(new B256Coder().encode(value.owner));
      parts.push(new BigNumberCoder("u64").encode(value.amount));
      parts.push(new B256Coder().encode(value.assetId));
      parts.push(new TxPointerCoder().encode(value.txPointer));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
      parts.push(new BigNumberCoder("u64").encode(value.predicateGasUsed));
      parts.push(new BigNumberCoder("u64").encode(value.predicateLength));
      parts.push(new BigNumberCoder("u64").encode(value.predicateDataLength));
      parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));
      parts.push(
        new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)
      );
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const txID = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputIndex = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const owner = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const amount = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const assetId = decoded;
      [decoded, o] = new TxPointerCoder().decode(data, o);
      const txPointer = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessIndex = Number(decoded);
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const predicateGasUsed = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const predicateLength = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const predicateDataLength = decoded;
      [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);
      const predicate = decoded;
      [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);
      const predicateData = decoded;
      return [
        {
          type: 0,
          txID,
          outputIndex,
          owner,
          amount,
          assetId,
          txPointer,
          witnessIndex,
          predicateGasUsed,
          predicateLength,
          predicateDataLength,
          predicate,
          predicateData
        },
        o
      ];
    }
  };
  var InputContractCoder = class extends Coder {
    constructor() {
      super("InputContract", "struct InputContract", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.txID));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputIndex));
      parts.push(new B256Coder().encode(value.balanceRoot));
      parts.push(new B256Coder().encode(value.stateRoot));
      parts.push(new TxPointerCoder().encode(value.txPointer));
      parts.push(new B256Coder().encode(value.contractID));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const txID = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputIndex = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const balanceRoot = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const stateRoot = decoded;
      [decoded, o] = new TxPointerCoder().decode(data, o);
      const txPointer = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const contractID = decoded;
      return [
        {
          type: 1,
          txID,
          outputIndex,
          balanceRoot,
          stateRoot,
          txPointer,
          contractID
        },
        o
      ];
    }
  };
  var InputMessageCoder = class extends Coder {
    constructor() {
      super("InputMessage", "struct InputMessage", 0);
    }
    static getMessageId(value) {
      const parts = [];
      parts.push(new ByteArrayCoder(32).encode(value.sender));
      parts.push(new ByteArrayCoder(32).encode(value.recipient));
      parts.push(new ByteArrayCoder(32).encode(value.nonce));
      parts.push(new BigNumberCoder("u64").encode(value.amount));
      parts.push(arrayify(value.data || "0x"));
      return sha2562(concat(parts));
    }
    static encodeData(messageData) {
      const bytes2 = arrayify(messageData || "0x");
      const dataLength = bytes2.length;
      return new ByteArrayCoder(dataLength).encode(bytes2);
    }
    encode(value) {
      const parts = [];
      const data = InputMessageCoder.encodeData(value.data);
      parts.push(new ByteArrayCoder(32).encode(value.sender));
      parts.push(new ByteArrayCoder(32).encode(value.recipient));
      parts.push(new BigNumberCoder("u64").encode(value.amount));
      parts.push(new ByteArrayCoder(32).encode(value.nonce));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
      parts.push(new BigNumberCoder("u64").encode(value.predicateGasUsed));
      parts.push(new BigNumberCoder("u64").encode(data.length));
      parts.push(new BigNumberCoder("u64").encode(value.predicateLength));
      parts.push(new BigNumberCoder("u64").encode(value.predicateDataLength));
      parts.push(new ByteArrayCoder(data.length).encode(data));
      parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));
      parts.push(
        new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)
      );
      return concat(parts);
    }
    static decodeData(messageData) {
      const bytes2 = arrayify(messageData);
      const dataLength = bytes2.length;
      const [data] = new ByteArrayCoder(dataLength).decode(bytes2, 0);
      return arrayify(data);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const sender = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const recipient = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const amount = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const nonce = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessIndex = Number(decoded);
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const predicateGasUsed = decoded;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const dataLength = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const predicateLength = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const predicateDataLength = decoded;
      [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);
      const messageData = decoded;
      [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);
      const predicate = decoded;
      [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);
      const predicateData = decoded;
      return [
        {
          type: 2,
          sender,
          recipient,
          amount,
          witnessIndex,
          nonce,
          predicateGasUsed,
          dataLength,
          predicateLength,
          predicateDataLength,
          data: messageData,
          predicate,
          predicateData
        },
        o
      ];
    }
  };
  var InputCoder = class extends Coder {
    constructor() {
      super("Input", "struct Input", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.type));
      const { type: type3 } = value;
      switch (type3) {
        case 0: {
          parts.push(new InputCoinCoder().encode(value));
          break;
        }
        case 1: {
          parts.push(new InputContractCoder().encode(value));
          break;
        }
        case 2: {
          parts.push(new InputMessageCoder().encode(value));
          break;
        }
        default: {
          throw new FuelError(
            ErrorCode.INVALID_TRANSACTION_INPUT,
            `Invalid transaction input type: ${type3}.`
          );
        }
      }
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o);
      const type3 = decoded;
      switch (type3) {
        case 0: {
          [decoded, o] = new InputCoinCoder().decode(data, o);
          return [decoded, o];
        }
        case 1: {
          [decoded, o] = new InputContractCoder().decode(data, o);
          return [decoded, o];
        }
        case 2: {
          [decoded, o] = new InputMessageCoder().decode(data, o);
          return [decoded, o];
        }
        default: {
          throw new FuelError(
            ErrorCode.INVALID_TRANSACTION_INPUT,
            `Invalid transaction input type: ${type3}.`
          );
        }
      }
    }
  };
  var OutputType = /* @__PURE__ */ ((OutputType2) => {
    OutputType2[OutputType2["Coin"] = 0] = "Coin";
    OutputType2[OutputType2["Contract"] = 1] = "Contract";
    OutputType2[OutputType2["Change"] = 2] = "Change";
    OutputType2[OutputType2["Variable"] = 3] = "Variable";
    OutputType2[OutputType2["ContractCreated"] = 4] = "ContractCreated";
    return OutputType2;
  })(OutputType || {});
  var OutputCoinCoder = class extends Coder {
    constructor() {
      super("OutputCoin", "struct OutputCoin", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.to));
      parts.push(new BigNumberCoder("u64").encode(value.amount));
      parts.push(new B256Coder().encode(value.assetId));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const to = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const amount = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const assetId = decoded;
      return [
        {
          type: 0,
          to,
          amount,
          assetId
        },
        o
      ];
    }
  };
  var OutputContractCoder = class extends Coder {
    constructor() {
      super("OutputContract", "struct OutputContract", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.inputIndex));
      parts.push(new B256Coder().encode(value.balanceRoot));
      parts.push(new B256Coder().encode(value.stateRoot));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o);
      const inputIndex = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const balanceRoot = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const stateRoot = decoded;
      return [
        {
          type: 1,
          inputIndex,
          balanceRoot,
          stateRoot
        },
        o
      ];
    }
  };
  var OutputChangeCoder = class extends Coder {
    constructor() {
      super("OutputChange", "struct OutputChange", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.to));
      parts.push(new BigNumberCoder("u64").encode(value.amount));
      parts.push(new B256Coder().encode(value.assetId));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const to = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const amount = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const assetId = decoded;
      return [
        {
          type: 2,
          to,
          amount,
          assetId
        },
        o
      ];
    }
  };
  var OutputVariableCoder = class extends Coder {
    constructor() {
      super("OutputVariable", "struct OutputVariable", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.to));
      parts.push(new BigNumberCoder("u64").encode(value.amount));
      parts.push(new B256Coder().encode(value.assetId));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const to = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const amount = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const assetId = decoded;
      return [
        {
          type: 3,
          to,
          amount,
          assetId
        },
        o
      ];
    }
  };
  var OutputContractCreatedCoder = class extends Coder {
    constructor() {
      super("OutputContractCreated", "struct OutputContractCreated", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.contractId));
      parts.push(new B256Coder().encode(value.stateRoot));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const contractId = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const stateRoot = decoded;
      return [
        {
          type: 4,
          contractId,
          stateRoot
        },
        o
      ];
    }
  };
  var OutputCoder = class extends Coder {
    constructor() {
      super("Output", " struct Output", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.type));
      const { type: type3 } = value;
      switch (type3) {
        case 0: {
          parts.push(new OutputCoinCoder().encode(value));
          break;
        }
        case 1: {
          parts.push(new OutputContractCoder().encode(value));
          break;
        }
        case 2: {
          parts.push(new OutputChangeCoder().encode(value));
          break;
        }
        case 3: {
          parts.push(new OutputVariableCoder().encode(value));
          break;
        }
        case 4: {
          parts.push(new OutputContractCreatedCoder().encode(value));
          break;
        }
        default: {
          throw new FuelError(
            ErrorCode.INVALID_TRANSACTION_OUTPUT,
            `Invalid transaction output type: ${type3}.`
          );
        }
      }
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o);
      const type3 = decoded;
      switch (type3) {
        case 0: {
          [decoded, o] = new OutputCoinCoder().decode(data, o);
          return [decoded, o];
        }
        case 1: {
          [decoded, o] = new OutputContractCoder().decode(data, o);
          return [decoded, o];
        }
        case 2: {
          [decoded, o] = new OutputChangeCoder().decode(data, o);
          return [decoded, o];
        }
        case 3: {
          [decoded, o] = new OutputVariableCoder().decode(data, o);
          return [decoded, o];
        }
        case 4: {
          [decoded, o] = new OutputContractCreatedCoder().decode(data, o);
          return [decoded, o];
        }
        default: {
          throw new FuelError(
            ErrorCode.INVALID_TRANSACTION_OUTPUT,
            `Invalid transaction output type: ${type3}.`
          );
        }
      }
    }
  };
  var PolicyType = /* @__PURE__ */ ((PolicyType2) => {
    PolicyType2[PolicyType2["Tip"] = 1] = "Tip";
    PolicyType2[PolicyType2["WitnessLimit"] = 2] = "WitnessLimit";
    PolicyType2[PolicyType2["Maturity"] = 4] = "Maturity";
    PolicyType2[PolicyType2["MaxFee"] = 8] = "MaxFee";
    return PolicyType2;
  })(PolicyType || {});
  var sortPolicies = (policies) => policies.sort((a, b) => a.type - b.type);
  function validateDuplicatedPolicies(policies) {
    const seenTypes = /* @__PURE__ */ new Set();
    policies.forEach((policy) => {
      if (seenTypes.has(policy.type)) {
        throw new FuelError(
          ErrorCode.DUPLICATED_POLICY,
          `Duplicate policy type found: ${8}`
        );
      }
      seenTypes.add(policy.type);
    });
  }
  var PoliciesCoder = class extends Coder {
    constructor() {
      super("Policies", "array Policy", 0);
    }
    encode(policies) {
      validateDuplicatedPolicies(policies);
      const sortedPolicies = sortPolicies(policies);
      const parts = [];
      sortedPolicies.forEach(({ data, type: type3 }) => {
        switch (type3) {
          case 8:
          case 1:
          case 2:
            parts.push(new BigNumberCoder("u64").encode(data));
            break;
          case 4:
            parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(data));
            break;
          default: {
            throw new FuelError(ErrorCode.INVALID_POLICY_TYPE, `Invalid policy type: ${type3}`);
          }
        }
      });
      return concat(parts);
    }
    decode(data, offset, policyTypes) {
      let o = offset;
      const policies = [];
      if (policyTypes & 1) {
        const [tip, nextOffset] = new BigNumberCoder("u64").decode(data, o);
        o = nextOffset;
        policies.push({ type: 1, data: tip });
      }
      if (policyTypes & 2) {
        const [witnessLimit, nextOffset] = new BigNumberCoder("u64").decode(data, o);
        o = nextOffset;
        policies.push({ type: 2, data: witnessLimit });
      }
      if (policyTypes & 4) {
        const [maturity, nextOffset] = new NumberCoder("u32", { padToWordSize: true }).decode(
          data,
          o
        );
        o = nextOffset;
        policies.push({ type: 4, data: maturity });
      }
      if (policyTypes & 8) {
        const [maxFee, nextOffset] = new BigNumberCoder("u64").decode(data, o);
        o = nextOffset;
        policies.push({ type: 8, data: maxFee });
      }
      return [policies, o];
    }
  };
  var ReceiptType = /* @__PURE__ */ ((ReceiptType2) => {
    ReceiptType2[ReceiptType2["Call"] = 0] = "Call";
    ReceiptType2[ReceiptType2["Return"] = 1] = "Return";
    ReceiptType2[ReceiptType2["ReturnData"] = 2] = "ReturnData";
    ReceiptType2[ReceiptType2["Panic"] = 3] = "Panic";
    ReceiptType2[ReceiptType2["Revert"] = 4] = "Revert";
    ReceiptType2[ReceiptType2["Log"] = 5] = "Log";
    ReceiptType2[ReceiptType2["LogData"] = 6] = "LogData";
    ReceiptType2[ReceiptType2["Transfer"] = 7] = "Transfer";
    ReceiptType2[ReceiptType2["TransferOut"] = 8] = "TransferOut";
    ReceiptType2[ReceiptType2["ScriptResult"] = 9] = "ScriptResult";
    ReceiptType2[ReceiptType2["MessageOut"] = 10] = "MessageOut";
    ReceiptType2[ReceiptType2["Mint"] = 11] = "Mint";
    ReceiptType2[ReceiptType2["Burn"] = 12] = "Burn";
    return ReceiptType2;
  })(ReceiptType || {});
  var getMintedAssetId = (contractId, subId) => {
    const contractIdBytes = arrayify(contractId);
    const subIdBytes = arrayify(subId);
    return sha2562(concat([contractIdBytes, subIdBytes]));
  };
  var StorageSlotCoder = class extends StructCoder {
    constructor() {
      super("StorageSlot", {
        key: new B256Coder(),
        value: new B256Coder()
      });
    }
  };
  var UpgradePurposeTypeEnum = /* @__PURE__ */ ((UpgradePurposeTypeEnum2) => {
    UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2["ConsensusParameters"] = 0] = "ConsensusParameters";
    UpgradePurposeTypeEnum2[UpgradePurposeTypeEnum2["StateTransition"] = 1] = "StateTransition";
    return UpgradePurposeTypeEnum2;
  })(UpgradePurposeTypeEnum || {});
  var UpgradePurposeCoder = class extends Coder {
    constructor() {
      super("UpgradePurpose", "UpgradePurpose", 0);
    }
    encode(upgradePurposeType) {
      const parts = [];
      const { type: type3 } = upgradePurposeType;
      parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(type3));
      switch (type3) {
        case 0: {
          const data = upgradePurposeType.data;
          parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(data.witnessIndex));
          parts.push(new B256Coder().encode(data.checksum));
          break;
        }
        case 1: {
          const data = upgradePurposeType.data;
          parts.push(new B256Coder().encode(data.bytecodeRoot));
          break;
        }
        default: {
          throw new FuelError(
            ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
            `Unsupported transaction type: ${type3}`
          );
        }
      }
      return concat(parts);
    }
    decode(data, offset) {
      let o = offset;
      let decoded;
      [decoded, o] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o);
      const type3 = decoded;
      switch (type3) {
        case 0: {
          [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
          const witnessIndex = decoded;
          [decoded, o] = new B256Coder().decode(data, o);
          const checksum = decoded;
          return [{ type: type3, data: { witnessIndex, checksum } }, o];
        }
        case 1: {
          [decoded, o] = new B256Coder().decode(data, o);
          const bytecodeRoot = decoded;
          return [{ type: type3, data: { bytecodeRoot } }, o];
        }
        default: {
          throw new FuelError(
            ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
            `Unsupported transaction type: ${type3}`
          );
        }
      }
    }
  };
  var WitnessCoder = class extends Coder {
    constructor() {
      super(
        "Witness",
        // Types of dynamic length are not supported in the ABI
        "unknown",
        0
      );
    }
    encode(value) {
      const parts = [];
      parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.dataLength));
      parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const dataLength = decoded;
      [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);
      const witnessData = decoded;
      return [
        {
          dataLength,
          data: witnessData
        },
        o
      ];
    }
  };
  var TransactionType = /* @__PURE__ */ ((TransactionType2) => {
    TransactionType2[TransactionType2["Script"] = 0] = "Script";
    TransactionType2[TransactionType2["Create"] = 1] = "Create";
    TransactionType2[TransactionType2["Mint"] = 2] = "Mint";
    TransactionType2[TransactionType2["Upgrade"] = 3] = "Upgrade";
    TransactionType2[TransactionType2["Upload"] = 4] = "Upload";
    TransactionType2[TransactionType2["Blob"] = 5] = "Blob";
    return TransactionType2;
  })(TransactionType || {});
  var TransactionScriptCoder = class extends Coder {
    constructor() {
      super("TransactionScript", "struct TransactionScript", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new BigNumberCoder("u64").encode(value.scriptGasLimit));
      parts.push(new B256Coder().encode(value.receiptsRoot));
      parts.push(new BigNumberCoder("u64").encode(value.scriptLength));
      parts.push(new BigNumberCoder("u64").encode(value.scriptDataLength));
      parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
      parts.push(new ByteArrayCoder(value.scriptLength.toNumber()).encode(value.script));
      parts.push(new ByteArrayCoder(value.scriptDataLength.toNumber()).encode(value.scriptData));
      parts.push(new PoliciesCoder().encode(value.policies));
      parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
      parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
      parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const scriptGasLimit = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const receiptsRoot = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const scriptLength = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const scriptDataLength = decoded;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const policyTypes = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const inputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessesCount = decoded;
      [decoded, o] = new ByteArrayCoder(scriptLength.toNumber()).decode(data, o);
      const script = decoded;
      [decoded, o] = new ByteArrayCoder(scriptDataLength.toNumber()).decode(data, o);
      const scriptData = decoded;
      [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);
      const policies = decoded;
      [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);
      const inputs = decoded;
      [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);
      const outputs = decoded;
      [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);
      const witnesses = decoded;
      return [
        {
          type: 0,
          scriptGasLimit,
          scriptLength,
          scriptDataLength,
          policyTypes,
          inputsCount,
          outputsCount,
          witnessesCount,
          receiptsRoot,
          script,
          scriptData,
          policies,
          inputs,
          outputs,
          witnesses
        },
        o
      ];
    }
  };
  var TransactionCreateCoder = class extends Coder {
    constructor() {
      super("TransactionCreate", "struct TransactionCreate", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.bytecodeWitnessIndex));
      parts.push(new B256Coder().encode(value.salt));
      parts.push(new BigNumberCoder("u64").encode(value.storageSlotsCount));
      parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
      parts.push(
        new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount.toNumber()).encode(
          value.storageSlots
        )
      );
      parts.push(new PoliciesCoder().encode(value.policies));
      parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
      parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
      parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const bytecodeWitnessIndex = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const salt = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const storageSlotsCount = decoded;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const policyTypes = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const inputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessesCount = decoded;
      [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount.toNumber()).decode(
        data,
        o
      );
      const storageSlots = decoded;
      [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);
      const policies = decoded;
      [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);
      const inputs = decoded;
      [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);
      const outputs = decoded;
      [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);
      const witnesses = decoded;
      return [
        {
          type: 1,
          bytecodeWitnessIndex,
          policyTypes,
          storageSlotsCount,
          inputsCount,
          outputsCount,
          witnessesCount,
          salt,
          policies,
          storageSlots,
          inputs,
          outputs,
          witnesses
        },
        o
      ];
    }
  };
  var TransactionMintCoder = class extends Coder {
    constructor() {
      super("TransactionMint", "struct TransactionMint", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new TxPointerCoder().encode(value.txPointer));
      parts.push(new InputContractCoder().encode(value.inputContract));
      parts.push(new OutputContractCoder().encode(value.outputContract));
      parts.push(new BigNumberCoder("u64").encode(value.mintAmount));
      parts.push(new B256Coder().encode(value.mintAssetId));
      parts.push(new BigNumberCoder("u64").encode(value.gasPrice));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new TxPointerCoder().decode(data, o);
      const txPointer = decoded;
      [decoded, o] = new InputContractCoder().decode(data, o);
      const inputContract = decoded;
      [decoded, o] = new OutputContractCoder().decode(data, o);
      const outputContract = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const mintAmount = decoded;
      [decoded, o] = new B256Coder().decode(data, o);
      const mintAssetId = decoded;
      [decoded, o] = new BigNumberCoder("u64").decode(data, o);
      const gasPrice = decoded;
      return [
        {
          type: 2,
          txPointer,
          inputContract,
          outputContract,
          mintAmount,
          mintAssetId,
          gasPrice
        },
        o
      ];
    }
  };
  var TransactionUpgradeCoder = class extends Coder {
    constructor() {
      super("TransactionUpgrade", "struct TransactionUpgrade", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new UpgradePurposeCoder().encode(value.upgradePurpose));
      parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
      parts.push(new PoliciesCoder().encode(value.policies));
      parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
      parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
      parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new UpgradePurposeCoder().decode(data, o);
      const upgradePurpose = decoded;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const policyTypes = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const inputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessesCount = decoded;
      [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);
      const policies = decoded;
      [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);
      const inputs = decoded;
      [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);
      const outputs = decoded;
      [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);
      const witnesses = decoded;
      return [
        {
          type: 3,
          upgradePurpose,
          policyTypes,
          inputsCount,
          outputsCount,
          witnessesCount,
          policies,
          inputs,
          outputs,
          witnesses
        },
        o
      ];
    }
  };
  var TransactionUploadCoder = class extends Coder {
    constructor() {
      super("TransactionUpload", "struct TransactionUpload", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.root));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.subsectionIndex));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.subsectionsNumber));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.proofSetCount));
      parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
      parts.push(new ArrayCoder(new B256Coder(), value.proofSetCount).encode(value.proofSet));
      parts.push(new PoliciesCoder().encode(value.policies));
      parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
      parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
      parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const root = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessIndex = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const subsectionIndex = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const subsectionsNumber = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const proofSetCount = decoded;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const policyTypes = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const inputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessesCount = decoded;
      [decoded, o] = new ArrayCoder(new B256Coder(), proofSetCount).decode(data, o);
      const proofSet = decoded;
      [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);
      const policies = decoded;
      [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);
      const inputs = decoded;
      [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);
      const outputs = decoded;
      [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);
      const witnesses = decoded;
      return [
        {
          type: 4,
          root,
          witnessIndex,
          subsectionIndex,
          subsectionsNumber,
          proofSetCount,
          policyTypes,
          inputsCount,
          outputsCount,
          witnessesCount,
          proofSet,
          policies,
          inputs,
          outputs,
          witnesses
        },
        o
      ];
    }
  };
  var TransactionBlobCoder = class extends Coder {
    constructor() {
      super("TransactionBlob", "struct TransactionBlob", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new B256Coder().encode(value.blobId));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessIndex));
      parts.push(new NumberCoder("u32", { padToWordSize: true }).encode(value.policyTypes));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.inputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.outputsCount));
      parts.push(new NumberCoder("u16", { padToWordSize: true }).encode(value.witnessesCount));
      parts.push(new PoliciesCoder().encode(value.policies));
      parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));
      parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));
      parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new B256Coder().decode(data, o);
      const blobId = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessIndex = decoded;
      [decoded, o] = new NumberCoder("u32", { padToWordSize: true }).decode(data, o);
      const policyTypes = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const inputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const outputsCount = decoded;
      [decoded, o] = new NumberCoder("u16", { padToWordSize: true }).decode(data, o);
      const witnessesCount = decoded;
      [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);
      const policies = decoded;
      [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);
      const inputs = decoded;
      [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);
      const outputs = decoded;
      [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);
      const witnesses = decoded;
      return [
        {
          type: 5,
          blobId,
          witnessIndex,
          policyTypes,
          inputsCount,
          outputsCount,
          witnessesCount,
          policies,
          inputs,
          outputs,
          witnesses
        },
        o
      ];
    }
  };
  var TransactionCoder = class extends Coder {
    constructor() {
      super("Transaction", "struct Transaction", 0);
    }
    encode(value) {
      const parts = [];
      parts.push(new NumberCoder("u8", { padToWordSize: true }).encode(value.type));
      const { type: type3 } = value;
      switch (value.type) {
        case 0: {
          parts.push(
            new TransactionScriptCoder().encode(value)
          );
          break;
        }
        case 1: {
          parts.push(
            new TransactionCreateCoder().encode(value)
          );
          break;
        }
        case 2: {
          parts.push(new TransactionMintCoder().encode(value));
          break;
        }
        case 3: {
          parts.push(
            new TransactionUpgradeCoder().encode(value)
          );
          break;
        }
        case 4: {
          parts.push(
            new TransactionUploadCoder().encode(value)
          );
          break;
        }
        case 5: {
          parts.push(new TransactionBlobCoder().encode(value));
          break;
        }
        default: {
          throw new FuelError(
            ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
            `Unsupported transaction type: ${type3}`
          );
        }
      }
      return concat(parts);
    }
    decode(data, offset) {
      let decoded;
      let o = offset;
      [decoded, o] = new NumberCoder("u8", { padToWordSize: true }).decode(data, o);
      const type3 = decoded;
      switch (type3) {
        case 0: {
          [decoded, o] = new TransactionScriptCoder().decode(data, o);
          return [decoded, o];
        }
        case 1: {
          [decoded, o] = new TransactionCreateCoder().decode(data, o);
          return [decoded, o];
        }
        case 2: {
          [decoded, o] = new TransactionMintCoder().decode(data, o);
          return [decoded, o];
        }
        case 3: {
          [decoded, o] = new TransactionUpgradeCoder().decode(data, o);
          return [decoded, o];
        }
        case 4: {
          [decoded, o] = new TransactionUploadCoder().decode(data, o);
          return [decoded, o];
        }
        case 5: {
          [decoded, o] = new TransactionBlobCoder().decode(data, o);
          return [decoded, o];
        }
        default: {
          throw new FuelError(
            ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
            `Unsupported transaction type: ${type3}`
          );
        }
      }
    }
  };

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/defaultJsonSerializer.js
  var defaultJsonSerializer = JSON;

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/helpers.js
  var uppercase = (str) => str.toUpperCase();
  var HeadersInstanceToPlainObject = (headers) => {
    const o = {};
    headers.forEach((v, k) => {
      o[k] = v;
    });
    return o;
  };

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/parseArgs.js
  var parseRequestArgs = (documentOrOptions, variables, requestHeaders) => {
    return documentOrOptions.document ? documentOrOptions : {
      document: documentOrOptions,
      variables,
      requestHeaders,
      signal: void 0
    };
  };
  var parseRawRequestArgs = (queryOrOptions, variables, requestHeaders) => {
    return queryOrOptions.query ? queryOrOptions : {
      query: queryOrOptions,
      variables,
      requestHeaders,
      signal: void 0
    };
  };
  var parseBatchRequestArgs = (documentsOrOptions, requestHeaders) => {
    return documentsOrOptions.documents ? documentsOrOptions : {
      documents: documentsOrOptions,
      requestHeaders,
      signal: void 0
    };
  };

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/devAssert.mjs
  function devAssert(condition, message) {
    const booleanCondition = Boolean(condition);
    if (!booleanCondition) {
      throw new Error(message);
    }
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/isObjectLike.mjs
  function isObjectLike(value) {
    return typeof value == "object" && value !== null;
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/invariant.mjs
  function invariant(condition, message) {
    const booleanCondition = Boolean(condition);
    if (!booleanCondition) {
      throw new Error(
        message != null ? message : "Unexpected invariant triggered."
      );
    }
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/location.mjs
  var LineRegExp = /\r\n|[\n\r]/g;
  function getLocation(source, position) {
    let lastLineStart = 0;
    let line = 1;
    for (const match of source.body.matchAll(LineRegExp)) {
      typeof match.index === "number" || invariant(false);
      if (match.index >= position) {
        break;
      }
      lastLineStart = match.index + match[0].length;
      line += 1;
    }
    return {
      line,
      column: position + 1 - lastLineStart
    };
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printLocation.mjs
  function printLocation(location) {
    return printSourceLocation(
      location.source,
      getLocation(location.source, location.start)
    );
  }
  function printSourceLocation(source, sourceLocation) {
    const firstLineColumnOffset = source.locationOffset.column - 1;
    const body = "".padStart(firstLineColumnOffset) + source.body;
    const lineIndex = sourceLocation.line - 1;
    const lineOffset = source.locationOffset.line - 1;
    const lineNum = sourceLocation.line + lineOffset;
    const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
    const columnNum = sourceLocation.column + columnOffset;
    const locationStr = `${source.name}:${lineNum}:${columnNum}
`;
    const lines = body.split(/\r\n|[\n\r]/g);
    const locationLine = lines[lineIndex];
    if (locationLine.length > 120) {
      const subLineIndex = Math.floor(columnNum / 80);
      const subLineColumnNum = columnNum % 80;
      const subLines = [];
      for (let i = 0; i < locationLine.length; i += 80) {
        subLines.push(locationLine.slice(i, i + 80));
      }
      return locationStr + printPrefixedLines([
        [`${lineNum} |`, subLines[0]],
        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ["|", subLine]),
        ["|", "^".padStart(subLineColumnNum)],
        ["|", subLines[subLineIndex + 1]]
      ]);
    }
    return locationStr + printPrefixedLines([
      // Lines specified like this: ["prefix", "string"],
      [`${lineNum - 1} |`, lines[lineIndex - 1]],
      [`${lineNum} |`, locationLine],
      ["|", "^".padStart(columnNum)],
      [`${lineNum + 1} |`, lines[lineIndex + 1]]
    ]);
  }
  function printPrefixedLines(lines) {
    const existingLines = lines.filter(([_, line]) => line !== void 0);
    const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
    return existingLines.map(([prefix, line]) => prefix.padStart(padLen) + (line ? " " + line : "")).join("\n");
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/error/GraphQLError.mjs
  function toNormalizedOptions(args) {
    const firstArg = args[0];
    if (firstArg == null || "kind" in firstArg || "length" in firstArg) {
      return {
        nodes: firstArg,
        source: args[1],
        positions: args[2],
        path: args[3],
        originalError: args[4],
        extensions: args[5]
      };
    }
    return firstArg;
  }
  var GraphQLError = class extends Error {
    /**
     * An array of `{ line, column }` locations within the source GraphQL document
     * which correspond to this error.
     *
     * Errors during validation often contain multiple locations, for example to
     * point out two things with the same name. Errors during execution include a
     * single location, the field which produced the error.
     *
     * Enumerable, and appears in the result of JSON.stringify().
     */
    /**
     * An array describing the JSON-path into the execution response which
     * corresponds to this error. Only included for errors during execution.
     *
     * Enumerable, and appears in the result of JSON.stringify().
     */
    /**
     * An array of GraphQL AST Nodes corresponding to this error.
     */
    /**
     * The source GraphQL document for the first location of this error.
     *
     * Note that if this Error represents more than one node, the source may not
     * represent nodes after the first node.
     */
    /**
     * An array of character offsets within the source GraphQL document
     * which correspond to this error.
     */
    /**
     * The original error thrown from a field resolver during execution.
     */
    /**
     * Extension fields to add to the formatted error.
     */
    /**
     * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
     */
    constructor(message, ...rawArgs) {
      var _this$nodes, _nodeLocations$, _ref;
      const { nodes, source, positions, path: path3, originalError, extensions } = toNormalizedOptions(rawArgs);
      super(message);
      this.name = "GraphQLError";
      this.path = path3 !== null && path3 !== void 0 ? path3 : void 0;
      this.originalError = originalError !== null && originalError !== void 0 ? originalError : void 0;
      this.nodes = undefinedIfEmpty(
        Array.isArray(nodes) ? nodes : nodes ? [nodes] : void 0
      );
      const nodeLocations = undefinedIfEmpty(
        (_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node) => node.loc).filter((loc) => loc != null)
      );
      this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;
      this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => loc.start);
      this.locations = positions && source ? positions.map((pos) => getLocation(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc) => getLocation(loc.source, loc.start));
      const originalExtensions = isObjectLike(
        originalError === null || originalError === void 0 ? void 0 : originalError.extensions
      ) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : void 0;
      this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : /* @__PURE__ */ Object.create(null);
      Object.defineProperties(this, {
        message: {
          writable: true,
          enumerable: true
        },
        name: {
          enumerable: false
        },
        nodes: {
          enumerable: false
        },
        source: {
          enumerable: false
        },
        positions: {
          enumerable: false
        },
        originalError: {
          enumerable: false
        }
      });
      if (originalError !== null && originalError !== void 0 && originalError.stack) {
        Object.defineProperty(this, "stack", {
          value: originalError.stack,
          writable: true,
          configurable: true
        });
      } else if (Error.captureStackTrace) {
        Error.captureStackTrace(this, GraphQLError);
      } else {
        Object.defineProperty(this, "stack", {
          value: Error().stack,
          writable: true,
          configurable: true
        });
      }
    }
    get [Symbol.toStringTag]() {
      return "GraphQLError";
    }
    toString() {
      let output2 = this.message;
      if (this.nodes) {
        for (const node of this.nodes) {
          if (node.loc) {
            output2 += "\n\n" + printLocation(node.loc);
          }
        }
      } else if (this.source && this.locations) {
        for (const location of this.locations) {
          output2 += "\n\n" + printSourceLocation(this.source, location);
        }
      }
      return output2;
    }
    toJSON() {
      const formattedError = {
        message: this.message
      };
      if (this.locations != null) {
        formattedError.locations = this.locations;
      }
      if (this.path != null) {
        formattedError.path = this.path;
      }
      if (this.extensions != null && Object.keys(this.extensions).length > 0) {
        formattedError.extensions = this.extensions;
      }
      return formattedError;
    }
  };
  function undefinedIfEmpty(array) {
    return array === void 0 || array.length === 0 ? void 0 : array;
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/error/syntaxError.mjs
  function syntaxError(source, position, description) {
    return new GraphQLError(`Syntax Error: ${description}`, {
      source,
      positions: [position]
    });
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/ast.mjs
  var Location = class {
    /**
     * The character offset at which this Node begins.
     */
    /**
     * The character offset at which this Node ends.
     */
    /**
     * The Token at which this Node begins.
     */
    /**
     * The Token at which this Node ends.
     */
    /**
     * The Source document the AST represents.
     */
    constructor(startToken, endToken, source) {
      this.start = startToken.start;
      this.end = endToken.end;
      this.startToken = startToken;
      this.endToken = endToken;
      this.source = source;
    }
    get [Symbol.toStringTag]() {
      return "Location";
    }
    toJSON() {
      return {
        start: this.start,
        end: this.end
      };
    }
  };
  var Token = class {
    /**
     * The kind of Token.
     */
    /**
     * The character offset at which this Node begins.
     */
    /**
     * The character offset at which this Node ends.
     */
    /**
     * The 1-indexed line number on which this Token appears.
     */
    /**
     * The 1-indexed column number at which this Token begins.
     */
    /**
     * For non-punctuation tokens, represents the interpreted value of the token.
     *
     * Note: is undefined for punctuation tokens, but typed as string for
     * convenience in the parser.
     */
    /**
     * Tokens exist as nodes in a double-linked-list amongst all tokens
     * including ignored tokens. <SOF> is always the first node and <EOF>
     * the last.
     */
    constructor(kind, start, end, line, column, value) {
      this.kind = kind;
      this.start = start;
      this.end = end;
      this.line = line;
      this.column = column;
      this.value = value;
      this.prev = null;
      this.next = null;
    }
    get [Symbol.toStringTag]() {
      return "Token";
    }
    toJSON() {
      return {
        kind: this.kind,
        value: this.value,
        line: this.line,
        column: this.column
      };
    }
  };
  var QueryDocumentKeys = {
    Name: [],
    Document: ["definitions"],
    OperationDefinition: [
      "name",
      "variableDefinitions",
      "directives",
      "selectionSet"
    ],
    VariableDefinition: ["variable", "type", "defaultValue", "directives"],
    Variable: ["name"],
    SelectionSet: ["selections"],
    Field: ["alias", "name", "arguments", "directives", "selectionSet"],
    Argument: ["name", "value"],
    FragmentSpread: ["name", "directives"],
    InlineFragment: ["typeCondition", "directives", "selectionSet"],
    FragmentDefinition: [
      "name",
      // Note: fragment variable definitions are deprecated and will removed in v17.0.0
      "variableDefinitions",
      "typeCondition",
      "directives",
      "selectionSet"
    ],
    IntValue: [],
    FloatValue: [],
    StringValue: [],
    BooleanValue: [],
    NullValue: [],
    EnumValue: [],
    ListValue: ["values"],
    ObjectValue: ["fields"],
    ObjectField: ["name", "value"],
    Directive: ["name", "arguments"],
    NamedType: ["name"],
    ListType: ["type"],
    NonNullType: ["type"],
    SchemaDefinition: ["description", "directives", "operationTypes"],
    OperationTypeDefinition: ["type"],
    ScalarTypeDefinition: ["description", "name", "directives"],
    ObjectTypeDefinition: [
      "description",
      "name",
      "interfaces",
      "directives",
      "fields"
    ],
    FieldDefinition: ["description", "name", "arguments", "type", "directives"],
    InputValueDefinition: [
      "description",
      "name",
      "type",
      "defaultValue",
      "directives"
    ],
    InterfaceTypeDefinition: [
      "description",
      "name",
      "interfaces",
      "directives",
      "fields"
    ],
    UnionTypeDefinition: ["description", "name", "directives", "types"],
    EnumTypeDefinition: ["description", "name", "directives", "values"],
    EnumValueDefinition: ["description", "name", "directives"],
    InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
    DirectiveDefinition: ["description", "name", "arguments", "locations"],
    SchemaExtension: ["directives", "operationTypes"],
    ScalarTypeExtension: ["name", "directives"],
    ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
    InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
    UnionTypeExtension: ["name", "directives", "types"],
    EnumTypeExtension: ["name", "directives", "values"],
    InputObjectTypeExtension: ["name", "directives", "fields"]
  };
  var kindValues = new Set(Object.keys(QueryDocumentKeys));
  function isNode(maybeNode) {
    const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
    return typeof maybeKind === "string" && kindValues.has(maybeKind);
  }
  var OperationTypeNode;
  (function(OperationTypeNode2) {
    OperationTypeNode2["QUERY"] = "query";
    OperationTypeNode2["MUTATION"] = "mutation";
    OperationTypeNode2["SUBSCRIPTION"] = "subscription";
  })(OperationTypeNode || (OperationTypeNode = {}));

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/directiveLocation.mjs
  var DirectiveLocation;
  (function(DirectiveLocation2) {
    DirectiveLocation2["QUERY"] = "QUERY";
    DirectiveLocation2["MUTATION"] = "MUTATION";
    DirectiveLocation2["SUBSCRIPTION"] = "SUBSCRIPTION";
    DirectiveLocation2["FIELD"] = "FIELD";
    DirectiveLocation2["FRAGMENT_DEFINITION"] = "FRAGMENT_DEFINITION";
    DirectiveLocation2["FRAGMENT_SPREAD"] = "FRAGMENT_SPREAD";
    DirectiveLocation2["INLINE_FRAGMENT"] = "INLINE_FRAGMENT";
    DirectiveLocation2["VARIABLE_DEFINITION"] = "VARIABLE_DEFINITION";
    DirectiveLocation2["SCHEMA"] = "SCHEMA";
    DirectiveLocation2["SCALAR"] = "SCALAR";
    DirectiveLocation2["OBJECT"] = "OBJECT";
    DirectiveLocation2["FIELD_DEFINITION"] = "FIELD_DEFINITION";
    DirectiveLocation2["ARGUMENT_DEFINITION"] = "ARGUMENT_DEFINITION";
    DirectiveLocation2["INTERFACE"] = "INTERFACE";
    DirectiveLocation2["UNION"] = "UNION";
    DirectiveLocation2["ENUM"] = "ENUM";
    DirectiveLocation2["ENUM_VALUE"] = "ENUM_VALUE";
    DirectiveLocation2["INPUT_OBJECT"] = "INPUT_OBJECT";
    DirectiveLocation2["INPUT_FIELD_DEFINITION"] = "INPUT_FIELD_DEFINITION";
  })(DirectiveLocation || (DirectiveLocation = {}));

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/kinds.mjs
  var Kind;
  (function(Kind2) {
    Kind2["NAME"] = "Name";
    Kind2["DOCUMENT"] = "Document";
    Kind2["OPERATION_DEFINITION"] = "OperationDefinition";
    Kind2["VARIABLE_DEFINITION"] = "VariableDefinition";
    Kind2["SELECTION_SET"] = "SelectionSet";
    Kind2["FIELD"] = "Field";
    Kind2["ARGUMENT"] = "Argument";
    Kind2["FRAGMENT_SPREAD"] = "FragmentSpread";
    Kind2["INLINE_FRAGMENT"] = "InlineFragment";
    Kind2["FRAGMENT_DEFINITION"] = "FragmentDefinition";
    Kind2["VARIABLE"] = "Variable";
    Kind2["INT"] = "IntValue";
    Kind2["FLOAT"] = "FloatValue";
    Kind2["STRING"] = "StringValue";
    Kind2["BOOLEAN"] = "BooleanValue";
    Kind2["NULL"] = "NullValue";
    Kind2["ENUM"] = "EnumValue";
    Kind2["LIST"] = "ListValue";
    Kind2["OBJECT"] = "ObjectValue";
    Kind2["OBJECT_FIELD"] = "ObjectField";
    Kind2["DIRECTIVE"] = "Directive";
    Kind2["NAMED_TYPE"] = "NamedType";
    Kind2["LIST_TYPE"] = "ListType";
    Kind2["NON_NULL_TYPE"] = "NonNullType";
    Kind2["SCHEMA_DEFINITION"] = "SchemaDefinition";
    Kind2["OPERATION_TYPE_DEFINITION"] = "OperationTypeDefinition";
    Kind2["SCALAR_TYPE_DEFINITION"] = "ScalarTypeDefinition";
    Kind2["OBJECT_TYPE_DEFINITION"] = "ObjectTypeDefinition";
    Kind2["FIELD_DEFINITION"] = "FieldDefinition";
    Kind2["INPUT_VALUE_DEFINITION"] = "InputValueDefinition";
    Kind2["INTERFACE_TYPE_DEFINITION"] = "InterfaceTypeDefinition";
    Kind2["UNION_TYPE_DEFINITION"] = "UnionTypeDefinition";
    Kind2["ENUM_TYPE_DEFINITION"] = "EnumTypeDefinition";
    Kind2["ENUM_VALUE_DEFINITION"] = "EnumValueDefinition";
    Kind2["INPUT_OBJECT_TYPE_DEFINITION"] = "InputObjectTypeDefinition";
    Kind2["DIRECTIVE_DEFINITION"] = "DirectiveDefinition";
    Kind2["SCHEMA_EXTENSION"] = "SchemaExtension";
    Kind2["SCALAR_TYPE_EXTENSION"] = "ScalarTypeExtension";
    Kind2["OBJECT_TYPE_EXTENSION"] = "ObjectTypeExtension";
    Kind2["INTERFACE_TYPE_EXTENSION"] = "InterfaceTypeExtension";
    Kind2["UNION_TYPE_EXTENSION"] = "UnionTypeExtension";
    Kind2["ENUM_TYPE_EXTENSION"] = "EnumTypeExtension";
    Kind2["INPUT_OBJECT_TYPE_EXTENSION"] = "InputObjectTypeExtension";
  })(Kind || (Kind = {}));

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/characterClasses.mjs
  function isWhiteSpace(code) {
    return code === 9 || code === 32;
  }
  function isDigit(code) {
    return code >= 48 && code <= 57;
  }
  function isLetter(code) {
    return code >= 97 && code <= 122 || // A-Z
    code >= 65 && code <= 90;
  }
  function isNameStart(code) {
    return isLetter(code) || code === 95;
  }
  function isNameContinue(code) {
    return isLetter(code) || isDigit(code) || code === 95;
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/blockString.mjs
  function dedentBlockStringLines(lines) {
    var _firstNonEmptyLine2;
    let commonIndent = Number.MAX_SAFE_INTEGER;
    let firstNonEmptyLine = null;
    let lastNonEmptyLine = -1;
    for (let i = 0; i < lines.length; ++i) {
      var _firstNonEmptyLine;
      const line = lines[i];
      const indent2 = leadingWhitespace(line);
      if (indent2 === line.length) {
        continue;
      }
      firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;
      lastNonEmptyLine = i;
      if (i !== 0 && indent2 < commonIndent) {
        commonIndent = indent2;
      }
    }
    return lines.map((line, i) => i === 0 ? line : line.slice(commonIndent)).slice(
      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0,
      lastNonEmptyLine + 1
    );
  }
  function leadingWhitespace(str) {
    let i = 0;
    while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {
      ++i;
    }
    return i;
  }
  function printBlockString(value, options) {
    const escapedValue = value.replace(/"""/g, '\\"""');
    const lines = escapedValue.split(/\r\n|[\n\r]/g);
    const isSingleLine = lines.length === 1;
    const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0)));
    const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""');
    const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
    const hasTrailingSlash = value.endsWith("\\");
    const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
    const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
    (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);
    let result = "";
    const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));
    if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {
      result += "\n";
    }
    result += escapedValue;
    if (printAsMultipleLines || forceTrailingNewline) {
      result += "\n";
    }
    return '"""' + result + '"""';
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/tokenKind.mjs
  var TokenKind;
  (function(TokenKind2) {
    TokenKind2["SOF"] = "<SOF>";
    TokenKind2["EOF"] = "<EOF>";
    TokenKind2["BANG"] = "!";
    TokenKind2["DOLLAR"] = "$";
    TokenKind2["AMP"] = "&";
    TokenKind2["PAREN_L"] = "(";
    TokenKind2["PAREN_R"] = ")";
    TokenKind2["SPREAD"] = "...";
    TokenKind2["COLON"] = ":";
    TokenKind2["EQUALS"] = "=";
    TokenKind2["AT"] = "@";
    TokenKind2["BRACKET_L"] = "[";
    TokenKind2["BRACKET_R"] = "]";
    TokenKind2["BRACE_L"] = "{";
    TokenKind2["PIPE"] = "|";
    TokenKind2["BRACE_R"] = "}";
    TokenKind2["NAME"] = "Name";
    TokenKind2["INT"] = "Int";
    TokenKind2["FLOAT"] = "Float";
    TokenKind2["STRING"] = "String";
    TokenKind2["BLOCK_STRING"] = "BlockString";
    TokenKind2["COMMENT"] = "Comment";
  })(TokenKind || (TokenKind = {}));

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/lexer.mjs
  var Lexer = class {
    /**
     * The previously focused non-ignored token.
     */
    /**
     * The currently focused non-ignored token.
     */
    /**
     * The (1-indexed) line containing the current token.
     */
    /**
     * The character offset at which the current line begins.
     */
    constructor(source) {
      const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);
      this.source = source;
      this.lastToken = startOfFileToken;
      this.token = startOfFileToken;
      this.line = 1;
      this.lineStart = 0;
    }
    get [Symbol.toStringTag]() {
      return "Lexer";
    }
    /**
     * Advances the token stream to the next non-ignored token.
     */
    advance() {
      this.lastToken = this.token;
      const token = this.token = this.lookahead();
      return token;
    }
    /**
     * Looks ahead and returns the next non-ignored token, but does not change
     * the state of Lexer.
     */
    lookahead() {
      let token = this.token;
      if (token.kind !== TokenKind.EOF) {
        do {
          if (token.next) {
            token = token.next;
          } else {
            const nextToken = readNextToken(this, token.end);
            token.next = nextToken;
            nextToken.prev = token;
            token = nextToken;
          }
        } while (token.kind === TokenKind.COMMENT);
      }
      return token;
    }
  };
  function isPunctuatorTokenKind(kind) {
    return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
  }
  function isUnicodeScalarValue(code) {
    return code >= 0 && code <= 55295 || code >= 57344 && code <= 1114111;
  }
  function isSupplementaryCodePoint(body, location) {
    return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));
  }
  function isLeadingSurrogate(code) {
    return code >= 55296 && code <= 56319;
  }
  function isTrailingSurrogate(code) {
    return code >= 56320 && code <= 57343;
  }
  function printCodePointAt(lexer, location) {
    const code = lexer.source.body.codePointAt(location);
    if (code === void 0) {
      return TokenKind.EOF;
    } else if (code >= 32 && code <= 126) {
      const char = String.fromCodePoint(code);
      return char === '"' ? `'"'` : `"${char}"`;
    }
    return "U+" + code.toString(16).toUpperCase().padStart(4, "0");
  }
  function createToken(lexer, kind, start, end, value) {
    const line = lexer.line;
    const col = 1 + start - lexer.lineStart;
    return new Token(kind, start, end, line, col, value);
  }
  function readNextToken(lexer, start) {
    const body = lexer.source.body;
    const bodyLength = body.length;
    let position = start;
    while (position < bodyLength) {
      const code = body.charCodeAt(position);
      switch (code) {
        case 65279:
        case 9:
        case 32:
        case 44:
          ++position;
          continue;
        case 10:
          ++position;
          ++lexer.line;
          lexer.lineStart = position;
          continue;
        case 13:
          if (body.charCodeAt(position + 1) === 10) {
            position += 2;
          } else {
            ++position;
          }
          ++lexer.line;
          lexer.lineStart = position;
          continue;
        case 35:
          return readComment(lexer, position);
        case 33:
          return createToken(lexer, TokenKind.BANG, position, position + 1);
        case 36:
          return createToken(lexer, TokenKind.DOLLAR, position, position + 1);
        case 38:
          return createToken(lexer, TokenKind.AMP, position, position + 1);
        case 40:
          return createToken(lexer, TokenKind.PAREN_L, position, position + 1);
        case 41:
          return createToken(lexer, TokenKind.PAREN_R, position, position + 1);
        case 46:
          if (body.charCodeAt(position + 1) === 46 && body.charCodeAt(position + 2) === 46) {
            return createToken(lexer, TokenKind.SPREAD, position, position + 3);
          }
          break;
        case 58:
          return createToken(lexer, TokenKind.COLON, position, position + 1);
        case 61:
          return createToken(lexer, TokenKind.EQUALS, position, position + 1);
        case 64:
          return createToken(lexer, TokenKind.AT, position, position + 1);
        case 91:
          return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);
        case 93:
          return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);
        case 123:
          return createToken(lexer, TokenKind.BRACE_L, position, position + 1);
        case 124:
          return createToken(lexer, TokenKind.PIPE, position, position + 1);
        case 125:
          return createToken(lexer, TokenKind.BRACE_R, position, position + 1);
        case 34:
          if (body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
            return readBlockString(lexer, position);
          }
          return readString(lexer, position);
      }
      if (isDigit(code) || code === 45) {
        return readNumber(lexer, position, code);
      }
      if (isNameStart(code)) {
        return readName(lexer, position);
      }
      throw syntaxError(
        lexer.source,
        position,
        code === 39 ? `Unexpected single quote character ('), did you mean to use a double quote (")?` : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`
      );
    }
    return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);
  }
  function readComment(lexer, start) {
    const body = lexer.source.body;
    const bodyLength = body.length;
    let position = start + 1;
    while (position < bodyLength) {
      const code = body.charCodeAt(position);
      if (code === 10 || code === 13) {
        break;
      }
      if (isUnicodeScalarValue(code)) {
        ++position;
      } else if (isSupplementaryCodePoint(body, position)) {
        position += 2;
      } else {
        break;
      }
    }
    return createToken(
      lexer,
      TokenKind.COMMENT,
      start,
      position,
      body.slice(start + 1, position)
    );
  }
  function readNumber(lexer, start, firstCode) {
    const body = lexer.source.body;
    let position = start;
    let code = firstCode;
    let isFloat = false;
    if (code === 45) {
      code = body.charCodeAt(++position);
    }
    if (code === 48) {
      code = body.charCodeAt(++position);
      if (isDigit(code)) {
        throw syntaxError(
          lexer.source,
          position,
          `Invalid number, unexpected digit after 0: ${printCodePointAt(
            lexer,
            position
          )}.`
        );
      }
    } else {
      position = readDigits(lexer, position, code);
      code = body.charCodeAt(position);
    }
    if (code === 46) {
      isFloat = true;
      code = body.charCodeAt(++position);
      position = readDigits(lexer, position, code);
      code = body.charCodeAt(position);
    }
    if (code === 69 || code === 101) {
      isFloat = true;
      code = body.charCodeAt(++position);
      if (code === 43 || code === 45) {
        code = body.charCodeAt(++position);
      }
      position = readDigits(lexer, position, code);
      code = body.charCodeAt(position);
    }
    if (code === 46 || isNameStart(code)) {
      throw syntaxError(
        lexer.source,
        position,
        `Invalid number, expected digit but got: ${printCodePointAt(
          lexer,
          position
        )}.`
      );
    }
    return createToken(
      lexer,
      isFloat ? TokenKind.FLOAT : TokenKind.INT,
      start,
      position,
      body.slice(start, position)
    );
  }
  function readDigits(lexer, start, firstCode) {
    if (!isDigit(firstCode)) {
      throw syntaxError(
        lexer.source,
        start,
        `Invalid number, expected digit but got: ${printCodePointAt(
          lexer,
          start
        )}.`
      );
    }
    const body = lexer.source.body;
    let position = start + 1;
    while (isDigit(body.charCodeAt(position))) {
      ++position;
    }
    return position;
  }
  function readString(lexer, start) {
    const body = lexer.source.body;
    const bodyLength = body.length;
    let position = start + 1;
    let chunkStart = position;
    let value = "";
    while (position < bodyLength) {
      const code = body.charCodeAt(position);
      if (code === 34) {
        value += body.slice(chunkStart, position);
        return createToken(lexer, TokenKind.STRING, start, position + 1, value);
      }
      if (code === 92) {
        value += body.slice(chunkStart, position);
        const escape = body.charCodeAt(position + 1) === 117 ? body.charCodeAt(position + 2) === 123 ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);
        value += escape.value;
        position += escape.size;
        chunkStart = position;
        continue;
      }
      if (code === 10 || code === 13) {
        break;
      }
      if (isUnicodeScalarValue(code)) {
        ++position;
      } else if (isSupplementaryCodePoint(body, position)) {
        position += 2;
      } else {
        throw syntaxError(
          lexer.source,
          position,
          `Invalid character within String: ${printCodePointAt(
            lexer,
            position
          )}.`
        );
      }
    }
    throw syntaxError(lexer.source, position, "Unterminated string.");
  }
  function readEscapedUnicodeVariableWidth(lexer, position) {
    const body = lexer.source.body;
    let point = 0;
    let size = 3;
    while (size < 12) {
      const code = body.charCodeAt(position + size++);
      if (code === 125) {
        if (size < 5 || !isUnicodeScalarValue(point)) {
          break;
        }
        return {
          value: String.fromCodePoint(point),
          size
        };
      }
      point = point << 4 | readHexDigit(code);
      if (point < 0) {
        break;
      }
    }
    throw syntaxError(
      lexer.source,
      position,
      `Invalid Unicode escape sequence: "${body.slice(
        position,
        position + size
      )}".`
    );
  }
  function readEscapedUnicodeFixedWidth(lexer, position) {
    const body = lexer.source.body;
    const code = read16BitHexCode(body, position + 2);
    if (isUnicodeScalarValue(code)) {
      return {
        value: String.fromCodePoint(code),
        size: 6
      };
    }
    if (isLeadingSurrogate(code)) {
      if (body.charCodeAt(position + 6) === 92 && body.charCodeAt(position + 7) === 117) {
        const trailingCode = read16BitHexCode(body, position + 8);
        if (isTrailingSurrogate(trailingCode)) {
          return {
            value: String.fromCodePoint(code, trailingCode),
            size: 12
          };
        }
      }
    }
    throw syntaxError(
      lexer.source,
      position,
      `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`
    );
  }
  function read16BitHexCode(body, position) {
    return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));
  }
  function readHexDigit(code) {
    return code >= 48 && code <= 57 ? code - 48 : code >= 65 && code <= 70 ? code - 55 : code >= 97 && code <= 102 ? code - 87 : -1;
  }
  function readEscapedCharacter(lexer, position) {
    const body = lexer.source.body;
    const code = body.charCodeAt(position + 1);
    switch (code) {
      case 34:
        return {
          value: '"',
          size: 2
        };
      case 92:
        return {
          value: "\\",
          size: 2
        };
      case 47:
        return {
          value: "/",
          size: 2
        };
      case 98:
        return {
          value: "\b",
          size: 2
        };
      case 102:
        return {
          value: "\f",
          size: 2
        };
      case 110:
        return {
          value: "\n",
          size: 2
        };
      case 114:
        return {
          value: "\r",
          size: 2
        };
      case 116:
        return {
          value: "	",
          size: 2
        };
    }
    throw syntaxError(
      lexer.source,
      position,
      `Invalid character escape sequence: "${body.slice(
        position,
        position + 2
      )}".`
    );
  }
  function readBlockString(lexer, start) {
    const body = lexer.source.body;
    const bodyLength = body.length;
    let lineStart = lexer.lineStart;
    let position = start + 3;
    let chunkStart = position;
    let currentLine = "";
    const blockLines = [];
    while (position < bodyLength) {
      const code = body.charCodeAt(position);
      if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {
        currentLine += body.slice(chunkStart, position);
        blockLines.push(currentLine);
        const token = createToken(
          lexer,
          TokenKind.BLOCK_STRING,
          start,
          position + 3,
          // Return a string of the lines joined with U+000A.
          dedentBlockStringLines(blockLines).join("\n")
        );
        lexer.line += blockLines.length - 1;
        lexer.lineStart = lineStart;
        return token;
      }
      if (code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {
        currentLine += body.slice(chunkStart, position);
        chunkStart = position + 1;
        position += 4;
        continue;
      }
      if (code === 10 || code === 13) {
        currentLine += body.slice(chunkStart, position);
        blockLines.push(currentLine);
        if (code === 13 && body.charCodeAt(position + 1) === 10) {
          position += 2;
        } else {
          ++position;
        }
        currentLine = "";
        chunkStart = position;
        lineStart = position;
        continue;
      }
      if (isUnicodeScalarValue(code)) {
        ++position;
      } else if (isSupplementaryCodePoint(body, position)) {
        position += 2;
      } else {
        throw syntaxError(
          lexer.source,
          position,
          `Invalid character within String: ${printCodePointAt(
            lexer,
            position
          )}.`
        );
      }
    }
    throw syntaxError(lexer.source, position, "Unterminated string.");
  }
  function readName(lexer, start) {
    const body = lexer.source.body;
    const bodyLength = body.length;
    let position = start + 1;
    while (position < bodyLength) {
      const code = body.charCodeAt(position);
      if (isNameContinue(code)) {
        ++position;
      } else {
        break;
      }
    }
    return createToken(
      lexer,
      TokenKind.NAME,
      start,
      position,
      body.slice(start, position)
    );
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/inspect.mjs
  var MAX_ARRAY_LENGTH = 10;
  var MAX_RECURSIVE_DEPTH = 2;
  function inspect(value) {
    return formatValue(value, []);
  }
  function formatValue(value, seenValues) {
    switch (typeof value) {
      case "string":
        return JSON.stringify(value);
      case "function":
        return value.name ? `[function ${value.name}]` : "[function]";
      case "object":
        return formatObjectValue(value, seenValues);
      default:
        return String(value);
    }
  }
  function formatObjectValue(value, previouslySeenValues) {
    if (value === null) {
      return "null";
    }
    if (previouslySeenValues.includes(value)) {
      return "[Circular]";
    }
    const seenValues = [...previouslySeenValues, value];
    if (isJSONable(value)) {
      const jsonValue = value.toJSON();
      if (jsonValue !== value) {
        return typeof jsonValue === "string" ? jsonValue : formatValue(jsonValue, seenValues);
      }
    } else if (Array.isArray(value)) {
      return formatArray(value, seenValues);
    }
    return formatObject(value, seenValues);
  }
  function isJSONable(value) {
    return typeof value.toJSON === "function";
  }
  function formatObject(object, seenValues) {
    const entries = Object.entries(object);
    if (entries.length === 0) {
      return "{}";
    }
    if (seenValues.length > MAX_RECURSIVE_DEPTH) {
      return "[" + getObjectTag(object) + "]";
    }
    const properties = entries.map(
      ([key, value]) => key + ": " + formatValue(value, seenValues)
    );
    return "{ " + properties.join(", ") + " }";
  }
  function formatArray(array, seenValues) {
    if (array.length === 0) {
      return "[]";
    }
    if (seenValues.length > MAX_RECURSIVE_DEPTH) {
      return "[Array]";
    }
    const len = Math.min(MAX_ARRAY_LENGTH, array.length);
    const remaining = array.length - len;
    const items = [];
    for (let i = 0; i < len; ++i) {
      items.push(formatValue(array[i], seenValues));
    }
    if (remaining === 1) {
      items.push("... 1 more item");
    } else if (remaining > 1) {
      items.push(`... ${remaining} more items`);
    }
    return "[" + items.join(", ") + "]";
  }
  function getObjectTag(object) {
    const tag = Object.prototype.toString.call(object).replace(/^\[object /, "").replace(/]$/, "");
    if (tag === "Object" && typeof object.constructor === "function") {
      const name = object.constructor.name;
      if (typeof name === "string" && name !== "") {
        return name;
      }
    }
    return tag;
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/instanceOf.mjs
  var isProduction = globalThis.process && // eslint-disable-next-line no-undef
  process.env.NODE_ENV === "production";
  var instanceOf = (
    /* c8 ignore next 6 */
    // FIXME: https://github.com/graphql/graphql-js/issues/2317
    isProduction ? function instanceOf2(value, constructor) {
      return value instanceof constructor;
    } : function instanceOf3(value, constructor) {
      if (value instanceof constructor) {
        return true;
      }
      if (typeof value === "object" && value !== null) {
        var _value$constructor;
        const className = constructor.prototype[Symbol.toStringTag];
        const valueClassName = (
          // We still need to support constructor's name to detect conflicts with older versions of this library.
          Symbol.toStringTag in value ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name
        );
        if (className === valueClassName) {
          const stringifiedValue = inspect(value);
          throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
        }
      }
      return false;
    }
  );

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/source.mjs
  var Source = class {
    constructor(body, name = "GraphQL request", locationOffset = {
      line: 1,
      column: 1
    }) {
      typeof body === "string" || devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);
      this.body = body;
      this.name = name;
      this.locationOffset = locationOffset;
      this.locationOffset.line > 0 || devAssert(
        false,
        "line in locationOffset is 1-indexed and must be positive."
      );
      this.locationOffset.column > 0 || devAssert(
        false,
        "column in locationOffset is 1-indexed and must be positive."
      );
    }
    get [Symbol.toStringTag]() {
      return "Source";
    }
  };
  function isSource(source) {
    return instanceOf(source, Source);
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/parser.mjs
  function parse(source, options) {
    const parser = new Parser(source, options);
    return parser.parseDocument();
  }
  var Parser = class {
    constructor(source, options = {}) {
      const sourceObj = isSource(source) ? source : new Source(source);
      this._lexer = new Lexer(sourceObj);
      this._options = options;
      this._tokenCounter = 0;
    }
    /**
     * Converts a name lex token into a name parse node.
     */
    parseName() {
      const token = this.expectToken(TokenKind.NAME);
      return this.node(token, {
        kind: Kind.NAME,
        value: token.value
      });
    }
    // Implements the parsing rules in the Document section.
    /**
     * Document : Definition+
     */
    parseDocument() {
      return this.node(this._lexer.token, {
        kind: Kind.DOCUMENT,
        definitions: this.many(
          TokenKind.SOF,
          this.parseDefinition,
          TokenKind.EOF
        )
      });
    }
    /**
     * Definition :
     *   - ExecutableDefinition
     *   - TypeSystemDefinition
     *   - TypeSystemExtension
     *
     * ExecutableDefinition :
     *   - OperationDefinition
     *   - FragmentDefinition
     *
     * TypeSystemDefinition :
     *   - SchemaDefinition
     *   - TypeDefinition
     *   - DirectiveDefinition
     *
     * TypeDefinition :
     *   - ScalarTypeDefinition
     *   - ObjectTypeDefinition
     *   - InterfaceTypeDefinition
     *   - UnionTypeDefinition
     *   - EnumTypeDefinition
     *   - InputObjectTypeDefinition
     */
    parseDefinition() {
      if (this.peek(TokenKind.BRACE_L)) {
        return this.parseOperationDefinition();
      }
      const hasDescription = this.peekDescription();
      const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;
      if (keywordToken.kind === TokenKind.NAME) {
        switch (keywordToken.value) {
          case "schema":
            return this.parseSchemaDefinition();
          case "scalar":
            return this.parseScalarTypeDefinition();
          case "type":
            return this.parseObjectTypeDefinition();
          case "interface":
            return this.parseInterfaceTypeDefinition();
          case "union":
            return this.parseUnionTypeDefinition();
          case "enum":
            return this.parseEnumTypeDefinition();
          case "input":
            return this.parseInputObjectTypeDefinition();
          case "directive":
            return this.parseDirectiveDefinition();
        }
        if (hasDescription) {
          throw syntaxError(
            this._lexer.source,
            this._lexer.token.start,
            "Unexpected description, descriptions are supported only on type definitions."
          );
        }
        switch (keywordToken.value) {
          case "query":
          case "mutation":
          case "subscription":
            return this.parseOperationDefinition();
          case "fragment":
            return this.parseFragmentDefinition();
          case "extend":
            return this.parseTypeSystemExtension();
        }
      }
      throw this.unexpected(keywordToken);
    }
    // Implements the parsing rules in the Operations section.
    /**
     * OperationDefinition :
     *  - SelectionSet
     *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
     */
    parseOperationDefinition() {
      const start = this._lexer.token;
      if (this.peek(TokenKind.BRACE_L)) {
        return this.node(start, {
          kind: Kind.OPERATION_DEFINITION,
          operation: OperationTypeNode.QUERY,
          name: void 0,
          variableDefinitions: [],
          directives: [],
          selectionSet: this.parseSelectionSet()
        });
      }
      const operation = this.parseOperationType();
      let name;
      if (this.peek(TokenKind.NAME)) {
        name = this.parseName();
      }
      return this.node(start, {
        kind: Kind.OPERATION_DEFINITION,
        operation,
        name,
        variableDefinitions: this.parseVariableDefinitions(),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    /**
     * OperationType : one of query mutation subscription
     */
    parseOperationType() {
      const operationToken = this.expectToken(TokenKind.NAME);
      switch (operationToken.value) {
        case "query":
          return OperationTypeNode.QUERY;
        case "mutation":
          return OperationTypeNode.MUTATION;
        case "subscription":
          return OperationTypeNode.SUBSCRIPTION;
      }
      throw this.unexpected(operationToken);
    }
    /**
     * VariableDefinitions : ( VariableDefinition+ )
     */
    parseVariableDefinitions() {
      return this.optionalMany(
        TokenKind.PAREN_L,
        this.parseVariableDefinition,
        TokenKind.PAREN_R
      );
    }
    /**
     * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
     */
    parseVariableDefinition() {
      return this.node(this._lexer.token, {
        kind: Kind.VARIABLE_DEFINITION,
        variable: this.parseVariable(),
        type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
        defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseConstValueLiteral() : void 0,
        directives: this.parseConstDirectives()
      });
    }
    /**
     * Variable : $ Name
     */
    parseVariable() {
      const start = this._lexer.token;
      this.expectToken(TokenKind.DOLLAR);
      return this.node(start, {
        kind: Kind.VARIABLE,
        name: this.parseName()
      });
    }
    /**
     * ```
     * SelectionSet : { Selection+ }
     * ```
     */
    parseSelectionSet() {
      return this.node(this._lexer.token, {
        kind: Kind.SELECTION_SET,
        selections: this.many(
          TokenKind.BRACE_L,
          this.parseSelection,
          TokenKind.BRACE_R
        )
      });
    }
    /**
     * Selection :
     *   - Field
     *   - FragmentSpread
     *   - InlineFragment
     */
    parseSelection() {
      return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
    }
    /**
     * Field : Alias? Name Arguments? Directives? SelectionSet?
     *
     * Alias : Name :
     */
    parseField() {
      const start = this._lexer.token;
      const nameOrAlias = this.parseName();
      let alias;
      let name;
      if (this.expectOptionalToken(TokenKind.COLON)) {
        alias = nameOrAlias;
        name = this.parseName();
      } else {
        name = nameOrAlias;
      }
      return this.node(start, {
        kind: Kind.FIELD,
        alias,
        name,
        arguments: this.parseArguments(false),
        directives: this.parseDirectives(false),
        selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0
      });
    }
    /**
     * Arguments[Const] : ( Argument[?Const]+ )
     */
    parseArguments(isConst) {
      const item = isConst ? this.parseConstArgument : this.parseArgument;
      return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
    }
    /**
     * Argument[Const] : Name : Value[?Const]
     */
    parseArgument(isConst = false) {
      const start = this._lexer.token;
      const name = this.parseName();
      this.expectToken(TokenKind.COLON);
      return this.node(start, {
        kind: Kind.ARGUMENT,
        name,
        value: this.parseValueLiteral(isConst)
      });
    }
    parseConstArgument() {
      return this.parseArgument(true);
    }
    // Implements the parsing rules in the Fragments section.
    /**
     * Corresponds to both FragmentSpread and InlineFragment in the spec.
     *
     * FragmentSpread : ... FragmentName Directives?
     *
     * InlineFragment : ... TypeCondition? Directives? SelectionSet
     */
    parseFragment() {
      const start = this._lexer.token;
      this.expectToken(TokenKind.SPREAD);
      const hasTypeCondition = this.expectOptionalKeyword("on");
      if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
        return this.node(start, {
          kind: Kind.FRAGMENT_SPREAD,
          name: this.parseFragmentName(),
          directives: this.parseDirectives(false)
        });
      }
      return this.node(start, {
        kind: Kind.INLINE_FRAGMENT,
        typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    /**
     * FragmentDefinition :
     *   - fragment FragmentName on TypeCondition Directives? SelectionSet
     *
     * TypeCondition : NamedType
     */
    parseFragmentDefinition() {
      const start = this._lexer.token;
      this.expectKeyword("fragment");
      if (this._options.allowLegacyFragmentVariables === true) {
        return this.node(start, {
          kind: Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          variableDefinitions: this.parseVariableDefinitions(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet()
        });
      }
      return this.node(start, {
        kind: Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet()
      });
    }
    /**
     * FragmentName : Name but not `on`
     */
    parseFragmentName() {
      if (this._lexer.token.value === "on") {
        throw this.unexpected();
      }
      return this.parseName();
    }
    // Implements the parsing rules in the Values section.
    /**
     * Value[Const] :
     *   - [~Const] Variable
     *   - IntValue
     *   - FloatValue
     *   - StringValue
     *   - BooleanValue
     *   - NullValue
     *   - EnumValue
     *   - ListValue[?Const]
     *   - ObjectValue[?Const]
     *
     * BooleanValue : one of `true` `false`
     *
     * NullValue : `null`
     *
     * EnumValue : Name but not `true`, `false` or `null`
     */
    parseValueLiteral(isConst) {
      const token = this._lexer.token;
      switch (token.kind) {
        case TokenKind.BRACKET_L:
          return this.parseList(isConst);
        case TokenKind.BRACE_L:
          return this.parseObject(isConst);
        case TokenKind.INT:
          this.advanceLexer();
          return this.node(token, {
            kind: Kind.INT,
            value: token.value
          });
        case TokenKind.FLOAT:
          this.advanceLexer();
          return this.node(token, {
            kind: Kind.FLOAT,
            value: token.value
          });
        case TokenKind.STRING:
        case TokenKind.BLOCK_STRING:
          return this.parseStringLiteral();
        case TokenKind.NAME:
          this.advanceLexer();
          switch (token.value) {
            case "true":
              return this.node(token, {
                kind: Kind.BOOLEAN,
                value: true
              });
            case "false":
              return this.node(token, {
                kind: Kind.BOOLEAN,
                value: false
              });
            case "null":
              return this.node(token, {
                kind: Kind.NULL
              });
            default:
              return this.node(token, {
                kind: Kind.ENUM,
                value: token.value
              });
          }
        case TokenKind.DOLLAR:
          if (isConst) {
            this.expectToken(TokenKind.DOLLAR);
            if (this._lexer.token.kind === TokenKind.NAME) {
              const varName = this._lexer.token.value;
              throw syntaxError(
                this._lexer.source,
                token.start,
                `Unexpected variable "$${varName}" in constant value.`
              );
            } else {
              throw this.unexpected(token);
            }
          }
          return this.parseVariable();
        default:
          throw this.unexpected();
      }
    }
    parseConstValueLiteral() {
      return this.parseValueLiteral(true);
    }
    parseStringLiteral() {
      const token = this._lexer.token;
      this.advanceLexer();
      return this.node(token, {
        kind: Kind.STRING,
        value: token.value,
        block: token.kind === TokenKind.BLOCK_STRING
      });
    }
    /**
     * ListValue[Const] :
     *   - [ ]
     *   - [ Value[?Const]+ ]
     */
    parseList(isConst) {
      const item = () => this.parseValueLiteral(isConst);
      return this.node(this._lexer.token, {
        kind: Kind.LIST,
        values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R)
      });
    }
    /**
     * ```
     * ObjectValue[Const] :
     *   - { }
     *   - { ObjectField[?Const]+ }
     * ```
     */
    parseObject(isConst) {
      const item = () => this.parseObjectField(isConst);
      return this.node(this._lexer.token, {
        kind: Kind.OBJECT,
        fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R)
      });
    }
    /**
     * ObjectField[Const] : Name : Value[?Const]
     */
    parseObjectField(isConst) {
      const start = this._lexer.token;
      const name = this.parseName();
      this.expectToken(TokenKind.COLON);
      return this.node(start, {
        kind: Kind.OBJECT_FIELD,
        name,
        value: this.parseValueLiteral(isConst)
      });
    }
    // Implements the parsing rules in the Directives section.
    /**
     * Directives[Const] : Directive[?Const]+
     */
    parseDirectives(isConst) {
      const directives = [];
      while (this.peek(TokenKind.AT)) {
        directives.push(this.parseDirective(isConst));
      }
      return directives;
    }
    parseConstDirectives() {
      return this.parseDirectives(true);
    }
    /**
     * ```
     * Directive[Const] : @ Name Arguments[?Const]?
     * ```
     */
    parseDirective(isConst) {
      const start = this._lexer.token;
      this.expectToken(TokenKind.AT);
      return this.node(start, {
        kind: Kind.DIRECTIVE,
        name: this.parseName(),
        arguments: this.parseArguments(isConst)
      });
    }
    // Implements the parsing rules in the Types section.
    /**
     * Type :
     *   - NamedType
     *   - ListType
     *   - NonNullType
     */
    parseTypeReference() {
      const start = this._lexer.token;
      let type3;
      if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
        const innerType = this.parseTypeReference();
        this.expectToken(TokenKind.BRACKET_R);
        type3 = this.node(start, {
          kind: Kind.LIST_TYPE,
          type: innerType
        });
      } else {
        type3 = this.parseNamedType();
      }
      if (this.expectOptionalToken(TokenKind.BANG)) {
        return this.node(start, {
          kind: Kind.NON_NULL_TYPE,
          type: type3
        });
      }
      return type3;
    }
    /**
     * NamedType : Name
     */
    parseNamedType() {
      return this.node(this._lexer.token, {
        kind: Kind.NAMED_TYPE,
        name: this.parseName()
      });
    }
    // Implements the parsing rules in the Type Definition section.
    peekDescription() {
      return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
    }
    /**
     * Description : StringValue
     */
    parseDescription() {
      if (this.peekDescription()) {
        return this.parseStringLiteral();
      }
    }
    /**
     * ```
     * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
     * ```
     */
    parseSchemaDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("schema");
      const directives = this.parseConstDirectives();
      const operationTypes = this.many(
        TokenKind.BRACE_L,
        this.parseOperationTypeDefinition,
        TokenKind.BRACE_R
      );
      return this.node(start, {
        kind: Kind.SCHEMA_DEFINITION,
        description,
        directives,
        operationTypes
      });
    }
    /**
     * OperationTypeDefinition : OperationType : NamedType
     */
    parseOperationTypeDefinition() {
      const start = this._lexer.token;
      const operation = this.parseOperationType();
      this.expectToken(TokenKind.COLON);
      const type3 = this.parseNamedType();
      return this.node(start, {
        kind: Kind.OPERATION_TYPE_DEFINITION,
        operation,
        type: type3
      });
    }
    /**
     * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
     */
    parseScalarTypeDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("scalar");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      return this.node(start, {
        kind: Kind.SCALAR_TYPE_DEFINITION,
        description,
        name,
        directives
      });
    }
    /**
     * ObjectTypeDefinition :
     *   Description?
     *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
     */
    parseObjectTypeDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("type");
      const name = this.parseName();
      const interfaces = this.parseImplementsInterfaces();
      const directives = this.parseConstDirectives();
      const fields = this.parseFieldsDefinition();
      return this.node(start, {
        kind: Kind.OBJECT_TYPE_DEFINITION,
        description,
        name,
        interfaces,
        directives,
        fields
      });
    }
    /**
     * ImplementsInterfaces :
     *   - implements `&`? NamedType
     *   - ImplementsInterfaces & NamedType
     */
    parseImplementsInterfaces() {
      return this.expectOptionalKeyword("implements") ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];
    }
    /**
     * ```
     * FieldsDefinition : { FieldDefinition+ }
     * ```
     */
    parseFieldsDefinition() {
      return this.optionalMany(
        TokenKind.BRACE_L,
        this.parseFieldDefinition,
        TokenKind.BRACE_R
      );
    }
    /**
     * FieldDefinition :
     *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
     */
    parseFieldDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      const name = this.parseName();
      const args = this.parseArgumentDefs();
      this.expectToken(TokenKind.COLON);
      const type3 = this.parseTypeReference();
      const directives = this.parseConstDirectives();
      return this.node(start, {
        kind: Kind.FIELD_DEFINITION,
        description,
        name,
        arguments: args,
        type: type3,
        directives
      });
    }
    /**
     * ArgumentsDefinition : ( InputValueDefinition+ )
     */
    parseArgumentDefs() {
      return this.optionalMany(
        TokenKind.PAREN_L,
        this.parseInputValueDef,
        TokenKind.PAREN_R
      );
    }
    /**
     * InputValueDefinition :
     *   - Description? Name : Type DefaultValue? Directives[Const]?
     */
    parseInputValueDef() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      const name = this.parseName();
      this.expectToken(TokenKind.COLON);
      const type3 = this.parseTypeReference();
      let defaultValue;
      if (this.expectOptionalToken(TokenKind.EQUALS)) {
        defaultValue = this.parseConstValueLiteral();
      }
      const directives = this.parseConstDirectives();
      return this.node(start, {
        kind: Kind.INPUT_VALUE_DEFINITION,
        description,
        name,
        type: type3,
        defaultValue,
        directives
      });
    }
    /**
     * InterfaceTypeDefinition :
     *   - Description? interface Name Directives[Const]? FieldsDefinition?
     */
    parseInterfaceTypeDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("interface");
      const name = this.parseName();
      const interfaces = this.parseImplementsInterfaces();
      const directives = this.parseConstDirectives();
      const fields = this.parseFieldsDefinition();
      return this.node(start, {
        kind: Kind.INTERFACE_TYPE_DEFINITION,
        description,
        name,
        interfaces,
        directives,
        fields
      });
    }
    /**
     * UnionTypeDefinition :
     *   - Description? union Name Directives[Const]? UnionMemberTypes?
     */
    parseUnionTypeDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("union");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      const types = this.parseUnionMemberTypes();
      return this.node(start, {
        kind: Kind.UNION_TYPE_DEFINITION,
        description,
        name,
        directives,
        types
      });
    }
    /**
     * UnionMemberTypes :
     *   - = `|`? NamedType
     *   - UnionMemberTypes | NamedType
     */
    parseUnionMemberTypes() {
      return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
    }
    /**
     * EnumTypeDefinition :
     *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
     */
    parseEnumTypeDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("enum");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      const values = this.parseEnumValuesDefinition();
      return this.node(start, {
        kind: Kind.ENUM_TYPE_DEFINITION,
        description,
        name,
        directives,
        values
      });
    }
    /**
     * ```
     * EnumValuesDefinition : { EnumValueDefinition+ }
     * ```
     */
    parseEnumValuesDefinition() {
      return this.optionalMany(
        TokenKind.BRACE_L,
        this.parseEnumValueDefinition,
        TokenKind.BRACE_R
      );
    }
    /**
     * EnumValueDefinition : Description? EnumValue Directives[Const]?
     */
    parseEnumValueDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      const name = this.parseEnumValueName();
      const directives = this.parseConstDirectives();
      return this.node(start, {
        kind: Kind.ENUM_VALUE_DEFINITION,
        description,
        name,
        directives
      });
    }
    /**
     * EnumValue : Name but not `true`, `false` or `null`
     */
    parseEnumValueName() {
      if (this._lexer.token.value === "true" || this._lexer.token.value === "false" || this._lexer.token.value === "null") {
        throw syntaxError(
          this._lexer.source,
          this._lexer.token.start,
          `${getTokenDesc(
            this._lexer.token
          )} is reserved and cannot be used for an enum value.`
        );
      }
      return this.parseName();
    }
    /**
     * InputObjectTypeDefinition :
     *   - Description? input Name Directives[Const]? InputFieldsDefinition?
     */
    parseInputObjectTypeDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("input");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      const fields = this.parseInputFieldsDefinition();
      return this.node(start, {
        kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
        description,
        name,
        directives,
        fields
      });
    }
    /**
     * ```
     * InputFieldsDefinition : { InputValueDefinition+ }
     * ```
     */
    parseInputFieldsDefinition() {
      return this.optionalMany(
        TokenKind.BRACE_L,
        this.parseInputValueDef,
        TokenKind.BRACE_R
      );
    }
    /**
     * TypeSystemExtension :
     *   - SchemaExtension
     *   - TypeExtension
     *
     * TypeExtension :
     *   - ScalarTypeExtension
     *   - ObjectTypeExtension
     *   - InterfaceTypeExtension
     *   - UnionTypeExtension
     *   - EnumTypeExtension
     *   - InputObjectTypeDefinition
     */
    parseTypeSystemExtension() {
      const keywordToken = this._lexer.lookahead();
      if (keywordToken.kind === TokenKind.NAME) {
        switch (keywordToken.value) {
          case "schema":
            return this.parseSchemaExtension();
          case "scalar":
            return this.parseScalarTypeExtension();
          case "type":
            return this.parseObjectTypeExtension();
          case "interface":
            return this.parseInterfaceTypeExtension();
          case "union":
            return this.parseUnionTypeExtension();
          case "enum":
            return this.parseEnumTypeExtension();
          case "input":
            return this.parseInputObjectTypeExtension();
        }
      }
      throw this.unexpected(keywordToken);
    }
    /**
     * ```
     * SchemaExtension :
     *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
     *  - extend schema Directives[Const]
     * ```
     */
    parseSchemaExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("schema");
      const directives = this.parseConstDirectives();
      const operationTypes = this.optionalMany(
        TokenKind.BRACE_L,
        this.parseOperationTypeDefinition,
        TokenKind.BRACE_R
      );
      if (directives.length === 0 && operationTypes.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.SCHEMA_EXTENSION,
        directives,
        operationTypes
      });
    }
    /**
     * ScalarTypeExtension :
     *   - extend scalar Name Directives[Const]
     */
    parseScalarTypeExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("scalar");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      if (directives.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.SCALAR_TYPE_EXTENSION,
        name,
        directives
      });
    }
    /**
     * ObjectTypeExtension :
     *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend type Name ImplementsInterfaces? Directives[Const]
     *  - extend type Name ImplementsInterfaces
     */
    parseObjectTypeExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("type");
      const name = this.parseName();
      const interfaces = this.parseImplementsInterfaces();
      const directives = this.parseConstDirectives();
      const fields = this.parseFieldsDefinition();
      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.OBJECT_TYPE_EXTENSION,
        name,
        interfaces,
        directives,
        fields
      });
    }
    /**
     * InterfaceTypeExtension :
     *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
     *  - extend interface Name ImplementsInterfaces? Directives[Const]
     *  - extend interface Name ImplementsInterfaces
     */
    parseInterfaceTypeExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("interface");
      const name = this.parseName();
      const interfaces = this.parseImplementsInterfaces();
      const directives = this.parseConstDirectives();
      const fields = this.parseFieldsDefinition();
      if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.INTERFACE_TYPE_EXTENSION,
        name,
        interfaces,
        directives,
        fields
      });
    }
    /**
     * UnionTypeExtension :
     *   - extend union Name Directives[Const]? UnionMemberTypes
     *   - extend union Name Directives[Const]
     */
    parseUnionTypeExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("union");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      const types = this.parseUnionMemberTypes();
      if (directives.length === 0 && types.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.UNION_TYPE_EXTENSION,
        name,
        directives,
        types
      });
    }
    /**
     * EnumTypeExtension :
     *   - extend enum Name Directives[Const]? EnumValuesDefinition
     *   - extend enum Name Directives[Const]
     */
    parseEnumTypeExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("enum");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      const values = this.parseEnumValuesDefinition();
      if (directives.length === 0 && values.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.ENUM_TYPE_EXTENSION,
        name,
        directives,
        values
      });
    }
    /**
     * InputObjectTypeExtension :
     *   - extend input Name Directives[Const]? InputFieldsDefinition
     *   - extend input Name Directives[Const]
     */
    parseInputObjectTypeExtension() {
      const start = this._lexer.token;
      this.expectKeyword("extend");
      this.expectKeyword("input");
      const name = this.parseName();
      const directives = this.parseConstDirectives();
      const fields = this.parseInputFieldsDefinition();
      if (directives.length === 0 && fields.length === 0) {
        throw this.unexpected();
      }
      return this.node(start, {
        kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
        name,
        directives,
        fields
      });
    }
    /**
     * ```
     * DirectiveDefinition :
     *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
     * ```
     */
    parseDirectiveDefinition() {
      const start = this._lexer.token;
      const description = this.parseDescription();
      this.expectKeyword("directive");
      this.expectToken(TokenKind.AT);
      const name = this.parseName();
      const args = this.parseArgumentDefs();
      const repeatable = this.expectOptionalKeyword("repeatable");
      this.expectKeyword("on");
      const locations = this.parseDirectiveLocations();
      return this.node(start, {
        kind: Kind.DIRECTIVE_DEFINITION,
        description,
        name,
        arguments: args,
        repeatable,
        locations
      });
    }
    /**
     * DirectiveLocations :
     *   - `|`? DirectiveLocation
     *   - DirectiveLocations | DirectiveLocation
     */
    parseDirectiveLocations() {
      return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
    }
    /*
     * DirectiveLocation :
     *   - ExecutableDirectiveLocation
     *   - TypeSystemDirectiveLocation
     *
     * ExecutableDirectiveLocation : one of
     *   `QUERY`
     *   `MUTATION`
     *   `SUBSCRIPTION`
     *   `FIELD`
     *   `FRAGMENT_DEFINITION`
     *   `FRAGMENT_SPREAD`
     *   `INLINE_FRAGMENT`
     *
     * TypeSystemDirectiveLocation : one of
     *   `SCHEMA`
     *   `SCALAR`
     *   `OBJECT`
     *   `FIELD_DEFINITION`
     *   `ARGUMENT_DEFINITION`
     *   `INTERFACE`
     *   `UNION`
     *   `ENUM`
     *   `ENUM_VALUE`
     *   `INPUT_OBJECT`
     *   `INPUT_FIELD_DEFINITION`
     */
    parseDirectiveLocation() {
      const start = this._lexer.token;
      const name = this.parseName();
      if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {
        return name;
      }
      throw this.unexpected(start);
    }
    // Core parsing utility functions
    /**
     * Returns a node that, if configured to do so, sets a "loc" field as a
     * location object, used to identify the place in the source that created a
     * given parsed object.
     */
    node(startToken, node) {
      if (this._options.noLocation !== true) {
        node.loc = new Location(
          startToken,
          this._lexer.lastToken,
          this._lexer.source
        );
      }
      return node;
    }
    /**
     * Determines if the next token is of a given kind
     */
    peek(kind) {
      return this._lexer.token.kind === kind;
    }
    /**
     * If the next token is of the given kind, return that token after advancing the lexer.
     * Otherwise, do not change the parser state and throw an error.
     */
    expectToken(kind) {
      const token = this._lexer.token;
      if (token.kind === kind) {
        this.advanceLexer();
        return token;
      }
      throw syntaxError(
        this._lexer.source,
        token.start,
        `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`
      );
    }
    /**
     * If the next token is of the given kind, return "true" after advancing the lexer.
     * Otherwise, do not change the parser state and return "false".
     */
    expectOptionalToken(kind) {
      const token = this._lexer.token;
      if (token.kind === kind) {
        this.advanceLexer();
        return true;
      }
      return false;
    }
    /**
     * If the next token is a given keyword, advance the lexer.
     * Otherwise, do not change the parser state and throw an error.
     */
    expectKeyword(value) {
      const token = this._lexer.token;
      if (token.kind === TokenKind.NAME && token.value === value) {
        this.advanceLexer();
      } else {
        throw syntaxError(
          this._lexer.source,
          token.start,
          `Expected "${value}", found ${getTokenDesc(token)}.`
        );
      }
    }
    /**
     * If the next token is a given keyword, return "true" after advancing the lexer.
     * Otherwise, do not change the parser state and return "false".
     */
    expectOptionalKeyword(value) {
      const token = this._lexer.token;
      if (token.kind === TokenKind.NAME && token.value === value) {
        this.advanceLexer();
        return true;
      }
      return false;
    }
    /**
     * Helper function for creating an error when an unexpected lexed token is encountered.
     */
    unexpected(atToken) {
      const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
      return syntaxError(
        this._lexer.source,
        token.start,
        `Unexpected ${getTokenDesc(token)}.`
      );
    }
    /**
     * Returns a possibly empty list of parse nodes, determined by the parseFn.
     * This list begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
    any(openKind, parseFn, closeKind) {
      this.expectToken(openKind);
      const nodes = [];
      while (!this.expectOptionalToken(closeKind)) {
        nodes.push(parseFn.call(this));
      }
      return nodes;
    }
    /**
     * Returns a list of parse nodes, determined by the parseFn.
     * It can be empty only if open token is missing otherwise it will always return non-empty list
     * that begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
    optionalMany(openKind, parseFn, closeKind) {
      if (this.expectOptionalToken(openKind)) {
        const nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      }
      return [];
    }
    /**
     * Returns a non-empty list of parse nodes, determined by the parseFn.
     * This list begins with a lex token of openKind and ends with a lex token of closeKind.
     * Advances the parser to the next lex token after the closing token.
     */
    many(openKind, parseFn, closeKind) {
      this.expectToken(openKind);
      const nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));
      return nodes;
    }
    /**
     * Returns a non-empty list of parse nodes, determined by the parseFn.
     * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
     * Advances the parser to the next lex token after last item in the list.
     */
    delimitedMany(delimiterKind, parseFn) {
      this.expectOptionalToken(delimiterKind);
      const nodes = [];
      do {
        nodes.push(parseFn.call(this));
      } while (this.expectOptionalToken(delimiterKind));
      return nodes;
    }
    advanceLexer() {
      const { maxTokens } = this._options;
      const token = this._lexer.advance();
      if (maxTokens !== void 0 && token.kind !== TokenKind.EOF) {
        ++this._tokenCounter;
        if (this._tokenCounter > maxTokens) {
          throw syntaxError(
            this._lexer.source,
            token.start,
            `Document contains more that ${maxTokens} tokens. Parsing aborted.`
          );
        }
      }
    }
  };
  function getTokenDesc(token) {
    const value = token.value;
    return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : "");
  }
  function getTokenKindDesc(kind) {
    return isPunctuatorTokenKind(kind) ? `"${kind}"` : kind;
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printString.mjs
  function printString(str) {
    return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
  }
  var escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;
  function escapedReplacer(str) {
    return escapeSequences[str.charCodeAt(0)];
  }
  var escapeSequences = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    "\\b",
    "\\t",
    "\\n",
    "\\u000B",
    "\\f",
    "\\r",
    "\\u000E",
    "\\u000F",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001A",
    "\\u001B",
    "\\u001C",
    "\\u001D",
    "\\u001E",
    "\\u001F",
    "",
    "",
    '\\"',
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    // 2F
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    // 3F
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    // 4F
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\\\\",
    "",
    "",
    "",
    // 5F
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    // 6F
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "\\u007F",
    "\\u0080",
    "\\u0081",
    "\\u0082",
    "\\u0083",
    "\\u0084",
    "\\u0085",
    "\\u0086",
    "\\u0087",
    "\\u0088",
    "\\u0089",
    "\\u008A",
    "\\u008B",
    "\\u008C",
    "\\u008D",
    "\\u008E",
    "\\u008F",
    "\\u0090",
    "\\u0091",
    "\\u0092",
    "\\u0093",
    "\\u0094",
    "\\u0095",
    "\\u0096",
    "\\u0097",
    "\\u0098",
    "\\u0099",
    "\\u009A",
    "\\u009B",
    "\\u009C",
    "\\u009D",
    "\\u009E",
    "\\u009F"
  ];

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/visitor.mjs
  var BREAK = Object.freeze({});
  function visit(root, visitor, visitorKeys = QueryDocumentKeys) {
    const enterLeaveMap = /* @__PURE__ */ new Map();
    for (const kind of Object.values(Kind)) {
      enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
    }
    let stack = void 0;
    let inArray = Array.isArray(root);
    let keys = [root];
    let index = -1;
    let edits = [];
    let node = root;
    let key = void 0;
    let parent = void 0;
    const path3 = [];
    const ancestors = [];
    do {
      index++;
      const isLeaving = index === keys.length;
      const isEdited = isLeaving && edits.length !== 0;
      if (isLeaving) {
        key = ancestors.length === 0 ? void 0 : path3[path3.length - 1];
        node = parent;
        parent = ancestors.pop();
        if (isEdited) {
          if (inArray) {
            node = node.slice();
            let editOffset = 0;
            for (const [editKey, editValue] of edits) {
              const arrayKey = editKey - editOffset;
              if (editValue === null) {
                node.splice(arrayKey, 1);
                editOffset++;
              } else {
                node[arrayKey] = editValue;
              }
            }
          } else {
            node = Object.defineProperties(
              {},
              Object.getOwnPropertyDescriptors(node)
            );
            for (const [editKey, editValue] of edits) {
              node[editKey] = editValue;
            }
          }
        }
        index = stack.index;
        keys = stack.keys;
        edits = stack.edits;
        inArray = stack.inArray;
        stack = stack.prev;
      } else if (parent) {
        key = inArray ? index : keys[index];
        node = parent[key];
        if (node === null || node === void 0) {
          continue;
        }
        path3.push(key);
      }
      let result;
      if (!Array.isArray(node)) {
        var _enterLeaveMap$get, _enterLeaveMap$get2;
        isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);
        const visitFn = isLeaving ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get === void 0 ? void 0 : _enterLeaveMap$get.leave : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null || _enterLeaveMap$get2 === void 0 ? void 0 : _enterLeaveMap$get2.enter;
        result = visitFn === null || visitFn === void 0 ? void 0 : visitFn.call(visitor, node, key, parent, path3, ancestors);
        if (result === BREAK) {
          break;
        }
        if (result === false) {
          if (!isLeaving) {
            path3.pop();
            continue;
          }
        } else if (result !== void 0) {
          edits.push([key, result]);
          if (!isLeaving) {
            if (isNode(result)) {
              node = result;
            } else {
              path3.pop();
              continue;
            }
          }
        }
      }
      if (result === void 0 && isEdited) {
        edits.push([key, node]);
      }
      if (isLeaving) {
        path3.pop();
      } else {
        var _node$kind;
        stack = {
          inArray,
          index,
          keys,
          edits,
          prev: stack
        };
        inArray = Array.isArray(node);
        keys = inArray ? node : (_node$kind = visitorKeys[node.kind]) !== null && _node$kind !== void 0 ? _node$kind : [];
        index = -1;
        edits = [];
        if (parent) {
          ancestors.push(parent);
        }
        parent = node;
      }
    } while (stack !== void 0);
    if (edits.length !== 0) {
      return edits[edits.length - 1][1];
    }
    return root;
  }
  function getEnterLeaveForKind(visitor, kind) {
    const kindVisitor = visitor[kind];
    if (typeof kindVisitor === "object") {
      return kindVisitor;
    } else if (typeof kindVisitor === "function") {
      return {
        enter: kindVisitor,
        leave: void 0
      };
    }
    return {
      enter: visitor.enter,
      leave: visitor.leave
    };
  }

  // ../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printer.mjs
  function print(ast) {
    return visit(ast, printDocASTReducer);
  }
  var MAX_LINE_LENGTH = 80;
  var printDocASTReducer = {
    Name: {
      leave: (node) => node.value
    },
    Variable: {
      leave: (node) => "$" + node.name
    },
    // Document
    Document: {
      leave: (node) => join(node.definitions, "\n\n")
    },
    OperationDefinition: {
      leave(node) {
        const varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
        const prefix = join(
          [
            node.operation,
            join([node.name, varDefs]),
            join(node.directives, " ")
          ],
          " "
        );
        return (prefix === "query" ? "" : prefix + " ") + node.selectionSet;
      }
    },
    VariableDefinition: {
      leave: ({ variable, type: type3, defaultValue, directives }) => variable + ": " + type3 + wrap(" = ", defaultValue) + wrap(" ", join(directives, " "))
    },
    SelectionSet: {
      leave: ({ selections }) => block(selections)
    },
    Field: {
      leave({ alias, name, arguments: args, directives, selectionSet }) {
        const prefix = wrap("", alias, ": ") + name;
        let argsLine = prefix + wrap("(", join(args, ", "), ")");
        if (argsLine.length > MAX_LINE_LENGTH) {
          argsLine = prefix + wrap("(\n", indent(join(args, "\n")), "\n)");
        }
        return join([argsLine, join(directives, " "), selectionSet], " ");
      }
    },
    Argument: {
      leave: ({ name, value }) => name + ": " + value
    },
    // Fragments
    FragmentSpread: {
      leave: ({ name, directives }) => "..." + name + wrap(" ", join(directives, " "))
    },
    InlineFragment: {
      leave: ({ typeCondition, directives, selectionSet }) => join(
        [
          "...",
          wrap("on ", typeCondition),
          join(directives, " "),
          selectionSet
        ],
        " "
      )
    },
    FragmentDefinition: {
      leave: ({ name, typeCondition, variableDefinitions, directives, selectionSet }) => (
        // or removed in the future.
        `fragment ${name}${wrap("(", join(variableDefinitions, ", "), ")")} on ${typeCondition} ${wrap("", join(directives, " "), " ")}` + selectionSet
      )
    },
    // Value
    IntValue: {
      leave: ({ value }) => value
    },
    FloatValue: {
      leave: ({ value }) => value
    },
    StringValue: {
      leave: ({ value, block: isBlockString }) => isBlockString ? printBlockString(value) : printString(value)
    },
    BooleanValue: {
      leave: ({ value }) => value ? "true" : "false"
    },
    NullValue: {
      leave: () => "null"
    },
    EnumValue: {
      leave: ({ value }) => value
    },
    ListValue: {
      leave: ({ values }) => "[" + join(values, ", ") + "]"
    },
    ObjectValue: {
      leave: ({ fields }) => "{" + join(fields, ", ") + "}"
    },
    ObjectField: {
      leave: ({ name, value }) => name + ": " + value
    },
    // Directive
    Directive: {
      leave: ({ name, arguments: args }) => "@" + name + wrap("(", join(args, ", "), ")")
    },
    // Type
    NamedType: {
      leave: ({ name }) => name
    },
    ListType: {
      leave: ({ type: type3 }) => "[" + type3 + "]"
    },
    NonNullType: {
      leave: ({ type: type3 }) => type3 + "!"
    },
    // Type System Definitions
    SchemaDefinition: {
      leave: ({ description, directives, operationTypes }) => wrap("", description, "\n") + join(["schema", join(directives, " "), block(operationTypes)], " ")
    },
    OperationTypeDefinition: {
      leave: ({ operation, type: type3 }) => operation + ": " + type3
    },
    ScalarTypeDefinition: {
      leave: ({ description, name, directives }) => wrap("", description, "\n") + join(["scalar", name, join(directives, " ")], " ")
    },
    ObjectTypeDefinition: {
      leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
        [
          "type",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ],
        " "
      )
    },
    FieldDefinition: {
      leave: ({ description, name, arguments: args, type: type3, directives }) => wrap("", description, "\n") + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type3 + wrap(" ", join(directives, " "))
    },
    InputValueDefinition: {
      leave: ({ description, name, type: type3, defaultValue, directives }) => wrap("", description, "\n") + join(
        [name + ": " + type3, wrap("= ", defaultValue), join(directives, " ")],
        " "
      )
    },
    InterfaceTypeDefinition: {
      leave: ({ description, name, interfaces, directives, fields }) => wrap("", description, "\n") + join(
        [
          "interface",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ],
        " "
      )
    },
    UnionTypeDefinition: {
      leave: ({ description, name, directives, types }) => wrap("", description, "\n") + join(
        ["union", name, join(directives, " "), wrap("= ", join(types, " | "))],
        " "
      )
    },
    EnumTypeDefinition: {
      leave: ({ description, name, directives, values }) => wrap("", description, "\n") + join(["enum", name, join(directives, " "), block(values)], " ")
    },
    EnumValueDefinition: {
      leave: ({ description, name, directives }) => wrap("", description, "\n") + join([name, join(directives, " ")], " ")
    },
    InputObjectTypeDefinition: {
      leave: ({ description, name, directives, fields }) => wrap("", description, "\n") + join(["input", name, join(directives, " "), block(fields)], " ")
    },
    DirectiveDefinition: {
      leave: ({ description, name, arguments: args, repeatable, locations }) => wrap("", description, "\n") + "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ")
    },
    SchemaExtension: {
      leave: ({ directives, operationTypes }) => join(
        ["extend schema", join(directives, " "), block(operationTypes)],
        " "
      )
    },
    ScalarTypeExtension: {
      leave: ({ name, directives }) => join(["extend scalar", name, join(directives, " ")], " ")
    },
    ObjectTypeExtension: {
      leave: ({ name, interfaces, directives, fields }) => join(
        [
          "extend type",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ],
        " "
      )
    },
    InterfaceTypeExtension: {
      leave: ({ name, interfaces, directives, fields }) => join(
        [
          "extend interface",
          name,
          wrap("implements ", join(interfaces, " & ")),
          join(directives, " "),
          block(fields)
        ],
        " "
      )
    },
    UnionTypeExtension: {
      leave: ({ name, directives, types }) => join(
        [
          "extend union",
          name,
          join(directives, " "),
          wrap("= ", join(types, " | "))
        ],
        " "
      )
    },
    EnumTypeExtension: {
      leave: ({ name, directives, values }) => join(["extend enum", name, join(directives, " "), block(values)], " ")
    },
    InputObjectTypeExtension: {
      leave: ({ name, directives, fields }) => join(["extend input", name, join(directives, " "), block(fields)], " ")
    }
  };
  function join(maybeArray, separator = "") {
    var _maybeArray$filter$jo;
    return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter((x) => x).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
  }
  function block(array) {
    return wrap("{\n", indent(join(array, "\n")), "\n}");
  }
  function wrap(start, maybeString, end = "") {
    return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
  }
  function indent(str) {
    return wrap("  ", str.replace(/\n/g, "\n  "));
  }
  function hasMultilineItems(maybeArray) {
    var _maybeArray$some;
    return (_maybeArray$some = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.some((str) => str.includes("\n"))) !== null && _maybeArray$some !== void 0 ? _maybeArray$some : false;
  }

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/resolveRequestDocument.js
  var extractOperationName = (document) => {
    let operationName = void 0;
    const operationDefinitions = document.definitions.filter((definition) => definition.kind === `OperationDefinition`);
    if (operationDefinitions.length === 1) {
      operationName = operationDefinitions[0]?.name?.value;
    }
    return operationName;
  };
  var resolveRequestDocument = (document) => {
    if (typeof document === `string`) {
      let operationName2 = void 0;
      try {
        const parsedDocument = parse(document);
        operationName2 = extractOperationName(parsedDocument);
      } catch (err) {
      }
      return { query: document, operationName: operationName2 };
    }
    const operationName = extractOperationName(document);
    return { query: print(document), operationName };
  };

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/types.js
  var ClientError = class extends Error {
    constructor(response, request) {
      const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({
        response,
        request
      })}`;
      super(message);
      Object.setPrototypeOf(this, ClientError.prototype);
      this.response = response;
      this.request = request;
      if (typeof Error.captureStackTrace === `function`) {
        Error.captureStackTrace(this, ClientError);
      }
    }
    static extractMessage(response) {
      return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;
    }
  };

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/index.js
  var CrossFetch = __toESM(require_node_ponyfill(), 1);

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/graphql-ws.js
  var CONNECTION_INIT = `connection_init`;
  var CONNECTION_ACK = `connection_ack`;
  var PING = `ping`;
  var PONG = `pong`;
  var SUBSCRIBE = `subscribe`;
  var NEXT = `next`;
  var ERROR = `error`;
  var COMPLETE = `complete`;
  var GraphQLWebSocketMessage = class {
    get type() {
      return this._type;
    }
    get id() {
      return this._id;
    }
    get payload() {
      return this._payload;
    }
    constructor(type3, payload, id) {
      this._type = type3;
      this._payload = payload;
      this._id = id;
    }
    get text() {
      const result = { type: this.type };
      if (this.id != null && this.id != void 0)
        result.id = this.id;
      if (this.payload != null && this.payload != void 0)
        result.payload = this.payload;
      return JSON.stringify(result);
    }
    static parse(data, f2) {
      const { type: type3, payload, id } = JSON.parse(data);
      return new GraphQLWebSocketMessage(type3, f2(payload), id);
    }
  };
  var GraphQLWebSocketClient = class {
    constructor(socket, { onInit, onAcknowledged, onPing, onPong }) {
      this.socketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} };
      this.socket = socket;
      socket.addEventListener(`open`, async (e) => {
        this.socketState.acknowledged = false;
        this.socketState.subscriptions = {};
        socket.send(ConnectionInit(onInit ? await onInit() : null).text);
      });
      socket.addEventListener(`close`, (e) => {
        this.socketState.acknowledged = false;
        this.socketState.subscriptions = {};
      });
      socket.addEventListener(`error`, (e) => {
        console.error(e);
      });
      socket.addEventListener(`message`, (e) => {
        try {
          const message = parseMessage(e.data);
          switch (message.type) {
            case CONNECTION_ACK: {
              if (this.socketState.acknowledged) {
                console.warn(`Duplicate CONNECTION_ACK message ignored`);
              } else {
                this.socketState.acknowledged = true;
                if (onAcknowledged)
                  onAcknowledged(message.payload);
              }
              return;
            }
            case PING: {
              if (onPing)
                onPing(message.payload).then((r) => socket.send(Pong(r).text));
              else
                socket.send(Pong(null).text);
              return;
            }
            case PONG: {
              if (onPong)
                onPong(message.payload);
              return;
            }
          }
          if (!this.socketState.acknowledged) {
            return;
          }
          if (message.id === void 0 || message.id === null || !this.socketState.subscriptions[message.id]) {
            return;
          }
          const { query, variables, subscriber } = this.socketState.subscriptions[message.id];
          switch (message.type) {
            case NEXT: {
              if (!message.payload.errors && message.payload.data) {
                subscriber.next && subscriber.next(message.payload.data);
              }
              if (message.payload.errors) {
                subscriber.error && subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query, variables }));
              } else {
              }
              return;
            }
            case ERROR: {
              subscriber.error && subscriber.error(new ClientError({ errors: message.payload, status: 200 }, { query, variables }));
              return;
            }
            case COMPLETE: {
              subscriber.complete && subscriber.complete();
              delete this.socketState.subscriptions[message.id];
              return;
            }
          }
        } catch (e2) {
          console.error(e2);
          socket.close(1006);
        }
        socket.close(4400, `Unknown graphql-ws message.`);
      });
    }
    makeSubscribe(query, operationName, subscriber, variables) {
      const subscriptionId = (this.socketState.lastRequestId++).toString();
      this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber };
      this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text);
      return () => {
        this.socket.send(Complete(subscriptionId).text);
        delete this.socketState.subscriptions[subscriptionId];
      };
    }
    rawRequest(query, variables) {
      return new Promise((resolve, reject) => {
        let result;
        this.rawSubscribe(query, {
          next: (data, extensions) => result = { data, extensions },
          error: reject,
          complete: () => resolve(result)
        }, variables);
      });
    }
    request(document, variables) {
      return new Promise((resolve, reject) => {
        let result;
        this.subscribe(document, {
          next: (data) => result = data,
          error: reject,
          complete: () => resolve(result)
        }, variables);
      });
    }
    subscribe(document, subscriber, variables) {
      const { query, operationName } = resolveRequestDocument(document);
      return this.makeSubscribe(query, operationName, subscriber, variables);
    }
    rawSubscribe(query, subscriber, variables) {
      return this.makeSubscribe(query, void 0, subscriber, variables);
    }
    ping(payload) {
      this.socket.send(Ping(payload).text);
    }
    close() {
      this.socket.close(1e3);
    }
  };
  GraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;
  function parseMessage(data, f2 = (a) => a) {
    const m = GraphQLWebSocketMessage.parse(data, f2);
    return m;
  }
  function ConnectionInit(payload) {
    return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);
  }
  function Ping(payload) {
    return new GraphQLWebSocketMessage(PING, payload, void 0);
  }
  function Pong(payload) {
    return new GraphQLWebSocketMessage(PONG, payload, void 0);
  }
  function Subscribe(id, payload) {
    return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);
  }
  function Complete(id) {
    return new GraphQLWebSocketMessage(COMPLETE, void 0, id);
  }

  // ../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/build/esm/index.js
  var resolveHeaders = (headers) => {
    let oHeaders = {};
    if (headers) {
      if (typeof Headers !== `undefined` && headers instanceof Headers || CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers) {
        oHeaders = HeadersInstanceToPlainObject(headers);
      } else if (Array.isArray(headers)) {
        headers.forEach(([name, value]) => {
          if (name && value !== void 0) {
            oHeaders[name] = value;
          }
        });
      } else {
        oHeaders = headers;
      }
    }
    return oHeaders;
  };
  var cleanQuery = (str) => str.replace(/([\s,]|#[^\n\r]+)+/g, ` `).trim();
  var buildRequestConfig = (params) => {
    if (!Array.isArray(params.query)) {
      const params_2 = params;
      const search = [`query=${encodeURIComponent(cleanQuery(params_2.query))}`];
      if (params.variables) {
        search.push(`variables=${encodeURIComponent(params_2.jsonSerializer.stringify(params_2.variables))}`);
      }
      if (params_2.operationName) {
        search.push(`operationName=${encodeURIComponent(params_2.operationName)}`);
      }
      return search.join(`&`);
    }
    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {
      throw new Error(`Cannot create query with given variable type, array expected`);
    }
    const params_ = params;
    const payload = params.query.reduce((acc, currentQuery, index) => {
      acc.push({
        query: cleanQuery(currentQuery),
        variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : void 0
      });
      return acc;
    }, []);
    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;
  };
  var createHttpMethodFetcher = (method) => async (params) => {
    const { url, query, variables, operationName, fetch: fetch3, fetchOptions, middleware } = params;
    const headers = { ...params.headers };
    let queryParams = ``;
    let body = void 0;
    if (method === `POST`) {
      body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);
      if (typeof body === `string`) {
        headers[`Content-Type`] = `application/json`;
      }
    } else {
      queryParams = buildRequestConfig({
        query,
        variables,
        operationName,
        jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer
      });
    }
    const init = {
      method,
      headers,
      body,
      ...fetchOptions
    };
    let urlResolved = url;
    let initResolved = init;
    if (middleware) {
      const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }));
      const { url: urlNew, ...initNew } = result;
      urlResolved = urlNew;
      initResolved = initNew;
    }
    if (queryParams) {
      urlResolved = `${urlResolved}?${queryParams}`;
    }
    return await fetch3(urlResolved, initResolved);
  };
  var GraphQLClient = class {
    constructor(url, requestConfig = {}) {
      this.url = url;
      this.requestConfig = requestConfig;
      this.rawRequest = async (...args) => {
        const [queryOrOptions, variables, requestHeaders] = args;
        const rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders);
        const { headers, fetch: fetch3 = CrossFetch.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;
        const { url: url2 } = this;
        if (rawRequestOptions.signal !== void 0) {
          fetchOptions.signal = rawRequestOptions.signal;
        }
        const { operationName } = resolveRequestDocument(rawRequestOptions.query);
        return makeRequest({
          url: url2,
          query: rawRequestOptions.query,
          variables: rawRequestOptions.variables,
          headers: {
            ...resolveHeaders(callOrIdentity(headers)),
            ...resolveHeaders(rawRequestOptions.requestHeaders)
          },
          operationName,
          fetch: fetch3,
          method,
          fetchOptions,
          middleware: requestMiddleware
        }).then((response) => {
          if (responseMiddleware) {
            responseMiddleware(response);
          }
          return response;
        }).catch((error2) => {
          if (responseMiddleware) {
            responseMiddleware(error2);
          }
          throw error2;
        });
      };
    }
    async request(documentOrOptions, ...variablesAndRequestHeaders) {
      const [variables, requestHeaders] = variablesAndRequestHeaders;
      const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders);
      const { headers, fetch: fetch3 = CrossFetch.default, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;
      const { url } = this;
      if (requestOptions.signal !== void 0) {
        fetchOptions.signal = requestOptions.signal;
      }
      const { query, operationName } = resolveRequestDocument(requestOptions.document);
      return makeRequest({
        url,
        query,
        variables: requestOptions.variables,
        headers: {
          ...resolveHeaders(callOrIdentity(headers)),
          ...resolveHeaders(requestOptions.requestHeaders)
        },
        operationName,
        fetch: fetch3,
        method,
        fetchOptions,
        middleware: requestMiddleware
      }).then((response) => {
        if (responseMiddleware) {
          responseMiddleware(response);
        }
        return response.data;
      }).catch((error2) => {
        if (responseMiddleware) {
          responseMiddleware(error2);
        }
        throw error2;
      });
    }
    // prettier-ignore
    batchRequests(documentsOrOptions, requestHeaders) {
      const batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders);
      const { headers, ...fetchOptions } = this.requestConfig;
      if (batchRequestOptions.signal !== void 0) {
        fetchOptions.signal = batchRequestOptions.signal;
      }
      const queries = batchRequestOptions.documents.map(({ document }) => resolveRequestDocument(document).query);
      const variables = batchRequestOptions.documents.map(({ variables: variables2 }) => variables2);
      return makeRequest({
        url: this.url,
        query: queries,
        // @ts-expect-error TODO reconcile batch variables into system.
        variables,
        headers: {
          ...resolveHeaders(callOrIdentity(headers)),
          ...resolveHeaders(batchRequestOptions.requestHeaders)
        },
        operationName: void 0,
        fetch: this.requestConfig.fetch ?? CrossFetch.default,
        method: this.requestConfig.method || `POST`,
        fetchOptions,
        middleware: this.requestConfig.requestMiddleware
      }).then((response) => {
        if (this.requestConfig.responseMiddleware) {
          this.requestConfig.responseMiddleware(response);
        }
        return response.data;
      }).catch((error2) => {
        if (this.requestConfig.responseMiddleware) {
          this.requestConfig.responseMiddleware(error2);
        }
        throw error2;
      });
    }
    setHeaders(headers) {
      this.requestConfig.headers = headers;
      return this;
    }
    /**
     * Attach a header to the client. All subsequent requests will have this header.
     */
    setHeader(key, value) {
      const { headers } = this.requestConfig;
      if (headers) {
        headers[key] = value;
      } else {
        this.requestConfig.headers = { [key]: value };
      }
      return this;
    }
    /**
     * Change the client endpoint. All subsequent requests will send to this endpoint.
     */
    setEndpoint(value) {
      this.url = value;
      return this;
    }
  };
  var makeRequest = async (params) => {
    const { query, variables, fetchOptions } = params;
    const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`));
    const isBatchingQuery = Array.isArray(params.query);
    const response = await fetcher(params);
    const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer);
    const successfullyReceivedData = Array.isArray(result) ? !result.some(({ data }) => !data) : Boolean(result.data);
    const successfullyPassedErrorPolicy = Array.isArray(result) || !result.errors || Array.isArray(result.errors) && !result.errors.length || fetchOptions.errorPolicy === `all` || fetchOptions.errorPolicy === `ignore`;
    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {
      const { errors: _, ...rest } = Array.isArray(result) ? result : result;
      const data = fetchOptions.errorPolicy === `ignore` ? rest : result;
      const dataEnvelope = isBatchingQuery ? { data } : data;
      return {
        ...dataEnvelope,
        headers: response.headers,
        status: response.status
      };
    } else {
      const errorResult = typeof result === `string` ? {
        error: result
      } : result;
      throw new ClientError(
        // @ts-expect-error TODO
        { ...errorResult, status: response.status, headers: response.headers },
        { query, variables }
      );
    }
  };
  var createRequestBody = (query, variables, operationName, jsonSerializer) => {
    const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer;
    if (!Array.isArray(query)) {
      return jsonSerializer_.stringify({ query, variables, operationName });
    }
    if (typeof variables !== `undefined` && !Array.isArray(variables)) {
      throw new Error(`Cannot create request body with given variable type, array expected`);
    }
    const payload = query.reduce((acc, currentQuery, index) => {
      acc.push({ query: currentQuery, variables: variables ? variables[index] : void 0 });
      return acc;
    }, []);
    return jsonSerializer_.stringify(payload);
  };
  var getResult = async (response, jsonSerializer) => {
    let contentType;
    response.headers.forEach((value, key) => {
      if (key.toLowerCase() === `content-type`) {
        contentType = value;
      }
    });
    if (contentType && (contentType.toLowerCase().startsWith(`application/json`) || contentType.toLowerCase().startsWith(`application/graphql+json`) || contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {
      return jsonSerializer.parse(await response.text());
    } else {
      return response.text();
    }
  };
  var callOrIdentity = (value) => {
    return typeof value === `function` ? value() : value;
  };

  // ../../node_modules/.pnpm/tslib@2.8.0/node_modules/tslib/tslib.es6.mjs
  var __assign = function() {
    __assign = Object.assign || function __assign2(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign.apply(this, arguments);
  };

  // ../../node_modules/.pnpm/graphql-tag@2.12.6_graphql@16.9.0/node_modules/graphql-tag/lib/index.js
  var docCache = /* @__PURE__ */ new Map();
  var fragmentSourceMap = /* @__PURE__ */ new Map();
  var printFragmentWarnings = true;
  var experimentalFragmentVariables = false;
  function normalize(string) {
    return string.replace(/[\s,]+/g, " ").trim();
  }
  function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
  }
  function processFragments(ast) {
    var seenKeys = /* @__PURE__ */ new Set();
    var definitions = [];
    ast.definitions.forEach(function(fragmentDefinition) {
      if (fragmentDefinition.kind === "FragmentDefinition") {
        var fragmentName = fragmentDefinition.name.value;
        var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
        var sourceKeySet = fragmentSourceMap.get(fragmentName);
        if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
          if (printFragmentWarnings) {
            console.warn("Warning: fragment with name " + fragmentName + " already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
          }
        } else if (!sourceKeySet) {
          fragmentSourceMap.set(fragmentName, sourceKeySet = /* @__PURE__ */ new Set());
        }
        sourceKeySet.add(sourceKey);
        if (!seenKeys.has(sourceKey)) {
          seenKeys.add(sourceKey);
          definitions.push(fragmentDefinition);
        }
      } else {
        definitions.push(fragmentDefinition);
      }
    });
    return __assign(__assign({}, ast), { definitions });
  }
  function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function(node) {
      if (node.loc)
        delete node.loc;
      Object.keys(node).forEach(function(key) {
        var value = node[key];
        if (value && typeof value === "object") {
          workSet.add(value);
        }
      });
    });
    var loc = doc.loc;
    if (loc) {
      delete loc.startToken;
      delete loc.endToken;
    }
    return doc;
  }
  function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
      var parsed = parse(source, {
        experimentalFragmentVariables,
        allowLegacyFragmentVariables: experimentalFragmentVariables
      });
      if (!parsed || parsed.kind !== "Document") {
        throw new Error("Not a valid GraphQL document.");
      }
      docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
  }
  function gql(literals) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    if (typeof literals === "string") {
      literals = [literals];
    }
    var result = literals[0];
    args.forEach(function(arg, i) {
      if (arg && arg.kind === "Document") {
        result += arg.loc.source.body;
      } else {
        result += arg;
      }
      result += literals[i + 1];
    });
    return parseDocument(result);
  }
  function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
  }
  function disableFragmentWarnings() {
    printFragmentWarnings = false;
  }
  function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
  }
  function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
  }
  var extras = {
    gql,
    resetCaches,
    disableFragmentWarnings,
    enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables
  };
  (function(gql_1) {
    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
  })(gql || (gql = {}));
  gql["default"] = gql;
  var lib_default2 = gql;

  // ../address/dist/configs.mjs
  var ZeroBytes32 = "0x0000000000000000000000000000000000000000000000000000000000000000";

  // ../transactions/dist/configs.mjs
  var CONTRACT_MAX_SIZE = 16 * 1024;
  var MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;
  var MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;
  var MAX_PREDICATE_LENGTH = 1024 * 1024;
  var MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;
  var FAILED_REQUIRE_SIGNAL = "0xffffffffffff0000";
  var FAILED_TRANSFER_TO_ADDRESS_SIGNAL = "0xffffffffffff0001";
  var FAILED_ASSERT_EQ_SIGNAL = "0xffffffffffff0003";
  var FAILED_ASSERT_SIGNAL = "0xffffffffffff0004";
  var FAILED_ASSERT_NE_SIGNAL = "0xffffffffffff0005";
  var PANIC_REASONS = [
    "UnknownPanicReason",
    "Revert",
    "OutOfGas",
    "TransactionValidity",
    "MemoryOverflow",
    "ArithmeticOverflow",
    "ContractNotFound",
    "MemoryOwnership",
    "NotEnoughBalance",
    "ExpectedInternalContext",
    "AssetIdNotFound",
    "InputNotFound",
    "OutputNotFound",
    "WitnessNotFound",
    "TransactionMaturity",
    "InvalidMetadataIdentifier",
    "MalformedCallStructure",
    "ReservedRegisterNotWritable",
    "InvalidFlags",
    "InvalidImmediateValue",
    "ExpectedCoinInput",
    "EcalError",
    "MemoryWriteOverlap",
    "ContractNotInInputs",
    "InternalBalanceOverflow",
    "ContractMaxSize",
    "ExpectedUnallocatedStack",
    "MaxStaticContractsReached",
    "TransferAmountCannotBeZero",
    "ExpectedOutputVariable",
    "ExpectedParentInternalContext",
    "PredicateReturnedNonOne",
    "ContractIdAlreadyDeployed",
    "ContractMismatch",
    "MessageDataTooLong",
    "ArithmeticError",
    "ContractInstructionNotAllowed",
    "TransferZeroCoins",
    "InvalidInstruction",
    "MemoryNotExecutable",
    "PolicyIsNotSet",
    "PolicyNotFound",
    "TooManyReceipts",
    "BalanceOverflow",
    "InvalidBlockHeight",
    "TooManySlots",
    "ExpectedNestedCaller",
    "MemoryGrowthOverlap",
    "UninitalizedMemoryAccess",
    "OverridingConsensusParameters",
    "UnknownStateTransactionBytecodeRoot",
    "OverridingStateTransactionBytecode",
    "BytecodeAlreadyUploaded",
    "ThePartIsNotSequentiallyConnected",
    "BlobIdAlreadyUploaded",
    "BlobNotFound",
    "GasCostNotDefined"
  ];
  var PANIC_DOC_URL = "https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html";

  // ../account/dist/test-utils.mjs
  var asm = __toESM(require_node(), 1);
  var __defProp5 = Object.defineProperty;
  var __defNormalProp4 = (obj, key, value) => key in obj ? __defProp5(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField4 = (obj, key, value) => {
    __defNormalProp4(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj))
      throw TypeError("Cannot " + msg);
  };
  var __privateAdd = (obj, member, value) => {
    if (member.has(obj))
      throw TypeError("Cannot add the same private member more than once");
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  };
  var __privateMethod = (obj, member, method) => {
    __accessCheck(obj, member, "access private method");
    return method;
  };
  var Signer = class {
    address;
    publicKey;
    compressedPublicKey;
    privateKey;
    /**
     * Create a Signer instance from a given private key
     *
     * @param privateKey - The private key to use for signing
     * @returns A new Signer instance
     */
    constructor(privateKey) {
      if (typeof privateKey === "string") {
        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
          privateKey = `0x${privateKey}`;
        }
      }
      const privateKeyBytes = toBytes(privateKey, 32);
      this.privateKey = hexlify(privateKeyBytes);
      this.publicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));
      this.compressedPublicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, true));
      this.address = Address.fromPublicKey(this.publicKey);
    }
    /**
     * Sign data using the Signer instance
     *
     * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.
     * @ignore
     * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)
     *
     * @param data - The data to be sign
     * @returns hashed signature
     */
    sign(data) {
      const signature = secp256k1.sign(arrayify(data), arrayify(this.privateKey));
      const r = toBytes(`0x${signature.r.toString(16)}`, 32);
      const s = toBytes(`0x${signature.s.toString(16)}`, 32);
      s[0] |= (signature.recovery || 0) << 7;
      return hexlify(concat([r, s]));
    }
    /**
     * Add point on the current elliptic curve
     *
     * @param point - Point to add on the curve
     * @returns compressed point on the curve
     */
    addPoint(point) {
      const p0 = secp256k1.ProjectivePoint.fromHex(arrayify(this.compressedPublicKey));
      const p1 = secp256k1.ProjectivePoint.fromHex(arrayify(point));
      const result = p0.add(p1);
      return `0x${result.toHex(true)}`;
    }
    /**
     * Recover the public key from a signature performed with [`sign`](#sign).
     *
     * @param data - Data
     * @param signature - hashed signature
     * @returns public key from signature from the
     */
    static recoverPublicKey(data, signature) {
      const signedMessageBytes = arrayify(signature);
      const r = signedMessageBytes.slice(0, 32);
      const s = signedMessageBytes.slice(32, 64);
      const recoveryParam = (s[0] & 128) >> 7;
      s[0] &= 127;
      const sig = new secp256k1.Signature(BigInt(hexlify(r)), BigInt(hexlify(s))).addRecoveryBit(
        recoveryParam
      );
      const publicKey = sig.recoverPublicKey(arrayify(data)).toRawBytes(false).slice(1);
      return hexlify(publicKey);
    }
    /**
     * Recover the address from a signature performed with [`sign`](#sign).
     *
     * @param data - Data
     * @param signature - Signature
     * @returns Address from signature
     */
    static recoverAddress(data, signature) {
      return Address.fromPublicKey(Signer.recoverPublicKey(data, signature));
    }
    /**
     * Generate a random privateKey
     *
     * @param entropy - Adds extra entropy to generate the privateKey
     * @returns random 32-byte hashed
     */
    static generatePrivateKey(entropy) {
      return entropy ? hash2(concat([randomBytes22(32), arrayify(entropy)])) : randomBytes22(32);
    }
    /**
     * Extended publicKey from a compact publicKey
     *
     * @param publicKey - Compact publicKey
     * @returns extended publicKey
     */
    static extendPublicKey(publicKey) {
      const point = secp256k1.ProjectivePoint.fromHex(arrayify(publicKey));
      return hexlify(point.toRawBytes(false).slice(1));
    }
  };
  var getFlagValueFromArgs = (args, flag) => {
    const flagIndex = args.indexOf(flag);
    if (flagIndex === -1) {
      return void 0;
    }
    return args[flagIndex + 1];
  };
  var extractRemainingArgs = (args, flagsToRemove) => {
    const newArgs = [...args];
    flagsToRemove.forEach((flag) => {
      const flagIndex = newArgs.indexOf(flag);
      if (flagIndex !== -1) {
        newArgs.splice(flagIndex, 2);
      }
    });
    return newArgs;
  };
  function getFinalStateConfigJSON({
    stateConfig,
    chainConfig,
    includeInitialState = false
  }) {
    const defaultCoins = defaultSnapshotConfigs.stateConfig.coins.map((coin) => ({
      ...coin,
      amount: "18446744073709551615"
    }));
    const defaultMessages = defaultSnapshotConfigs.stateConfig.messages.map((message) => ({
      ...message,
      amount: "18446744073709551615"
    }));
    const coins = defaultCoins.concat(stateConfig.coins.map((coin) => ({ ...coin, amount: coin.amount.toString() }))).filter((coin, index, self) => self.findIndex((c) => c.tx_id === coin.tx_id) === index);
    const messages = defaultMessages.concat(stateConfig.messages.map((msg) => ({ ...msg, amount: msg.amount.toString() }))).filter((msg, index, self) => self.findIndex((m) => m.nonce === msg.nonce) === index);
    if (includeInitialState) {
      coins.push({
        tx_id: "0x0000000000000000000000000000000000000000000000000000000000000001",
        output_index: 0,
        tx_pointer_block_height: 0,
        tx_pointer_tx_idx: 0,
        owner: "0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d",
        amount: "18446744073709551615",
        asset_id: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
      });
      coins.push({
        tx_id: "0x0000000000000000000000000000000000000000000000000000000000000002",
        output_index: 0,
        tx_pointer_block_height: 0,
        tx_pointer_tx_idx: 0,
        owner: "0x09c0b2d1a486c439a87bcba6b46a7a1a23f3897cc83a94521a96da5c23bc58db",
        amount: "18446744073709551615",
        asset_id: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
      });
    }
    if (!process.env.GENESIS_SECRET) {
      const pk = Signer.generatePrivateKey();
      const signer = new Signer(pk);
      process.env.GENESIS_SECRET = hexlify(pk);
      coins.push({
        tx_id: hexlify(randomBytes22(BYTES_32)),
        owner: signer.address.toHexString(),
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        amount: "18446744073709551615",
        asset_id: chainConfig.consensus_parameters.V2.base_asset_id,
        output_index: 0,
        tx_pointer_block_height: 0,
        tx_pointer_tx_idx: 0
      });
    }
    const json = JSON.stringify({
      ...stateConfig,
      coins,
      messages
    });
    const regexMakeNumber = /("amount":)"(\d+)"/gm;
    return json.replace(regexMakeNumber, "$1$2");
  }
  var launchNode = async ({
    ip,
    port,
    args = [],
    fuelCorePath = process.env.FUEL_CORE_PATH || void 0,
    loggingEnabled = true,
    basePath,
    snapshotConfig = defaultSnapshotConfigs,
    includeInitialState = false,
    killProcessOnExit = false
  } = {}) => (
    // eslint-disable-next-line no-async-promise-executor
    new Promise(async (resolve, reject) => {
      const remainingArgs = extractRemainingArgs(args, [
        "--snapshot",
        "--consensus-key",
        "--db-type",
        "--poa-instant",
        "--min-gas-price",
        "--native-executor-version"
      ]);
      const snapshotDir = getFlagValueFromArgs(args, "--snapshot");
      const consensusKey = getFlagValueFromArgs(args, "--consensus-key") || defaultConsensusKey;
      const dbTypeFlagValue = getFlagValueFromArgs(args, "--db-type");
      const useInMemoryDb = dbTypeFlagValue === "in-memory" || dbTypeFlagValue === void 0;
      const poaInstantFlagValue = getFlagValueFromArgs(args, "--poa-instant");
      const poaInstant = poaInstantFlagValue === "true" || poaInstantFlagValue === void 0;
      const nativeExecutorVersion = getFlagValueFromArgs(args, "--native-executor-version") || "0";
      const minGasPrice = getFlagValueFromArgs(args, "--min-gas-price") || "1";
      const graphQLStartSubstring = "Binding GraphQL provider to";
      const command = fuelCorePath || "fuel-core";
      const ipToUse = ip || "0.0.0.0";
      const portToUse = port || "0";
      let snapshotDirToUse;
      const prefix = basePath || import_os.default.tmpdir();
      const suffix = basePath ? "" : randomUUID2();
      const tempDir = import_path.default.join(prefix, ".fuels", suffix, "snapshotDir");
      if (snapshotDir) {
        snapshotDirToUse = snapshotDir;
      } else {
        if (!(0, import_fs.existsSync)(tempDir)) {
          (0, import_fs.mkdirSync)(tempDir, { recursive: true });
        }
        const { metadata } = snapshotConfig;
        const metadataPath = import_path.default.join(tempDir, "metadata.json");
        const chainConfigPath = import_path.default.join(tempDir, metadata.chain_config);
        const stateConfigPath = import_path.default.join(tempDir, metadata.table_encoding.Json.filepath);
        const stateTransitionPath = import_path.default.join(tempDir, "state_transition_bytecode.wasm");
        (0, import_fs.writeFileSync)(chainConfigPath, JSON.stringify(snapshotConfig.chainConfig), "utf8");
        (0, import_fs.writeFileSync)(
          stateConfigPath,
          getFinalStateConfigJSON({
            ...snapshotConfig,
            includeInitialState
          }),
          "utf8"
        );
        (0, import_fs.writeFileSync)(metadataPath, JSON.stringify(metadata), "utf8");
        (0, import_fs.writeFileSync)(stateTransitionPath, JSON.stringify(""));
        snapshotDirToUse = tempDir;
      }
      const { spawn } = await import("child_process");
      const child = spawn(
        command,
        [
          "run",
          ["--ip", ipToUse],
          ["--port", portToUse],
          useInMemoryDb ? ["--db-type", "in-memory"] : ["--db-path", tempDir],
          ["--min-gas-price", minGasPrice],
          poaInstant ? ["--poa-instant", "true"] : [],
          ["--native-executor-version", nativeExecutorVersion],
          ["--consensus-key", consensusKey],
          ["--snapshot", snapshotDirToUse],
          "--vm-backtrace",
          "--utxo-validation",
          "--debug",
          ...remainingArgs
        ].flat(),
        { stdio: "pipe", detached: true }
      );
      if (loggingEnabled) {
        child.stderr.on("data", (chunk) => {
          console.log(chunk.toString());
        });
      }
      const removeChildListeners = () => {
        child.stderr.removeAllListeners();
      };
      const removeTempDir = () => {
        if ((0, import_fs.existsSync)(tempDir)) {
          (0, import_fs.rmSync)(tempDir, { recursive: true });
        }
      };
      const childState = {
        isDead: false
      };
      const cleanup = () => {
        if (childState.isDead) {
          return;
        }
        childState.isDead = true;
        removeChildListeners();
        if (child.pid !== void 0) {
          try {
            process.kill(-child.pid);
          } catch (e) {
            const error2 = e;
            if (error2.code === "ESRCH") {
              console.log(
                `fuel-core node under pid ${child.pid} does not exist. The node might have been killed before cleanup was called. Exiting cleanly.`
              );
            } else if (error2.message.includes("pid must be a positive integer")) {
              process.kill(+child.pid);
            } else {
              throw e;
            }
          }
        } else {
          console.error("No PID available for the child process, unable to kill launched node");
        }
        removeTempDir();
      };
      child.stderr.on("data", (chunk) => {
        const text = typeof chunk === "string" ? chunk : chunk.toString();
        if (text.indexOf(graphQLStartSubstring) !== -1) {
          const rows = text.split("\n");
          const rowWithUrl = rows.find((row) => row.indexOf(graphQLStartSubstring) !== -1);
          const [realIp, realPort] = rowWithUrl.split(" ").at(-1).trim().split(":");
          resolve({
            cleanup,
            ip: realIp,
            port: realPort,
            url: `http://${realIp}:${realPort}/v1/graphql`,
            snapshotDir: snapshotDirToUse,
            pid: child.pid
          });
        }
        if (/error/i.test(text)) {
          console.log(text);
          reject(new FuelError(FuelError.CODES.NODE_LAUNCH_FAILED, text));
        }
      });
      process.setMaxListeners(100);
      process.on("exit", cleanup);
      process.on("SIGINT", cleanup);
      process.on("SIGUSR1", cleanup);
      process.on("SIGUSR2", cleanup);
      process.on("beforeExit", cleanup);
      process.on("uncaughtException", cleanup);
      child.on("exit", (code, _signal) => {
        removeChildListeners();
        removeTempDir();
        if (killProcessOnExit) {
          process.exit(code);
        }
      });
      child.on("error", (err) => {
        removeChildListeners();
        removeTempDir();
        reject(err);
      });
    })
  );
  var coinQuantityfy = (coinQuantityLike) => {
    let assetId;
    let amount;
    let max;
    if (Array.isArray(coinQuantityLike)) {
      amount = coinQuantityLike[0];
      assetId = coinQuantityLike[1];
      max = coinQuantityLike[2] ?? void 0;
    } else {
      amount = coinQuantityLike.amount;
      assetId = coinQuantityLike.assetId;
      max = coinQuantityLike.max ?? void 0;
    }
    const bnAmount = bn(amount);
    return {
      assetId: hexlify(assetId),
      amount: bnAmount.lt(1) ? bn(1) : bnAmount,
      max: max ? bn(max) : void 0
    };
  };
  var addAmountToCoinQuantities = (params) => {
    const { amount, assetId } = params;
    const coinQuantities = [...params.coinQuantities];
    const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);
    if (assetIdx !== -1) {
      coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);
    } else {
      coinQuantities.push({ assetId, amount });
    }
    return coinQuantities;
  };
  var SubmittedStatusFragmentDoc = lib_default2`
    fragment SubmittedStatusFragment on SubmittedStatus {
  type: __typename
  time
}
    `;
  var ReceiptFragmentDoc = lib_default2`
    fragment receiptFragment on Receipt {
  id
  pc
  is
  to
  toAddress
  amount
  assetId
  gas
  param1
  param2
  val
  ptr
  digest
  reason
  ra
  rb
  rc
  rd
  len
  receiptType
  result
  gasUsed
  data
  sender
  recipient
  nonce
  contractId
  subId
}
    `;
  var SuccessStatusFragmentDoc = lib_default2`
    fragment SuccessStatusFragment on SuccessStatus {
  type: __typename
  time
  programState {
    returnType
    data
  }
  receipts {
    ...receiptFragment
  }
  totalGas
  totalFee
}
    ${ReceiptFragmentDoc}`;
  var SuccessStatusWithBlockIdFragmentDoc = lib_default2`
    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {
  ...SuccessStatusFragment
  block {
    id
  }
}
    ${SuccessStatusFragmentDoc}`;
  var MalleableTransactionFieldsFragmentDoc = lib_default2`
    fragment malleableTransactionFieldsFragment on Transaction {
  receiptsRoot
  inputs {
    type: __typename
    ... on InputCoin {
      txPointer
    }
    ... on InputContract {
      txPointer
    }
  }
  outputs {
    type: __typename
    ... on CoinOutput {
      to
      amount
      assetId
    }
    ... on ContractOutput {
      inputIndex
      balanceRoot
      stateRoot
    }
    ... on ChangeOutput {
      to
      amount
      assetId
    }
    ... on VariableOutput {
      to
      amount
      assetId
    }
    ... on ContractCreated {
      contract
      stateRoot
    }
  }
}
    `;
  var FailureStatusFragmentDoc = lib_default2`
    fragment FailureStatusFragment on FailureStatus {
  type: __typename
  totalGas
  totalFee
  time
  reason
  receipts {
    ...receiptFragment
  }
}
    ${ReceiptFragmentDoc}`;
  var FailureStatusWithBlockIdFragmentDoc = lib_default2`
    fragment FailureStatusWithBlockIdFragment on FailureStatus {
  ...FailureStatusFragment
  block {
    id
  }
}
    ${FailureStatusFragmentDoc}`;
  var SqueezedOutStatusFragmentDoc = lib_default2`
    fragment SqueezedOutStatusFragment on SqueezedOutStatus {
  type: __typename
  reason
}
    `;
  var TransactionStatusSubscriptionFragmentDoc = lib_default2`
    fragment transactionStatusSubscriptionFragment on TransactionStatus {
  ... on SubmittedStatus {
    ...SubmittedStatusFragment
  }
  ... on SuccessStatus {
    ...SuccessStatusWithBlockIdFragment
    transaction {
      ...malleableTransactionFieldsFragment
    }
  }
  ... on FailureStatus {
    ...FailureStatusWithBlockIdFragment
    transaction {
      ...malleableTransactionFieldsFragment
    }
  }
  ... on SqueezedOutStatus {
    ...SqueezedOutStatusFragment
  }
}
    ${SubmittedStatusFragmentDoc}
${SuccessStatusWithBlockIdFragmentDoc}
${MalleableTransactionFieldsFragmentDoc}
${FailureStatusWithBlockIdFragmentDoc}
${SqueezedOutStatusFragmentDoc}`;
  var TransactionStatusFragmentDoc = lib_default2`
    fragment transactionStatusFragment on TransactionStatus {
  ... on SubmittedStatus {
    ...SubmittedStatusFragment
  }
  ... on SuccessStatus {
    ...SuccessStatusFragment
  }
  ... on FailureStatus {
    ...FailureStatusFragment
  }
  ... on SqueezedOutStatus {
    ...SqueezedOutStatusFragment
  }
}
    ${SubmittedStatusFragmentDoc}
${SuccessStatusFragmentDoc}
${FailureStatusFragmentDoc}
${SqueezedOutStatusFragmentDoc}`;
  var TransactionFragmentDoc = lib_default2`
    fragment transactionFragment on Transaction {
  id
  rawPayload
  status {
    ...transactionStatusFragment
  }
}
    ${TransactionStatusFragmentDoc}`;
  var TransactionRawPayloadFragmentDoc = lib_default2`
    fragment transactionRawPayloadFragment on Transaction {
  id
  rawPayload
}
    `;
  var InputEstimatePredicatesFragmentDoc = lib_default2`
    fragment inputEstimatePredicatesFragment on Input {
  ... on InputCoin {
    predicateGasUsed
  }
  ... on InputMessage {
    predicateGasUsed
  }
}
    `;
  var TransactionEstimatePredicatesFragmentDoc = lib_default2`
    fragment transactionEstimatePredicatesFragment on Transaction {
  inputs {
    ...inputEstimatePredicatesFragment
  }
}
    ${InputEstimatePredicatesFragmentDoc}`;
  var DryRunFailureStatusFragmentDoc = lib_default2`
    fragment dryRunFailureStatusFragment on DryRunFailureStatus {
  type: __typename
  totalGas
  totalFee
  reason
  programState {
    returnType
    data
  }
}
    `;
  var DryRunSuccessStatusFragmentDoc = lib_default2`
    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {
  type: __typename
  totalGas
  totalFee
  programState {
    returnType
    data
  }
}
    `;
  var DryRunTransactionStatusFragmentDoc = lib_default2`
    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {
  ... on DryRunFailureStatus {
    ...dryRunFailureStatusFragment
  }
  ... on DryRunSuccessStatus {
    ...dryRunSuccessStatusFragment
  }
}
    ${DryRunFailureStatusFragmentDoc}
${DryRunSuccessStatusFragmentDoc}`;
  var DryRunTransactionExecutionStatusFragmentDoc = lib_default2`
    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {
  id
  status {
    ...dryRunTransactionStatusFragment
  }
  receipts {
    ...receiptFragment
  }
}
    ${DryRunTransactionStatusFragmentDoc}
${ReceiptFragmentDoc}`;
  var BlockFragmentDoc = lib_default2`
    fragment blockFragment on Block {
  id
  height
  header {
    time
    daHeight
    stateTransitionBytecodeVersion
    transactionsCount
    transactionsRoot
    messageOutboxRoot
    eventInboxRoot
    prevRoot
    applicationHash
  }
  transactions {
    id
  }
}
    `;
  var CoinFragmentDoc = lib_default2`
    fragment coinFragment on Coin {
  type: __typename
  utxoId
  amount
  assetId
  blockCreated
  txCreatedIdx
}
    `;
  var MessageCoinFragmentDoc = lib_default2`
    fragment messageCoinFragment on MessageCoin {
  type: __typename
  sender
  recipient
  nonce
  amount
  assetId
  daHeight
}
    `;
  var MessageFragmentDoc = lib_default2`
    fragment messageFragment on Message {
  amount
  sender
  recipient
  data
  daHeight
}
    `;
  var GetMessageFragmentDoc = lib_default2`
    fragment getMessageFragment on Message {
  ...messageFragment
  nonce
}
    ${MessageFragmentDoc}`;
  var MessageProofFragmentDoc = lib_default2`
    fragment messageProofFragment on MessageProof {
  messageProof {
    proofSet
    proofIndex
  }
  blockProof {
    proofSet
    proofIndex
  }
  messageBlockHeader {
    version
    id
    daHeight
    consensusParametersVersion
    stateTransitionBytecodeVersion
    transactionsCount
    messageReceiptCount
    transactionsRoot
    messageOutboxRoot
    eventInboxRoot
    height
    prevRoot
    time
    applicationHash
  }
  commitBlockHeader {
    version
    id
    daHeight
    consensusParametersVersion
    stateTransitionBytecodeVersion
    transactionsCount
    messageReceiptCount
    transactionsRoot
    messageOutboxRoot
    eventInboxRoot
    height
    prevRoot
    time
    applicationHash
  }
  sender
  recipient
  amount
  data
}
    `;
  var TxParametersFragmentDoc = lib_default2`
    fragment TxParametersFragment on TxParameters {
  version
  maxInputs
  maxOutputs
  maxWitnesses
  maxGasPerTx
  maxSize
  maxBytecodeSubsections
}
    `;
  var PredicateParametersFragmentDoc = lib_default2`
    fragment PredicateParametersFragment on PredicateParameters {
  version
  maxPredicateLength
  maxPredicateDataLength
  maxGasPerPredicate
  maxMessageDataLength
}
    `;
  var ScriptParametersFragmentDoc = lib_default2`
    fragment ScriptParametersFragment on ScriptParameters {
  version
  maxScriptLength
  maxScriptDataLength
}
    `;
  var ContractParametersFragmentDoc = lib_default2`
    fragment ContractParametersFragment on ContractParameters {
  version
  contractMaxSize
  maxStorageSlots
}
    `;
  var FeeParametersFragmentDoc = lib_default2`
    fragment FeeParametersFragment on FeeParameters {
  version
  gasPriceFactor
  gasPerByte
}
    `;
  var DependentCostFragmentDoc = lib_default2`
    fragment DependentCostFragment on DependentCost {
  ... on LightOperation {
    type: __typename
    base
    unitsPerGas
  }
  ... on HeavyOperation {
    type: __typename
    base
    gasPerUnit
  }
}
    `;
  var GasCostsFragmentDoc = lib_default2`
    fragment GasCostsFragment on GasCosts {
  contractRoot {
    ...DependentCostFragment
  }
  stateRoot {
    ...DependentCostFragment
  }
  vmInitialization {
    ...DependentCostFragment
  }
  s256 {
    ...DependentCostFragment
  }
  ecr1
  newStoragePerByte
}
    ${DependentCostFragmentDoc}`;
  var ConsensusParametersFragmentDoc = lib_default2`
    fragment consensusParametersFragment on ConsensusParameters {
  version
  txParams {
    ...TxParametersFragment
  }
  predicateParams {
    ...PredicateParametersFragment
  }
  scriptParams {
    ...ScriptParametersFragment
  }
  contractParams {
    ...ContractParametersFragment
  }
  feeParams {
    ...FeeParametersFragment
  }
  gasCosts {
    ...GasCostsFragment
  }
  baseAssetId
  chainId
}
    ${TxParametersFragmentDoc}
${PredicateParametersFragmentDoc}
${ScriptParametersFragmentDoc}
${ContractParametersFragmentDoc}
${FeeParametersFragmentDoc}
${GasCostsFragmentDoc}`;
  var ChainInfoFragmentDoc = lib_default2`
    fragment chainInfoFragment on ChainInfo {
  name
  daHeight
  consensusParameters {
    ...consensusParametersFragment
  }
}
    ${ConsensusParametersFragmentDoc}`;
  var ContractBalanceFragmentDoc = lib_default2`
    fragment contractBalanceFragment on ContractBalance {
  contract
  amount
  assetId
}
    `;
  var PageInfoFragmentDoc = lib_default2`
    fragment pageInfoFragment on PageInfo {
  hasPreviousPage
  hasNextPage
  startCursor
  endCursor
}
    `;
  var NodeInfoFragmentDoc = lib_default2`
    fragment nodeInfoFragment on NodeInfo {
  utxoValidation
  vmBacktrace
  maxTx
  maxDepth
  nodeVersion
}
    `;
  var RelayedTransactionStatusFragmentDoc = lib_default2`
    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {
  ... on RelayedTransactionFailed {
    blockHeight
    failure
  }
}
    `;
  var GetVersionDocument = lib_default2`
    query getVersion {
  nodeInfo {
    nodeVersion
  }
}
    `;
  var GetNodeInfoDocument = lib_default2`
    query getNodeInfo {
  nodeInfo {
    ...nodeInfoFragment
  }
}
    ${NodeInfoFragmentDoc}`;
  var GetChainDocument = lib_default2`
    query getChain {
  chain {
    ...chainInfoFragment
  }
}
    ${ChainInfoFragmentDoc}`;
  var GetChainAndNodeInfoDocument = lib_default2`
    query getChainAndNodeInfo {
  chain {
    ...chainInfoFragment
  }
  nodeInfo {
    ...nodeInfoFragment
  }
}
    ${ChainInfoFragmentDoc}
${NodeInfoFragmentDoc}`;
  var GetTransactionDocument = lib_default2`
    query getTransaction($transactionId: TransactionId!) {
  transaction(id: $transactionId) {
    ...transactionFragment
  }
}
    ${TransactionFragmentDoc}`;
  var GetTransactionWithReceiptsDocument = lib_default2`
    query getTransactionWithReceipts($transactionId: TransactionId!) {
  transaction(id: $transactionId) {
    id
    rawPayload
    status {
      ... on SubmittedStatus {
        ...SubmittedStatusFragment
      }
      ... on SuccessStatus {
        ...SuccessStatusWithBlockIdFragment
      }
      ... on FailureStatus {
        ...FailureStatusWithBlockIdFragment
      }
      ... on SqueezedOutStatus {
        ...SqueezedOutStatusFragment
      }
    }
  }
}
    ${SubmittedStatusFragmentDoc}
${SuccessStatusWithBlockIdFragmentDoc}
${FailureStatusWithBlockIdFragmentDoc}
${SqueezedOutStatusFragmentDoc}`;
  var GetTransactionsDocument = lib_default2`
    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {
  transactions(after: $after, before: $before, first: $first, last: $last) {
    edges {
      node {
        rawPayload
      }
    }
    pageInfo {
      ...pageInfoFragment
    }
  }
}
    ${PageInfoFragmentDoc}`;
  var GetTransactionsByOwnerDocument = lib_default2`
    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {
  transactionsByOwner(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...transactionFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${TransactionFragmentDoc}`;
  var EstimatePredicatesDocument = lib_default2`
    query estimatePredicates($encodedTransaction: HexString!) {
  estimatePredicates(tx: $encodedTransaction) {
    ...transactionEstimatePredicatesFragment
  }
}
    ${TransactionEstimatePredicatesFragmentDoc}`;
  var GetLatestBlockDocument = lib_default2`
    query getLatestBlock {
  chain {
    latestBlock {
      ...blockFragment
    }
  }
}
    ${BlockFragmentDoc}`;
  var GetLatestBlockHeightDocument = lib_default2`
    query getLatestBlockHeight {
  chain {
    latestBlock {
      height
    }
  }
}
    `;
  var GetBlockDocument = lib_default2`
    query getBlock($blockId: BlockId, $height: U32) {
  block(id: $blockId, height: $height) {
    ...blockFragment
  }
}
    ${BlockFragmentDoc}`;
  var GetBlockWithTransactionsDocument = lib_default2`
    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {
  block(id: $blockId, height: $blockHeight) {
    ...blockFragment
    transactions {
      ...transactionRawPayloadFragment
    }
  }
}
    ${BlockFragmentDoc}
${TransactionRawPayloadFragmentDoc}`;
  var GetBlocksDocument = lib_default2`
    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {
  blocks(after: $after, before: $before, first: $first, last: $last) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...blockFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${BlockFragmentDoc}`;
  var GetCoinDocument = lib_default2`
    query getCoin($coinId: UtxoId!) {
  coin(utxoId: $coinId) {
    ...coinFragment
    owner
  }
}
    ${CoinFragmentDoc}`;
  var GetCoinsDocument = lib_default2`
    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {
  coins(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...coinFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${CoinFragmentDoc}`;
  var GetCoinsToSpendDocument = lib_default2`
    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {
  coinsToSpend(
    owner: $owner
    queryPerAsset: $queryPerAsset
    excludedIds: $excludedIds
  ) {
    ...coinFragment
    ...messageCoinFragment
  }
}
    ${CoinFragmentDoc}
${MessageCoinFragmentDoc}`;
  var GetContractDocument = lib_default2`
    query getContract($contractId: ContractId!) {
  contract(id: $contractId) {
    bytecode
    id
  }
}
    `;
  var GetContractBalanceDocument = lib_default2`
    query getContractBalance($contract: ContractId!, $asset: AssetId!) {
  contractBalance(contract: $contract, asset: $asset) {
    ...contractBalanceFragment
  }
}
    ${ContractBalanceFragmentDoc}`;
  var GetBalanceDocument = lib_default2`
    query getBalance($owner: Address!, $assetId: AssetId!) {
  balance(owner: $owner, assetId: $assetId) {
    amount
  }
}
    `;
  var GetLatestGasPriceDocument = lib_default2`
    query getLatestGasPrice {
  latestGasPrice {
    gasPrice
  }
}
    `;
  var EstimateGasPriceDocument = lib_default2`
    query estimateGasPrice($blockHorizon: U32!) {
  estimateGasPrice(blockHorizon: $blockHorizon) {
    gasPrice
  }
}
    `;
  var GetBalancesDocument = lib_default2`
    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {
  balances(
    filter: $filter
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        assetId
        amount
      }
    }
  }
}
    ${PageInfoFragmentDoc}`;
  var GetMessagesDocument = lib_default2`
    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {
  messages(
    owner: $owner
    after: $after
    before: $before
    first: $first
    last: $last
  ) {
    pageInfo {
      ...pageInfoFragment
    }
    edges {
      node {
        ...getMessageFragment
      }
    }
  }
}
    ${PageInfoFragmentDoc}
${GetMessageFragmentDoc}`;
  var GetMessageProofDocument = lib_default2`
    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {
  messageProof(
    transactionId: $transactionId
    nonce: $nonce
    commitBlockId: $commitBlockId
    commitBlockHeight: $commitBlockHeight
  ) {
    ...messageProofFragment
  }
}
    ${MessageProofFragmentDoc}`;
  var GetMessageStatusDocument = lib_default2`
    query getMessageStatus($nonce: Nonce!) {
  messageStatus(nonce: $nonce) {
    state
  }
}
    `;
  var GetRelayedTransactionStatusDocument = lib_default2`
    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {
  relayedTransactionStatus(id: $relayedTransactionId) {
    ...relayedTransactionStatusFragment
  }
}
    ${RelayedTransactionStatusFragmentDoc}`;
  var DryRunDocument = lib_default2`
    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {
  dryRun(
    txs: $encodedTransactions
    utxoValidation: $utxoValidation
    gasPrice: $gasPrice
  ) {
    ...dryRunTransactionExecutionStatusFragment
  }
}
    ${DryRunTransactionExecutionStatusFragmentDoc}`;
  var SubmitDocument = lib_default2`
    mutation submit($encodedTransaction: HexString!) {
  submit(tx: $encodedTransaction) {
    id
  }
}
    `;
  var ProduceBlocksDocument = lib_default2`
    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {
  produceBlocks(
    blocksToProduce: $blocksToProduce
    startTimestamp: $startTimestamp
  )
}
    `;
  var GetMessageByNonceDocument = lib_default2`
    query getMessageByNonce($nonce: Nonce!) {
  message(nonce: $nonce) {
    ...messageFragment
  }
}
    ${MessageFragmentDoc}`;
  var IsUserAccountDocument = lib_default2`
    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {
  blob(id: $blobId) {
    id
  }
  contract(id: $contractId) {
    id
  }
  transaction(id: $transactionId) {
    id
  }
}
    `;
  var GetConsensusParametersVersionDocument = lib_default2`
    query getConsensusParametersVersion {
  chain {
    latestBlock {
      header {
        consensusParametersVersion
      }
    }
  }
}
    `;
  var SubmitAndAwaitStatusDocument = lib_default2`
    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {
  submitAndAwaitStatus(tx: $encodedTransaction) {
    ...transactionStatusSubscriptionFragment
  }
}
    ${TransactionStatusSubscriptionFragmentDoc}`;
  var StatusChangeDocument = lib_default2`
    subscription statusChange($transactionId: TransactionId!) {
  statusChange(id: $transactionId) {
    ...transactionStatusSubscriptionFragment
  }
}
    ${TransactionStatusSubscriptionFragmentDoc}`;
  function getSdk(requester) {
    return {
      getVersion(variables, options) {
        return requester(GetVersionDocument, variables, options);
      },
      getNodeInfo(variables, options) {
        return requester(GetNodeInfoDocument, variables, options);
      },
      getChain(variables, options) {
        return requester(GetChainDocument, variables, options);
      },
      getChainAndNodeInfo(variables, options) {
        return requester(GetChainAndNodeInfoDocument, variables, options);
      },
      getTransaction(variables, options) {
        return requester(GetTransactionDocument, variables, options);
      },
      getTransactionWithReceipts(variables, options) {
        return requester(GetTransactionWithReceiptsDocument, variables, options);
      },
      getTransactions(variables, options) {
        return requester(GetTransactionsDocument, variables, options);
      },
      getTransactionsByOwner(variables, options) {
        return requester(GetTransactionsByOwnerDocument, variables, options);
      },
      estimatePredicates(variables, options) {
        return requester(EstimatePredicatesDocument, variables, options);
      },
      getLatestBlock(variables, options) {
        return requester(GetLatestBlockDocument, variables, options);
      },
      getLatestBlockHeight(variables, options) {
        return requester(GetLatestBlockHeightDocument, variables, options);
      },
      getBlock(variables, options) {
        return requester(GetBlockDocument, variables, options);
      },
      getBlockWithTransactions(variables, options) {
        return requester(GetBlockWithTransactionsDocument, variables, options);
      },
      getBlocks(variables, options) {
        return requester(GetBlocksDocument, variables, options);
      },
      getCoin(variables, options) {
        return requester(GetCoinDocument, variables, options);
      },
      getCoins(variables, options) {
        return requester(GetCoinsDocument, variables, options);
      },
      getCoinsToSpend(variables, options) {
        return requester(GetCoinsToSpendDocument, variables, options);
      },
      getContract(variables, options) {
        return requester(GetContractDocument, variables, options);
      },
      getContractBalance(variables, options) {
        return requester(GetContractBalanceDocument, variables, options);
      },
      getBalance(variables, options) {
        return requester(GetBalanceDocument, variables, options);
      },
      getLatestGasPrice(variables, options) {
        return requester(GetLatestGasPriceDocument, variables, options);
      },
      estimateGasPrice(variables, options) {
        return requester(EstimateGasPriceDocument, variables, options);
      },
      getBalances(variables, options) {
        return requester(GetBalancesDocument, variables, options);
      },
      getMessages(variables, options) {
        return requester(GetMessagesDocument, variables, options);
      },
      getMessageProof(variables, options) {
        return requester(GetMessageProofDocument, variables, options);
      },
      getMessageStatus(variables, options) {
        return requester(GetMessageStatusDocument, variables, options);
      },
      getRelayedTransactionStatus(variables, options) {
        return requester(GetRelayedTransactionStatusDocument, variables, options);
      },
      dryRun(variables, options) {
        return requester(DryRunDocument, variables, options);
      },
      submit(variables, options) {
        return requester(SubmitDocument, variables, options);
      },
      produceBlocks(variables, options) {
        return requester(ProduceBlocksDocument, variables, options);
      },
      getMessageByNonce(variables, options) {
        return requester(GetMessageByNonceDocument, variables, options);
      },
      isUserAccount(variables, options) {
        return requester(IsUserAccountDocument, variables, options);
      },
      getConsensusParametersVersion(variables, options) {
        return requester(GetConsensusParametersVersionDocument, variables, options);
      },
      submitAndAwaitStatus(variables, options) {
        return requester(SubmitAndAwaitStatusDocument, variables, options);
      },
      statusChange(variables, options) {
        return requester(StatusChangeDocument, variables, options);
      }
    };
  }
  var _FuelGraphqlSubscriber = class {
    constructor(stream) {
      this.stream = stream;
    }
    static async create(options) {
      const { url, query, variables, fetchFn } = options;
      const response = await fetchFn(`${url}-sub`, {
        method: "POST",
        body: JSON.stringify({
          query: print(query),
          variables
        }),
        headers: {
          "Content-Type": "application/json",
          Accept: "text/event-stream"
        }
      });
      const [errorReader, resultReader] = response.body.tee().map((stream) => stream.getReader());
      await new _FuelGraphqlSubscriber(errorReader).next();
      return new _FuelGraphqlSubscriber(resultReader);
    }
    events = [];
    parsingLeftover = "";
    async next() {
      while (true) {
        if (this.events.length > 0) {
          const { data, errors: errors2 } = this.events.shift();
          if (Array.isArray(errors2)) {
            throw new FuelError(
              FuelError.CODES.INVALID_REQUEST,
              errors2.map((err) => err.message).join("\n\n")
            );
          }
          return { value: data, done: false };
        }
        const { value, done } = await this.stream.read();
        if (done) {
          return { value, done };
        }
        const decoded = _FuelGraphqlSubscriber.textDecoder.decode(value).replace(":keep-alive-text\n\n", "");
        if (decoded === "") {
          continue;
        }
        const text = `${this.parsingLeftover}${decoded}`;
        const regex = /data:.*\n\n/g;
        const matches = [...text.matchAll(regex)].flatMap((match) => match);
        matches.forEach((match) => {
          try {
            this.events.push(JSON.parse(match.replace(/^data:/, "")));
          } catch (e) {
            throw new FuelError(
              ErrorCode.STREAM_PARSING_ERROR,
              `Error while parsing stream data response: ${text}`
            );
          }
        });
        this.parsingLeftover = text.replace(matches.join(), "");
      }
    }
    /**
     * Gets called when `break` is called in a `for-await-of` loop.
     */
    return() {
      return Promise.resolve({ done: true, value: void 0 });
    }
    [Symbol.asyncIterator]() {
      return this;
    }
  };
  var FuelGraphqlSubscriber = _FuelGraphqlSubscriber;
  __publicField4(FuelGraphqlSubscriber, "textDecoder", new TextDecoder());
  var cache = /* @__PURE__ */ new Map();
  var ResourceCache = class {
    ttl;
    constructor(ttl) {
      this.ttl = ttl;
      if (typeof ttl !== "number" || this.ttl <= 0) {
        throw new FuelError(
          ErrorCode.INVALID_TTL,
          `Invalid TTL: ${this.ttl}. Use a value greater than zero.`
        );
      }
    }
    // Add resources to the cache
    set(transactionId, resources) {
      const currentTime = Date.now();
      const existingResources = cache.get(transactionId) || {
        utxos: /* @__PURE__ */ new Set(),
        messages: /* @__PURE__ */ new Set(),
        timestamp: currentTime
      };
      resources.utxos.forEach((utxo) => existingResources.utxos.add(hexlify(utxo)));
      resources.messages.forEach((message) => existingResources.messages.add(hexlify(message)));
      cache.set(transactionId, existingResources);
    }
    // Remove resources from the cache for a given transaction ID
    unset(transactionId) {
      cache.delete(transactionId);
    }
    // Get all cached resources and remove expired ones
    getActiveData() {
      const allResources = { utxos: [], messages: [] };
      const currentTime = Date.now();
      cache.forEach((resource, transactionId) => {
        if (currentTime - resource.timestamp < this.ttl) {
          allResources.utxos.push(...resource.utxos);
          allResources.messages.push(...resource.messages);
        } else {
          cache.delete(transactionId);
        }
      });
      return allResources;
    }
    // Check if a UTXO ID or message nonce is already cached and not expired
    isCached(key) {
      const currentTime = Date.now();
      for (const [transactionId, resourceData] of cache.entries()) {
        if (currentTime - resourceData.timestamp > this.ttl) {
          cache.delete(transactionId);
        } else if (resourceData.utxos.has(key) || resourceData.messages.has(key)) {
          return true;
        }
      }
      return false;
    }
    clear() {
      cache.clear();
    }
  };
  var inputify = (value) => {
    const { type: type3 } = value;
    switch (value.type) {
      case InputType.Coin: {
        const predicate = arrayify(value.predicate ?? "0x");
        const predicateData = arrayify(value.predicateData ?? "0x");
        return {
          type: InputType.Coin,
          txID: hexlify(arrayify(value.id).slice(0, BYTES_32)),
          outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),
          owner: hexlify(value.owner),
          amount: bn(value.amount),
          assetId: hexlify(value.assetId),
          txPointer: {
            blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),
            txIndex: toNumber(arrayify(value.txPointer).slice(8, 16))
          },
          witnessIndex: value.witnessIndex,
          predicateGasUsed: bn(value.predicateGasUsed),
          predicateLength: bn(predicate.length),
          predicateDataLength: bn(predicateData.length),
          predicate: hexlify(predicate),
          predicateData: hexlify(predicateData)
        };
      }
      case InputType.Contract: {
        return {
          type: InputType.Contract,
          txID: ZeroBytes32,
          outputIndex: 0,
          balanceRoot: ZeroBytes32,
          stateRoot: ZeroBytes32,
          txPointer: {
            blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),
            txIndex: toNumber(arrayify(value.txPointer).slice(8, 16))
          },
          contractID: hexlify(value.contractId)
        };
      }
      case InputType.Message: {
        const predicate = arrayify(value.predicate ?? "0x");
        const predicateData = arrayify(value.predicateData ?? "0x");
        const data = arrayify(value.data ?? "0x");
        return {
          type: InputType.Message,
          sender: hexlify(value.sender),
          recipient: hexlify(value.recipient),
          amount: bn(value.amount),
          nonce: hexlify(value.nonce),
          witnessIndex: value.witnessIndex,
          predicateGasUsed: bn(value.predicateGasUsed),
          predicateLength: bn(predicate.length),
          predicateDataLength: bn(predicateData.length),
          predicate: hexlify(predicate),
          predicateData: hexlify(predicateData),
          data: hexlify(data),
          dataLength: data.length
        };
      }
      default: {
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_INPUT,
          `Invalid transaction input type: ${type3}.`
        );
      }
    }
  };
  var outputify = (value) => {
    const { type: type3 } = value;
    switch (type3) {
      case OutputType.Coin: {
        return {
          type: OutputType.Coin,
          to: hexlify(value.to),
          amount: bn(value.amount),
          assetId: hexlify(value.assetId)
        };
      }
      case OutputType.Contract: {
        return {
          type: OutputType.Contract,
          inputIndex: value.inputIndex,
          balanceRoot: ZeroBytes32,
          stateRoot: ZeroBytes32
        };
      }
      case OutputType.Change: {
        return {
          type: OutputType.Change,
          to: hexlify(value.to),
          amount: bn(0),
          assetId: hexlify(value.assetId)
        };
      }
      case OutputType.Variable: {
        return {
          type: OutputType.Variable,
          to: ZeroBytes32,
          amount: bn(0),
          assetId: ZeroBytes32
        };
      }
      case OutputType.ContractCreated: {
        return {
          type: OutputType.ContractCreated,
          contractId: hexlify(value.contractId),
          stateRoot: hexlify(value.stateRoot)
        };
      }
      default: {
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_INPUT,
          `Invalid transaction output type: ${type3}.`
        );
      }
    }
  };
  var isMessageCoin = (message) => !("data" in message);
  var isCoin = (resource) => "id" in resource;
  var doesReceiptHaveMissingOutputVariables = (receipt) => receipt.type === ReceiptType.Revert && receipt.val.toString("hex") === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;
  var doesReceiptHaveMissingContractId = (receipt) => receipt.type === ReceiptType.Panic && receipt.contractId !== "0x0000000000000000000000000000000000000000000000000000000000000000";
  var getReceiptsWithMissingData = (receipts) => receipts.reduce(
    (memo, receipt) => {
      if (doesReceiptHaveMissingOutputVariables(receipt)) {
        memo.missingOutputVariables.push(receipt);
      }
      if (doesReceiptHaveMissingContractId(receipt)) {
        memo.missingOutputContractIds.push(receipt);
      }
      return memo;
    },
    {
      missingOutputVariables: [],
      missingOutputContractIds: []
    }
  );
  var hexOrZero = (hex) => hex || ZeroBytes32;
  function assembleReceiptByType(receipt) {
    const { receiptType } = receipt;
    switch (receiptType) {
      case "CALL": {
        const id = hexOrZero(receipt.id || receipt.contractId);
        const callReceipt = {
          type: ReceiptType.Call,
          id,
          to: hexOrZero(receipt?.to),
          amount: bn(receipt.amount),
          assetId: hexOrZero(receipt.assetId),
          gas: bn(receipt.gas),
          param1: bn(receipt.param1),
          param2: bn(receipt.param2),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return callReceipt;
      }
      case "RETURN": {
        const returnReceipt = {
          type: ReceiptType.Return,
          id: hexOrZero(receipt.id || receipt.contractId),
          val: bn(receipt.val),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return returnReceipt;
      }
      case "RETURN_DATA": {
        const returnDataReceipt = {
          type: ReceiptType.ReturnData,
          id: hexOrZero(receipt.id || receipt.contractId),
          ptr: bn(receipt.ptr),
          len: bn(receipt.len),
          digest: hexOrZero(receipt.digest),
          pc: bn(receipt.pc),
          data: hexOrZero(receipt.data),
          is: bn(receipt.is)
        };
        return returnDataReceipt;
      }
      case "PANIC": {
        const panicReceipt = {
          type: ReceiptType.Panic,
          id: hexOrZero(receipt.id),
          reason: bn(receipt.reason),
          pc: bn(receipt.pc),
          is: bn(receipt.is),
          contractId: hexOrZero(receipt.contractId)
        };
        return panicReceipt;
      }
      case "REVERT": {
        const revertReceipt = {
          type: ReceiptType.Revert,
          id: hexOrZero(receipt.id || receipt.contractId),
          val: bn(receipt.ra),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return revertReceipt;
      }
      case "LOG": {
        const ra = bn(receipt.ra);
        const rb = bn(receipt.rb);
        const rc = bn(receipt.rc);
        const rd = bn(receipt.rd);
        const logReceipt = {
          type: ReceiptType.Log,
          id: hexOrZero(receipt.id || receipt.contractId),
          ra,
          rb,
          rc,
          rd,
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return logReceipt;
      }
      case "LOG_DATA": {
        const ra = bn(receipt.ra);
        const rb = bn(receipt.rb);
        const logDataReceipt = {
          type: ReceiptType.LogData,
          id: hexOrZero(receipt.id || receipt.contractId),
          ra,
          rb,
          ptr: bn(receipt.ptr),
          len: bn(receipt.len),
          digest: hexOrZero(receipt.digest),
          pc: bn(receipt.pc),
          data: hexOrZero(receipt.data),
          is: bn(receipt.is)
        };
        return logDataReceipt;
      }
      case "TRANSFER": {
        const id = hexOrZero(receipt.id || receipt.contractId);
        const transferReceipt = {
          type: ReceiptType.Transfer,
          id,
          to: hexOrZero(receipt.toAddress || receipt?.to),
          amount: bn(receipt.amount),
          assetId: hexOrZero(receipt.assetId),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return transferReceipt;
      }
      case "TRANSFER_OUT": {
        const id = hexOrZero(receipt.id || receipt.contractId);
        const transferOutReceipt = {
          type: ReceiptType.TransferOut,
          id,
          to: hexOrZero(receipt.toAddress || receipt.to),
          amount: bn(receipt.amount),
          assetId: hexOrZero(receipt.assetId),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return transferOutReceipt;
      }
      case "SCRIPT_RESULT": {
        const scriptResultReceipt = {
          type: ReceiptType.ScriptResult,
          result: bn(receipt.result),
          gasUsed: bn(receipt.gasUsed)
        };
        return scriptResultReceipt;
      }
      case "MESSAGE_OUT": {
        const sender = hexOrZero(receipt.sender);
        const recipient = hexOrZero(receipt.recipient);
        const nonce = hexOrZero(receipt.nonce);
        const amount = bn(receipt.amount);
        const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);
        const digest = hexOrZero(receipt.digest);
        const len = bn(receipt.len).toNumber();
        const messageId = InputMessageCoder.getMessageId({
          sender,
          recipient,
          nonce,
          amount,
          data: hexlify(data)
        });
        const receiptMessageOut = {
          type: ReceiptType.MessageOut,
          sender,
          recipient,
          amount,
          nonce,
          len,
          data,
          digest,
          messageId
        };
        return receiptMessageOut;
      }
      case "MINT": {
        const contractId = hexOrZero(receipt.id || receipt.contractId);
        const subId = hexOrZero(receipt.subId);
        const assetId = getMintedAssetId(contractId, subId);
        const mintReceipt = {
          type: ReceiptType.Mint,
          subId,
          contractId,
          assetId,
          val: bn(receipt.val),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return mintReceipt;
      }
      case "BURN": {
        const contractId = hexOrZero(receipt.id || receipt.contractId);
        const subId = hexOrZero(receipt.subId);
        const assetId = getMintedAssetId(contractId, subId);
        const burnReceipt = {
          type: ReceiptType.Burn,
          subId,
          contractId,
          assetId,
          val: bn(receipt.val),
          pc: bn(receipt.pc),
          is: bn(receipt.is)
        };
        return burnReceipt;
      }
      default:
        throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);
    }
  }
  var getGasUsedFromReceipts = (receipts) => {
    const scriptResult = receipts.filter(
      (receipt) => receipt.type === ReceiptType.ScriptResult
    );
    const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));
    return gasUsed;
  };
  function resolveGasDependentCosts(byteSize, gasDependentCost) {
    const base2 = bn(gasDependentCost.base);
    let dependentValue = bn(0);
    if ("unitsPerGas" in gasDependentCost) {
      dependentValue = bn(byteSize).div(bn(gasDependentCost.unitsPerGas));
    } else {
      dependentValue = bn(byteSize).mul(bn(gasDependentCost.gasPerUnit));
    }
    return base2.add(dependentValue);
  }
  function gasUsedByInputs(inputs, txBytesSize, gasCosts) {
    const witnessCache = [];
    const chargeableInputs = inputs.filter((input) => {
      const isCoinOrMessage = "owner" in input || "sender" in input;
      if (isCoinOrMessage) {
        if ("predicate" in input && input.predicate && input.predicate !== "0x") {
          return true;
        }
        if (!witnessCache.includes(input.witnessIndex)) {
          witnessCache.push(input.witnessIndex);
          return true;
        }
      }
      return false;
    });
    const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);
    const totalGas = chargeableInputs.reduce((total, input) => {
      if ("predicate" in input && input.predicate && input.predicate !== "0x") {
        return total.add(
          vmInitializationCost.add(resolveGasDependentCosts(arrayify(input.predicate).length, gasCosts.contractRoot)).add(bn(input.predicateGasUsed))
        );
      }
      return total.add(gasCosts.ecr1);
    }, bn(0));
    return totalGas;
  }
  function getMinGas(params) {
    const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;
    const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);
    const bytesGas = bn(txBytesSize).mul(gasPerByte);
    const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);
    const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();
    return minGas;
  }
  function getMaxGas(params) {
    const {
      gasPerByte,
      witnessesLength,
      witnessLimit,
      minGas,
      gasLimit = bn(0),
      maxGasPerTx
    } = params;
    let remainingAllowedWitnessGas = bn(0);
    if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {
      remainingAllowedWitnessGas = bn(witnessLimit).sub(witnessesLength).mul(gasPerByte);
    }
    const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);
    return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;
  }
  function calculateMetadataGasForTxCreate({
    gasCosts,
    stateRootSize,
    txBytesSize,
    contractBytesSize
  }) {
    const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);
    const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);
    const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
    const contractIdInputSize = bn(4 + 32 + 32 + 32);
    const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);
    const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);
    return metadataGas.maxU64();
  }
  function calculateMetadataGasForTxScript({
    gasCosts,
    txBytesSize
  }) {
    return resolveGasDependentCosts(txBytesSize, gasCosts.s256);
  }
  function calculateMetadataGasForTxBlob({
    gasCosts,
    txBytesSize,
    witnessBytesSize
  }) {
    const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
    const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);
    return txId.add(blobLen);
  }
  function calculateMetadataGasForTxUpgrade({
    gasCosts,
    txBytesSize,
    consensusSize
  }) {
    const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
    if (consensusSize) {
      const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);
      txId.add(consensusLen);
    }
    return txId;
  }
  function calculateMetadataGasForTxUpload({
    gasCosts,
    txBytesSize,
    subsectionSize,
    subsectionsSize
  }) {
    const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);
    const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);
    txId.add(subsectionLen);
    const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);
    txId.add(subsectionsLen);
    return txId;
  }
  function calculateMinGasForTxUpload({
    gasCosts,
    baseMinGas,
    subsectionSize
  }) {
    const additionalStoragePerByte = bn(gasCosts.newStoragePerByte).mul(subsectionSize);
    return bn(baseMinGas).add(additionalStoragePerByte);
  }
  var calculateGasFee = (params) => {
    const { gas, gasPrice, priceFactor, tip } = params;
    return gas.mul(gasPrice).div(priceFactor).add(bn(tip));
  };
  function normalize2(object) {
    Object.keys(object).forEach((key) => {
      switch (object[key]?.constructor.name) {
        case "Uint8Array":
          object[key] = hexlify(object[key]);
          break;
        case "Array":
          object[key] = normalize2(object[key]);
          break;
        case "BN":
          object[key] = object[key].toHex();
          break;
        case "Address":
          object[key] = object[key].toB256();
          break;
        case "Object":
          object[key] = normalize2(object[key]);
          break;
        default:
          break;
      }
    });
    return object;
  }
  function normalizeJSON(root) {
    return normalize2(clone_default(root));
  }
  var assemblePanicError = (statusReason, metadata) => {
    let errorMessage = `The transaction reverted with reason: "${statusReason}".`;
    if (PANIC_REASONS.includes(statusReason)) {
      errorMessage = `${errorMessage}

You can read more about this error at:

${PANIC_DOC_URL}#variant.${statusReason}`;
    }
    return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {
      ...metadata,
      reason: statusReason
    });
  };
  var stringify = (obj) => JSON.stringify(obj, null, 2);
  var assembleRevertError = (receipts, logs, metadata) => {
    let errorMessage = "The transaction reverted with an unknown reason.";
    const revertReceipt = receipts.find(({ type: type3 }) => type3 === ReceiptType.Revert);
    let reason = "";
    if (revertReceipt) {
      const reasonHex = bn(revertReceipt.val).toHex();
      const lastLog = logs[logs.length - 1];
      const lastButOneLog = logs[logs.length - 2];
      switch (reasonHex) {
        case FAILED_REQUIRE_SIGNAL: {
          reason = "require";
          errorMessage = `The transaction reverted because a "require" statement has thrown ${logs.length ? stringify(lastLog) : "an error."}.`;
          break;
        }
        case FAILED_ASSERT_EQ_SIGNAL: {
          const sufix = logs.length >= 2 ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.` : ".";
          reason = "assert_eq";
          errorMessage = `The transaction reverted because of an "assert_eq" statement${sufix}`;
          break;
        }
        case FAILED_ASSERT_NE_SIGNAL: {
          const sufix = logs.length >= 2 ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.` : ".";
          reason = "assert_ne";
          errorMessage = `The transaction reverted because of an "assert_ne" statement${sufix}`;
          break;
        }
        case FAILED_ASSERT_SIGNAL:
          reason = "assert";
          errorMessage = `The transaction reverted because an "assert" statement failed to evaluate to true.`;
          break;
        case FAILED_TRANSFER_TO_ADDRESS_SIGNAL:
          reason = "MissingOutputChange";
          errorMessage = `The transaction reverted because it's missing an "OutputChange".`;
          break;
        default:
          throw new FuelError(
            ErrorCode.UNKNOWN,
            `The transaction reverted with an unknown reason: ${revertReceipt.val}`,
            {
              ...metadata,
              reason: "unknown"
            }
          );
      }
    }
    return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {
      ...metadata,
      reason
    });
  };
  var extractTxError = (params) => {
    const { receipts, statusReason, logs } = params;
    const isPanic = receipts.some(({ type: type3 }) => type3 === ReceiptType.Panic);
    const isRevert = receipts.some(({ type: type3 }) => type3 === ReceiptType.Revert);
    const metadata = {
      logs,
      receipts,
      panic: isPanic,
      revert: isRevert,
      reason: ""
    };
    if (isPanic) {
      return assemblePanicError(statusReason, metadata);
    }
    return assembleRevertError(receipts, logs, metadata);
  };
  var NoWitnessAtIndexError = class extends Error {
    constructor(index) {
      super();
      this.index = index;
      this.message = `Witness at index "${index}" was not found`;
    }
    name = "NoWitnessAtIndexError";
  };
  var isRequestInputCoin = (input) => input.type === InputType.Coin;
  var isRequestInputMessage = (input) => input.type === InputType.Message;
  var isRequestInputMessageWithoutData = (input) => input.type === InputType.Message && bn(input.data).isZero();
  var isRequestInputCoinOrMessage = (input) => isRequestInputCoin(input) || isRequestInputMessage(input);
  var isRequestInputResource = (input) => isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);
  var getRequestInputResourceOwner = (input) => isRequestInputCoin(input) ? input.owner : input.recipient;
  var isRequestInputResourceFromOwner = (input, owner) => getRequestInputResourceOwner(input) === owner.toB256();
  var getAssetAmountInRequestInputs = (inputs, assetId, baseAsset) => inputs.filter(isRequestInputResource).reduce((acc, input) => {
    if (isRequestInputCoin(input) && input.assetId === assetId) {
      return acc.add(input.amount);
    }
    if (isRequestInputMessage(input) && assetId === baseAsset) {
      return acc.add(input.amount);
    }
    return acc;
  }, bn(0));
  var cacheRequestInputsResourcesFromOwner = (inputs, owner) => inputs.reduce(
    (acc, input) => {
      if (isRequestInputCoin(input) && input.owner === owner.toB256()) {
        acc.utxos.push(input.id);
      } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {
        acc.messages.push(input.nonce);
      }
      return acc;
    },
    {
      utxos: [],
      messages: []
    }
  );
  var getBurnableAssetCount = (baseAssetId, transactionRequest) => {
    const { inputs, outputs } = transactionRequest;
    const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));
    if (inputs.some((i) => isRequestInputMessage(i) && bn(i.amount).gt(0))) {
      coinInputs.add(baseAssetId);
    }
    const changeOutputs = new Set(
      outputs.filter((output2) => output2.type === OutputType.Change).map((output2) => output2.assetId)
    );
    const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));
    return difference.size;
  };
  var validateTransactionForAssetBurn = (baseAssetId, transactionRequest, enableAssetBurn = false) => {
    if (enableAssetBurn === true) {
      return;
    }
    if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {
      return;
    }
    const message = [
      "Asset burn detected.",
      "Add the relevant change outputs to the transaction to avoid burning assets.",
      "Or enable asset burn, upon sending the transaction."
    ].join("\n");
    throw new FuelError(ErrorCode.ASSET_BURN_DETECTED, message);
  };
  var witnessify = (value) => {
    const data = arrayify(value);
    return {
      data: hexlify(data),
      dataLength: data.length
    };
  };
  var BaseTransactionRequest = class {
    /** Gas price for transaction */
    tip;
    /** Block until which tx cannot be included */
    maturity;
    /** The maximum fee payable by this transaction using BASE_ASSET. */
    maxFee;
    /** The maximum amount of witness data allowed for the transaction */
    witnessLimit;
    /** List of inputs */
    inputs = [];
    /** List of outputs */
    outputs = [];
    /** List of witnesses */
    witnesses = [];
    /**
     * Constructor for initializing a base transaction request.
     *
     * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.
     */
    constructor({
      tip,
      maturity,
      maxFee,
      witnessLimit,
      inputs,
      outputs,
      witnesses
    } = {}) {
      this.tip = tip ? bn(tip) : void 0;
      this.maturity = maturity && maturity > 0 ? maturity : void 0;
      this.witnessLimit = isDefined(witnessLimit) ? bn(witnessLimit) : void 0;
      this.maxFee = bn(maxFee);
      this.inputs = inputs ?? [];
      this.outputs = outputs ?? [];
      this.witnesses = witnesses ?? [];
    }
    static getPolicyMeta(req) {
      let policyTypes = 0;
      const policies = [];
      const { tip, witnessLimit, maturity } = req;
      if (bn(tip).gt(0)) {
        policyTypes += PolicyType.Tip;
        policies.push({ data: bn(tip), type: PolicyType.Tip });
      }
      if (isDefined(witnessLimit) && bn(witnessLimit).gte(0)) {
        policyTypes += PolicyType.WitnessLimit;
        policies.push({ data: bn(witnessLimit), type: PolicyType.WitnessLimit });
      }
      if (maturity && maturity > 0) {
        policyTypes += PolicyType.Maturity;
        policies.push({ data: maturity, type: PolicyType.Maturity });
      }
      policyTypes += PolicyType.MaxFee;
      policies.push({ data: req.maxFee, type: PolicyType.MaxFee });
      return {
        policyTypes,
        policies
      };
    }
    /**
     * Method to obtain the base transaction details.
     *
     * @returns The base transaction details.
     */
    getBaseTransaction() {
      const inputs = this.inputs?.map(inputify) ?? [];
      const outputs = this.outputs?.map(outputify) ?? [];
      const witnesses = this.witnesses?.map(witnessify) ?? [];
      const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);
      return {
        policyTypes,
        inputs,
        outputs,
        policies,
        witnesses,
        inputsCount: inputs.length,
        outputsCount: outputs.length,
        witnessesCount: witnesses.length
      };
    }
    /**
     * Converts the transaction request to a byte array.
     *
     * @returns The transaction bytes.
     */
    toTransactionBytes() {
      return new TransactionCoder().encode(this.toTransaction());
    }
    /**
     * @hidden
     *
     * Pushes an input to the list without any side effects and returns the index
     */
    pushInput(input) {
      this.inputs.push(input);
      return this.inputs.length - 1;
    }
    /**
     * @hidden
     *
     * Pushes an output to the list without any side effects and returns the index
     */
    pushOutput(output2) {
      this.outputs.push(output2);
      return this.outputs.length - 1;
    }
    /**
     * @hidden
     *
     * Pushes a witness to the list and returns the index
     *
     * @param signature - The signature to add to the witness.
     * @returns The index of the created witness.
     */
    addWitness(signature) {
      this.witnesses.push(signature);
      return this.witnesses.length - 1;
    }
    /**
     * @hidden
     *
     * Creates an empty witness without any side effects and returns the index
     *
     * @returns The index of the created witness.
     */
    addEmptyWitness() {
      this.addWitness(concat([ZeroBytes32, ZeroBytes32]));
      return this.witnesses.length - 1;
    }
    /**
     * Updates the witness for a given owner and signature.
     *
     * @param address - The address to get the coin input witness index for.
     * @param signature - The signature to update the witness with.
     */
    updateWitnessByOwner(address, signature) {
      const ownerAddress = Address.fromAddressOrString(address);
      const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);
      if (typeof witnessIndex === "number") {
        this.updateWitness(witnessIndex, signature);
      }
    }
    /**
     * Updates an existing witness without any side effects.
     *
     * @param index - The index of the witness to update.
     * @param witness - The new witness.
     * @throws If the witness does not exist.
     */
    updateWitness(index, witness) {
      if (!this.witnesses[index]) {
        throw new NoWitnessAtIndexError(index);
      }
      this.witnesses[index] = witness;
    }
    /**
     * Helper function to add an external signature to the transaction.
     *
     * @param account - The account/s to sign to the transaction.
     * @returns The transaction with the signature witness added.
     */
    async addAccountWitnesses(account) {
      const accounts = Array.isArray(account) ? account : [account];
      await Promise.all(
        accounts.map(async (acc) => {
          this.addWitness(await acc.signTransaction(this));
        })
      );
      return this;
    }
    /**
     * Gets the coin inputs for a transaction.
     *
     * @returns The coin inputs.
     */
    getCoinInputs() {
      return this.inputs.filter(
        (input) => input.type === InputType.Coin
      );
    }
    /**
     * Gets the coin outputs for a transaction.
     *
     * @returns The coin outputs.
     */
    getCoinOutputs() {
      return this.outputs.filter(
        (output2) => output2.type === OutputType.Coin
      );
    }
    /**
     * Gets the change outputs for a transaction.
     *
     * @returns The change outputs.
     */
    getChangeOutputs() {
      return this.outputs.filter(
        (output2) => output2.type === OutputType.Change
      );
    }
    /**
     * @hidden
     *
     * Returns the witnessIndex of the found CoinInput.
     */
    getCoinInputWitnessIndexByOwner(owner) {
      const ownerAddress = addressify(owner);
      const found = this.inputs.find((input) => {
        switch (input.type) {
          case InputType.Coin:
            return hexlify(input.owner) === ownerAddress.toB256();
          case InputType.Message:
            return hexlify(input.recipient) === ownerAddress.toB256();
          default:
            return false;
        }
      });
      return found?.witnessIndex;
    }
    /**
     * Adds a single coin input to the transaction and a change output for the related
     * assetId, if one it was not added yet.
     *
     * @param coin - Coin resource.
     */
    addCoinInput(coin) {
      const { assetId, owner, amount, id, predicate, predicateData } = coin;
      let witnessIndex;
      if (coin.predicate) {
        witnessIndex = 0;
      } else {
        witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);
        if (typeof witnessIndex !== "number") {
          witnessIndex = this.addEmptyWitness();
        }
      }
      const input = {
        id,
        type: InputType.Coin,
        owner: owner.toB256(),
        amount,
        assetId,
        txPointer: "0x00000000000000000000000000000000",
        witnessIndex,
        predicate,
        predicateData
      };
      this.pushInput(input);
      this.addChangeOutput(owner, assetId);
    }
    /**
     * Adds a single message input to the transaction and a change output for the
     * asset against the message
     *
     * @param message - Message resource.
     */
    addMessageInput(message) {
      const { recipient, sender, amount, predicate, nonce, predicateData } = message;
      let witnessIndex;
      if (message.predicate) {
        witnessIndex = 0;
      } else {
        witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);
        if (typeof witnessIndex !== "number") {
          witnessIndex = this.addEmptyWitness();
        }
      }
      const input = {
        nonce,
        type: InputType.Message,
        sender: sender.toB256(),
        recipient: recipient.toB256(),
        data: isMessageCoin(message) ? "0x" : message.data,
        amount,
        witnessIndex,
        predicate,
        predicateData
      };
      this.pushInput(input);
      if (isMessageCoin(message)) {
        this.addChangeOutput(recipient, message.assetId);
      }
    }
    /**
     * Adds a single resource to the transaction by adding a coin/message input and a
     * change output for the related assetId, if one it was not added yet.
     *
     * @param resource - The resource to add.
     * @returns This transaction.
     */
    addResource(resource) {
      if (isCoin(resource)) {
        this.addCoinInput(resource);
      } else {
        this.addMessageInput(resource);
      }
      return this;
    }
    /**
     * Adds multiple resources to the transaction by adding coin/message inputs and change
     * outputs from the related assetIds.
     *
     * @param resources - The resources to add.
     * @returns This transaction.
     */
    addResources(resources) {
      resources.forEach((resource) => this.addResource(resource));
      return this;
    }
    /**
     * Adds a coin output to the transaction.
     *
     * @param to - Address of the owner.
     * @param amount - Amount of coin.
     * @param assetId - Asset ID of coin.
     */
    addCoinOutput(to, amount, assetId) {
      this.pushOutput({
        type: OutputType.Coin,
        to: addressify(to).toB256(),
        amount,
        assetId
      });
      return this;
    }
    /**
     * Adds multiple coin outputs to the transaction.
     *
     * @param to - Address of the destination.
     * @param quantities - Quantities of coins.
     */
    addCoinOutputs(to, quantities) {
      quantities.map(coinQuantityfy).forEach((quantity) => {
        this.pushOutput({
          type: OutputType.Coin,
          to: addressify(to).toB256(),
          amount: quantity.amount,
          assetId: quantity.assetId
        });
      });
      return this;
    }
    /**
     * Adds a change output to the transaction.
     *
     * @param to - Address of the owner.
     * @param assetId - Asset ID of coin.
     */
    addChangeOutput(to, assetId) {
      const changeOutput = this.getChangeOutputs().find(
        (output2) => hexlify(output2.assetId) === assetId
      );
      if (!changeOutput) {
        this.pushOutput({
          type: OutputType.Change,
          to: addressify(to).toB256(),
          assetId
        });
      }
    }
    /**
     * @hidden
     */
    byteSize() {
      return this.toTransactionBytes().length;
    }
    /**
     * @hidden
     */
    metadataGas(_gasCosts) {
      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Not implemented");
    }
    /**
     * @hidden
     */
    calculateMinGas(chainInfo) {
      const { consensusParameters } = chainInfo;
      const {
        gasCosts,
        feeParameters: { gasPerByte }
      } = consensusParameters;
      return getMinGas({
        gasPerByte,
        gasCosts,
        inputs: this.inputs,
        txBytesSize: this.byteSize(),
        metadataGas: this.metadataGas(gasCosts)
      });
    }
    calculateMaxGas(chainInfo, minGas) {
      const { consensusParameters } = chainInfo;
      const {
        feeParameters: { gasPerByte },
        txParameters: { maxGasPerTx }
      } = consensusParameters;
      const witnessesLength = this.toTransaction().witnesses.reduce(
        (acc, wit) => acc + wit.dataLength,
        0
      );
      return getMaxGas({
        gasPerByte,
        minGas,
        witnessesLength,
        witnessLimit: this.witnessLimit,
        maxGasPerTx
      });
    }
    /**
     * Funds the transaction with fake UTXOs for each assetId and amount in the
     * quantities array.
     *
     * @param quantities - CoinQuantity Array.
     * @param baseAssetId - The base asset to fund the transaction.
     * @deprecated - This method is deprecated and will be removed in future versions.
     * Please use `Account.generateFakeResources` along with `this.addResources` instead.
     */
    fundWithFakeUtxos(quantities, baseAssetId, resourcesOwner) {
      const findAssetInput = (assetId) => this.inputs.find((input) => {
        if ("assetId" in input) {
          return input.assetId === assetId;
        }
        return false;
      });
      const updateAssetInput = (assetId, quantity) => {
        const assetInput = findAssetInput(assetId);
        let usedQuantity = quantity;
        if (assetId === baseAssetId) {
          usedQuantity = bn("1000000000000000000");
        }
        if (assetInput && "assetId" in assetInput) {
          assetInput.id = hexlify(randomBytes22(UTXO_ID_LEN));
          assetInput.amount = usedQuantity;
        } else {
          this.addResources([
            {
              id: hexlify(randomBytes22(UTXO_ID_LEN)),
              amount: usedQuantity,
              assetId,
              owner: resourcesOwner || Address.fromRandom(),
              blockCreated: bn(1),
              txCreatedIdx: bn(1)
            }
          ]);
        }
      };
      updateAssetInput(baseAssetId, bn(1e11));
      quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));
      return this;
    }
    /**
     * Retrieves an array of CoinQuantity for each coin output present in the transaction.
     * a transaction.
     *
     * @returns  CoinQuantity array.
     */
    getCoinOutputsQuantities() {
      const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({
        amount: bn(amount),
        assetId: assetId.toString()
      }));
      return coinsQuantities;
    }
    /**
     * Return the minimum amount in native coins required to create
     * a transaction.
     *
     * @returns The transaction as a JSON object.
     */
    toJSON() {
      return normalizeJSON(this);
    }
    removeWitness(index) {
      this.witnesses.splice(index, 1);
      this.adjustWitnessIndexes(index);
    }
    adjustWitnessIndexes(removedIndex) {
      this.inputs.filter(isRequestInputResource).forEach((input) => {
        if (input.witnessIndex > removedIndex) {
          input.witnessIndex -= 1;
        }
      });
    }
    updatePredicateGasUsed(inputs) {
      const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);
      this.inputs.filter(isRequestInputResource).forEach((i) => {
        const owner = getRequestInputResourceOwner(i);
        const correspondingInput = inputsToExtractGasUsed.find(
          (x) => isRequestInputResourceFromOwner(x, Address.fromString(String(owner)))
        );
        if (correspondingInput && "predicateGasUsed" in correspondingInput && bn(correspondingInput.predicateGasUsed).gt(0)) {
          i.predicateGasUsed = correspondingInput.predicateGasUsed;
        }
      });
    }
    byteLength() {
      return this.toTransactionBytes().byteLength;
    }
  };
  function hashTransaction(transactionRequest, chainId) {
    const transaction = transactionRequest.toTransaction();
    if (transaction.type === TransactionType.Script) {
      transaction.receiptsRoot = ZeroBytes32;
    }
    transaction.inputs = transaction.inputs.map((input) => {
      const inputClone = clone_default(input);
      switch (inputClone.type) {
        case InputType.Coin: {
          inputClone.txPointer = {
            blockHeight: 0,
            txIndex: 0
          };
          inputClone.predicateGasUsed = bn(0);
          return inputClone;
        }
        case InputType.Message: {
          inputClone.predicateGasUsed = bn(0);
          return inputClone;
        }
        case InputType.Contract: {
          inputClone.txPointer = {
            blockHeight: 0,
            txIndex: 0
          };
          inputClone.txID = ZeroBytes32;
          inputClone.outputIndex = 0;
          inputClone.balanceRoot = ZeroBytes32;
          inputClone.stateRoot = ZeroBytes32;
          return inputClone;
        }
        default:
          return inputClone;
      }
    });
    transaction.outputs = transaction.outputs.map((output2) => {
      const outputClone = clone_default(output2);
      switch (outputClone.type) {
        case OutputType.Contract: {
          outputClone.balanceRoot = ZeroBytes32;
          outputClone.stateRoot = ZeroBytes32;
          return outputClone;
        }
        case OutputType.Change: {
          outputClone.amount = bn(0);
          return outputClone;
        }
        case OutputType.Variable: {
          outputClone.to = ZeroBytes32;
          outputClone.amount = bn(0);
          outputClone.assetId = ZeroBytes32;
          return outputClone;
        }
        default:
          return outputClone;
      }
    });
    transaction.witnessesCount = 0;
    transaction.witnesses = [];
    const chainIdBytes = uint64ToBytesBE(chainId);
    const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);
    return sha2562(concatenatedData);
  }
  var BlobTransactionRequest = class extends BaseTransactionRequest {
    static from(obj) {
      return new this(clone_default(obj));
    }
    /** Type of the transaction */
    type = TransactionType.Blob;
    /** Blob ID */
    blobId;
    /** Witness index of the bytecode to create */
    witnessIndex;
    /**
     * Creates an instance `BlobTransactionRequest`.
     *
     * @param blobTransactionRequestLike - The initial values for the instance
     */
    constructor({ witnessIndex, blobId, ...rest }) {
      super(rest);
      this.blobId = blobId;
      this.witnessIndex = witnessIndex ?? 0;
    }
    /**
     * Converts the transaction request to a `TransactionBlob`.
     *
     * @returns The transaction create object.
     */
    toTransaction() {
      const baseTransaction = this.getBaseTransaction();
      const { witnessIndex, blobId } = this;
      return {
        type: TransactionType.Blob,
        ...baseTransaction,
        blobId,
        witnessIndex
      };
    }
    /**
     * Gets the Transaction Request by hashing the transaction.
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId) {
      return hashTransaction(this, chainId);
    }
    /**
     * Calculates the metadata gas cost for a blob transaction.
     *
     * @param gasCosts - gas costs passed from the chain.
     * @returns metadata gas cost for the blob transaction.
     */
    metadataGas(gasCosts) {
      return calculateMetadataGasForTxBlob({
        gasCosts,
        txBytesSize: this.byteSize(),
        witnessBytesSize: this.witnesses[this.witnessIndex].length
      });
    }
  };
  var getStorageValue = (value) => {
    const v = new Uint8Array(32);
    v.set(arrayify(value));
    return v;
  };
  var storageSlotify = (storageSlot) => {
    let key;
    let value;
    if (Array.isArray(storageSlot)) {
      key = storageSlot[0];
      value = storageSlot[1];
    } else {
      key = storageSlot.key;
      value = storageSlot.value;
    }
    return {
      key: hexlify(key),
      value: hexlify(getStorageValue(value))
    };
  };
  var CreateTransactionRequest = class extends BaseTransactionRequest {
    static from(obj) {
      return new this(clone_default(obj));
    }
    /** Type of the transaction */
    type = TransactionType.Create;
    /** Witness index of contract bytecode to create */
    bytecodeWitnessIndex;
    /** Salt */
    salt;
    /** List of storage slots to initialize */
    storageSlots;
    /**
     * Creates an instance `CreateTransactionRequest`.
     *
     * @param createTransactionRequestLike - The initial values for the instance
     */
    constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }) {
      super(rest);
      this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;
      this.salt = hexlify(salt ?? ZeroBytes32);
      this.storageSlots = [...storageSlots ?? []];
    }
    /**
     * Converts the transaction request to a `TransactionCreate`.
     *
     * @returns The transaction create object.
     */
    toTransaction() {
      const baseTransaction = this.getBaseTransaction();
      const bytecodeWitnessIndex = this.bytecodeWitnessIndex;
      const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];
      return {
        type: TransactionType.Create,
        ...baseTransaction,
        bytecodeWitnessIndex,
        storageSlotsCount: bn(storageSlots.length),
        salt: this.salt ? hexlify(this.salt) : ZeroBytes32,
        storageSlots
      };
    }
    /**
     * Get contract created outputs for the transaction.
     *
     * @returns An array of contract created transaction request outputs.
     */
    getContractCreatedOutputs() {
      return this.outputs.filter(
        (output2) => output2.type === OutputType.ContractCreated
      );
    }
    /**
     * Gets the Transaction Request by hashing the transaction.
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId) {
      return hashTransaction(this, chainId);
    }
    /**
     * Adds a contract created output to the transaction request.
     *
     * @param contractId - The contract ID.
     * @param stateRoot - The state root.
     */
    addContractCreatedOutput(contractId, stateRoot) {
      this.pushOutput({
        type: OutputType.ContractCreated,
        contractId,
        stateRoot
      });
    }
    metadataGas(gasCosts) {
      return calculateMetadataGasForTxCreate({
        contractBytesSize: bn(arrayify(this.witnesses[this.bytecodeWitnessIndex] || "0x").length),
        gasCosts,
        stateRootSize: this.storageSlots.length,
        txBytesSize: this.byteSize()
      });
    }
  };
  var returnZeroScript = {
    /*
        Opcode::RET(REG_ZERO)
        Opcode::NOOP
      */
    // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281
    bytes: arrayify("0x24000000"),
    encodeScriptData: () => new Uint8Array(0)
  };
  var withdrawScript = {
    /*
            The following code loads some basic values into registers and calls SMO to create an output message
            5040C010 	- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]
            5D44C006	- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]
            4C400011	- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]
            24000000	- RET                [return 0]
            00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]
            00000000 00000000 [amount value]
        */
    // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281
    bytes: arrayify("0x5040C0105D44C0064C40001124000000"),
    encodeScriptData: () => new Uint8Array(0)
  };
  var ScriptTransactionRequest = class extends BaseTransactionRequest {
    static from(obj) {
      return new this(clone_default(obj));
    }
    /** Type of the transaction */
    type = TransactionType.Script;
    /** Gas limit for transaction */
    gasLimit;
    /** Script to execute */
    script;
    /** Script input data (parameters) */
    scriptData;
    abis;
    /**
     * Constructor for `ScriptTransactionRequest`.
     *
     * @param scriptTransactionRequestLike - The initial values for the instance.
     */
    constructor({ script, scriptData, gasLimit, ...rest } = {}) {
      super(rest);
      this.gasLimit = bn(gasLimit);
      this.script = arrayify(script ?? returnZeroScript.bytes);
      this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());
      this.abis = rest.abis;
    }
    /**
     * Helper function to estimate and fund the transaction request with a specified account.
     *
     * @param account - The account to fund the transaction.
     * @param params - The parameters for the transaction cost.
     * @returns The current instance of the `ScriptTransactionRequest` funded.
     */
    async estimateAndFund(account, { signatureCallback, quantities = [] } = {}) {
      const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });
      this.maxFee = txCost.maxFee;
      this.gasLimit = txCost.gasUsed;
      await account.fund(this, txCost);
      return this;
    }
    /**
     * Converts the transaction request to a `TransactionScript`.
     *
     * @returns The transaction script object.
     */
    toTransaction() {
      const script = arrayify(this.script ?? "0x");
      const scriptData = arrayify(this.scriptData ?? "0x");
      return {
        type: TransactionType.Script,
        scriptGasLimit: this.gasLimit,
        ...super.getBaseTransaction(),
        scriptLength: bn(script.length),
        scriptDataLength: bn(scriptData.length),
        receiptsRoot: ZeroBytes32,
        script: hexlify(script),
        scriptData: hexlify(scriptData)
      };
    }
    /**
     * Get contract inputs for the transaction.
     *
     * @returns An array of contract transaction request inputs.
     */
    getContractInputs() {
      return this.inputs.filter(
        (input) => input.type === InputType.Contract
      );
    }
    /**
     * Get contract outputs for the transaction.
     *
     * @returns An array of contract transaction request outputs.
     */
    getContractOutputs() {
      return this.outputs.filter(
        (output2) => output2.type === OutputType.Contract
      );
    }
    /**
     * Get variable outputs for the transaction.
     *
     * @returns An array of variable transaction request outputs.
     */
    getVariableOutputs() {
      return this.outputs.filter(
        (output2) => output2.type === OutputType.Variable
      );
    }
    /**
     * Set the script and its data.
     *
     * @param script - The abstract script request.
     * @param data - The script data.
     */
    setScript(script, data) {
      this.scriptData = script.encodeScriptData(data);
      this.script = script.bytes;
    }
    /**
     * Adds variable outputs to the transaction request.
     *
     * @param numberOfVariables - The number of variables to add.
     * @returns The new length of the outputs array.
     */
    addVariableOutputs(numberOfVariables = 1) {
      let outputsNumber = numberOfVariables;
      while (outputsNumber) {
        this.pushOutput({
          type: OutputType.Variable
        });
        outputsNumber -= 1;
      }
      return this.outputs.length - 1;
    }
    /**
     * Calculates the maximum gas for the transaction.
     *
     * @param chainInfo - The chain information.
     * @param minGas - The minimum gas.
     * @returns the maximum gas.
     */
    calculateMaxGas(chainInfo, minGas) {
      const { consensusParameters } = chainInfo;
      const {
        feeParameters: { gasPerByte },
        txParameters: { maxGasPerTx }
      } = consensusParameters;
      const witnessesLength = this.toTransaction().witnesses.reduce(
        (acc, wit) => acc + wit.dataLength,
        0
      );
      return getMaxGas({
        gasPerByte,
        minGas,
        witnessesLength,
        witnessLimit: this.witnessLimit,
        gasLimit: this.gasLimit,
        maxGasPerTx
      });
    }
    /**
     * Adds a contract input and output to the transaction request.
     *
     * @param contract - The contract ID.
     * @returns The current instance of the `ScriptTransactionRequest`.
     */
    addContractInputAndOutput(contract) {
      const contractAddress = addressify(contract);
      if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {
        return this;
      }
      const inputIndex = super.pushInput({
        type: InputType.Contract,
        contractId: contractAddress.toB256(),
        txPointer: "0x00000000000000000000000000000000"
      });
      this.pushOutput({
        type: OutputType.Contract,
        inputIndex
      });
      return this;
    }
    /**
     * Gets the Transaction Request by hashing the transaction.
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId) {
      return hashTransaction(this, chainId);
    }
    /**
     * Sets the data for the transaction request.
     *
     * @param abi - Script JSON ABI.
     * @param args - The input arguments.
     * @returns The current instance of the `ScriptTransactionRequest`.
     */
    setData(abi, args) {
      const abiInterface = new Interface(abi);
      this.scriptData = abiInterface.functions.main.encodeArguments(args);
      return this;
    }
    metadataGas(gasCosts) {
      return calculateMetadataGasForTxScript({
        gasCosts,
        txBytesSize: this.byteSize()
      });
    }
  };
  var UpgradeTransactionRequest = class extends BaseTransactionRequest {
    static from(obj) {
      if (obj instanceof UpgradeTransactionRequest) {
        return obj;
      }
      return new this(clone_default(obj));
    }
    /** The type of transaction */
    type = TransactionType.Upgrade;
    /** The upgrade purpose */
    upgradePurpose;
    /** Witness index of consensus */
    bytecodeWitnessIndex;
    /**
     * Creates an instance `UpgradeTransactionRequest`.
     *
     * @param upgradeTransactionRequestLike - The initial values for the instance
     */
    constructor({
      upgradePurpose,
      bytecodeWitnessIndex,
      ...rest
    } = {}) {
      super(rest);
      this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;
      this.upgradePurpose = upgradePurpose ?? {
        type: UpgradePurposeTypeEnum.ConsensusParameters,
        checksum: "0x"
      };
    }
    /**
     * Adds a consensus parameters upgrade purpose.
     *
     * @param consensus - The consensus bytecode.
     *
     * @returns - The current instance of `UpgradeTransactionRequest`.
     */
    addConsensusParametersUpgradePurpose(consensus) {
      this.bytecodeWitnessIndex = this.addWitness(consensus);
      this.upgradePurpose = {
        type: UpgradePurposeTypeEnum.ConsensusParameters,
        checksum: hash2(consensus)
      };
      return this;
    }
    /**
     * Adds a state transition upgrade purpose.
     *
     * @param bytecodeRoot - The Merkle root of the state transition.
     *
     * @returns - The current instance of `UpgradeTransactionRequest`.
     */
    addStateTransitionUpgradePurpose(bytecodeRoot) {
      this.upgradePurpose = {
        type: UpgradePurposeTypeEnum.StateTransition,
        data: hexlify(bytecodeRoot)
      };
      return this;
    }
    /**
     * Adds an upgrade purpose.
     *
     * @param type - The upgrade purpose type.
     * @param data - The bytecode or merkle root of upgrade purpose
     *
     * @returns - The current instance of `UpgradeTransactionRequest`.
     */
    addUpgradePurpose(type3, data) {
      if (type3 === UpgradePurposeTypeEnum.ConsensusParameters) {
        this.addConsensusParametersUpgradePurpose(data);
      }
      if (type3 === UpgradePurposeTypeEnum.StateTransition) {
        this.addStateTransitionUpgradePurpose(data);
      }
      return this;
    }
    /**
     * Converts the transaction request to a `TransactionUpgrade`.
     *
     * @returns The transaction create object.
     */
    toTransaction() {
      let upgradePurpose;
      if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {
        upgradePurpose = {
          type: UpgradePurposeTypeEnum.ConsensusParameters,
          data: {
            witnessIndex: this.bytecodeWitnessIndex,
            checksum: this.upgradePurpose.checksum
          }
        };
      } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {
        upgradePurpose = {
          type: UpgradePurposeTypeEnum.StateTransition,
          data: {
            bytecodeRoot: hexlify(this.upgradePurpose.data)
          }
        };
      } else {
        throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Invalid upgrade purpose");
      }
      return {
        type: TransactionType.Upgrade,
        ...super.getBaseTransaction(),
        upgradePurpose
      };
    }
    /**
     * Gets the Transaction ID by hashing the transaction
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId) {
      return hashTransaction(this, chainId);
    }
    /**
     * Calculates the metadata gas cost for an upgrade transaction.
     *
     * @param gasCosts - gas costs passed from the chain.
     *
     * @returns metadata gas cost for the upgrade transaction.
     */
    metadataGas(gasCosts) {
      const txBytesSize = this.byteSize();
      if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {
        const witnessIndex = this.bytecodeWitnessIndex;
        const consensusSize = this.witnesses[witnessIndex].length;
        return calculateMetadataGasForTxUpgrade({
          gasCosts,
          txBytesSize,
          consensusSize
        });
      }
      if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {
        return calculateMetadataGasForTxUpgrade({
          gasCosts,
          txBytesSize
        });
      }
      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, "Invalid upgrade purpose");
    }
  };
  var UploadTransactionRequest = class extends BaseTransactionRequest {
    static from(obj) {
      if (obj instanceof UploadTransactionRequest) {
        return obj;
      }
      return new this(clone_default(obj));
    }
    /** Type of the transaction */
    type = TransactionType.Upload;
    /** The witness index of the subsection of the bytecode. */
    witnessIndex;
    /** The subsection data. */
    subsection;
    /**
     * Creates an instance `UploadTransactionRequest`.
     *
     * @param uploadTransactionRequestLike - The initial values for the instance
     */
    constructor({ witnessIndex, subsection, ...rest } = {}) {
      super(rest);
      this.witnessIndex = witnessIndex ?? 0;
      this.subsection = subsection ?? {
        proofSet: [],
        root: ZeroBytes32,
        subsectionIndex: 0,
        subsectionsNumber: 0
      };
    }
    /**
     * Adds the subsection.
     *
     * @param subsection - The subsection data.
     */
    addSubsection(subsection) {
      const { subsection: subsectionBytecode, ...rest } = subsection;
      this.subsection = rest;
      this.witnessIndex = this.addWitness(subsectionBytecode);
    }
    /**
     * Gets the Transaction Request by hashing the transaction.
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId) {
      return hashTransaction(this, chainId);
    }
    /**
     * Converts the transaction request to a `TransactionUpload`.
     *
     * @returns The transaction create object.
     */
    toTransaction() {
      const baseTransaction = this.getBaseTransaction();
      const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;
      return {
        type: TransactionType.Upload,
        ...baseTransaction,
        subsectionIndex,
        subsectionsNumber,
        root: hexlify(root),
        proofSet: proofSet.map(hexlify),
        witnessIndex: this.witnessIndex,
        proofSetCount: proofSet.length
      };
    }
    /**
     * Calculates the metadata gas cost for an upload transaction.
     *
     * @param gasCosts - gas costs passed from the chain.
     *
     * @returns metadata gas cost for the upload transaction.
     */
    metadataGas(gasCosts) {
      return calculateMetadataGasForTxUpload({
        gasCosts,
        txBytesSize: this.byteSize(),
        subsectionSize: arrayify(this.witnesses[this.witnessIndex]).length,
        subsectionsSize: this.subsection.subsectionsNumber
      });
    }
    /**
     * Calculates the minimum gas for an upload transaction.
     *
     * @param chainInfo - The chain information.
     *
     * @returns the minimum gas for the upload transaction
     */
    calculateMinGas(chainInfo) {
      const minGas = super.calculateMinGas(chainInfo);
      const { gasCosts } = chainInfo.consensusParameters;
      const bytecode = this.witnesses[this.witnessIndex] ?? ZeroBytes32;
      return calculateMinGasForTxUpload({
        gasCosts,
        baseMinGas: minGas.toNumber(),
        subsectionSize: arrayify(bytecode).length
      });
    }
  };
  var transactionRequestify = (obj) => {
    if (obj instanceof ScriptTransactionRequest || obj instanceof CreateTransactionRequest || obj instanceof BlobTransactionRequest || obj instanceof UpgradeTransactionRequest || obj instanceof UploadTransactionRequest) {
      return obj;
    }
    const { type: type3 } = obj;
    switch (obj.type) {
      case TransactionType.Script: {
        return ScriptTransactionRequest.from(obj);
      }
      case TransactionType.Create: {
        return CreateTransactionRequest.from(obj);
      }
      case TransactionType.Blob: {
        return BlobTransactionRequest.from(obj);
      }
      case TransactionType.Upgrade: {
        return UpgradeTransactionRequest.from(obj);
      }
      case TransactionType.Upload: {
        return UploadTransactionRequest.from(obj);
      }
      default: {
        throw new FuelError(
          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
          `Unsupported transaction type: ${type3}.`
        );
      }
    }
  };
  var isTransactionTypeScript = (request) => request.type === TransactionType.Script;
  var isTransactionTypeCreate = (request) => request.type === TransactionType.Create;
  var calculateTXFeeForSummary = (params) => {
    const {
      gasPrice,
      rawPayload,
      tip,
      consensusParameters: { gasCosts, feeParams, maxGasPerTx }
    } = params;
    const gasPerByte = bn(feeParams.gasPerByte);
    const gasPriceFactor = bn(feeParams.gasPriceFactor);
    const transactionBytes = arrayify(rawPayload);
    const [transaction] = new TransactionCoder().decode(transactionBytes, 0);
    const { type: type3, witnesses, inputs, policies } = transaction;
    let metadataGas = bn(0);
    let gasLimit = bn(0);
    if (type3 !== TransactionType.Create && type3 !== TransactionType.Script) {
      return bn(0);
    }
    if (type3 === TransactionType.Create) {
      const { bytecodeWitnessIndex, storageSlots } = transaction;
      const contractBytesSize = bn(arrayify(witnesses[bytecodeWitnessIndex].data).length);
      metadataGas = calculateMetadataGasForTxCreate({
        contractBytesSize,
        gasCosts,
        stateRootSize: storageSlots.length || 0,
        txBytesSize: transactionBytes.length
      });
    } else {
      const { scriptGasLimit } = transaction;
      if (scriptGasLimit) {
        gasLimit = scriptGasLimit;
      }
      metadataGas = calculateMetadataGasForTxScript({
        gasCosts,
        txBytesSize: transactionBytes.length
      });
    }
    const minGas = getMinGas({
      gasCosts,
      gasPerByte: bn(gasPerByte),
      inputs,
      metadataGas,
      txBytesSize: transactionBytes.length
    });
    const witnessLimit = policies.find((policy) => policy.type === PolicyType.WitnessLimit)?.data;
    const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);
    const maxGas = getMaxGas({
      gasPerByte,
      minGas,
      witnessesLength,
      gasLimit,
      witnessLimit,
      maxGasPerTx
    });
    const maxFee = calculateGasFee({
      gasPrice,
      gas: maxGas,
      priceFactor: gasPriceFactor,
      tip
    });
    return maxFee;
  };
  var getFunctionCall = ({ abi, receipt }) => {
    const abiInterface = new Interface(abi);
    const callFunctionSelector = receipt.param1.toHex(8);
    const functionFragment = abiInterface.getFunction(callFunctionSelector);
    const inputs = functionFragment.jsonFn.inputs;
    const encodedArgs = receipt.param2.toHex();
    let argumentsProvided;
    const data = functionFragment.decodeArguments(encodedArgs);
    if (data) {
      argumentsProvided = inputs.reduce((prev, input, index) => {
        const value = data[index];
        const name = input.name;
        if (name) {
          return {
            ...prev,
            // reparse to remove bn
            [name]: JSON.parse(JSON.stringify(value))
          };
        }
        return prev;
      }, {});
    }
    const call = {
      functionSignature: functionFragment.signature,
      functionName: functionFragment.name,
      argumentsProvided,
      ...receipt.amount?.isZero() ? {} : { amount: receipt.amount, assetId: receipt.assetId }
    };
    return call;
  };
  function getInputsByTypes(inputs, types) {
    return inputs.filter((i) => types.includes(i.type));
  }
  function getInputsByType(inputs, type3) {
    return inputs.filter((i) => i.type === type3);
  }
  function getInputsCoin(inputs) {
    return getInputsByType(inputs, InputType.Coin);
  }
  function getInputsMessage(inputs) {
    return getInputsByType(inputs, InputType.Message);
  }
  function getInputsCoinAndMessage(inputs) {
    return getInputsByTypes(inputs, [InputType.Coin, InputType.Message]);
  }
  function isInputCoin(input) {
    return input.type === InputType.Coin;
  }
  function getInputsContract(inputs) {
    return getInputsByType(inputs, InputType.Contract);
  }
  function findCoinInput(inputs, assetId) {
    const coinInputs = getInputsCoin(inputs);
    return coinInputs.find((i) => i.assetId === assetId);
  }
  function aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId) {
    const aggregated = /* @__PURE__ */ new Map();
    getInputsCoinAndMessage(inputs).forEach((input) => {
      const assetId = isInputCoin(input) ? input.assetId : baseAssetId;
      const owner = isInputCoin(input) ? input.owner : input.recipient;
      let ownersMap = aggregated.get(assetId);
      if (!ownersMap) {
        ownersMap = /* @__PURE__ */ new Map();
        aggregated.set(assetId, ownersMap);
      }
      let ownerBalance = ownersMap.get(owner);
      if (!ownerBalance) {
        ownerBalance = new BN(0);
        ownersMap.set(owner, ownerBalance);
      }
      ownersMap.set(owner, ownerBalance.add(input.amount));
    });
    return aggregated;
  }
  function findMessageInput(inputs) {
    return getInputsMessage(inputs)?.[0];
  }
  function getInputFromAssetId(inputs, assetId, isBaseAsset = false) {
    const coinInput = findCoinInput(inputs, assetId);
    if (coinInput) {
      return coinInput;
    }
    if (isBaseAsset) {
      return findMessageInput(inputs);
    }
    return void 0;
  }
  function getInputContractFromIndex(inputs, inputIndex) {
    if (inputIndex == null) {
      return void 0;
    }
    const contractInput = inputs?.[inputIndex];
    if (!contractInput) {
      return void 0;
    }
    if (contractInput.type !== InputType.Contract) {
      throw new FuelError(
        ErrorCode.INVALID_TRANSACTION_INPUT,
        `Contract input should be of type 'contract'.`
      );
    }
    return contractInput;
  }
  function getInputAccountAddress(input) {
    if (input.type === InputType.Coin) {
      return input.owner.toString();
    }
    if (input.type === InputType.Message) {
      return input.recipient.toString();
    }
    return "";
  }
  function getOutputsByType(outputs, type3) {
    return outputs.filter((o) => o.type === type3);
  }
  function getOutputsContractCreated(outputs) {
    return getOutputsByType(outputs, OutputType.ContractCreated);
  }
  function getOutputsCoin(outputs) {
    return getOutputsByType(outputs, OutputType.Coin);
  }
  function getOutputsChange(outputs) {
    return getOutputsByType(outputs, OutputType.Change);
  }
  function getOutputsContract(outputs) {
    return getOutputsByType(outputs, OutputType.Contract);
  }
  function getReceiptsByType(receipts, type3) {
    return (receipts ?? []).filter((r) => r.type === type3);
  }
  function getTransactionTypeName(transactionType) {
    switch (transactionType) {
      case TransactionType.Mint:
        return "Mint";
      case TransactionType.Create:
        return "Create";
      case TransactionType.Script:
        return "Script";
      case TransactionType.Blob:
        return "Blob";
      case TransactionType.Upgrade:
        return "Upgrade";
      case TransactionType.Upload:
        return "Upload";
      default:
        throw new FuelError(
          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,
          `Unsupported transaction type: ${transactionType}.`
        );
    }
  }
  function isType(transactionType, type3) {
    const txType = getTransactionTypeName(transactionType);
    return txType === type3;
  }
  function isTypeMint(transactionType) {
    return isType(
      transactionType,
      "Mint"
      /* Mint */
    );
  }
  function isTypeCreate(transactionType) {
    return isType(
      transactionType,
      "Create"
      /* Create */
    );
  }
  function isTypeScript(transactionType) {
    return isType(
      transactionType,
      "Script"
      /* Script */
    );
  }
  function isTypeUpgrade(transactionType) {
    return isType(
      transactionType,
      "Upgrade"
      /* Upgrade */
    );
  }
  function isTypeUpload(transactionType) {
    return isType(
      transactionType,
      "Upload"
      /* Upload */
    );
  }
  function isTypeBlob(transactionType) {
    return isType(
      transactionType,
      "Blob"
      /* Blob */
    );
  }
  function getReceiptsCall(receipts) {
    return getReceiptsByType(receipts, ReceiptType.Call);
  }
  function getReceiptsMessageOut(receipts) {
    return getReceiptsByType(receipts, ReceiptType.MessageOut);
  }
  function mergeAssets(op1, op2) {
    const assets1 = op1.assetsSent || [];
    const assets2 = op2.assetsSent || [];
    const assetMap = /* @__PURE__ */ new Map();
    assets1.forEach((asset) => {
      assetMap.set(asset.assetId, { ...asset });
    });
    assets2.forEach((asset) => {
      const existingAsset = assetMap.get(asset.assetId);
      if (existingAsset) {
        existingAsset.amount = bn(existingAsset.amount).add(asset.amount);
      } else {
        assetMap.set(asset.assetId, { ...asset });
      }
    });
    return Array.from(assetMap.values());
  }
  function isSameOperation(a, b) {
    return a.name === b.name && a.from?.address === b.from?.address && a.to?.address === b.to?.address && a.from?.type === b.from?.type && a.to?.type === b.to?.type;
  }
  function mergeAssetsSent(existing, toAdd) {
    if (!toAdd.assetsSent?.length) {
      return existing.assetsSent;
    }
    return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;
  }
  function mergeCalls(existing, toAdd) {
    if (!toAdd.calls?.length) {
      return existing.calls;
    }
    return [...existing.calls || [], ...toAdd.calls];
  }
  function mergeOperations(existing, toAdd) {
    return {
      ...existing,
      assetsSent: mergeAssetsSent(existing, toAdd),
      calls: mergeCalls(existing, toAdd)
    };
  }
  function addOperation(operations, toAdd) {
    const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));
    if (existingIndex === -1) {
      return [...operations, toAdd];
    }
    return operations.map((op, index) => index === existingIndex ? mergeOperations(op, toAdd) : op);
  }
  function getWithdrawFromFuelOperations({
    inputs,
    receipts,
    baseAssetId
  }) {
    const messageOutReceipts = getReceiptsMessageOut(receipts);
    const withdrawFromFuelOperations = messageOutReceipts.reduce(
      (prevWithdrawFromFuelOps, receipt) => {
        const input = getInputFromAssetId(inputs, baseAssetId, true);
        if (input) {
          const inputAddress = getInputAccountAddress(input);
          const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {
            name: "Withdraw from Fuel",
            from: {
              type: 1,
              address: inputAddress
            },
            to: {
              type: 1,
              address: receipt.recipient.toString(),
              chain: "ethereum"
              /* ethereum */
            },
            assetsSent: [
              {
                amount: receipt.amount,
                assetId: baseAssetId
              }
            ]
          });
          return newWithdrawFromFuelOps;
        }
        return prevWithdrawFromFuelOps;
      },
      []
    );
    return withdrawFromFuelOperations;
  }
  function getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs) {
    const abi = abiMap?.[contractInput.contractID];
    if (!abi) {
      return [];
    }
    return [
      getFunctionCall({
        abi,
        receipt,
        rawPayload,
        maxInputs
      })
    ];
  }
  function getAssetsSent(receipt) {
    return receipt.amount?.isZero() ? void 0 : [
      {
        amount: receipt.amount,
        assetId: receipt.assetId
      }
    ];
  }
  function processCallReceipt(receipt, contractInput, inputs, abiMap, rawPayload, maxInputs, baseAssetId) {
    const assetId = receipt.assetId === ZeroBytes32 ? baseAssetId : receipt.assetId;
    const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);
    if (!input) {
      return [];
    }
    const inputAddress = getInputAccountAddress(input);
    const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);
    return [
      {
        name: "Contract call",
        from: {
          type: 1,
          address: inputAddress
        },
        to: {
          type: 0,
          address: receipt.to
        },
        assetsSent: getAssetsSent(receipt),
        calls
      }
    ];
  }
  function getContractCallOperations({
    inputs,
    outputs,
    receipts,
    abiMap,
    rawPayload,
    maxInputs,
    baseAssetId
  }) {
    const contractCallReceipts = getReceiptsCall(receipts);
    const contractOutputs = getOutputsContract(outputs);
    return contractOutputs.flatMap((output2) => {
      const contractInput = getInputContractFromIndex(inputs, output2.inputIndex);
      if (!contractInput) {
        return [];
      }
      return contractCallReceipts.filter((receipt) => receipt.to === contractInput.contractID).flatMap(
        (receipt) => processCallReceipt(
          receipt,
          contractInput,
          inputs,
          abiMap,
          rawPayload,
          maxInputs,
          baseAssetId
        )
      );
    });
  }
  function extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs) {
    const { to: toAddress, assetId, amount } = receipt;
    let { id: fromAddress } = receipt;
    const toType = contractInputs.some((input) => input.contractID === toAddress) ? 0 : 1;
    if (ZeroBytes32 === fromAddress) {
      const change = changeOutputs.find((output2) => output2.assetId === assetId);
      fromAddress = change?.to || fromAddress;
    }
    const fromType = contractInputs.some((input) => input.contractID === fromAddress) ? 0 : 1;
    return {
      name: "Transfer asset",
      from: {
        type: fromType,
        address: fromAddress
      },
      to: {
        type: toType,
        address: toAddress
      },
      assetsSent: [
        {
          assetId: assetId.toString(),
          amount
        }
      ]
    };
  }
  function getTransferOperations({
    inputs,
    outputs,
    receipts,
    baseAssetId
  }) {
    let operations = [];
    const coinOutputs = getOutputsCoin(outputs);
    const contractInputs = getInputsContract(inputs);
    const changeOutputs = getOutputsChange(outputs);
    const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);
    coinOutputs.forEach(({ amount, assetId, to }) => {
      const txPayers = aggregated.get(assetId) || /* @__PURE__ */ new Map();
      let selectedPayer;
      let fallbackPayer;
      for (const [address, payedAmount] of txPayers) {
        if (!fallbackPayer) {
          fallbackPayer = address;
        }
        if (payedAmount.gte(amount)) {
          selectedPayer = address;
          break;
        }
      }
      selectedPayer = selectedPayer || fallbackPayer;
      if (selectedPayer) {
        operations = addOperation(operations, {
          name: "Transfer asset",
          from: {
            type: 1,
            address: selectedPayer
          },
          to: {
            type: 1,
            address: to
          },
          assetsSent: [{ assetId, amount }]
        });
      }
    });
    const transferReceipts = getReceiptsByType(
      receipts,
      ReceiptType.Transfer
    );
    const transferOutReceipts = getReceiptsByType(
      receipts,
      ReceiptType.TransferOut
    );
    [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {
      const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);
      operations = addOperation(operations, operation);
    });
    return operations;
  }
  function getPayProducerOperations(outputs) {
    const coinOutputs = getOutputsCoin(outputs);
    const payProducerOperations = coinOutputs.reduce((prev, output2) => {
      const operations = addOperation(prev, {
        name: "Pay network fee to block producer",
        from: {
          type: 1,
          address: "Network"
        },
        to: {
          type: 1,
          address: output2.to.toString()
        },
        assetsSent: [
          {
            assetId: output2.assetId.toString(),
            amount: output2.amount
          }
        ]
      });
      return operations;
    }, []);
    return payProducerOperations;
  }
  function getContractCreatedOperations({ inputs, outputs }) {
    const contractCreatedOutputs = getOutputsContractCreated(outputs);
    const input = getInputsCoinAndMessage(inputs)[0];
    const fromAddress = getInputAccountAddress(input);
    const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {
      const operations = addOperation(prev, {
        name: "Contract created",
        from: {
          type: 1,
          address: fromAddress
        },
        to: {
          type: 0,
          address: contractCreatedOutput?.contractId || ""
        }
      });
      return operations;
    }, []);
    return contractCreatedOperations;
  }
  function getOperations({
    transactionType,
    inputs,
    outputs,
    receipts,
    abiMap,
    rawPayload,
    maxInputs,
    baseAssetId
  }) {
    if (isTypeCreate(transactionType)) {
      return [...getContractCreatedOperations({ inputs, outputs })];
    }
    if (isTypeScript(transactionType)) {
      return [
        ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),
        ...getContractCallOperations({
          inputs,
          outputs,
          receipts,
          abiMap,
          rawPayload,
          maxInputs,
          baseAssetId
        }),
        ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId })
      ];
    }
    return [...getPayProducerOperations(outputs)];
  }
  var processGqlReceipt = (gqlReceipt) => assembleReceiptByType(gqlReceipt);
  var extractMintedAssetsFromReceipts = (receipts) => {
    const mintedAssets = [];
    receipts.forEach((receipt) => {
      if (receipt.type === ReceiptType.Mint) {
        mintedAssets.push({
          subId: receipt.subId,
          contractId: receipt.contractId,
          assetId: receipt.assetId,
          amount: receipt.val
        });
      }
    });
    return mintedAssets;
  };
  var extractBurnedAssetsFromReceipts = (receipts) => {
    const burnedAssets = [];
    receipts.forEach((receipt) => {
      if (receipt.type === ReceiptType.Burn) {
        burnedAssets.push({
          subId: receipt.subId,
          contractId: receipt.contractId,
          assetId: receipt.assetId,
          amount: receipt.val
        });
      }
    });
    return burnedAssets;
  };
  var getTransactionStatusName = (gqlStatus) => {
    switch (gqlStatus) {
      case "FailureStatus":
        return "failure";
      case "SuccessStatus":
        return "success";
      case "SubmittedStatus":
        return "submitted";
      case "SqueezedOutStatus":
        return "squeezedout";
      default:
        throw new FuelError(
          ErrorCode.INVALID_TRANSACTION_STATUS,
          `Invalid transaction status: ${gqlStatus}.`
        );
    }
  };
  var processGraphqlStatus = (gqlTransactionStatus) => {
    let time;
    let blockId;
    let status;
    let totalFee;
    let totalGas;
    let isStatusFailure = false;
    let isStatusSuccess = false;
    let isStatusPending = false;
    if (gqlTransactionStatus?.type) {
      status = getTransactionStatusName(gqlTransactionStatus.type);
      switch (gqlTransactionStatus.type) {
        case "SuccessStatus":
          time = gqlTransactionStatus.time;
          blockId = gqlTransactionStatus.block?.id;
          isStatusSuccess = true;
          totalFee = bn(gqlTransactionStatus.totalFee);
          totalGas = bn(gqlTransactionStatus.totalGas);
          break;
        case "FailureStatus":
          time = gqlTransactionStatus.time;
          blockId = gqlTransactionStatus.block?.id;
          isStatusFailure = true;
          totalFee = bn(gqlTransactionStatus.totalFee);
          totalGas = bn(gqlTransactionStatus.totalGas);
          break;
        case "SubmittedStatus":
          time = gqlTransactionStatus.time;
          isStatusPending = true;
          break;
        default:
      }
    }
    const processedGraphqlStatus = {
      time,
      blockId,
      status,
      totalFee,
      totalGas,
      isStatusFailure,
      isStatusSuccess,
      isStatusPending
    };
    return processedGraphqlStatus;
  };
  var getTotalFeeFromStatus = (status) => status && "totalFee" in status ? bn(status.totalFee) : void 0;
  function assembleTransactionSummary(params) {
    const {
      id,
      receipts,
      gasPerByte,
      gasPriceFactor,
      transaction,
      transactionBytes,
      gqlTransactionStatus,
      abiMap = {},
      maxInputs,
      gasCosts,
      maxGasPerTx,
      gasPrice,
      baseAssetId
    } = params;
    const gasUsed = getGasUsedFromReceipts(receipts);
    const rawPayload = hexlify(transactionBytes);
    const operations = getOperations({
      transactionType: transaction.type,
      inputs: transaction.inputs || [],
      outputs: transaction.outputs || [],
      receipts,
      rawPayload,
      abiMap,
      maxInputs,
      baseAssetId
    });
    const typeName = getTransactionTypeName(transaction.type);
    const tip = bn(transaction.policies?.find((policy) => policy.type === PolicyType.Tip)?.data);
    const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } = processGraphqlStatus(gqlTransactionStatus);
    const fee = totalFee ?? calculateTXFeeForSummary({
      gasPrice,
      rawPayload,
      tip,
      consensusParameters: {
        gasCosts,
        maxGasPerTx,
        feeParams: {
          gasPerByte,
          gasPriceFactor
        }
      }
    });
    const mintedAssets = extractMintedAssetsFromReceipts(receipts);
    const burnedAssets = extractBurnedAssetsFromReceipts(receipts);
    let date;
    if (time) {
      date = DateTime.fromTai64(time);
    }
    const transactionSummary = {
      id,
      tip,
      fee,
      gasUsed,
      operations,
      type: typeName,
      blockId,
      time,
      status,
      receipts,
      mintedAssets,
      burnedAssets,
      isTypeMint: isTypeMint(transaction.type),
      isTypeCreate: isTypeCreate(transaction.type),
      isTypeScript: isTypeScript(transaction.type),
      isTypeUpgrade: isTypeUpgrade(transaction.type),
      isTypeUpload: isTypeUpload(transaction.type),
      isTypeBlob: isTypeBlob(transaction.type),
      isStatusFailure,
      isStatusSuccess,
      isStatusPending,
      date,
      transaction
    };
    return transactionSummary;
  }
  function getDecodedLogs(receipts, mainAbi, externalAbis = {}) {
    return receipts.reduce((logs, receipt) => {
      if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {
        const interfaceToUse = new Interface(externalAbis[receipt.id] || mainAbi);
        const data = receipt.type === ReceiptType.Log ? new BigNumberCoder("u64").encode(receipt.ra) : receipt.data;
        const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());
        logs.push(decodedLog);
      }
      return logs;
    }, []);
  }
  function mapGqlOutputsToTxOutputs(outputs) {
    return outputs.map((o) => {
      const obj = "amount" in o ? { ...o, amount: bn(o.amount) } : o;
      switch (obj.type) {
        case "CoinOutput":
          return { ...obj, type: OutputType.Coin };
        case "ContractOutput":
          return {
            ...obj,
            type: OutputType.Contract,
            inputIndex: parseInt(obj.inputIndex, 10)
          };
        case "ChangeOutput":
          return {
            ...obj,
            type: OutputType.Change
          };
        case "VariableOutput":
          return { ...obj, type: OutputType.Variable };
        case "ContractCreated":
          return {
            ...obj,
            type: OutputType.ContractCreated,
            contractId: obj.contract
          };
        default:
          return assertUnreachable(obj);
      }
    });
  }
  var TransactionResponse = class {
    /**
     * Constructor for `TransactionResponse`.
     *
     * @param tx - The transaction ID or TransactionRequest.
     * @param provider - The provider.
     */
    constructor(tx, provider, chainId, abis, submitTxSubscription) {
      this.submitTxSubscription = submitTxSubscription;
      this.id = typeof tx === "string" ? tx : tx.getTransactionId(chainId);
      this.provider = provider;
      this.abis = abis;
      this.request = typeof tx === "string" ? void 0 : tx;
    }
    /** Transaction ID */
    id;
    /** Current provider */
    provider;
    /** Gas used on the transaction */
    gasUsed = bn(0);
    /** The graphql Transaction with receipts object. */
    gqlTransaction;
    request;
    status;
    abis;
    /**
     * Async constructor for `TransactionResponse`. This method can be used to create
     * an instance of `TransactionResponse` and wait for the transaction to be fetched
     * from the chain, ensuring that the `gqlTransaction` property is set.
     *
     * @param id - The transaction ID.
     * @param provider - The provider.
     */
    static async create(id, provider, abis) {
      const chainId = await provider.getChainId();
      const response = new TransactionResponse(id, provider, chainId, abis);
      await response.fetch();
      return response;
    }
    applyMalleableSubscriptionFields(transaction) {
      const status = this.status;
      if (!status) {
        return;
      }
      const tx = transaction;
      if (status.type === "SuccessStatus" || status.type === "FailureStatus") {
        tx.inputs = tx.inputs.map((input, idx) => {
          if ("txPointer" in input) {
            const correspondingInput = status.transaction.inputs?.[idx];
            return {
              ...input,
              txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer)
            };
          }
          return input;
        });
        tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);
        if ("receiptsRoot" in status.transaction) {
          tx.receiptsRoot = status.transaction.receiptsRoot;
        }
      }
    }
    async getTransaction() {
      if (this.request) {
        const tx = this.request.toTransaction();
        this.applyMalleableSubscriptionFields(tx);
        return {
          tx,
          bytes: this.request.toTransactionBytes()
        };
      }
      const gqlTransaction = this.gqlTransaction ?? await this.fetch();
      return {
        tx: this.decodeTransaction(gqlTransaction),
        bytes: arrayify(gqlTransaction.rawPayload)
      };
    }
    getReceipts() {
      const status = this.status ?? this.gqlTransaction?.status;
      switch (status?.type) {
        case "SuccessStatus":
        case "FailureStatus":
          return status.receipts.map(processGqlReceipt);
        default:
          return [];
      }
    }
    /**
     * Fetch the transaction with receipts from the provider.
     *
     * @returns Transaction with receipts query result.
     */
    async fetch() {
      const response = await this.provider.operations.getTransactionWithReceipts({
        transactionId: this.id
      });
      if (!response.transaction) {
        const subscription = await this.provider.operations.statusChange({
          transactionId: this.id
        });
        for await (const { statusChange } of subscription) {
          if (statusChange) {
            this.status = statusChange;
            break;
          }
        }
        return this.fetch();
      }
      this.gqlTransaction = response.transaction;
      return response.transaction;
    }
    /**
     * Decode the raw payload of the transaction.
     *
     * @param transactionWithReceipts - The transaction with receipts object.
     * @returns The decoded transaction.
     */
    decodeTransaction(transactionWithReceipts) {
      return new TransactionCoder().decode(
        arrayify(transactionWithReceipts.rawPayload),
        0
      )?.[0];
    }
    /**
     * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will
     * fetch it from the provider
     *
     * @param contractsAbiMap - The contracts ABI map.
     * @returns
     */
    async getTransactionSummary(contractsAbiMap) {
      const { tx: transaction, bytes: transactionBytes } = await this.getTransaction();
      const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await this.provider.getGasConfig();
      const totalFee = getTotalFeeFromStatus(this.status ?? this.gqlTransaction?.status);
      const gasPrice = totalFee ? bn(0) : await this.provider.getLatestGasPrice();
      const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;
      const baseAssetId = await this.provider.getBaseAssetId();
      const transactionSummary = assembleTransactionSummary({
        id: this.id,
        receipts: this.getReceipts(),
        transaction,
        transactionBytes,
        gqlTransactionStatus: this.status ?? this.gqlTransaction?.status,
        gasPerByte,
        gasPriceFactor,
        abiMap: contractsAbiMap,
        maxInputs,
        gasCosts,
        maxGasPerTx,
        gasPrice,
        baseAssetId
      });
      return transactionSummary;
    }
    async waitForStatusChange() {
      const status = this.gqlTransaction?.status?.type;
      if (status && status !== "SubmittedStatus") {
        return;
      }
      const subscription = this.submitTxSubscription ?? await this.provider.operations.statusChange({
        transactionId: this.id
      });
      for await (const sub of subscription) {
        const statusChange = "statusChange" in sub ? sub.statusChange : sub.submitAndAwaitStatus;
        this.status = statusChange;
        if (statusChange.type === "SqueezedOutStatus") {
          this.unsetResourceCache();
          throw new FuelError(
            ErrorCode.TRANSACTION_SQUEEZED_OUT,
            `Transaction Squeezed Out with reason: ${statusChange.reason}`
          );
        }
        if (statusChange.type !== "SubmittedStatus") {
          break;
        }
      }
    }
    /**
     * Assembles the result of a transaction by retrieving the transaction summary,
     * decoding logs (if available), and handling transaction failure.
     *
     * This method can be used to obtain the result of a transaction that has just
     * been submitted or one that has already been processed.
     *
     * @template TTransactionType - The type of the transaction.
     * @param contractsAbiMap - The map of contract ABIs.
     * @returns - The assembled transaction result.
     * @throws If the transaction status is a failure.
     */
    async assembleResult(contractsAbiMap) {
      const transactionSummary = await this.getTransactionSummary(contractsAbiMap);
      const transactionResult = {
        ...transactionSummary
      };
      let logs = [];
      if (this.abis) {
        logs = getDecodedLogs(
          transactionSummary.receipts,
          this.abis.main,
          this.abis.otherContractsAbis
        );
        transactionResult.logs = logs;
      }
      const { receipts } = transactionResult;
      const status = this.status ?? this.gqlTransaction?.status;
      if (status?.type === "FailureStatus") {
        this.unsetResourceCache();
        const { reason } = status;
        throw extractTxError({
          receipts,
          statusReason: reason,
          logs
        });
      }
      return transactionResult;
    }
    /**
     * Waits for transaction to complete and returns the result.
     *
     * @returns The completed transaction result
     */
    async waitForResult(contractsAbiMap) {
      await this.waitForStatusChange();
      return this.assembleResult(contractsAbiMap);
    }
    /**
     * Waits for transaction to complete and returns the result.
     *
     * @param contractsAbiMap - The contracts ABI map.
     */
    async wait(contractsAbiMap) {
      return this.waitForResult(contractsAbiMap);
    }
    unsetResourceCache() {
      this.provider.cache?.unset(this.id);
    }
  };
  function getWaitDelay(options, retryAttemptNum) {
    const duration = options.baseDelay ?? 150;
    switch (options.backoff) {
      case "linear":
        return duration * retryAttemptNum;
      case "fixed":
        return duration;
      case "exponential":
      default:
        return 2 ** (retryAttemptNum - 1) * duration;
    }
  }
  function autoRetryFetch(fetchFn, options, retryAttemptNum = 0) {
    if (options === void 0) {
      return fetchFn;
    }
    return async (...args) => {
      try {
        return await fetchFn(...args);
      } catch (_error) {
        const error2 = _error;
        if (error2.cause?.code !== "ECONNREFUSED") {
          throw error2;
        }
        const retryNum = retryAttemptNum + 1;
        if (retryNum > options.maxRetries) {
          throw error2;
        }
        const delay = getWaitDelay(options, retryNum);
        await sleep(delay);
        return autoRetryFetch(fetchFn, options, retryNum)(...args);
      }
    };
  }
  var handleGqlErrorMessage = (errorMessage, rawError) => {
    switch (errorMessage) {
      case "not enough coins to fit the target":
        throw new FuelError(
          ErrorCode.NOT_ENOUGH_FUNDS,
          `The account(s) sending the transaction don't have enough funds to cover the transaction.`,
          {},
          rawError
        );
      case "max number of coins is reached while trying to fit the target":
        throw new FuelError(
          ErrorCode.MAX_COINS_REACHED,
          "The account retrieving coins has exceeded the maximum number of coins per asset. Please consider combining your coins into a single UTXO.",
          {},
          rawError
        );
      default:
        throw new FuelError(ErrorCode.INVALID_REQUEST, errorMessage);
    }
  };
  var validatePaginationArgs = (params) => {
    const { paginationLimit, inputArgs = {} } = params;
    const { first, last, after, before } = inputArgs;
    if (after && before) {
      throw new FuelError(
        ErrorCode.INVALID_INPUT_PARAMETERS,
        'Pagination arguments "after" and "before" cannot be used together'
      );
    }
    if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {
      throw new FuelError(
        ErrorCode.INVALID_INPUT_PARAMETERS,
        `Pagination limit for this query cannot exceed ${paginationLimit} items`
      );
    }
    if (first && before) {
      throw new FuelError(
        ErrorCode.INVALID_INPUT_PARAMETERS,
        'The use of pagination argument "first" with "before" is not supported'
      );
    }
    if (last && after) {
      throw new FuelError(
        ErrorCode.INVALID_INPUT_PARAMETERS,
        'The use of pagination argument "last" with "after" is not supported'
      );
    }
    if (!first && !last) {
      inputArgs.first = paginationLimit;
    }
    return inputArgs;
  };
  var MAX_RETRIES = 10;
  var RESOURCES_PAGE_SIZE_LIMIT = 512;
  var TRANSACTIONS_PAGE_SIZE_LIMIT = 60;
  var BLOCKS_PAGE_SIZE_LIMIT = 5;
  var DEFAULT_RESOURCE_CACHE_TTL = 2e4;
  var GAS_USED_MODIFIER = 1.2;
  var processGqlChain = (chain) => {
    const { name, daHeight, consensusParameters } = chain;
    const {
      contractParams,
      feeParams,
      predicateParams,
      scriptParams,
      txParams,
      gasCosts,
      baseAssetId,
      chainId,
      version
    } = consensusParameters;
    return {
      name,
      baseChainHeight: bn(daHeight),
      consensusParameters: {
        version,
        chainId: bn(chainId),
        baseAssetId,
        feeParameters: {
          version: feeParams.version,
          gasPerByte: bn(feeParams.gasPerByte),
          gasPriceFactor: bn(feeParams.gasPriceFactor)
        },
        contractParameters: {
          version: contractParams.version,
          contractMaxSize: bn(contractParams.contractMaxSize),
          maxStorageSlots: bn(contractParams.maxStorageSlots)
        },
        txParameters: {
          version: txParams.version,
          maxInputs: bn(txParams.maxInputs),
          maxOutputs: bn(txParams.maxOutputs),
          maxWitnesses: bn(txParams.maxWitnesses),
          maxGasPerTx: bn(txParams.maxGasPerTx),
          maxSize: bn(txParams.maxSize),
          maxBytecodeSubsections: bn(txParams.maxBytecodeSubsections)
        },
        predicateParameters: {
          version: predicateParams.version,
          maxPredicateLength: bn(predicateParams.maxPredicateLength),
          maxPredicateDataLength: bn(predicateParams.maxPredicateDataLength),
          maxGasPerPredicate: bn(predicateParams.maxGasPerPredicate),
          maxMessageDataLength: bn(predicateParams.maxMessageDataLength)
        },
        scriptParameters: {
          version: scriptParams.version,
          maxScriptLength: bn(scriptParams.maxScriptLength),
          maxScriptDataLength: bn(scriptParams.maxScriptDataLength)
        },
        gasCosts
      }
    };
  };
  var _cacheInputs;
  var cacheInputs_fn;
  var _Provider = class {
    /**
     * Constructor to initialize a Provider.
     *
     * @param url - GraphQL endpoint of the Fuel node
     * @param options - Additional options for the provider
     * @hidden
     */
    constructor(url, options = {}) {
      __privateAdd(this, _cacheInputs);
      __publicField4(this, "operations");
      __publicField4(this, "cache");
      __publicField4(this, "url");
      __publicField4(this, "urlWithoutAuth");
      __publicField4(this, "consensusParametersTimestamp");
      __publicField4(this, "options", {
        timeout: void 0,
        resourceCacheTTL: void 0,
        fetch: void 0,
        retryOptions: void 0,
        headers: void 0
      });
      const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = _Provider.extractBasicAuth(url);
      this.url = rawUrl;
      this.urlWithoutAuth = urlWithoutAuth;
      this.url = url;
      const { FUELS } = versions;
      const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };
      this.options = {
        ...this.options,
        ...options,
        headers
      };
      this.operations = this.createOperations();
      const { resourceCacheTTL } = this.options;
      if (isDefined(resourceCacheTTL)) {
        if (resourceCacheTTL !== -1) {
          this.cache = new ResourceCache(resourceCacheTTL);
        } else {
          this.cache = void 0;
        }
      } else {
        this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);
      }
    }
    /** @hidden */
    static clearChainAndNodeCaches() {
      _Provider.nodeInfoCache = {};
      _Provider.chainInfoCache = {};
    }
    /**
     * @hidden
     */
    static getFetchFn(options) {
      const { retryOptions, timeout, headers } = options;
      return autoRetryFetch(async (...args) => {
        const url = args[0];
        const request = args[1];
        const signal = timeout ? AbortSignal.timeout(timeout) : void 0;
        let fullRequest = {
          ...request,
          signal,
          headers: { ...request?.headers, ...headers }
        };
        if (options.requestMiddleware) {
          fullRequest = await options.requestMiddleware(fullRequest);
        }
        return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);
      }, retryOptions);
    }
    static extractBasicAuth(url) {
      let parsedUrl;
      try {
        parsedUrl = new URL(url);
      } catch (error2) {
        throw new FuelError(FuelError.CODES.INVALID_URL, "Invalid URL provided.", { url }, error2);
      }
      const username = parsedUrl.username;
      const password = parsedUrl.password;
      const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;
      if (!(username && password)) {
        return { url, urlWithoutAuth: url, headers: void 0 };
      }
      return {
        url,
        urlWithoutAuth,
        headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` }
      };
    }
    /**
     * Initialize Provider async stuff
     */
    async init() {
      await this.fetchChainAndNodeInfo();
      return this;
    }
    /**
     * Returns the `chainInfo` for the current network.
     *
     * @returns the chain information configuration.
     */
    async getChain() {
      await this.init();
      return _Provider.chainInfoCache[this.urlWithoutAuth];
    }
    /**
     * Returns the `nodeInfo` for the current network.
     *
     * @returns the node information configuration.
     */
    async getNode() {
      await this.init();
      return _Provider.nodeInfoCache[this.urlWithoutAuth];
    }
    /**
     * Returns some helpful parameters related to gas fees.
     */
    async getGasConfig() {
      const {
        txParameters: { maxGasPerTx },
        predicateParameters: { maxGasPerPredicate },
        feeParameters: { gasPriceFactor, gasPerByte },
        gasCosts
      } = (await this.getChain()).consensusParameters;
      return {
        maxGasPerTx,
        maxGasPerPredicate,
        gasPriceFactor,
        gasPerByte,
        gasCosts
      };
    }
    /**
     * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.
     *
     * @param url - The URL to connect to.
     * @param options - Additional options for the provider.
     */
    async connect(url, options) {
      const { url: rawUrl, urlWithoutAuth, headers } = _Provider.extractBasicAuth(url);
      this.url = rawUrl;
      this.urlWithoutAuth = urlWithoutAuth;
      this.options = options ?? this.options;
      this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };
      this.operations = this.createOperations();
      await this.init();
    }
    /**
     * Return the chain and node information.
     * @param ignoreCache - If true, ignores the cache and re-fetch configs.
     * @returns A promise that resolves to the Chain and NodeInfo.
     */
    async fetchChainAndNodeInfo(ignoreCache = false) {
      let nodeInfo;
      let chain;
      try {
        nodeInfo = _Provider.nodeInfoCache[this.urlWithoutAuth];
        chain = _Provider.chainInfoCache[this.urlWithoutAuth];
        const noCache = !nodeInfo || !chain;
        if (ignoreCache || noCache) {
          throw new Error(`Jumps to the catch block and re-fetch`);
        }
      } catch (_err) {
        const data = await this.operations.getChainAndNodeInfo();
        nodeInfo = {
          maxDepth: bn(data.nodeInfo.maxDepth),
          maxTx: bn(data.nodeInfo.maxTx),
          nodeVersion: data.nodeInfo.nodeVersion,
          utxoValidation: data.nodeInfo.utxoValidation,
          vmBacktrace: data.nodeInfo.vmBacktrace
        };
        _Provider.ensureClientVersionIsSupported(nodeInfo);
        chain = processGqlChain(data.chain);
        _Provider.chainInfoCache[this.urlWithoutAuth] = chain;
        _Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;
        this.consensusParametersTimestamp = Date.now();
      }
      return {
        chain,
        nodeInfo
      };
    }
    /**
     * @hidden
     */
    static ensureClientVersionIsSupported(nodeInfo) {
      const { isMajorSupported, isMinorSupported, supportedVersion } = checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);
      if (!isMajorSupported || !isMinorSupported) {
        console.warn(
          `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion},
which is not supported by the version of the TS SDK that you are using.
Things may not work as expected.
Supported fuel-core version: ${supportedVersion}.`
        );
      }
    }
    /**
     * Create GraphQL client and set operations.
     *
     * @returns The operation SDK object
     * @hidden
     */
    createOperations() {
      const fetchFn = _Provider.getFetchFn(this.options);
      const gqlClient = new GraphQLClient(this.urlWithoutAuth, {
        fetch: (input, requestInit) => fetchFn(input.toString(), requestInit || {}, this.options),
        responseMiddleware: (response) => {
          if ("response" in response) {
            const graphQlResponse = response.response;
            if (Array.isArray(graphQlResponse?.errors)) {
              for (const error2 of graphQlResponse.errors) {
                handleGqlErrorMessage(error2.message, error2);
              }
            }
          }
        }
      });
      const executeQuery = (query, vars) => {
        const opDefinition = query.definitions.find((x) => x.kind === "OperationDefinition");
        const isSubscription = opDefinition?.operation === "subscription";
        if (isSubscription) {
          return FuelGraphqlSubscriber.create({
            url: this.urlWithoutAuth,
            query,
            fetchFn: (url, requestInit) => fetchFn(url, requestInit, this.options),
            variables: vars
          });
        }
        return gqlClient.request(query, vars);
      };
      const customOperations = (requester) => ({
        getBlobs(variables) {
          const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(", ");
          const blobParams = variables.blobIds.map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`).join("\n");
          const updatedVariables = variables.blobIds.reduce(
            (acc, blobId, i) => {
              acc[`blobId${i}`] = blobId;
              return acc;
            },
            {}
          );
          const document = lib_default2`
          query getBlobs(${queryParams}) {
            ${blobParams}
          }
        `;
          return requester(document, updatedVariables);
        }
      });
      return { ...getSdk(executeQuery), ...customOperations(executeQuery) };
    }
    /**
     * Returns the version of the connected node.
     *
     * @returns A promise that resolves to the version string.
     */
    async getVersion() {
      const {
        nodeInfo: { nodeVersion }
      } = await this.operations.getVersion();
      return nodeVersion;
    }
    /**
     * Returns the latest block number.
     *
     * @returns A promise that resolves to the latest block number.
     */
    async getBlockNumber() {
      const {
        chain: {
          latestBlock: { height }
        }
      } = await this.operations.getLatestBlockHeight();
      return bn(height);
    }
    /**
     * Returns the node information for the current provider network.
     *
     * @returns a promise that resolves to the node information.
     */
    async fetchNode() {
      const { nodeInfo } = await this.operations.getNodeInfo();
      const processedNodeInfo = {
        maxDepth: bn(nodeInfo.maxDepth),
        maxTx: bn(nodeInfo.maxTx),
        nodeVersion: nodeInfo.nodeVersion,
        utxoValidation: nodeInfo.utxoValidation,
        vmBacktrace: nodeInfo.vmBacktrace
      };
      _Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;
      return processedNodeInfo;
    }
    /**
     * Returns the chain information for the current provider network.
     *
     * @returns a promise that resolves to the chain information.
     */
    async fetchChain() {
      const { chain } = await this.operations.getChain();
      const processedChain = processGqlChain(chain);
      _Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;
      return processedChain;
    }
    /**
     * Returns the chain ID for the current provider network.
     *
     * @returns A promise that resolves to the chain ID number.
     */
    async getChainId() {
      const {
        consensusParameters: { chainId }
      } = await this.getChain();
      return chainId.toNumber();
    }
    /**
     * Returns the base asset ID for the current provider network.
     *
     * @returns the base asset ID.
     */
    async getBaseAssetId() {
      const all = await this.getChain();
      const {
        consensusParameters: { baseAssetId }
      } = all;
      return baseAssetId;
    }
    /**
     * @hidden
     */
    async validateTransaction(tx) {
      const {
        consensusParameters: {
          txParameters: { maxInputs, maxOutputs }
        }
      } = await this.getChain();
      if (bn(tx.inputs.length).gt(maxInputs)) {
        throw new FuelError(
          ErrorCode.MAX_INPUTS_EXCEEDED,
          `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`
        );
      }
      if (bn(tx.outputs.length).gt(maxOutputs)) {
        throw new FuelError(
          ErrorCode.MAX_OUTPUTS_EXCEEDED,
          `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`
        );
      }
    }
    /**
     * Submits a transaction to the chain to be executed.
     *
     * If the transaction is missing any dependencies,
     * the transaction will be mutated and those dependencies will be added.
     *
     * @param transactionRequestLike - The transaction request object.
     * @param sendTransactionParams - The provider send transaction parameters (optional).
     * @returns A promise that resolves to the transaction response object.
     */
    async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, enableAssetBurn } = {}) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      validateTransactionForAssetBurn(
        await this.getBaseAssetId(),
        transactionRequest,
        enableAssetBurn
      );
      if (estimateTxDependencies) {
        await this.estimateTxDependencies(transactionRequest);
      }
      await this.validateTransaction(transactionRequest);
      const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());
      let abis;
      if (isTransactionTypeScript(transactionRequest)) {
        abis = transactionRequest.abis;
      }
      const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });
      __privateMethod(this, _cacheInputs, cacheInputs_fn).call(this, transactionRequest.inputs, transactionRequest.getTransactionId(await this.getChainId()));
      const chainId = await this.getChainId();
      return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);
    }
    /**
     * Executes a transaction without actually submitting it to the chain.
     *
     * If the transaction is missing any dependencies,
     * the transaction will be mutated and those dependencies will be added.
     *
     * @param transactionRequestLike - The transaction request object.
     * @param sendTransactionParams - The provider call parameters (optional).
     * @returns A promise that resolves to the call result object.
     */
    async dryRun(transactionRequestLike, { utxoValidation, estimateTxDependencies = true } = {}) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      if (estimateTxDependencies) {
        return this.estimateTxDependencies(transactionRequest);
      }
      const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());
      const { dryRun: dryRunStatuses } = await this.operations.dryRun({
        encodedTransactions: encodedTransaction,
        utxoValidation: utxoValidation || false
      });
      const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;
      const receipts = rawReceipts.map(processGqlReceipt);
      return { receipts, dryRunStatus };
    }
    /**
     * Verifies whether enough gas is available to complete transaction.
     *
     * @template T - The type of the transaction request object.
     *
     * @param transactionRequest - The transaction request object.
     * @returns A promise that resolves to the estimated transaction request object.
     */
    async estimatePredicates(transactionRequest) {
      const shouldEstimatePredicates = Boolean(
        transactionRequest.inputs.find(
          (input) => "predicate" in input && input.predicate && !equalBytes(arrayify(input.predicate), arrayify("0x")) && new BN(input.predicateGasUsed).isZero()
        )
      );
      if (!shouldEstimatePredicates) {
        return transactionRequest;
      }
      const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());
      const response = await this.operations.estimatePredicates({
        encodedTransaction
      });
      const {
        estimatePredicates: { inputs }
      } = response;
      if (inputs) {
        inputs.forEach((input, index) => {
          if ("predicateGasUsed" in input && bn(input.predicateGasUsed).gt(0)) {
            transactionRequest.inputs[index].predicateGasUsed = input.predicateGasUsed;
          }
        });
      }
      return transactionRequest;
    }
    /**
     * Will dryRun a transaction and check for missing dependencies.
     *
     * If there are missing variable outputs,
     * `addVariableOutputs` is called on the transaction.
     *
     * @param transactionRequest - The transaction request object.
     * @returns A promise that resolves to the estimate transaction dependencies.
     */
    async estimateTxDependencies(transactionRequest) {
      if (isTransactionTypeCreate(transactionRequest)) {
        return {
          receipts: [],
          outputVariables: 0,
          missingContractIds: []
        };
      }
      let receipts = [];
      const missingContractIds = [];
      let outputVariables = 0;
      let dryRunStatus;
      await this.validateTransaction(transactionRequest);
      for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
        const {
          dryRun: [{ receipts: rawReceipts, status }]
        } = await this.operations.dryRun({
          encodedTransactions: [hexlify(transactionRequest.toTransactionBytes())],
          utxoValidation: false,
          gasPrice: "0"
        });
        receipts = rawReceipts.map(processGqlReceipt);
        dryRunStatus = status;
        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(receipts);
        const hasMissingOutputs = missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;
        if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {
          outputVariables += missingOutputVariables.length;
          transactionRequest.addVariableOutputs(missingOutputVariables.length);
          missingOutputContractIds.forEach(({ contractId }) => {
            transactionRequest.addContractInputAndOutput(Address.fromString(contractId));
            missingContractIds.push(contractId);
          });
          const { maxFee } = await this.estimateTxGasAndFee({
            transactionRequest,
            gasPrice: bn(0)
          });
          transactionRequest.maxFee = maxFee;
        } else {
          break;
        }
      }
      return {
        receipts,
        outputVariables,
        missingContractIds,
        dryRunStatus
      };
    }
    /**
     * Dry runs multiple transactions and checks for missing dependencies in batches.
     *
     * Transactions are dry run in batches. After each dry run, transactions requiring
     * further modifications are identified. The method iteratively updates these transactions
     * and performs subsequent dry runs until all dependencies for each transaction are satisfied.
     *
     * @param transactionRequests - Array of transaction request objects.
     * @returns A promise that resolves to an array of results for each transaction.
     */
    async estimateMultipleTxDependencies(transactionRequests) {
      const results = transactionRequests.map(() => ({
        receipts: [],
        outputVariables: 0,
        missingContractIds: [],
        dryRunStatus: void 0
      }));
      const allRequests = clone_default(transactionRequests);
      const serializedTransactionsMap = /* @__PURE__ */ new Map();
      allRequests.forEach((req, index) => {
        if (isTransactionTypeScript(req)) {
          serializedTransactionsMap.set(index, hexlify(req.toTransactionBytes()));
        }
      });
      let transactionsToProcess = Array.from(serializedTransactionsMap.keys());
      let attempt = 0;
      while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {
        const encodedTransactions = transactionsToProcess.map(
          (index) => serializedTransactionsMap.get(index)
        );
        const dryRunResults = await this.operations.dryRun({
          encodedTransactions,
          utxoValidation: false
        });
        const nextRoundTransactions = [];
        for (let i = 0; i < dryRunResults.dryRun.length; i++) {
          const requestIdx = transactionsToProcess[i];
          const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];
          const result = results[requestIdx];
          result.receipts = rawReceipts.map(processGqlReceipt);
          result.dryRunStatus = status;
          const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(
            result.receipts
          );
          const hasMissingOutputs = missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;
          const request = allRequests[requestIdx];
          if (hasMissingOutputs && isTransactionTypeScript(request)) {
            result.outputVariables += missingOutputVariables.length;
            request.addVariableOutputs(missingOutputVariables.length);
            missingOutputContractIds.forEach(({ contractId }) => {
              request.addContractInputAndOutput(Address.fromString(contractId));
              result.missingContractIds.push(contractId);
            });
            const { maxFee } = await this.estimateTxGasAndFee({
              transactionRequest: request
            });
            request.maxFee = maxFee;
            serializedTransactionsMap.set(requestIdx, hexlify(request.toTransactionBytes()));
            nextRoundTransactions.push(requestIdx);
          }
        }
        transactionsToProcess = nextRoundTransactions;
        attempt += 1;
      }
      return results;
    }
    /**
     * Dry runs multiple transactions.
     *
     * @param transactionRequests - Array of transaction request objects.
     * @param sendTransactionParams - The provider call parameters (optional).
     *
     * @returns A promise that resolves to an array of results for each transaction call.
     */
    async dryRunMultipleTransactions(transactionRequests, { utxoValidation, estimateTxDependencies = true } = {}) {
      if (estimateTxDependencies) {
        return this.estimateMultipleTxDependencies(transactionRequests);
      }
      const encodedTransactions = transactionRequests.map((tx) => hexlify(tx.toTransactionBytes()));
      const { dryRun: dryRunStatuses } = await this.operations.dryRun({
        encodedTransactions,
        utxoValidation: utxoValidation || false
      });
      const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {
        const receipts = rawReceipts.map(processGqlReceipt);
        return { receipts, dryRunStatus: status };
      });
      return results;
    }
    async autoRefetchConfigs() {
      const now = Date.now();
      const diff = now - (this.consensusParametersTimestamp ?? 0);
      if (diff < 6e4) {
        return;
      }
      if (!_Provider.chainInfoCache?.[this.urlWithoutAuth]) {
        await this.fetchChainAndNodeInfo(true);
        return;
      }
      const chainInfo = _Provider.chainInfoCache[this.urlWithoutAuth];
      const {
        consensusParameters: { version: previous }
      } = chainInfo;
      const {
        chain: {
          latestBlock: {
            header: { consensusParametersVersion: current }
          }
        }
      } = await this.operations.getConsensusParametersVersion();
      if (previous !== current) {
        await this.fetchChainAndNodeInfo(true);
      }
    }
    /**
     * Estimates the transaction gas and fee based on the provided transaction request.
     * @param transactionRequest - The transaction request object.
     * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.
     */
    async estimateTxGasAndFee(params) {
      const { transactionRequest } = params;
      let { gasPrice } = params;
      await this.autoRefetchConfigs();
      const chainInfo = await this.getChain();
      const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();
      const minGas = transactionRequest.calculateMinGas(chainInfo);
      if (!isDefined(gasPrice)) {
        gasPrice = await this.estimateGasPrice(10);
      }
      const minFee = calculateGasFee({
        gasPrice: bn(gasPrice),
        gas: minGas,
        priceFactor: gasPriceFactor,
        tip: transactionRequest.tip
      }).add(1);
      let gasLimit = bn(0);
      if (isTransactionTypeScript(transactionRequest)) {
        gasLimit = transactionRequest.gasLimit;
        if (transactionRequest.gasLimit.eq(0)) {
          transactionRequest.gasLimit = minGas;
          transactionRequest.gasLimit = maxGasPerTx.sub(
            transactionRequest.calculateMaxGas(chainInfo, minGas)
          );
          gasLimit = transactionRequest.gasLimit;
        }
      }
      const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);
      const maxFee = calculateGasFee({
        gasPrice: bn(gasPrice),
        gas: maxGas,
        priceFactor: gasPriceFactor,
        tip: transactionRequest.tip
      }).add(1);
      return {
        minGas,
        minFee,
        maxGas,
        maxFee,
        gasPrice,
        gasLimit
      };
    }
    /**
     * Executes a signed transaction without applying the states changes
     * on the chain.
     *
     * If the transaction is missing any dependencies,
     * the transaction will be mutated and those dependencies will be added
     *
     * @param transactionRequestLike - The transaction request object.
     * @param estimateTxParams - The estimate transaction params (optional).
     * @returns A promise that resolves to the call result object.
     */
    async simulate(transactionRequestLike, { estimateTxDependencies = true } = {}) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      if (estimateTxDependencies) {
        return this.estimateTxDependencies(transactionRequest);
      }
      const encodedTransactions = [hexlify(transactionRequest.toTransactionBytes())];
      const { dryRun: dryRunStatuses } = await this.operations.dryRun({
        encodedTransactions,
        utxoValidation: true
      });
      const callResult = dryRunStatuses.map((dryRunStatus) => {
        const { id, receipts, status } = dryRunStatus;
        const processedReceipts = receipts.map(processGqlReceipt);
        return { id, receipts: processedReceipts, status };
      });
      return { receipts: callResult[0].receipts };
    }
    /**
     * @hidden
     *
     * Returns a transaction cost to enable user
     * to set gasLimit and also reserve balance amounts
     * on the transaction.
     *
     * @param transactionRequestLike - The transaction request object.
     * @param transactionCostParams - The transaction cost parameters (optional).
     *
     * @returns A promise that resolves to the transaction cost object.
     */
    async getTransactionCost(transactionRequestLike, { signatureCallback } = {}) {
      const txRequestClone = clone_default(transactionRequestify(transactionRequestLike));
      const updateMaxFee = txRequestClone.maxFee.eq(0);
      const isScriptTransaction = isTransactionTypeScript(txRequestClone);
      if (isScriptTransaction) {
        txRequestClone.gasLimit = bn(0);
      }
      const signedRequest = clone_default(txRequestClone);
      let addedSignatures = 0;
      if (signatureCallback && isTransactionTypeScript(signedRequest)) {
        const lengthBefore = signedRequest.witnesses.length;
        await signatureCallback(signedRequest);
        addedSignatures = signedRequest.witnesses.length - lengthBefore;
      }
      await this.estimatePredicates(signedRequest);
      txRequestClone.updatePredicateGasUsed(signedRequest.inputs);
      let { maxFee, maxGas, minFee, minGas, gasPrice, gasLimit } = await this.estimateTxGasAndFee({
        transactionRequest: signedRequest
      });
      let receipts = [];
      let dryRunStatus;
      let missingContractIds = [];
      let outputVariables = 0;
      let gasUsed = bn(0);
      txRequestClone.maxFee = maxFee;
      if (isScriptTransaction) {
        txRequestClone.gasLimit = gasLimit;
        if (signatureCallback) {
          await signatureCallback(txRequestClone);
        }
        ({ receipts, missingContractIds, outputVariables, dryRunStatus } = await this.estimateTxDependencies(txRequestClone));
        if (dryRunStatus && "reason" in dryRunStatus) {
          throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);
        }
        const { maxGasPerTx } = await this.getGasConfig();
        const pristineGasUsed = getGasUsedFromReceipts(receipts);
        gasUsed = bn(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));
        txRequestClone.gasLimit = gasUsed;
        ({ maxFee, maxGas, minFee, minGas, gasPrice } = await this.estimateTxGasAndFee({
          transactionRequest: txRequestClone,
          gasPrice
        }));
      }
      return {
        receipts,
        gasUsed,
        gasPrice,
        minGas,
        maxGas,
        minFee,
        maxFee,
        outputVariables,
        missingContractIds,
        addedSignatures,
        estimatedPredicates: txRequestClone.inputs,
        dryRunStatus,
        updateMaxFee
      };
    }
    /**
     * Returns coins for the given owner.
     *
     * @param owner - The address to get coins for.
     * @param assetId - The asset ID of coins to get (optional).
     * @param paginationArgs - Pagination arguments (optional).
     *
     * @returns A promise that resolves to the coins.
     */
    async getCoins(owner, assetId, paginationArgs) {
      const ownerAddress = Address.fromAddressOrString(owner);
      const {
        coins: { edges, pageInfo }
      } = await this.operations.getCoins({
        ...validatePaginationArgs({
          paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,
          inputArgs: paginationArgs
        }),
        filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify(assetId) }
      });
      const coins = edges.map(({ node }) => ({
        id: node.utxoId,
        assetId: node.assetId,
        amount: bn(node.amount),
        owner: ownerAddress,
        blockCreated: bn(node.blockCreated),
        txCreatedIdx: bn(node.txCreatedIdx)
      }));
      return {
        coins,
        pageInfo
      };
    }
    /**
     * Returns resources for the given owner satisfying the spend query.
     *
     * @param owner - The address to get resources for.
     * @param quantities - The coin quantities to get.
     * @param excludedIds - IDs of excluded resources from the selection (optional).
     * @returns A promise that resolves to the resources.
     */
    async getResourcesToSpend(owner, quantities, excludedIds) {
      const ownerAddress = Address.fromAddressOrString(owner);
      const excludeInput = {
        messages: excludedIds?.messages?.map((nonce) => hexlify(nonce)) || [],
        utxos: excludedIds?.utxos?.map((id) => hexlify(id)) || []
      };
      if (this.cache) {
        const cached = this.cache.getActiveData();
        excludeInput.messages.push(...cached.messages);
        excludeInput.utxos.push(...cached.utxos);
      }
      const coinsQuery = {
        owner: ownerAddress.toB256(),
        queryPerAsset: quantities.map(coinQuantityfy).map(({ assetId, amount, max: maxPerAsset }) => ({
          assetId: hexlify(assetId),
          amount: amount.toString(10),
          max: maxPerAsset ? maxPerAsset.toString(10) : void 0
        })),
        excludedIds: excludeInput
      };
      const result = await this.operations.getCoinsToSpend(coinsQuery);
      const coins = result.coinsToSpend.flat().map((coin) => {
        switch (coin.type) {
          case "MessageCoin":
            return {
              amount: bn(coin.amount),
              assetId: coin.assetId,
              daHeight: bn(coin.daHeight),
              sender: Address.fromAddressOrString(coin.sender),
              recipient: Address.fromAddressOrString(coin.recipient),
              nonce: coin.nonce
            };
          case "Coin":
            return {
              id: coin.utxoId,
              amount: bn(coin.amount),
              assetId: coin.assetId,
              owner: ownerAddress,
              blockCreated: bn(coin.blockCreated),
              txCreatedIdx: bn(coin.txCreatedIdx)
            };
          default:
            return null;
        }
      }).filter((v) => !!v);
      return coins;
    }
    /**
     * Returns an array of blobIds that exist on chain, for a given array of blobIds.
     *
     * @param blobIds - blobIds to check.
     * @returns - A promise that resolves to an array of blobIds that exist on chain.
     */
    async getBlobs(blobIds) {
      const res = await this.operations.getBlobs({ blobIds });
      const blobs = [];
      Object.keys(res).forEach((key) => {
        const val = res[key];
        blobs.push(val?.id ?? null);
      });
      return blobs.filter((v) => v);
    }
    /**
     * Returns block matching the given ID or height.
     *
     * @param idOrHeight - ID or height of the block.
     * @returns A promise that resolves to the block or null.
     */
    async getBlock(idOrHeight) {
      let block2;
      if (idOrHeight === "latest") {
        const {
          chain: { latestBlock }
        } = await this.operations.getLatestBlock();
        block2 = latestBlock;
      } else {
        const isblockId = typeof idOrHeight === "string" && idOrHeight.length === 66;
        const variables = isblockId ? { blockId: idOrHeight } : { height: bn(idOrHeight).toString(10) };
        const response = await this.operations.getBlock(variables);
        block2 = response.block;
      }
      if (!block2) {
        return null;
      }
      const { header, height, id, transactions } = block2;
      return {
        id,
        height: bn(height),
        time: header.time,
        header: {
          applicationHash: header.applicationHash,
          daHeight: bn(header.daHeight),
          eventInboxRoot: header.eventInboxRoot,
          messageOutboxRoot: header.messageOutboxRoot,
          prevRoot: header.prevRoot,
          stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,
          transactionsCount: header.transactionsCount,
          transactionsRoot: header.transactionsRoot
        },
        transactionIds: transactions.map((tx) => tx.id)
      };
    }
    /**
     * Returns all the blocks matching the given parameters.
     *
     * @param params - The parameters to query blocks.
     * @returns A promise that resolves to the blocks.
     */
    async getBlocks(params) {
      const {
        blocks: { edges, pageInfo }
      } = await this.operations.getBlocks({
        ...validatePaginationArgs({
          paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,
          inputArgs: params
        })
      });
      const blocks = edges.map(({ node: block2 }) => ({
        id: block2.id,
        height: bn(block2.height),
        time: block2.header.time,
        header: {
          applicationHash: block2.header.applicationHash,
          daHeight: bn(block2.header.daHeight),
          eventInboxRoot: block2.header.eventInboxRoot,
          messageOutboxRoot: block2.header.messageOutboxRoot,
          prevRoot: block2.header.prevRoot,
          stateTransitionBytecodeVersion: block2.header.stateTransitionBytecodeVersion,
          transactionsCount: block2.header.transactionsCount,
          transactionsRoot: block2.header.transactionsRoot
        },
        transactionIds: block2.transactions.map((tx) => tx.id)
      }));
      return { blocks, pageInfo };
    }
    /**
     * Returns block matching the given ID or type, including transaction data.
     *
     * @param idOrHeight - ID or height of the block.
     * @returns A promise that resolves to the block.
     */
    async getBlockWithTransactions(idOrHeight) {
      let variables;
      if (typeof idOrHeight === "number") {
        variables = { blockHeight: bn(idOrHeight).toString(10) };
      } else if (idOrHeight === "latest") {
        variables = { blockHeight: (await this.getBlockNumber()).toString() };
      } else {
        variables = { blockId: idOrHeight };
      }
      const { block: block2 } = await this.operations.getBlockWithTransactions(variables);
      if (!block2) {
        return null;
      }
      return {
        id: block2.id,
        height: bn(block2.height, 10),
        time: block2.header.time,
        header: {
          applicationHash: block2.header.applicationHash,
          daHeight: bn(block2.header.daHeight),
          eventInboxRoot: block2.header.eventInboxRoot,
          messageOutboxRoot: block2.header.messageOutboxRoot,
          prevRoot: block2.header.prevRoot,
          stateTransitionBytecodeVersion: block2.header.stateTransitionBytecodeVersion,
          transactionsCount: block2.header.transactionsCount,
          transactionsRoot: block2.header.transactionsRoot
        },
        transactionIds: block2.transactions.map((tx) => tx.id),
        transactions: block2.transactions.map(
          (tx) => new TransactionCoder().decode(arrayify(tx.rawPayload), 0)?.[0]
        )
      };
    }
    /**
     * Get transaction with the given ID.
     *
     * @param transactionId - ID of the transaction.
     * @returns A promise that resolves to the transaction.
     */
    async getTransaction(transactionId) {
      const { transaction } = await this.operations.getTransaction({ transactionId });
      if (!transaction) {
        return null;
      }
      try {
        return new TransactionCoder().decode(
          arrayify(transaction.rawPayload),
          0
        )?.[0];
      } catch (error2) {
        if (error2 instanceof FuelError && error2.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {
          console.warn("Unsupported transaction type encountered");
          return null;
        }
        throw error2;
      }
    }
    /**
     * Retrieves transactions based on the provided pagination arguments.
     * @param paginationArgs - The pagination arguments for retrieving transactions.
     * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.
     */
    async getTransactions(paginationArgs) {
      const {
        transactions: { edges, pageInfo }
      } = await this.operations.getTransactions({
        ...validatePaginationArgs({
          inputArgs: paginationArgs,
          paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT
        })
      });
      const coder = new TransactionCoder();
      const transactions = edges.map(({ node: { rawPayload } }) => {
        try {
          return coder.decode(arrayify(rawPayload), 0)[0];
        } catch (error2) {
          if (error2 instanceof FuelError && error2.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {
            console.warn("Unsupported transaction type encountered");
            return null;
          }
          throw error2;
        }
      }).filter((tx) => tx !== null);
      return { transactions, pageInfo };
    }
    /**
     * Get deployed contract with the given ID.
     *
     * @param contractId - ID of the contract.
     * @returns A promise that resolves to the contract.
     */
    async getContract(contractId) {
      const { contract } = await this.operations.getContract({ contractId });
      if (!contract) {
        return null;
      }
      return contract;
    }
    /**
     * Returns the balance for the given contract for the given asset ID.
     *
     * @param contractId - The contract ID to get the balance for.
     * @param assetId - The asset ID of coins to get.
     * @returns A promise that resolves to the balance.
     */
    async getContractBalance(contractId, assetId) {
      const { contractBalance } = await this.operations.getContractBalance({
        contract: Address.fromAddressOrString(contractId).toB256(),
        asset: hexlify(assetId)
      });
      return bn(contractBalance.amount, 10);
    }
    /**
     * Returns the balance for the given owner for the given asset ID.
     *
     * @param owner - The address to get coins for.
     * @param assetId - The asset ID of coins to get.
     * @returns A promise that resolves to the balance.
     */
    async getBalance(owner, assetId) {
      const { balance } = await this.operations.getBalance({
        owner: Address.fromAddressOrString(owner).toB256(),
        assetId: hexlify(assetId)
      });
      return bn(balance.amount, 10);
    }
    /**
     * Returns balances for the given owner.
     *
     * @param owner - The address to get coins for.
     * @param paginationArgs - Pagination arguments (optional).
     * @returns A promise that resolves to the balances.
     */
    async getBalances(owner) {
      const {
        balances: { edges }
      } = await this.operations.getBalances({
        /**
         * The query parameters for this method were designed to support pagination,
         * but the current Fuel-Core implementation does not support pagination yet.
         */
        first: 1e4,
        filter: { owner: Address.fromAddressOrString(owner).toB256() }
      });
      const balances = edges.map(({ node }) => ({
        assetId: node.assetId,
        amount: bn(node.amount)
      }));
      return { balances };
    }
    /**
     * Returns message for the given address.
     *
     * @param address - The address to get message from.
     * @param paginationArgs - Pagination arguments (optional).
     * @returns A promise that resolves to the messages.
     */
    async getMessages(address, paginationArgs) {
      const {
        messages: { edges, pageInfo }
      } = await this.operations.getMessages({
        ...validatePaginationArgs({
          inputArgs: paginationArgs,
          paginationLimit: RESOURCES_PAGE_SIZE_LIMIT
        }),
        owner: Address.fromAddressOrString(address).toB256()
      });
      const messages = edges.map(({ node }) => ({
        messageId: InputMessageCoder.getMessageId({
          sender: node.sender,
          recipient: node.recipient,
          nonce: node.nonce,
          amount: bn(node.amount),
          data: node.data
        }),
        sender: Address.fromAddressOrString(node.sender),
        recipient: Address.fromAddressOrString(node.recipient),
        nonce: node.nonce,
        amount: bn(node.amount),
        data: InputMessageCoder.decodeData(node.data),
        daHeight: bn(node.daHeight)
      }));
      return {
        messages,
        pageInfo
      };
    }
    /**
     * Returns Message Proof for given transaction id and the message id from MessageOut receipt.
     *
     * @param transactionId - The transaction to get message from.
     * @param messageId - The message id from MessageOut receipt.
     * @param commitBlockId - The commit block id (optional).
     * @param commitBlockHeight - The commit block height (optional).
     * @returns A promise that resolves to the message proof.
     */
    async getMessageProof(transactionId, nonce, commitBlockId, commitBlockHeight) {
      let inputObject = {
        transactionId,
        nonce
      };
      if (commitBlockId && commitBlockHeight) {
        throw new FuelError(
          ErrorCode.INVALID_INPUT_PARAMETERS,
          "commitBlockId and commitBlockHeight cannot be used together"
        );
      }
      if (commitBlockId) {
        inputObject = {
          ...inputObject,
          commitBlockId
        };
      }
      if (commitBlockHeight) {
        inputObject = {
          ...inputObject,
          // Conver BN into a number string required on the query
          // This should problably be fixed on the fuel client side
          commitBlockHeight: commitBlockHeight.toNumber().toString()
        };
      }
      const result = await this.operations.getMessageProof(inputObject);
      if (!result.messageProof) {
        return null;
      }
      const {
        messageProof,
        messageBlockHeader,
        commitBlockHeader,
        blockProof,
        sender,
        recipient,
        amount,
        data
      } = result.messageProof;
      return {
        messageProof: {
          proofIndex: bn(messageProof.proofIndex),
          proofSet: messageProof.proofSet
        },
        blockProof: {
          proofIndex: bn(blockProof.proofIndex),
          proofSet: blockProof.proofSet
        },
        messageBlockHeader: {
          id: messageBlockHeader.id,
          daHeight: bn(messageBlockHeader.daHeight),
          transactionsCount: Number(messageBlockHeader.transactionsCount),
          transactionsRoot: messageBlockHeader.transactionsRoot,
          height: bn(messageBlockHeader.height),
          prevRoot: messageBlockHeader.prevRoot,
          time: messageBlockHeader.time,
          applicationHash: messageBlockHeader.applicationHash,
          messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),
          messageOutboxRoot: messageBlockHeader.messageOutboxRoot,
          consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),
          eventInboxRoot: messageBlockHeader.eventInboxRoot,
          stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion)
        },
        commitBlockHeader: {
          id: commitBlockHeader.id,
          daHeight: bn(commitBlockHeader.daHeight),
          transactionsCount: Number(commitBlockHeader.transactionsCount),
          transactionsRoot: commitBlockHeader.transactionsRoot,
          height: bn(commitBlockHeader.height),
          prevRoot: commitBlockHeader.prevRoot,
          time: commitBlockHeader.time,
          applicationHash: commitBlockHeader.applicationHash,
          messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),
          messageOutboxRoot: commitBlockHeader.messageOutboxRoot,
          consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),
          eventInboxRoot: commitBlockHeader.eventInboxRoot,
          stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion)
        },
        sender: Address.fromAddressOrString(sender),
        recipient: Address.fromAddressOrString(recipient),
        nonce,
        amount: bn(amount),
        data
      };
    }
    /**
     * Get the latest gas price from the node.
     *
     * @returns A promise that resolves to the latest gas price.
     */
    async getLatestGasPrice() {
      const { latestGasPrice } = await this.operations.getLatestGasPrice();
      return bn(latestGasPrice.gasPrice);
    }
    /**
     * Returns the estimate gas price for the given block horizon.
     *
     * @param blockHorizon - The block horizon to estimate gas price for.
     * @returns A promise that resolves to the estimated gas price.
     */
    async estimateGasPrice(blockHorizon) {
      const { estimateGasPrice } = await this.operations.estimateGasPrice({
        blockHorizon: String(blockHorizon)
      });
      return bn(estimateGasPrice.gasPrice);
    }
    /**
     * Returns Message Proof for given transaction id and the message id from MessageOut receipt.
     *
     * @param nonce - The nonce of the message to get status from.
     * @returns A promise that resolves to the message status
     */
    async getMessageStatus(nonce) {
      const result = await this.operations.getMessageStatus({ nonce });
      return result.messageStatus;
    }
    /**
     * Lets you produce blocks with custom timestamps and the block number of the last block produced.
     *
     * @param amount - The amount of blocks to produce.
     * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).
     * @returns A promise that resolves to the block number of the last produced block.
     */
    async produceBlocks(amount, startTime) {
      const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({
        blocksToProduce: bn(amount).toString(10),
        startTimestamp: startTime ? DateTime.fromUnixMilliseconds(startTime).toTai64() : void 0
      });
      return bn(latestBlockHeight);
    }
    /**
     * Check if the given ID is an account.
     *
     * @param id - The ID to check.
     * @returns A promise that resolves to the result of the check.
     */
    async isUserAccount(id) {
      const { contract, blob, transaction } = await this.operations.isUserAccount({
        blobId: id,
        contractId: id,
        transactionId: id
      });
      if (contract || blob || transaction) {
        return false;
      }
      return true;
    }
    async getAddressType(id) {
      const { contract, blob, transaction } = await this.operations.isUserAccount({
        blobId: id,
        contractId: id,
        transactionId: id
      });
      if (contract) {
        return "Contract";
      }
      if (blob) {
        return "Blob";
      }
      if (transaction) {
        return "Transaction";
      }
      return "Account";
    }
    /**
     * Get the transaction response for the given transaction ID.
     *
     * @param transactionId - The transaction ID to get the response for.
     * @returns A promise that resolves to the transaction response.
     */
    async getTransactionResponse(transactionId) {
      const chainId = await this.getChainId();
      return new TransactionResponse(transactionId, this, chainId);
    }
    /**
     * Returns Message for given nonce.
     *
     * @param nonce - The nonce of the message to retrieve.
     * @returns A promise that resolves to the Message object or null.
     */
    async getMessageByNonce(nonce) {
      const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });
      if (!rawMessage) {
        return null;
      }
      const message = {
        messageId: InputMessageCoder.getMessageId({
          sender: rawMessage.sender,
          recipient: rawMessage.recipient,
          nonce,
          amount: bn(rawMessage.amount),
          data: rawMessage.data
        }),
        sender: Address.fromAddressOrString(rawMessage.sender),
        recipient: Address.fromAddressOrString(rawMessage.recipient),
        nonce,
        amount: bn(rawMessage.amount),
        data: InputMessageCoder.decodeData(rawMessage.data),
        daHeight: bn(rawMessage.daHeight)
      };
      return message;
    }
    /**
     * Get the relayed transaction for the given transaction ID.
     *
     * @param relayedTransactionId - The relayed transaction ID to get the response for.
     * @returns A promise that resolves to the relayed transaction.
     */
    async getRelayedTransactionStatus(relayedTransactionId) {
      const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({
        relayedTransactionId
      });
      if (!relayedTransactionStatus) {
        return null;
      }
      return relayedTransactionStatus;
    }
    /**
     * @hidden
     */
    extractDryRunError(transactionRequest, receipts, dryRunStatus) {
      const status = dryRunStatus;
      let logs = [];
      if (transactionRequest.abis) {
        logs = getDecodedLogs(
          receipts,
          transactionRequest.abis.main,
          transactionRequest.abis.otherContractsAbis
        );
      }
      return extractTxError({
        logs,
        receipts,
        statusReason: status.reason
      });
    }
  };
  var Provider = _Provider;
  _cacheInputs = /* @__PURE__ */ new WeakSet();
  cacheInputs_fn = function(inputs, transactionId) {
    if (!this.cache) {
      return;
    }
    const inputsToCache = inputs.reduce(
      (acc, input) => {
        if (input.type === InputType.Coin) {
          acc.utxos.push(input.id);
        } else if (input.type === InputType.Message) {
          acc.messages.push(input.nonce);
        }
        return acc;
      },
      { utxos: [], messages: [] }
    );
    this.cache.set(transactionId, inputsToCache);
  };
  __publicField4(Provider, "chainInfoCache", {});
  __publicField4(Provider, "nodeInfoCache", {});
  var CHAIN_IDS = {
    eth: {
      mainnet: 1,
      sepolia: 11155111,
      foundry: 31337
    },
    fuel: {
      devnet: 0,
      testnet: 0,
      mainnet: 9889
    }
  };
  var DELIMITER_PATH = "/";
  var trimRegex = /^\/|\/$/g;
  var trimPath = (path22 = "") => path22.replace(trimRegex, "");
  function urlJoin(baseUrl, ...paths) {
    const hasBaseUrl = baseUrl !== null && baseUrl !== void 0;
    const rootPath = baseUrl?.[0] === "/" && baseUrl.length > 1;
    const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);
    if (rootPath && hasBaseUrl) {
      allPaths.unshift("");
    }
    return allPaths.join(DELIMITER_PATH);
  }
  function resolveIconPaths(assets2, basePath = "./") {
    return assets2.map((asset) => ({
      ...asset,
      icon: urlJoin(basePath, asset.icon)
    }));
  }
  var fuelAssetsBaseUrl = "https://cdn.fuel.network/assets/";
  var rawAssets = [
    {
      name: "Ethereum",
      symbol: "ETH",
      icon: "eth.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.sepolia,
          decimals: 18
        },
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.foundry,
          decimals: 18
        },
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.devnet,
          decimals: 9,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.testnet,
          decimals: 9,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          decimals: 9,
          assetId: "0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07"
        }
      ]
    },
    {
      name: "WETH",
      symbol: "WETH",
      icon: "weth.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3",
          decimals: 9
        }
      ]
    },
    {
      name: "weETH",
      symbol: "weETH",
      icon: "weETH.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab",
          decimals: 9
        }
      ]
    },
    {
      name: "rsETH",
      symbol: "rsETH",
      icon: "rsETH.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849",
          decimals: 9
        }
      ]
    },
    {
      name: "rETH",
      symbol: "rETH",
      icon: "reth.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xae78736cd615f374d3085123a210448e74fc6393",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16",
          decimals: 9
        }
      ]
    },
    {
      name: "wbETH",
      symbol: "wbETH",
      icon: "wbeth.png",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xa2E3356610840701BDf5611a53974510Ae27E2e1",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe",
          decimals: 9
        }
      ]
    },
    {
      name: "rstETH",
      symbol: "rstETH",
      icon: "rstETH.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x7a4EffD87C2f3C55CA251080b1343b605f327E3a",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a",
          decimals: 9
        }
      ]
    },
    {
      name: "amphrETH",
      symbol: "amphrETH",
      icon: "amphrETH.png",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x5fD13359Ba15A84B76f7F87568309040176167cd",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36",
          decimals: 9
        }
      ]
    },
    {
      name: "Manta mBTC",
      symbol: "Manta mBTC",
      icon: "manta-mbtc.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x4041381e947CFD3D483d67a25C6aa9Dc924250c5",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b",
          decimals: 9
        }
      ]
    },
    {
      name: "Manta mETH",
      symbol: "Manta mETH",
      icon: "manta-meth.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x8CdF550C04Bc9B9F10938368349C9c8051A772b6",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4",
          decimals: 9
        }
      ]
    },
    {
      name: "Manta mUSD",
      symbol: "Manta mUSD",
      icon: "manta-musd.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x3f24E1d7a973867fC2A03fE199E5502514E0e11E",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4",
          decimals: 9
        }
      ]
    },
    {
      name: "pumpBTC",
      symbol: "pumpBTC",
      icon: "pumpbtc.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xf469fbd2abcd6b9de8e169d128226c0fc90a012e",
          decimals: 8
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f",
          decimals: 8
        }
      ]
    },
    {
      name: "FBTC",
      symbol: "FBTC",
      icon: "fbtc.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xc96de26018a54d51c097160568752c4e3bd6c364",
          decimals: 8
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a",
          decimals: 8
        }
      ]
    },
    {
      name: "SolvBTC",
      symbol: "SolvBTC",
      icon: "solvBTC.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x7a56e1c57c7475ccf742a1832b028f0456652f97",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f",
          decimals: 9
        }
      ]
    },
    {
      name: "SolvBTC.BBN",
      symbol: "SolvBTC.BBN",
      icon: "SolvBTC.BBN.png",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xd9d920aa40f578ab794426f5c90f6c731d159def",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f",
          decimals: 9
        }
      ]
    },
    {
      name: "Mantle mETH",
      symbol: "Mantle mETH",
      icon: "mantle-meth.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b",
          decimals: 9
        }
      ]
    },
    {
      name: "sDAI",
      symbol: "sDAI",
      icon: "sdai.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x83f20f44975d03b1b09e64809b757c47f942beea",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958",
          decimals: 9
        }
      ]
    },
    {
      name: "USDT",
      symbol: "USDT",
      icon: "usdt.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
          decimals: 6
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e",
          decimals: 6
        }
      ]
    },
    {
      name: "USDC",
      symbol: "USDC",
      icon: "usdc.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
          decimals: 6
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b",
          decimals: 6
        }
      ]
    },
    {
      name: "USDe",
      symbol: "USDe",
      icon: "USDe.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x4c9edd5852cd905f086c759e8383e09bff1e68b3",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651",
          decimals: 9
        }
      ]
    },
    {
      name: "sUSDe",
      symbol: "sUSDe",
      icon: "sUSDe.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x9d39a5de30e57443bff2a8307a4256c8797a3497",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc",
          decimals: 9
        }
      ]
    },
    {
      name: "rsUSDe",
      symbol: "rsUSDe",
      icon: "rsUSDe.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9",
          decimals: 9
        }
      ]
    },
    {
      name: "wstETH",
      symbol: "wstETH",
      icon: "wsteth.svg",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b",
          decimals: 9
        }
      ]
    },
    {
      name: "ezETH",
      symbol: "ezETH",
      icon: "ezeth.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xbf5495Efe5DB9ce00f80364C8B423567e58d2110",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0",
          decimals: 9
        }
      ]
    },
    {
      name: "pzETH",
      symbol: "pzETH",
      icon: "pzETH.webp",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68",
          decimals: 9
        }
      ]
    },
    {
      name: "Re7LRT",
      symbol: "Re7LRT",
      icon: "Re7LRT.png",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995",
          decimals: 9
        }
      ]
    },
    {
      name: "steakLRT",
      symbol: "steakLRT",
      icon: "steakLRT.png",
      networks: [
        {
          type: "ethereum",
          chainId: CHAIN_IDS.eth.mainnet,
          address: "0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc",
          decimals: 18
        },
        {
          type: "fuel",
          chainId: CHAIN_IDS.fuel.mainnet,
          contractId: "0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8",
          assetId: "0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30",
          decimals: 9
        }
      ]
    }
  ];
  var assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);
  var _TestAssetId = class {
    constructor(value) {
      this.value = value;
    }
    static random(count = 1) {
      const assetIds = [];
      for (let i = 0; i < count; i++) {
        assetIds.push(new _TestAssetId(hexlify(randomBytes22(32))));
      }
      return assetIds;
    }
  };
  var TestAssetId = _TestAssetId;
  __publicField4(TestAssetId, "A", new _TestAssetId(
    "0x0101010101010101010101010101010101010101010101010101010101010101"
  ));
  __publicField4(TestAssetId, "B", new _TestAssetId(
    "0x0202020202020202020202020202020202020202020202020202020202020202"
  ));
  var mergeQuantities = (...coinQuantities) => {
    const resultMap = {};
    function addToMap({ amount, assetId }) {
      if (resultMap[assetId]) {
        resultMap[assetId] = resultMap[assetId].add(amount);
      } else {
        resultMap[assetId] = amount;
      }
    }
    coinQuantities.forEach((arr) => arr.forEach(addToMap));
    return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));
  };
  var AbstractAccount = class {
  };
  var formatTransferToContractScriptData = (transferParams) => {
    const numberCoder = new BigNumberCoder("u64");
    return transferParams.reduce((acc, transferParam) => {
      const { assetId, amount, contractId } = transferParam;
      const encoded = numberCoder.encode(amount);
      const scriptData = concat([
        Address.fromAddressOrString(contractId).toBytes(),
        encoded,
        arrayify(assetId)
      ]);
      return concat([acc, scriptData]);
    }, new Uint8Array());
  };
  var assembleTransferToContractScript = async (transferParams) => {
    const scriptData = formatTransferToContractScriptData(transferParams);
    await asm.initWasm();
    let script = new Uint8Array();
    transferParams.forEach((_, i) => {
      const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;
      script = concat([
        script,
        // Load ScriptData into register 0x10.
        asm.gtf(16, 0, asm.GTFArgs.ScriptData).to_bytes(),
        // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.
        asm.addi(17, 16, offset).to_bytes(),
        // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.
        asm.addi(18, 17, CONTRACT_ID_LEN).to_bytes(),
        // Load word to the amount at 0x12 into register 0x13.
        asm.lw(19, 18, 0).to_bytes(),
        // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.
        asm.addi(20, 18, WORD_SIZE).to_bytes(),
        // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.
        asm.tr(17, 19, 20).to_bytes()
      ]);
    });
    script = concat([script, asm.ret(1).to_bytes()]);
    return { script, scriptData };
  };
  var MAX_FUNDING_ATTEMPTS = 5;
  var Account = class extends AbstractAccount {
    /**
     * The address associated with the account.
     */
    address;
    /**
     * The provider used to interact with the network.
     */
    _provider;
    /**
     * The connector for use with external wallets
     */
    _connector;
    /**
     * Creates a new Account instance.
     *
     * @param address - The address of the account.
     * @param provider - A Provider instance  (optional).
     * @param connector - A FuelConnector instance (optional).
     */
    constructor(address, provider, connector) {
      super();
      this._provider = provider;
      this._connector = connector;
      this.address = Address.fromDynamicInput(address);
    }
    /**
     * The provider used to interact with the network.
     *
     * @returns A Provider instance.
     *
     * @throws `FuelError` if the provider is not set.
     */
    get provider() {
      if (!this._provider) {
        throw new FuelError(ErrorCode.MISSING_PROVIDER, "Provider not set");
      }
      return this._provider;
    }
    /**
     * Sets the provider for the account.
     *
     * @param provider - A Provider instance.
     */
    set provider(provider) {
      this._provider = provider;
    }
    /**
     * Changes the provider connection for the account.
     *
     * @param provider - A Provider instance.
     * @returns The updated Provider instance.
     */
    connect(provider) {
      this._provider = provider;
      return this.provider;
    }
    /**
     * Retrieves resources satisfying the spend query for the account.
     *
     * @param quantities - Quantities of resources to be obtained.
     * @param excludedIds - IDs of resources to be excluded from the query (optional).
     * @returns A promise that resolves to an array of Resources.
     */
    async getResourcesToSpend(quantities, excludedIds) {
      return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);
    }
    /**
     * Retrieves coins owned by the account.
     *
     * @param assetId - The asset ID of the coins to retrieve (optional).
     * @returns A promise that resolves to an array of Coins.
     */
    async getCoins(assetId, paginationArgs) {
      return this.provider.getCoins(this.address, assetId, paginationArgs);
    }
    /**
     * Retrieves messages owned by the account.
     *
     * @returns A promise that resolves to an array of Messages.
     */
    async getMessages(paginationArgs) {
      return this.provider.getMessages(this.address, paginationArgs);
    }
    /**
     * Retrieves the balance of the account for the given asset.
     *
     * @param assetId - The asset ID to check the balance for (optional).
     * @returns A promise that resolves to the balance amount.
     */
    async getBalance(assetId) {
      const assetIdToFetch = assetId ?? await this.provider.getBaseAssetId();
      const amount = await this.provider.getBalance(this.address, assetIdToFetch);
      return amount;
    }
    /**
     * Retrieves all the balances for the account.
     *
     * @returns A promise that resolves to an array of Coins and their quantities.
     */
    async getBalances() {
      return this.provider.getBalances(this.address);
    }
    /**
     * Funds a transaction request by adding the necessary resources.
     *
     * @typeParam T - The type of the TransactionRequest.
     * @param request - The transaction request to fund.
     * @param params - The estimated transaction parameters.
     * @returns A promise that resolves to the funded transaction request.
     */
    async fund(request, params) {
      const { addedSignatures, estimatedPredicates, requiredQuantities, updateMaxFee, gasPrice } = params;
      const fee = request.maxFee;
      const baseAssetId = await this.provider.getBaseAssetId();
      const requiredInBaseAsset = requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || bn(0);
      const requiredQuantitiesWithFee = addAmountToCoinQuantities({
        amount: bn(fee),
        assetId: baseAssetId,
        coinQuantities: requiredQuantities
      });
      const quantitiesDict = {};
      requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {
        quantitiesDict[assetId] = {
          required: amount,
          owned: bn(0)
        };
      });
      request.inputs.filter(isRequestInputResource).forEach((input) => {
        const isCoin2 = isRequestInputCoin(input);
        const assetId = isCoin2 ? String(input.assetId) : baseAssetId;
        if (quantitiesDict[assetId]) {
          quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);
        }
      });
      let missingQuantities = [];
      Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {
        if (owned.lt(required)) {
          missingQuantities.push({
            assetId,
            amount: required.sub(owned)
          });
        }
      });
      let needsToBeFunded = missingQuantities.length > 0;
      let fundingAttempts = 0;
      while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {
        const resources = await this.getResourcesToSpend(
          missingQuantities,
          cacheRequestInputsResourcesFromOwner(request.inputs, this.address)
        );
        request.addResources(resources);
        request.updatePredicateGasUsed(estimatedPredicates);
        const requestToReestimate2 = clone_default(request);
        if (addedSignatures) {
          Array.from({ length: addedSignatures }).forEach(
            () => requestToReestimate2.addEmptyWitness()
          );
        }
        if (!updateMaxFee) {
          needsToBeFunded = false;
          break;
        }
        const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({
          transactionRequest: requestToReestimate2,
          gasPrice
        });
        const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(
          request.inputs.filter(isRequestInputResource),
          baseAssetId,
          baseAssetId
        );
        const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);
        if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {
          needsToBeFunded = false;
        } else {
          missingQuantities = [
            {
              amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),
              assetId: baseAssetId
            }
          ];
        }
        fundingAttempts += 1;
      }
      if (needsToBeFunded) {
        throw new FuelError(
          ErrorCode.NOT_ENOUGH_FUNDS,
          `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`
        );
      }
      await this.provider.validateTransaction(request);
      request.updatePredicateGasUsed(estimatedPredicates);
      const requestToReestimate = clone_default(request);
      if (addedSignatures) {
        Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());
      }
      if (!updateMaxFee) {
        return request;
      }
      const { maxFee } = await this.provider.estimateTxGasAndFee({
        transactionRequest: requestToReestimate,
        gasPrice
      });
      request.maxFee = maxFee;
      return request;
    }
    /**
     * A helper that creates a transfer transaction request and returns it.
     *
     * @param destination - The address of the destination.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the prepared transaction request.
     */
    async createTransfer(destination, amount, assetId, txParams = {}) {
      let request = new ScriptTransactionRequest(txParams);
      request = this.addTransfer(request, {
        destination,
        amount,
        assetId: assetId || await this.provider.getBaseAssetId()
      });
      request = await this.estimateAndFundTransaction(request, txParams);
      return request;
    }
    /**
     * Transfers coins to a destination address.
     *
     * @param destination - The address of the destination.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    async transfer(destination, amount, assetId, txParams = {}) {
      const request = await this.createTransfer(destination, amount, assetId, txParams);
      return this.sendTransaction(request, { estimateTxDependencies: false });
    }
    /**
     * Transfers multiple amounts of a token to multiple recipients.
     *
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @param txParams - Optional transaction parameters.
     * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.
     */
    async batchTransfer(transferParams, txParams = {}) {
      let request = new ScriptTransactionRequest(txParams);
      request = this.addBatchTransfer(request, transferParams);
      request = await this.estimateAndFundTransaction(request, txParams);
      return this.sendTransaction(request, { estimateTxDependencies: false });
    }
    /**
     * Adds a transfer to the given transaction request.
     *
     * @param request - The script transaction request to add transfers to.
     * @param transferParams - The object representing the transfer to be made.
     * @returns The updated transaction request with the added transfer.
     */
    addTransfer(request, transferParams) {
      const { destination, amount, assetId } = transferParams;
      this.validateTransferAmount(amount);
      request.addCoinOutput(Address.fromAddressOrString(destination), amount, assetId);
      return request;
    }
    /**
     * Adds multiple transfers to a script transaction request.
     *
     * @param request - The script transaction request to add transfers to.
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @returns The updated script transaction request.
     */
    addBatchTransfer(request, transferParams) {
      transferParams.forEach(({ destination, amount, assetId }) => {
        this.addTransfer(request, {
          destination,
          amount,
          assetId
        });
      });
      return request;
    }
    /**
     * Transfers coins to a contract address.
     *
     * @param contractId - The address of the contract.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    async transferToContract(contractId, amount, assetId, txParams = {}) {
      return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);
    }
    async batchTransferToContracts(contractTransferParams, txParams = {}) {
      let request = new ScriptTransactionRequest({
        ...txParams
      });
      const quantities = [];
      const defaultAssetId = await this.provider.getBaseAssetId();
      const transferParams = contractTransferParams.map((transferParam) => {
        const amount = bn(transferParam.amount);
        const contractAddress = Address.fromAddressOrString(transferParam.contractId);
        const assetId = transferParam.assetId ? hexlify(transferParam.assetId) : defaultAssetId;
        if (amount.lte(0)) {
          throw new FuelError(
            ErrorCode.INVALID_TRANSFER_AMOUNT,
            "Transfer amount must be a positive number."
          );
        }
        request.addContractInputAndOutput(contractAddress);
        quantities.push({ amount, assetId });
        return {
          amount,
          contractId: contractAddress.toB256(),
          assetId
        };
      });
      const { script, scriptData } = await assembleTransferToContractScript(transferParams);
      request.script = script;
      request.scriptData = scriptData;
      request = await this.estimateAndFundTransaction(request, txParams, { quantities });
      return this.sendTransaction(request);
    }
    /**
     * Withdraws an amount of the base asset to the base chain.
     *
     * @param recipient - Address of the recipient on the base chain.
     * @param amount - Amount of base asset.
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    async withdrawToBaseLayer(recipient, amount, txParams = {}) {
      const recipientAddress = Address.fromAddressOrString(recipient);
      const recipientDataArray = arrayify(
        "0x".concat(recipientAddress.toHexString().substring(2).padStart(64, "0"))
      );
      const amountDataArray = arrayify(
        "0x".concat(bn(amount).toHex().substring(2).padStart(16, "0"))
      );
      const script = new Uint8Array([
        ...arrayify(withdrawScript.bytes),
        ...recipientDataArray,
        ...amountDataArray
      ]);
      const params = { script, ...txParams };
      const baseAssetId = await this.provider.getBaseAssetId();
      let request = new ScriptTransactionRequest(params);
      const quantities = [{ amount: bn(amount), assetId: baseAssetId }];
      const txCost = await this.getTransactionCost(request, { quantities });
      request = this.validateGasLimitAndMaxFee({
        transactionRequest: request,
        gasUsed: txCost.gasUsed,
        maxFee: txCost.maxFee,
        txParams
      });
      await this.fund(request, txCost);
      return this.sendTransaction(request);
    }
    /**
     * Returns a transaction cost to enable user
     * to set gasLimit and also reserve balance amounts
     * on the transaction.
     *
     * @param transactionRequestLike - The transaction request object.
     * @param transactionCostParams - The transaction cost parameters (optional).
     *
     * @returns A promise that resolves to the transaction cost object.
     */
    async getTransactionCost(transactionRequestLike, { signatureCallback, quantities = [] } = {}) {
      const txRequestClone = clone_default(transactionRequestify(transactionRequestLike));
      const baseAssetId = await this.provider.getBaseAssetId();
      const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();
      const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);
      const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn("100000000000000000") }];
      const findAssetInput = (assetId) => txRequestClone.inputs.find((input) => {
        if (input.type === InputType.Coin) {
          return input.assetId === assetId;
        }
        if (isRequestInputMessageWithoutData(input)) {
          return baseAssetId === assetId;
        }
        return false;
      });
      const updateAssetInput = (assetId, quantity) => {
        const assetInput = findAssetInput(assetId);
        const usedQuantity = quantity;
        if (assetInput && "amount" in assetInput) {
          assetInput.amount = usedQuantity;
        } else {
          txRequestClone.addResources(
            this.generateFakeResources([
              {
                amount: quantity,
                assetId
              }
            ])
          );
        }
      };
      mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(
        ({ amount, assetId }) => updateAssetInput(assetId, amount)
      );
      const txCost = await this.provider.getTransactionCost(txRequestClone, {
        signatureCallback
      });
      return {
        ...txCost,
        requiredQuantities
      };
    }
    /**
     * Sign a message from the account via the connector.
     *
     * @param message - the message to sign.
     * @returns a promise that resolves to the signature.
     *
     * @hidden
     */
    async signMessage(message) {
      if (!this._connector) {
        throw new FuelError(ErrorCode.MISSING_CONNECTOR, "A connector is required to sign messages.");
      }
      return this._connector.signMessage(this.address.toString(), message);
    }
    /**
     * Signs a transaction from the account via the connector..
     *
     * @param transactionRequestLike - The transaction request to sign.
     * @returns A promise that resolves to the signature of the transaction.
     */
    async signTransaction(transactionRequestLike) {
      if (!this._connector) {
        throw new FuelError(
          ErrorCode.MISSING_CONNECTOR,
          "A connector is required to sign transactions."
        );
      }
      return this._connector.signTransaction(this.address.toString(), transactionRequestLike);
    }
    /**
     * Sends a transaction to the network.
     *
     * @param transactionRequestLike - The transaction request to be sent.
     * @param sendTransactionParams - The provider send transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    async sendTransaction(transactionRequestLike, { estimateTxDependencies = true, onBeforeSend, skipCustomFee = false } = {}) {
      if (this._connector) {
        return this.provider.getTransactionResponse(
          await this._connector.sendTransaction(this.address.toString(), transactionRequestLike, {
            onBeforeSend,
            skipCustomFee
          })
        );
      }
      const transactionRequest = transactionRequestify(transactionRequestLike);
      if (estimateTxDependencies) {
        await this.provider.estimateTxDependencies(transactionRequest);
      }
      return this.provider.sendTransaction(transactionRequest, {
        estimateTxDependencies: false
      });
    }
    /**
     * Simulates a transaction.
     *
     * @param transactionRequestLike - The transaction request to be simulated.
     * @param estimateTxParams - The estimate transaction params (optional).
     * @returns A promise that resolves to the call result.
     */
    async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      if (estimateTxDependencies) {
        await this.provider.estimateTxDependencies(transactionRequest);
      }
      return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });
    }
    /**
     * Generates an array of fake resources based on the provided coins.
     *
     * @param coins - An array of `FakeResources` objects representing the coins.
     * @returns An array of `Resource` objects with generated properties.
     */
    generateFakeResources(coins) {
      return coins.map((coin) => ({
        id: hexlify(randomBytes22(UTXO_ID_LEN)),
        owner: this.address,
        blockCreated: bn(1),
        txCreatedIdx: bn(1),
        ...coin
      }));
    }
    /** @hidden * */
    validateTransferAmount(amount) {
      if (bn(amount).lte(0)) {
        throw new FuelError(
          ErrorCode.INVALID_TRANSFER_AMOUNT,
          "Transfer amount must be a positive number."
        );
      }
    }
    /** @hidden * */
    async estimateAndFundTransaction(transactionRequest, txParams, costParams) {
      let request = transactionRequest;
      const txCost = await this.getTransactionCost(request, costParams);
      request = this.validateGasLimitAndMaxFee({
        transactionRequest: request,
        gasUsed: txCost.gasUsed,
        maxFee: txCost.maxFee,
        txParams
      });
      request = await this.fund(request, txCost);
      return request;
    }
    /** @hidden * */
    validateGasLimitAndMaxFee({
      gasUsed,
      maxFee,
      transactionRequest,
      txParams: { gasLimit: setGasLimit, maxFee: setMaxFee }
    }) {
      const request = transactionRequestify(transactionRequest);
      if (!isDefined(setGasLimit)) {
        request.gasLimit = gasUsed;
      } else if (gasUsed.gt(setGasLimit)) {
        throw new FuelError(
          ErrorCode.GAS_LIMIT_TOO_LOW,
          `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`
        );
      }
      if (!isDefined(setMaxFee)) {
        request.maxFee = maxFee;
      } else if (maxFee.gt(setMaxFee)) {
        throw new FuelError(
          ErrorCode.MAX_FEE_TOO_LOW,
          `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`
        );
      }
      return request;
    }
  };
  var DEFAULT_KDF_PARAMS_LOG_N = 13;
  var DEFAULT_KDF_PARAMS_R = 8;
  var DEFAULT_KDF_PARAMS_P = 1;
  var DEFAULT_KEY_SIZE = 32;
  var DEFAULT_IV_SIZE = 16;
  var removeHexPrefix = (hexString) => {
    if (/^0x/.test(hexString)) {
      return hexString.slice(2);
    }
    return hexString;
  };
  async function encryptKeystoreWallet(privateKey, address, password) {
    const privateKeyBuffer = bufferFromString2(removeHexPrefix(privateKey), "hex");
    const ownerAddress = Address.fromAddressOrString(address);
    const salt = randomBytes22(DEFAULT_KEY_SIZE);
    const key = scrypt22({
      password: bufferFromString2(password),
      salt,
      dklen: DEFAULT_KEY_SIZE,
      n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,
      r: DEFAULT_KDF_PARAMS_R,
      p: DEFAULT_KDF_PARAMS_P
    });
    const iv = randomBytes22(DEFAULT_IV_SIZE);
    const ciphertext = await encryptJsonWalletData2(privateKeyBuffer, key, iv);
    const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);
    const macHashUint8Array = keccak2562(data);
    const mac = stringFromBuffer2(macHashUint8Array, "hex");
    const keystore = {
      id: randomUUID2(),
      version: 3,
      address: removeHexPrefix(ownerAddress.toHexString()),
      crypto: {
        cipher: "aes-128-ctr",
        mac,
        cipherparams: { iv: stringFromBuffer2(iv, "hex") },
        ciphertext: stringFromBuffer2(ciphertext, "hex"),
        kdf: "scrypt",
        kdfparams: {
          dklen: DEFAULT_KEY_SIZE,
          n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,
          p: DEFAULT_KDF_PARAMS_P,
          r: DEFAULT_KDF_PARAMS_R,
          salt: stringFromBuffer2(salt, "hex")
        }
      }
    };
    return JSON.stringify(keystore);
  }
  async function decryptKeystoreWallet(jsonWallet, password) {
    const keystoreWallet = JSON.parse(jsonWallet);
    const {
      crypto: {
        mac,
        ciphertext,
        cipherparams: { iv },
        kdfparams: { dklen, n, r, p, salt }
      }
    } = keystoreWallet;
    const ciphertextBuffer = bufferFromString2(ciphertext, "hex");
    const ivBuffer = bufferFromString2(iv, "hex");
    const saltBuffer = bufferFromString2(salt, "hex");
    const passwordBuffer = bufferFromString2(password);
    const key = scrypt22({
      password: passwordBuffer,
      salt: saltBuffer,
      n,
      p,
      r,
      dklen
    });
    const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);
    const macHashUint8Array = keccak2562(data);
    const macHash = stringFromBuffer2(macHashUint8Array, "hex");
    if (mac !== macHash) {
      throw new FuelError(
        ErrorCode.INVALID_PASSWORD,
        "Failed to decrypt the keystore wallet, the provided password is incorrect."
      );
    }
    const buffer = await decryptJsonWalletData2(ciphertextBuffer, key, ivBuffer);
    const privateKey = hexlify(buffer);
    return privateKey;
  }
  var BaseWalletUnlocked = class extends Account {
    /**
     * A function that returns the wallet's signer.
     */
    signer;
    /**
     * Creates a new BaseWalletUnlocked instance.
     *
     * @param privateKey - The private key of the wallet.
     * @param provider - A Provider instance (optional).
     */
    constructor(privateKey, provider) {
      const signer = new Signer(privateKey);
      super(signer.address, provider);
      this.signer = () => signer;
    }
    /**
     * Gets the private key of the wallet.
     *
     * @returns The private key of the wallet.
     */
    get privateKey() {
      return this.signer().privateKey;
    }
    /**
     * Gets the public key of the wallet.
     *
     * @returns
     */
    get publicKey() {
      return this.signer().publicKey;
    }
    /**
     * Signs a message with the wallet's private key.
     *
     * @param message - The message to sign.
     * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.
     */
    async signMessage(message) {
      const signedMessage = await this.signer().sign(hashMessage(message));
      return hexlify(signedMessage);
    }
    /**
     * Signs a transaction with the wallet's private key.
     *
     * @param transactionRequestLike - The transaction request to sign.
     * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.
     */
    async signTransaction(transactionRequestLike) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      const chainId = await this.provider.getChainId();
      const hashedTransaction = transactionRequest.getTransactionId(chainId);
      const signature = await this.signer().sign(hashedTransaction);
      return hexlify(signature);
    }
    /**
     * Populates a transaction with the witnesses signature.
     *
     * @param transactionRequestLike - The transaction request to populate.
     * @returns The populated transaction request.
     */
    async populateTransactionWitnessesSignature(transactionRequestLike) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      const signedTransaction = await this.signTransaction(transactionRequest);
      transactionRequest.updateWitnessByOwner(this.address, signedTransaction);
      return transactionRequest;
    }
    /**
     * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.
     *
     * @param transactionRequestLike - The transaction request to send.
     * @param estimateTxDependencies - Whether to estimate the transaction dependencies.
     * @returns A promise that resolves to the TransactionResponse object.
     */
    async sendTransaction(transactionRequestLike, { estimateTxDependencies = false, enableAssetBurn } = {}) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      validateTransactionForAssetBurn(
        await this.provider.getBaseAssetId(),
        transactionRequest,
        enableAssetBurn
      );
      if (estimateTxDependencies) {
        await this.provider.estimateTxDependencies(transactionRequest);
      }
      return this.provider.sendTransaction(
        await this.populateTransactionWitnessesSignature(transactionRequest),
        { estimateTxDependencies: false, enableAssetBurn }
      );
    }
    /**
     * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.
     *
     * @param transactionRequestLike - The transaction request to simulate.
     * @returns A promise that resolves to the CallResult object.
     */
    async simulateTransaction(transactionRequestLike, { estimateTxDependencies = true } = {}) {
      const transactionRequest = transactionRequestify(transactionRequestLike);
      if (estimateTxDependencies) {
        await this.provider.estimateTxDependencies(transactionRequest);
      }
      return this.provider.dryRun(
        await this.populateTransactionWitnessesSignature(transactionRequest),
        {
          utxoValidation: true,
          estimateTxDependencies: false
        }
      );
    }
    /**
     * Encrypts an unlocked wallet with a password.
     *
     * @param password - the password to encrypt the wallet with.
     * @returns - the encrypted wallet.
     */
    async encrypt(password) {
      return encryptKeystoreWallet(this.privateKey, this.address, password);
    }
  };
  __publicField4(BaseWalletUnlocked, "defaultPath", "m/44'/1179993420'/0'/0/0");
  var english = [
    "abandon",
    "ability",
    "able",
    "about",
    "above",
    "absent",
    "absorb",
    "abstract",
    "absurd",
    "abuse",
    "access",
    "accident",
    "account",
    "accuse",
    "achieve",
    "acid",
    "acoustic",
    "acquire",
    "across",
    "act",
    "action",
    "actor",
    "actress",
    "actual",
    "adapt",
    "add",
    "addict",
    "address",
    "adjust",
    "admit",
    "adult",
    "advance",
    "advice",
    "aerobic",
    "affair",
    "afford",
    "afraid",
    "again",
    "age",
    "agent",
    "agree",
    "ahead",
    "aim",
    "air",
    "airport",
    "aisle",
    "alarm",
    "album",
    "alcohol",
    "alert",
    "alien",
    "all",
    "alley",
    "allow",
    "almost",
    "alone",
    "alpha",
    "already",
    "also",
    "alter",
    "always",
    "amateur",
    "amazing",
    "among",
    "amount",
    "amused",
    "analyst",
    "anchor",
    "ancient",
    "anger",
    "angle",
    "angry",
    "animal",
    "ankle",
    "announce",
    "annual",
    "another",
    "answer",
    "antenna",
    "antique",
    "anxiety",
    "any",
    "apart",
    "apology",
    "appear",
    "apple",
    "approve",
    "april",
    "arch",
    "arctic",
    "area",
    "arena",
    "argue",
    "arm",
    "armed",
    "armor",
    "army",
    "around",
    "arrange",
    "arrest",
    "arrive",
    "arrow",
    "art",
    "artefact",
    "artist",
    "artwork",
    "ask",
    "aspect",
    "assault",
    "asset",
    "assist",
    "assume",
    "asthma",
    "athlete",
    "atom",
    "attack",
    "attend",
    "attitude",
    "attract",
    "auction",
    "audit",
    "august",
    "aunt",
    "author",
    "auto",
    "autumn",
    "average",
    "avocado",
    "avoid",
    "awake",
    "aware",
    "away",
    "awesome",
    "awful",
    "awkward",
    "axis",
    "baby",
    "bachelor",
    "bacon",
    "badge",
    "bag",
    "balance",
    "balcony",
    "ball",
    "bamboo",
    "banana",
    "banner",
    "bar",
    "barely",
    "bargain",
    "barrel",
    "base",
    "basic",
    "basket",
    "battle",
    "beach",
    "bean",
    "beauty",
    "because",
    "become",
    "beef",
    "before",
    "begin",
    "behave",
    "behind",
    "believe",
    "below",
    "belt",
    "bench",
    "benefit",
    "best",
    "betray",
    "better",
    "between",
    "beyond",
    "bicycle",
    "bid",
    "bike",
    "bind",
    "biology",
    "bird",
    "birth",
    "bitter",
    "black",
    "blade",
    "blame",
    "blanket",
    "blast",
    "bleak",
    "bless",
    "blind",
    "blood",
    "blossom",
    "blouse",
    "blue",
    "blur",
    "blush",
    "board",
    "boat",
    "body",
    "boil",
    "bomb",
    "bone",
    "bonus",
    "book",
    "boost",
    "border",
    "boring",
    "borrow",
    "boss",
    "bottom",
    "bounce",
    "box",
    "boy",
    "bracket",
    "brain",
    "brand",
    "brass",
    "brave",
    "bread",
    "breeze",
    "brick",
    "bridge",
    "brief",
    "bright",
    "bring",
    "brisk",
    "broccoli",
    "broken",
    "bronze",
    "broom",
    "brother",
    "brown",
    "brush",
    "bubble",
    "buddy",
    "budget",
    "buffalo",
    "build",
    "bulb",
    "bulk",
    "bullet",
    "bundle",
    "bunker",
    "burden",
    "burger",
    "burst",
    "bus",
    "business",
    "busy",
    "butter",
    "buyer",
    "buzz",
    "cabbage",
    "cabin",
    "cable",
    "cactus",
    "cage",
    "cake",
    "call",
    "calm",
    "camera",
    "camp",
    "can",
    "canal",
    "cancel",
    "candy",
    "cannon",
    "canoe",
    "canvas",
    "canyon",
    "capable",
    "capital",
    "captain",
    "car",
    "carbon",
    "card",
    "cargo",
    "carpet",
    "carry",
    "cart",
    "case",
    "cash",
    "casino",
    "castle",
    "casual",
    "cat",
    "catalog",
    "catch",
    "category",
    "cattle",
    "caught",
    "cause",
    "caution",
    "cave",
    "ceiling",
    "celery",
    "cement",
    "census",
    "century",
    "cereal",
    "certain",
    "chair",
    "chalk",
    "champion",
    "change",
    "chaos",
    "chapter",
    "charge",
    "chase",
    "chat",
    "cheap",
    "check",
    "cheese",
    "chef",
    "cherry",
    "chest",
    "chicken",
    "chief",
    "child",
    "chimney",
    "choice",
    "choose",
    "chronic",
    "chuckle",
    "chunk",
    "churn",
    "cigar",
    "cinnamon",
    "circle",
    "citizen",
    "city",
    "civil",
    "claim",
    "clap",
    "clarify",
    "claw",
    "clay",
    "clean",
    "clerk",
    "clever",
    "click",
    "client",
    "cliff",
    "climb",
    "clinic",
    "clip",
    "clock",
    "clog",
    "close",
    "cloth",
    "cloud",
    "clown",
    "club",
    "clump",
    "cluster",
    "clutch",
    "coach",
    "coast",
    "coconut",
    "code",
    "coffee",
    "coil",
    "coin",
    "collect",
    "color",
    "column",
    "combine",
    "come",
    "comfort",
    "comic",
    "common",
    "company",
    "concert",
    "conduct",
    "confirm",
    "congress",
    "connect",
    "consider",
    "control",
    "convince",
    "cook",
    "cool",
    "copper",
    "copy",
    "coral",
    "core",
    "corn",
    "correct",
    "cost",
    "cotton",
    "couch",
    "country",
    "couple",
    "course",
    "cousin",
    "cover",
    "coyote",
    "crack",
    "cradle",
    "craft",
    "cram",
    "crane",
    "crash",
    "crater",
    "crawl",
    "crazy",
    "cream",
    "credit",
    "creek",
    "crew",
    "cricket",
    "crime",
    "crisp",
    "critic",
    "crop",
    "cross",
    "crouch",
    "crowd",
    "crucial",
    "cruel",
    "cruise",
    "crumble",
    "crunch",
    "crush",
    "cry",
    "crystal",
    "cube",
    "culture",
    "cup",
    "cupboard",
    "curious",
    "current",
    "curtain",
    "curve",
    "cushion",
    "custom",
    "cute",
    "cycle",
    "dad",
    "damage",
    "damp",
    "dance",
    "danger",
    "daring",
    "dash",
    "daughter",
    "dawn",
    "day",
    "deal",
    "debate",
    "debris",
    "decade",
    "december",
    "decide",
    "decline",
    "decorate",
    "decrease",
    "deer",
    "defense",
    "define",
    "defy",
    "degree",
    "delay",
    "deliver",
    "demand",
    "demise",
    "denial",
    "dentist",
    "deny",
    "depart",
    "depend",
    "deposit",
    "depth",
    "deputy",
    "derive",
    "describe",
    "desert",
    "design",
    "desk",
    "despair",
    "destroy",
    "detail",
    "detect",
    "develop",
    "device",
    "devote",
    "diagram",
    "dial",
    "diamond",
    "diary",
    "dice",
    "diesel",
    "diet",
    "differ",
    "digital",
    "dignity",
    "dilemma",
    "dinner",
    "dinosaur",
    "direct",
    "dirt",
    "disagree",
    "discover",
    "disease",
    "dish",
    "dismiss",
    "disorder",
    "display",
    "distance",
    "divert",
    "divide",
    "divorce",
    "dizzy",
    "doctor",
    "document",
    "dog",
    "doll",
    "dolphin",
    "domain",
    "donate",
    "donkey",
    "donor",
    "door",
    "dose",
    "double",
    "dove",
    "draft",
    "dragon",
    "drama",
    "drastic",
    "draw",
    "dream",
    "dress",
    "drift",
    "drill",
    "drink",
    "drip",
    "drive",
    "drop",
    "drum",
    "dry",
    "duck",
    "dumb",
    "dune",
    "during",
    "dust",
    "dutch",
    "duty",
    "dwarf",
    "dynamic",
    "eager",
    "eagle",
    "early",
    "earn",
    "earth",
    "easily",
    "east",
    "easy",
    "echo",
    "ecology",
    "economy",
    "edge",
    "edit",
    "educate",
    "effort",
    "egg",
    "eight",
    "either",
    "elbow",
    "elder",
    "electric",
    "elegant",
    "element",
    "elephant",
    "elevator",
    "elite",
    "else",
    "embark",
    "embody",
    "embrace",
    "emerge",
    "emotion",
    "employ",
    "empower",
    "empty",
    "enable",
    "enact",
    "end",
    "endless",
    "endorse",
    "enemy",
    "energy",
    "enforce",
    "engage",
    "engine",
    "enhance",
    "enjoy",
    "enlist",
    "enough",
    "enrich",
    "enroll",
    "ensure",
    "enter",
    "entire",
    "entry",
    "envelope",
    "episode",
    "equal",
    "equip",
    "era",
    "erase",
    "erode",
    "erosion",
    "error",
    "erupt",
    "escape",
    "essay",
    "essence",
    "estate",
    "eternal",
    "ethics",
    "evidence",
    "evil",
    "evoke",
    "evolve",
    "exact",
    "example",
    "excess",
    "exchange",
    "excite",
    "exclude",
    "excuse",
    "execute",
    "exercise",
    "exhaust",
    "exhibit",
    "exile",
    "exist",
    "exit",
    "exotic",
    "expand",
    "expect",
    "expire",
    "explain",
    "expose",
    "express",
    "extend",
    "extra",
    "eye",
    "eyebrow",
    "fabric",
    "face",
    "faculty",
    "fade",
    "faint",
    "faith",
    "fall",
    "false",
    "fame",
    "family",
    "famous",
    "fan",
    "fancy",
    "fantasy",
    "farm",
    "fashion",
    "fat",
    "fatal",
    "father",
    "fatigue",
    "fault",
    "favorite",
    "feature",
    "february",
    "federal",
    "fee",
    "feed",
    "feel",
    "female",
    "fence",
    "festival",
    "fetch",
    "fever",
    "few",
    "fiber",
    "fiction",
    "field",
    "figure",
    "file",
    "film",
    "filter",
    "final",
    "find",
    "fine",
    "finger",
    "finish",
    "fire",
    "firm",
    "first",
    "fiscal",
    "fish",
    "fit",
    "fitness",
    "fix",
    "flag",
    "flame",
    "flash",
    "flat",
    "flavor",
    "flee",
    "flight",
    "flip",
    "float",
    "flock",
    "floor",
    "flower",
    "fluid",
    "flush",
    "fly",
    "foam",
    "focus",
    "fog",
    "foil",
    "fold",
    "follow",
    "food",
    "foot",
    "force",
    "forest",
    "forget",
    "fork",
    "fortune",
    "forum",
    "forward",
    "fossil",
    "foster",
    "found",
    "fox",
    "fragile",
    "frame",
    "frequent",
    "fresh",
    "friend",
    "fringe",
    "frog",
    "front",
    "frost",
    "frown",
    "frozen",
    "fruit",
    "fuel",
    "fun",
    "funny",
    "furnace",
    "fury",
    "future",
    "gadget",
    "gain",
    "galaxy",
    "gallery",
    "game",
    "gap",
    "garage",
    "garbage",
    "garden",
    "garlic",
    "garment",
    "gas",
    "gasp",
    "gate",
    "gather",
    "gauge",
    "gaze",
    "general",
    "genius",
    "genre",
    "gentle",
    "genuine",
    "gesture",
    "ghost",
    "giant",
    "gift",
    "giggle",
    "ginger",
    "giraffe",
    "girl",
    "give",
    "glad",
    "glance",
    "glare",
    "glass",
    "glide",
    "glimpse",
    "globe",
    "gloom",
    "glory",
    "glove",
    "glow",
    "glue",
    "goat",
    "goddess",
    "gold",
    "good",
    "goose",
    "gorilla",
    "gospel",
    "gossip",
    "govern",
    "gown",
    "grab",
    "grace",
    "grain",
    "grant",
    "grape",
    "grass",
    "gravity",
    "great",
    "green",
    "grid",
    "grief",
    "grit",
    "grocery",
    "group",
    "grow",
    "grunt",
    "guard",
    "guess",
    "guide",
    "guilt",
    "guitar",
    "gun",
    "gym",
    "habit",
    "hair",
    "half",
    "hammer",
    "hamster",
    "hand",
    "happy",
    "harbor",
    "hard",
    "harsh",
    "harvest",
    "hat",
    "have",
    "hawk",
    "hazard",
    "head",
    "health",
    "heart",
    "heavy",
    "hedgehog",
    "height",
    "hello",
    "helmet",
    "help",
    "hen",
    "hero",
    "hidden",
    "high",
    "hill",
    "hint",
    "hip",
    "hire",
    "history",
    "hobby",
    "hockey",
    "hold",
    "hole",
    "holiday",
    "hollow",
    "home",
    "honey",
    "hood",
    "hope",
    "horn",
    "horror",
    "horse",
    "hospital",
    "host",
    "hotel",
    "hour",
    "hover",
    "hub",
    "huge",
    "human",
    "humble",
    "humor",
    "hundred",
    "hungry",
    "hunt",
    "hurdle",
    "hurry",
    "hurt",
    "husband",
    "hybrid",
    "ice",
    "icon",
    "idea",
    "identify",
    "idle",
    "ignore",
    "ill",
    "illegal",
    "illness",
    "image",
    "imitate",
    "immense",
    "immune",
    "impact",
    "impose",
    "improve",
    "impulse",
    "inch",
    "include",
    "income",
    "increase",
    "index",
    "indicate",
    "indoor",
    "industry",
    "infant",
    "inflict",
    "inform",
    "inhale",
    "inherit",
    "initial",
    "inject",
    "injury",
    "inmate",
    "inner",
    "innocent",
    "input",
    "inquiry",
    "insane",
    "insect",
    "inside",
    "inspire",
    "install",
    "intact",
    "interest",
    "into",
    "invest",
    "invite",
    "involve",
    "iron",
    "island",
    "isolate",
    "issue",
    "item",
    "ivory",
    "jacket",
    "jaguar",
    "jar",
    "jazz",
    "jealous",
    "jeans",
    "jelly",
    "jewel",
    "job",
    "join",
    "joke",
    "journey",
    "joy",
    "judge",
    "juice",
    "jump",
    "jungle",
    "junior",
    "junk",
    "just",
    "kangaroo",
    "keen",
    "keep",
    "ketchup",
    "key",
    "kick",
    "kid",
    "kidney",
    "kind",
    "kingdom",
    "kiss",
    "kit",
    "kitchen",
    "kite",
    "kitten",
    "kiwi",
    "knee",
    "knife",
    "knock",
    "know",
    "lab",
    "label",
    "labor",
    "ladder",
    "lady",
    "lake",
    "lamp",
    "language",
    "laptop",
    "large",
    "later",
    "latin",
    "laugh",
    "laundry",
    "lava",
    "law",
    "lawn",
    "lawsuit",
    "layer",
    "lazy",
    "leader",
    "leaf",
    "learn",
    "leave",
    "lecture",
    "left",
    "leg",
    "legal",
    "legend",
    "leisure",
    "lemon",
    "lend",
    "length",
    "lens",
    "leopard",
    "lesson",
    "letter",
    "level",
    "liar",
    "liberty",
    "library",
    "license",
    "life",
    "lift",
    "light",
    "like",
    "limb",
    "limit",
    "link",
    "lion",
    "liquid",
    "list",
    "little",
    "live",
    "lizard",
    "load",
    "loan",
    "lobster",
    "local",
    "lock",
    "logic",
    "lonely",
    "long",
    "loop",
    "lottery",
    "loud",
    "lounge",
    "love",
    "loyal",
    "lucky",
    "luggage",
    "lumber",
    "lunar",
    "lunch",
    "luxury",
    "lyrics",
    "machine",
    "mad",
    "magic",
    "magnet",
    "maid",
    "mail",
    "main",
    "major",
    "make",
    "mammal",
    "man",
    "manage",
    "mandate",
    "mango",
    "mansion",
    "manual",
    "maple",
    "marble",
    "march",
    "margin",
    "marine",
    "market",
    "marriage",
    "mask",
    "mass",
    "master",
    "match",
    "material",
    "math",
    "matrix",
    "matter",
    "maximum",
    "maze",
    "meadow",
    "mean",
    "measure",
    "meat",
    "mechanic",
    "medal",
    "media",
    "melody",
    "melt",
    "member",
    "memory",
    "mention",
    "menu",
    "mercy",
    "merge",
    "merit",
    "merry",
    "mesh",
    "message",
    "metal",
    "method",
    "middle",
    "midnight",
    "milk",
    "million",
    "mimic",
    "mind",
    "minimum",
    "minor",
    "minute",
    "miracle",
    "mirror",
    "misery",
    "miss",
    "mistake",
    "mix",
    "mixed",
    "mixture",
    "mobile",
    "model",
    "modify",
    "mom",
    "moment",
    "monitor",
    "monkey",
    "monster",
    "month",
    "moon",
    "moral",
    "more",
    "morning",
    "mosquito",
    "mother",
    "motion",
    "motor",
    "mountain",
    "mouse",
    "move",
    "movie",
    "much",
    "muffin",
    "mule",
    "multiply",
    "muscle",
    "museum",
    "mushroom",
    "music",
    "must",
    "mutual",
    "myself",
    "mystery",
    "myth",
    "naive",
    "name",
    "napkin",
    "narrow",
    "nasty",
    "nation",
    "nature",
    "near",
    "neck",
    "need",
    "negative",
    "neglect",
    "neither",
    "nephew",
    "nerve",
    "nest",
    "net",
    "network",
    "neutral",
    "never",
    "news",
    "next",
    "nice",
    "night",
    "noble",
    "noise",
    "nominee",
    "noodle",
    "normal",
    "north",
    "nose",
    "notable",
    "note",
    "nothing",
    "notice",
    "novel",
    "now",
    "nuclear",
    "number",
    "nurse",
    "nut",
    "oak",
    "obey",
    "object",
    "oblige",
    "obscure",
    "observe",
    "obtain",
    "obvious",
    "occur",
    "ocean",
    "october",
    "odor",
    "off",
    "offer",
    "office",
    "often",
    "oil",
    "okay",
    "old",
    "olive",
    "olympic",
    "omit",
    "once",
    "one",
    "onion",
    "online",
    "only",
    "open",
    "opera",
    "opinion",
    "oppose",
    "option",
    "orange",
    "orbit",
    "orchard",
    "order",
    "ordinary",
    "organ",
    "orient",
    "original",
    "orphan",
    "ostrich",
    "other",
    "outdoor",
    "outer",
    "output",
    "outside",
    "oval",
    "oven",
    "over",
    "own",
    "owner",
    "oxygen",
    "oyster",
    "ozone",
    "pact",
    "paddle",
    "page",
    "pair",
    "palace",
    "palm",
    "panda",
    "panel",
    "panic",
    "panther",
    "paper",
    "parade",
    "parent",
    "park",
    "parrot",
    "party",
    "pass",
    "patch",
    "path",
    "patient",
    "patrol",
    "pattern",
    "pause",
    "pave",
    "payment",
    "peace",
    "peanut",
    "pear",
    "peasant",
    "pelican",
    "pen",
    "penalty",
    "pencil",
    "people",
    "pepper",
    "perfect",
    "permit",
    "person",
    "pet",
    "phone",
    "photo",
    "phrase",
    "physical",
    "piano",
    "picnic",
    "picture",
    "piece",
    "pig",
    "pigeon",
    "pill",
    "pilot",
    "pink",
    "pioneer",
    "pipe",
    "pistol",
    "pitch",
    "pizza",
    "place",
    "planet",
    "plastic",
    "plate",
    "play",
    "please",
    "pledge",
    "pluck",
    "plug",
    "plunge",
    "poem",
    "poet",
    "point",
    "polar",
    "pole",
    "police",
    "pond",
    "pony",
    "pool",
    "popular",
    "portion",
    "position",
    "possible",
    "post",
    "potato",
    "pottery",
    "poverty",
    "powder",
    "power",
    "practice",
    "praise",
    "predict",
    "prefer",
    "prepare",
    "present",
    "pretty",
    "prevent",
    "price",
    "pride",
    "primary",
    "print",
    "priority",
    "prison",
    "private",
    "prize",
    "problem",
    "process",
    "produce",
    "profit",
    "program",
    "project",
    "promote",
    "proof",
    "property",
    "prosper",
    "protect",
    "proud",
    "provide",
    "public",
    "pudding",
    "pull",
    "pulp",
    "pulse",
    "pumpkin",
    "punch",
    "pupil",
    "puppy",
    "purchase",
    "purity",
    "purpose",
    "purse",
    "push",
    "put",
    "puzzle",
    "pyramid",
    "quality",
    "quantum",
    "quarter",
    "question",
    "quick",
    "quit",
    "quiz",
    "quote",
    "rabbit",
    "raccoon",
    "race",
    "rack",
    "radar",
    "radio",
    "rail",
    "rain",
    "raise",
    "rally",
    "ramp",
    "ranch",
    "random",
    "range",
    "rapid",
    "rare",
    "rate",
    "rather",
    "raven",
    "raw",
    "razor",
    "ready",
    "real",
    "reason",
    "rebel",
    "rebuild",
    "recall",
    "receive",
    "recipe",
    "record",
    "recycle",
    "reduce",
    "reflect",
    "reform",
    "refuse",
    "region",
    "regret",
    "regular",
    "reject",
    "relax",
    "release",
    "relief",
    "rely",
    "remain",
    "remember",
    "remind",
    "remove",
    "render",
    "renew",
    "rent",
    "reopen",
    "repair",
    "repeat",
    "replace",
    "report",
    "require",
    "rescue",
    "resemble",
    "resist",
    "resource",
    "response",
    "result",
    "retire",
    "retreat",
    "return",
    "reunion",
    "reveal",
    "review",
    "reward",
    "rhythm",
    "rib",
    "ribbon",
    "rice",
    "rich",
    "ride",
    "ridge",
    "rifle",
    "right",
    "rigid",
    "ring",
    "riot",
    "ripple",
    "risk",
    "ritual",
    "rival",
    "river",
    "road",
    "roast",
    "robot",
    "robust",
    "rocket",
    "romance",
    "roof",
    "rookie",
    "room",
    "rose",
    "rotate",
    "rough",
    "round",
    "route",
    "royal",
    "rubber",
    "rude",
    "rug",
    "rule",
    "run",
    "runway",
    "rural",
    "sad",
    "saddle",
    "sadness",
    "safe",
    "sail",
    "salad",
    "salmon",
    "salon",
    "salt",
    "salute",
    "same",
    "sample",
    "sand",
    "satisfy",
    "satoshi",
    "sauce",
    "sausage",
    "save",
    "say",
    "scale",
    "scan",
    "scare",
    "scatter",
    "scene",
    "scheme",
    "school",
    "science",
    "scissors",
    "scorpion",
    "scout",
    "scrap",
    "screen",
    "script",
    "scrub",
    "sea",
    "search",
    "season",
    "seat",
    "second",
    "secret",
    "section",
    "security",
    "seed",
    "seek",
    "segment",
    "select",
    "sell",
    "seminar",
    "senior",
    "sense",
    "sentence",
    "series",
    "service",
    "session",
    "settle",
    "setup",
    "seven",
    "shadow",
    "shaft",
    "shallow",
    "share",
    "shed",
    "shell",
    "sheriff",
    "shield",
    "shift",
    "shine",
    "ship",
    "shiver",
    "shock",
    "shoe",
    "shoot",
    "shop",
    "short",
    "shoulder",
    "shove",
    "shrimp",
    "shrug",
    "shuffle",
    "shy",
    "sibling",
    "sick",
    "side",
    "siege",
    "sight",
    "sign",
    "silent",
    "silk",
    "silly",
    "silver",
    "similar",
    "simple",
    "since",
    "sing",
    "siren",
    "sister",
    "situate",
    "six",
    "size",
    "skate",
    "sketch",
    "ski",
    "skill",
    "skin",
    "skirt",
    "skull",
    "slab",
    "slam",
    "sleep",
    "slender",
    "slice",
    "slide",
    "slight",
    "slim",
    "slogan",
    "slot",
    "slow",
    "slush",
    "small",
    "smart",
    "smile",
    "smoke",
    "smooth",
    "snack",
    "snake",
    "snap",
    "sniff",
    "snow",
    "soap",
    "soccer",
    "social",
    "sock",
    "soda",
    "soft",
    "solar",
    "soldier",
    "solid",
    "solution",
    "solve",
    "someone",
    "song",
    "soon",
    "sorry",
    "sort",
    "soul",
    "sound",
    "soup",
    "source",
    "south",
    "space",
    "spare",
    "spatial",
    "spawn",
    "speak",
    "special",
    "speed",
    "spell",
    "spend",
    "sphere",
    "spice",
    "spider",
    "spike",
    "spin",
    "spirit",
    "split",
    "spoil",
    "sponsor",
    "spoon",
    "sport",
    "spot",
    "spray",
    "spread",
    "spring",
    "spy",
    "square",
    "squeeze",
    "squirrel",
    "stable",
    "stadium",
    "staff",
    "stage",
    "stairs",
    "stamp",
    "stand",
    "start",
    "state",
    "stay",
    "steak",
    "steel",
    "stem",
    "step",
    "stereo",
    "stick",
    "still",
    "sting",
    "stock",
    "stomach",
    "stone",
    "stool",
    "story",
    "stove",
    "strategy",
    "street",
    "strike",
    "strong",
    "struggle",
    "student",
    "stuff",
    "stumble",
    "style",
    "subject",
    "submit",
    "subway",
    "success",
    "such",
    "sudden",
    "suffer",
    "sugar",
    "suggest",
    "suit",
    "summer",
    "sun",
    "sunny",
    "sunset",
    "super",
    "supply",
    "supreme",
    "sure",
    "surface",
    "surge",
    "surprise",
    "surround",
    "survey",
    "suspect",
    "sustain",
    "swallow",
    "swamp",
    "swap",
    "swarm",
    "swear",
    "sweet",
    "swift",
    "swim",
    "swing",
    "switch",
    "sword",
    "symbol",
    "symptom",
    "syrup",
    "system",
    "table",
    "tackle",
    "tag",
    "tail",
    "talent",
    "talk",
    "tank",
    "tape",
    "target",
    "task",
    "taste",
    "tattoo",
    "taxi",
    "teach",
    "team",
    "tell",
    "ten",
    "tenant",
    "tennis",
    "tent",
    "term",
    "test",
    "text",
    "thank",
    "that",
    "theme",
    "then",
    "theory",
    "there",
    "they",
    "thing",
    "this",
    "thought",
    "three",
    "thrive",
    "throw",
    "thumb",
    "thunder",
    "ticket",
    "tide",
    "tiger",
    "tilt",
    "timber",
    "time",
    "tiny",
    "tip",
    "tired",
    "tissue",
    "title",
    "toast",
    "tobacco",
    "today",
    "toddler",
    "toe",
    "together",
    "toilet",
    "token",
    "tomato",
    "tomorrow",
    "tone",
    "tongue",
    "tonight",
    "tool",
    "tooth",
    "top",
    "topic",
    "topple",
    "torch",
    "tornado",
    "tortoise",
    "toss",
    "total",
    "tourist",
    "toward",
    "tower",
    "town",
    "toy",
    "track",
    "trade",
    "traffic",
    "tragic",
    "train",
    "transfer",
    "trap",
    "trash",
    "travel",
    "tray",
    "treat",
    "tree",
    "trend",
    "trial",
    "tribe",
    "trick",
    "trigger",
    "trim",
    "trip",
    "trophy",
    "trouble",
    "truck",
    "true",
    "truly",
    "trumpet",
    "trust",
    "truth",
    "try",
    "tube",
    "tuition",
    "tumble",
    "tuna",
    "tunnel",
    "turkey",
    "turn",
    "turtle",
    "twelve",
    "twenty",
    "twice",
    "twin",
    "twist",
    "two",
    "type",
    "typical",
    "ugly",
    "umbrella",
    "unable",
    "unaware",
    "uncle",
    "uncover",
    "under",
    "undo",
    "unfair",
    "unfold",
    "unhappy",
    "uniform",
    "unique",
    "unit",
    "universe",
    "unknown",
    "unlock",
    "until",
    "unusual",
    "unveil",
    "update",
    "upgrade",
    "uphold",
    "upon",
    "upper",
    "upset",
    "urban",
    "urge",
    "usage",
    "use",
    "used",
    "useful",
    "useless",
    "usual",
    "utility",
    "vacant",
    "vacuum",
    "vague",
    "valid",
    "valley",
    "valve",
    "van",
    "vanish",
    "vapor",
    "various",
    "vast",
    "vault",
    "vehicle",
    "velvet",
    "vendor",
    "venture",
    "venue",
    "verb",
    "verify",
    "version",
    "very",
    "vessel",
    "veteran",
    "viable",
    "vibrant",
    "vicious",
    "victory",
    "video",
    "view",
    "village",
    "vintage",
    "violin",
    "virtual",
    "virus",
    "visa",
    "visit",
    "visual",
    "vital",
    "vivid",
    "vocal",
    "voice",
    "void",
    "volcano",
    "volume",
    "vote",
    "voyage",
    "wage",
    "wagon",
    "wait",
    "walk",
    "wall",
    "walnut",
    "want",
    "warfare",
    "warm",
    "warrior",
    "wash",
    "wasp",
    "waste",
    "water",
    "wave",
    "way",
    "wealth",
    "weapon",
    "wear",
    "weasel",
    "weather",
    "web",
    "wedding",
    "weekend",
    "weird",
    "welcome",
    "west",
    "wet",
    "whale",
    "what",
    "wheat",
    "wheel",
    "when",
    "where",
    "whip",
    "whisper",
    "wide",
    "width",
    "wife",
    "wild",
    "will",
    "win",
    "window",
    "wine",
    "wing",
    "wink",
    "winner",
    "winter",
    "wire",
    "wisdom",
    "wise",
    "wish",
    "witness",
    "wolf",
    "woman",
    "wonder",
    "wood",
    "wool",
    "word",
    "work",
    "world",
    "worry",
    "worth",
    "wrap",
    "wreck",
    "wrestle",
    "wrist",
    "write",
    "wrong",
    "yard",
    "year",
    "yellow",
    "you",
    "young",
    "youth",
    "zebra",
    "zero",
    "zone",
    "zoo"
  ];
  function getLowerMask(bits) {
    return (1 << bits) - 1;
  }
  function getUpperMask(bits) {
    return (1 << bits) - 1 << 8 - bits;
  }
  function getWords(mnemonic) {
    if (!Array.isArray(mnemonic)) {
      return mnemonic.split(/\s+/);
    }
    return mnemonic;
  }
  function getPhrase(mnemonic) {
    if (Array.isArray(mnemonic)) {
      return mnemonic.join(" ");
    }
    return mnemonic;
  }
  function entropyToMnemonicIndices(entropy) {
    const indices = [0];
    let remainingBits = 11;
    for (let i = 0; i < entropy.length; i += 1) {
      if (remainingBits > 8) {
        indices[indices.length - 1] <<= 8;
        indices[indices.length - 1] |= entropy[i];
        remainingBits -= 8;
      } else {
        indices[indices.length - 1] <<= remainingBits;
        indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
        indices.push(entropy[i] & getLowerMask(8 - remainingBits));
        remainingBits += 3;
      }
    }
    const checksumBits = entropy.length / 4;
    const checksum = arrayify(sha2562(entropy))[0] & getUpperMask(checksumBits);
    indices[indices.length - 1] <<= checksumBits;
    indices[indices.length - 1] |= checksum >> 8 - checksumBits;
    return indices;
  }
  function mnemonicWordsToEntropy(words, wordlist) {
    const size = Math.ceil(11 * words.length / 8);
    const entropy = arrayify(new Uint8Array(size));
    let offset = 0;
    for (let i = 0; i < words.length; i += 1) {
      const index = wordlist.indexOf(words[i].normalize("NFKD"));
      if (index === -1) {
        throw new FuelError(
          ErrorCode.INVALID_MNEMONIC,
          `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`
        );
      }
      for (let bit = 0; bit < 11; bit += 1) {
        if (index & 1 << 10 - bit) {
          entropy[offset >> 3] |= 1 << 7 - offset % 8;
        }
        offset += 1;
      }
    }
    const entropyBits = 32 * words.length / 3;
    const checksumBits = words.length / 3;
    const checksumMask = getUpperMask(checksumBits);
    const checksum = arrayify(sha2562(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
      throw new FuelError(
        ErrorCode.INVALID_CHECKSUM,
        "Checksum validation failed for the provided mnemonic."
      );
    }
    return entropy.slice(0, entropyBits / 8);
  }
  var MasterSecret = toUtf8Bytes("Bitcoin seed");
  var MainnetPRV = "0x0488ade4";
  var TestnetPRV = "0x04358394";
  var MNEMONIC_SIZES = [12, 15, 18, 21, 24];
  function assertWordList(wordlist) {
    if (wordlist.length !== 2048) {
      throw new FuelError(
        ErrorCode.INVALID_WORD_LIST,
        `Expected word list length of 2048, but got ${wordlist.length}.`
      );
    }
  }
  function assertEntropy(entropy) {
    if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
      throw new FuelError(
        ErrorCode.INVALID_ENTROPY,
        `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`
      );
    }
  }
  function assertMnemonic(words) {
    if (!MNEMONIC_SIZES.includes(words.length)) {
      const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(
        ", "
      )}] words, but got ${words.length}.`;
      throw new FuelError(ErrorCode.INVALID_MNEMONIC, errorMsg);
    }
  }
  var Mnemonic = class {
    wordlist;
    /**
     *
     * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.
     * @returns Mnemonic instance
     */
    constructor(wordlist = english) {
      this.wordlist = wordlist;
      assertWordList(this.wordlist);
    }
    /**
     *
     * @param phrase - Mnemonic phrase composed by words from the provided wordlist
     * @returns Entropy hash
     */
    mnemonicToEntropy(phrase) {
      return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);
    }
    /**
     *
     * @param entropy - Entropy source to the mnemonic phrase.
     * @returns Mnemonic phrase
     */
    entropyToMnemonic(entropy) {
      return Mnemonic.entropyToMnemonic(entropy, this.wordlist);
    }
    /**
     *
     * @param phrase - Mnemonic phrase composed by words from the provided wordlist
     * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.
     * @returns Mnemonic phrase
     */
    static mnemonicToEntropy(phrase, wordlist = english) {
      const words = getWords(phrase);
      assertMnemonic(words);
      return hexlify(mnemonicWordsToEntropy(words, wordlist));
    }
    /**
     * @param entropy - Entropy source to the mnemonic phrase.
     * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
     * @returns 64-byte array contains privateKey and chainCode as described on BIP39
     */
    static entropyToMnemonic(entropy, wordlist = english) {
      const entropyBytes = arrayify(entropy);
      assertWordList(wordlist);
      assertEntropy(entropyBytes);
      return entropyToMnemonicIndices(entropyBytes).map((i) => wordlist[i]).join(" ");
    }
    /**
     * @param phrase - Mnemonic phrase composed by words from the provided wordlist
     * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`
     * @returns 64-byte array contains privateKey and chainCode as described on BIP39
     */
    static mnemonicToSeed(phrase, passphrase = "") {
      assertMnemonic(getWords(phrase));
      const phraseBytes = toUtf8Bytes(getPhrase(phrase));
      const salt = toUtf8Bytes(`mnemonic${passphrase}`);
      return pbkdf222(phraseBytes, salt, 2048, 64, "sha512");
    }
    /**
     * @param phrase - Mnemonic phrase composed by words from the provided wordlist
     * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`
     * @returns 64-byte array contains privateKey and chainCode as described on BIP39
     */
    static mnemonicToMasterKeys(phrase, passphrase = "") {
      const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);
      return Mnemonic.masterKeysFromSeed(seed);
    }
    /**
     * Validates if given mnemonic is  valid
     * @param phrase - Mnemonic phrase composed by words from the provided wordlist
     * @returns true if phrase is a valid mnemonic
     */
    static isMnemonicValid(phrase) {
      const words = getWords(phrase);
      let i = 0;
      try {
        assertMnemonic(words);
      } catch {
        return false;
      }
      while (i < words.length) {
        if (Mnemonic.binarySearch(words[i]) === false) {
          return false;
        }
        i += 1;
      }
      return true;
    }
    static binarySearch(target) {
      const words = english;
      let left = 0;
      let right = words.length - 1;
      while (left <= right) {
        const mid = Math.floor((left + right) / 2);
        if (words[mid] === target) {
          return true;
        }
        if (target < words[mid]) {
          right = mid - 1;
        } else {
          left = mid + 1;
        }
      }
      return false;
    }
    /**
     * @param seed - BIP39 seed
     * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).
     * @returns 64-byte array contains privateKey and chainCode as described on BIP39
     */
    static masterKeysFromSeed(seed) {
      const seedArray = arrayify(seed);
      if (seedArray.length < 16 || seedArray.length > 64) {
        throw new FuelError(
          ErrorCode.INVALID_SEED,
          `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`
        );
      }
      return arrayify(computeHmac2("sha512", MasterSecret, seedArray));
    }
    /**
     * Get the extendKey as defined on BIP-32 from the provided seed
     *
     * @param seed - BIP39 seed
     * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
     * @returns BIP-32 extended private key
     */
    static seedToExtendedKey(seed, testnet = false) {
      const masterKey = Mnemonic.masterKeysFromSeed(seed);
      const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);
      const depth = "0x00";
      const fingerprint = "0x00000000";
      const index = "0x00000000";
      const chainCode = masterKey.slice(32);
      const privateKey = masterKey.slice(0, 32);
      const extendedKey = concat([
        prefix,
        depth,
        fingerprint,
        index,
        chainCode,
        concat(["0x00", privateKey])
      ]);
      const checksum = dataSlice(sha2562(sha2562(extendedKey)), 0, 4);
      return encodeBase58(concat([extendedKey, checksum]));
    }
    /**
     *  Create a new mnemonic using a randomly generated number as entropy.
     *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.
     *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.
     *  If not provided, the default entropy length will be set to 256 bits.
     *  The return is a list of words that encodes the generated entropy.
     *
     *
     * @param size - Number of bytes used as an entropy
     * @param extraEntropy - Optional extra entropy to increase randomness
     * @returns A randomly generated mnemonic
     */
    static generate(size = 32, extraEntropy = "") {
      const entropy = extraEntropy ? sha2562(concat([randomBytes22(size), arrayify(extraEntropy)])) : randomBytes22(size);
      return Mnemonic.entropyToMnemonic(entropy);
    }
  };
  var mnemonic_default = Mnemonic;
  var HARDENED_INDEX = 2147483648;
  var MainnetPRV2 = hexlify("0x0488ade4");
  var MainnetPUB = hexlify("0x0488b21e");
  var TestnetPRV2 = hexlify("0x04358394");
  var TestnetPUB = hexlify("0x043587cf");
  function base58check(data) {
    return encodeBase58(concat([data, dataSlice(sha2562(sha2562(data)), 0, 4)]));
  }
  function getExtendedKeyPrefix(isPublic = false, testnet = false) {
    if (isPublic) {
      return testnet ? TestnetPUB : MainnetPUB;
    }
    return testnet ? TestnetPRV2 : MainnetPRV2;
  }
  function isPublicExtendedKey(extendedKey) {
    return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));
  }
  function isValidExtendedKey(extendedKey) {
    return [MainnetPRV2, TestnetPRV2, MainnetPUB, TestnetPUB].includes(
      hexlify(extendedKey.slice(0, 4))
    );
  }
  function parsePath(path22, depth = 0) {
    const components = path22.split("/");
    if (components.length === 0 || components[0] === "m" && depth !== 0) {
      throw new FuelError(ErrorCode.HD_WALLET_ERROR, `invalid path - ${path22}`);
    }
    if (components[0] === "m") {
      components.shift();
    }
    return components.map(
      (p) => ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)
    );
  }
  var HDWallet = class {
    depth = 0;
    index = 0;
    fingerprint = hexlify("0x00000000");
    parentFingerprint = hexlify("0x00000000");
    privateKey;
    publicKey;
    chainCode;
    /**
     * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets
     *
     * @param config - Wallet configurations
     */
    constructor(config) {
      if (config.privateKey) {
        const signer = new Signer(config.privateKey);
        this.publicKey = hexlify(signer.compressedPublicKey);
        this.privateKey = hexlify(config.privateKey);
      } else {
        if (!config.publicKey) {
          throw new FuelError(
            ErrorCode.HD_WALLET_ERROR,
            "Both public and private Key cannot be missing. At least one should be provided."
          );
        }
        this.publicKey = hexlify(config.publicKey);
      }
      this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;
      this.fingerprint = dataSlice(ripemd16022(sha2562(this.publicKey)), 0, 4);
      this.depth = config.depth || this.depth;
      this.index = config.index || this.index;
      this.chainCode = config.chainCode;
    }
    get extendedKey() {
      return this.toExtendedKey();
    }
    /**
     * Derive the current HDWallet instance navigating only on the index.
     * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
     *
     * @param index - Index of the child HDWallet.
     * @returns A new instance of HDWallet on the derived index
     */
    deriveIndex(index) {
      const privateKey = this.privateKey && arrayify(this.privateKey);
      const publicKey = arrayify(this.publicKey);
      const chainCode = arrayify(this.chainCode);
      const data = new Uint8Array(37);
      if (index & HARDENED_INDEX) {
        if (!privateKey) {
          throw new FuelError(
            ErrorCode.HD_WALLET_ERROR,
            "Cannot derive a hardened index without a private Key."
          );
        }
        data.set(privateKey, 1);
      } else {
        data.set(arrayify(this.publicKey));
      }
      data.set(toBytes(index, 4), 33);
      const bytes2 = arrayify(computeHmac2("sha512", chainCode, data));
      const IL = bytes2.slice(0, 32);
      const IR = bytes2.slice(32);
      if (privateKey) {
        const N = "0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";
        const ki = bn(IL).add(privateKey).mod(N).toBytes(32);
        return new HDWallet({
          privateKey: ki,
          chainCode: IR,
          index,
          depth: this.depth + 1,
          parentFingerprint: this.fingerprint
        });
      }
      const signer = new Signer(hexlify(IL));
      const Ki = signer.addPoint(publicKey);
      return new HDWallet({
        publicKey: Ki,
        chainCode: IR,
        index,
        depth: this.depth + 1,
        parentFingerprint: this.fingerprint
      });
    }
    /**
     * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)
     *
     * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`
     * @returns A new instance of HDWallet on the derived path
     */
    derivePath(path22) {
      const paths = parsePath(path22, this.depth);
      return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), this);
    }
    /**
     * Get the extendKey as defined on BIP-32 from the provided seed
     *
     * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.
     * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).
     * @returns BIP-32 extended private key
     */
    toExtendedKey(isPublic = false, testnet = false) {
      if (this.depth >= 256) {
        throw new FuelError(
          ErrorCode.HD_WALLET_ERROR,
          `Exceeded max depth of 255. Current depth: ${this.depth}.`
        );
      }
      const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);
      const depth = hexlify(Uint8Array.from([this.depth]));
      const parentFingerprint = this.parentFingerprint;
      const index = toHex(this.index, 4);
      const chainCode = this.chainCode;
      const key = this.privateKey != null && !isPublic ? concat(["0x00", this.privateKey]) : this.publicKey;
      const extendedKey = arrayify(concat([prefix, depth, parentFingerprint, index, chainCode, key]));
      return base58check(extendedKey);
    }
    /**
     * Create HDWallet instance from seed
     *
     * @param seed - Seed
     * @returns A new instance of HDWallet
     */
    static fromSeed(seed) {
      const masterKey = mnemonic_default.masterKeysFromSeed(seed);
      return new HDWallet({
        chainCode: arrayify(masterKey.slice(32)),
        privateKey: arrayify(masterKey.slice(0, 32))
      });
    }
    static fromExtendedKey(extendedKey) {
      const decoded = hexlify(toBytes(decodeBase58(extendedKey)));
      const bytes2 = arrayify(decoded);
      const validChecksum = base58check(bytes2.slice(0, 78)) === extendedKey;
      if (bytes2.length !== 82 || !isValidExtendedKey(bytes2)) {
        throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Provided key is not a valid extended key.");
      }
      if (!validChecksum) {
        throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Provided key has an invalid checksum.");
      }
      const depth = bytes2[4];
      const parentFingerprint = hexlify(bytes2.slice(5, 9));
      const index = parseInt(hexlify(bytes2.slice(9, 13)).substring(2), 16);
      const chainCode = hexlify(bytes2.slice(13, 45));
      const key = bytes2.slice(45, 78);
      if (depth === 0 && parentFingerprint !== "0x00000000" || depth === 0 && index !== 0) {
        throw new FuelError(
          ErrorCode.HD_WALLET_ERROR,
          "Inconsistency detected: Depth is zero but fingerprint/index is non-zero."
        );
      }
      if (isPublicExtendedKey(bytes2)) {
        if (key[0] !== 3) {
          throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Invalid public extended key.");
        }
        return new HDWallet({
          publicKey: key,
          chainCode,
          index,
          depth,
          parentFingerprint
        });
      }
      if (key[0] !== 0) {
        throw new FuelError(ErrorCode.HD_WALLET_ERROR, "Invalid private extended key.");
      }
      return new HDWallet({
        privateKey: key.slice(1),
        chainCode,
        index,
        depth,
        parentFingerprint
      });
    }
  };
  var hdwallet_default = HDWallet;
  var WalletLocked = class extends Account {
    /**
     * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.
     *
     * @param privateKey - The private key used to unlock the wallet.
     * @returns An instance of WalletUnlocked.
     */
    unlock(privateKey) {
      return new WalletUnlocked(privateKey, this._provider);
    }
  };
  var WalletUnlocked = class extends BaseWalletUnlocked {
    /**
     * Locks the wallet and returns an instance of WalletLocked.
     *
     * @returns An instance of WalletLocked.
     */
    lock() {
      this.signer = () => new Signer("0x00");
      return new WalletLocked(this.address, this._provider);
    }
    /**
     * Generate a new Wallet Unlocked with a random key pair.
     *
     * @param generateOptions - Options to customize the generation process (optional).
     * @returns An instance of WalletUnlocked.
     */
    static generate(generateOptions) {
      const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);
      return new WalletUnlocked(privateKey, generateOptions?.provider);
    }
    /**
     * Create a Wallet Unlocked from a seed.
     *
     * @param seed - The seed phrase.
     * @param provider - A Provider instance (optional).
     * @param path - The derivation path (optional).
     * @returns An instance of WalletUnlocked.
     */
    static fromSeed(seed, path22, provider) {
      const hdWallet = hdwallet_default.fromSeed(seed);
      const childWallet = hdWallet.derivePath(path22 || WalletUnlocked.defaultPath);
      return new WalletUnlocked(childWallet.privateKey, provider);
    }
    /**
     * Create a Wallet Unlocked from a mnemonic phrase.
     *
     * @param mnemonic - The mnemonic phrase.
     * @param provider - A Provider instance (optional).
     * @param path - The derivation path (optional).
     * @param passphrase - The passphrase for the mnemonic (optional).
     * @returns An instance of WalletUnlocked.
     */
    static fromMnemonic(mnemonic, path22, passphrase, provider) {
      const seed = mnemonic_default.mnemonicToSeed(mnemonic, passphrase);
      const hdWallet = hdwallet_default.fromSeed(seed);
      const childWallet = hdWallet.derivePath(path22 || WalletUnlocked.defaultPath);
      return new WalletUnlocked(childWallet.privateKey, provider);
    }
    /**
     * Create a Wallet Unlocked from an extended key.
     *
     * @param extendedKey - The extended key.
     * @param provider - A Provider instance (optional).
     * @returns An instance of WalletUnlocked.
     */
    static fromExtendedKey(extendedKey, provider) {
      const hdWallet = hdwallet_default.fromExtendedKey(extendedKey);
      return new WalletUnlocked(hdWallet.privateKey, provider);
    }
    /**
     * Create a Wallet Unlocked from an encrypted JSON.
     *
     * @param jsonWallet - The encrypted JSON keystore.
     * @param password - The password to decrypt the JSON.
     * @param provider - A Provider instance (optional).
     * @returns An unlocked wallet instance.
     */
    static async fromEncryptedJson(jsonWallet, password, provider) {
      const privateKey = await decryptKeystoreWallet(jsonWallet, password);
      return new WalletUnlocked(privateKey, provider);
    }
  };
  var Wallet = class {
    /**
     * Creates a locked wallet instance from an address and a provider.
     *
     * @param address - The address of the wallet.
     * @param provider - A Provider instance (optional).
     * @returns A locked wallet instance.
     */
    static fromAddress(address, provider) {
      return new WalletLocked(address, provider);
    }
    /**
     * Creates an unlocked wallet instance from a private key and a provider.
     *
     * @param privateKey - The private key of the wallet.
     * @param provider - A Provider instance (optional).
     * @returns An unlocked wallet instance.
     */
    static fromPrivateKey(privateKey, provider) {
      return new WalletUnlocked(privateKey, provider);
    }
  };
  __publicField4(Wallet, "generate", WalletUnlocked.generate);
  __publicField4(Wallet, "fromSeed", WalletUnlocked.fromSeed);
  __publicField4(Wallet, "fromMnemonic", WalletUnlocked.fromMnemonic);
  __publicField4(Wallet, "fromExtendedKey", WalletUnlocked.fromExtendedKey);
  __publicField4(Wallet, "fromEncryptedJson", WalletUnlocked.fromEncryptedJson);
  var WalletsConfig = class {
    initialState;
    options;
    wallets;
    generateWallets = () => {
      const generatedWallets = [];
      for (let index = 1; index <= this.options.count; index++) {
        generatedWallets.push(new WalletUnlocked(randomBytes22(32)));
      }
      return generatedWallets;
    };
    constructor(baseAssetId, config) {
      WalletsConfig.validate(config);
      this.options = config;
      const { assets: assets2, coinsPerAsset, amountPerCoin, messages } = this.options;
      this.wallets = this.generateWallets();
      this.initialState = {
        messages: WalletsConfig.createMessages(this.wallets, messages),
        coins: WalletsConfig.createCoins(
          this.wallets,
          baseAssetId,
          assets2,
          coinsPerAsset,
          amountPerCoin
        )
      };
    }
    apply(snapshotConfig) {
      return {
        ...snapshotConfig,
        stateConfig: {
          ...snapshotConfig?.stateConfig ?? defaultSnapshotConfigs.stateConfig,
          coins: this.initialState.coins.concat(snapshotConfig?.stateConfig?.coins || []),
          messages: this.initialState.messages.concat(snapshotConfig?.stateConfig?.messages ?? [])
        }
      };
    }
    /**
     * Create messages for the wallets in the format that the chain expects.
     */
    static createMessages(wallets, messages) {
      return messages.map((msg) => wallets.map((wallet) => msg.toChainMessage(wallet.address))).flatMap((x) => x);
    }
    /**
     * Create coins for the wallets in the format that the chain expects.
     */
    static createCoins(wallets, baseAssetId, assets2, coinsPerAsset, amountPerCoin) {
      const coins = [];
      let assetIds = [baseAssetId];
      if (Array.isArray(assets2)) {
        assetIds = assetIds.concat(assets2.map((a) => a.value));
      } else {
        assetIds = assetIds.concat(TestAssetId.random(assets2 - 1).map((a) => a.value));
      }
      wallets.map((wallet) => wallet.address.toHexString()).forEach((walletAddress) => {
        assetIds.forEach((assetId) => {
          for (let index = 0; index < coinsPerAsset; index++) {
            coins.push({
              amount: amountPerCoin,
              asset_id: assetId,
              owner: walletAddress,
              tx_pointer_block_height: 0,
              tx_pointer_tx_idx: 0,
              output_index: 0,
              tx_id: hexlify(randomBytes22(32))
            });
          }
        });
      });
      return coins;
    }
    static validate({
      count: wallets,
      assets: assets2,
      coinsPerAsset,
      amountPerCoin
    }) {
      if (Array.isArray(wallets) && wallets.length === 0 || typeof wallets === "number" && wallets <= 0) {
        throw new FuelError(
          FuelError.CODES.INVALID_INPUT_PARAMETERS,
          "Number of wallets must be greater than zero."
        );
      }
      if (Array.isArray(assets2) && assets2.length === 0 || typeof assets2 === "number" && assets2 <= 0) {
        throw new FuelError(
          FuelError.CODES.INVALID_INPUT_PARAMETERS,
          "Number of assets per wallet must be greater than zero."
        );
      }
      if (coinsPerAsset <= 0) {
        throw new FuelError(
          FuelError.CODES.INVALID_INPUT_PARAMETERS,
          "Number of coins per asset must be greater than zero."
        );
      }
      if (amountPerCoin < 0) {
        throw new FuelError(
          FuelError.CODES.INVALID_INPUT_PARAMETERS,
          "Amount per coin must be greater than or equal to zero."
        );
      }
    }
  };
  var defaultWalletConfigOptions = {
    count: 2,
    assets: [TestAssetId.A, TestAssetId.B],
    coinsPerAsset: 1,
    amountPerCoin: 1e10,
    messages: []
  };
  async function setupTestProviderAndWallets({
    walletsConfig: walletsConfigOptions = {},
    providerOptions,
    nodeOptions = {},
    launchNodeServerPort = process.env.LAUNCH_NODE_SERVER_PORT || void 0
  } = {}) {
    Symbol.dispose ??= Symbol("Symbol.dispose");
    const walletsConfig = new WalletsConfig(
      nodeOptions.snapshotConfig?.chainConfig?.consensus_parameters?.V2?.base_asset_id ?? defaultSnapshotConfigs.chainConfig.consensus_parameters.V2.base_asset_id,
      {
        ...defaultWalletConfigOptions,
        ...walletsConfigOptions
      }
    );
    const launchNodeOptions = {
      loggingEnabled: false,
      ...nodeOptions,
      snapshotConfig: mergeDeepRight_default(
        defaultSnapshotConfigs,
        walletsConfig.apply(nodeOptions?.snapshotConfig)
      ),
      port: nodeOptions.port || "0"
    };
    let cleanup;
    let url;
    if (launchNodeServerPort) {
      const serverUrl = `http://localhost:${launchNodeServerPort}`;
      url = await (await fetch(serverUrl, { method: "POST", body: JSON.stringify(launchNodeOptions) })).text();
      cleanup = () => {
        fetch(`${serverUrl}/cleanup/${url}`);
      };
    } else {
      const settings = await launchNode(launchNodeOptions);
      url = settings.url;
      cleanup = settings.cleanup;
    }
    let provider;
    try {
      provider = new Provider(url, providerOptions);
      await provider.init();
    } catch (err) {
      cleanup();
      throw err;
    }
    const wallets = walletsConfig.wallets;
    wallets.forEach((wallet) => {
      wallet.connect(provider);
    });
    return {
      provider,
      wallets,
      cleanup,
      [Symbol.dispose]: cleanup
    };
  }
  var TestMessage = class {
    sender;
    recipient;
    nonce;
    amount;
    data;
    da_height;
    /**
     * A helper class to create messages for testing purposes.
     *
     * Used in tandem with `WalletsConfig`.
     * It can also be used standalone and passed into the initial state of a chain via the `.toChainMessage` method.
     */
    constructor({
      sender = Address.fromRandom(),
      recipient = Address.fromRandom(),
      nonce = hexlify(randomBytes22(32)),
      amount = 1e6,
      data = "",
      // Will default to empty data in order to be a spendable message
      da_height = 0
    } = {}) {
      this.sender = sender;
      this.recipient = recipient;
      this.nonce = nonce;
      this.amount = amount;
      this.data = data;
      this.da_height = da_height;
    }
    toChainMessage(recipient) {
      const data = /^0x/.test(this.data) ? this.data.replace(/^0x/, "") : this.data;
      return {
        sender: this.sender.toB256(),
        recipient: recipient?.toB256() ?? this.recipient.toB256(),
        nonce: this.nonce,
        amount: bn(this.amount).toNumber(),
        data,
        da_height: this.da_height
      };
    }
  };

  // ../contract/dist/test-utils.mjs
  var import_fs2 = __require("fs");
  var path2 = __toESM(__require("path"), 1);
  function getChainSnapshot(nodeOptions) {
    let envChainMetadata;
    let chainConfig;
    let stateConfig;
    if (process.env.DEFAULT_CHAIN_SNAPSHOT_DIR) {
      const dirname = process.env.DEFAULT_CHAIN_SNAPSHOT_DIR;
      envChainMetadata = JSON.parse(
        (0, import_fs2.readFileSync)(path2.join(dirname, "metadata.json"), "utf-8")
      );
      chainConfig = JSON.parse(
        (0, import_fs2.readFileSync)(path2.join(dirname, envChainMetadata.chain_config), "utf-8")
      );
      stateConfig = JSON.parse(
        (0, import_fs2.readFileSync)(path2.join(dirname, envChainMetadata.table_encoding.Json.filepath), "utf-8")
      );
    }
    const obj = [envChainMetadata, chainConfig, stateConfig].reduce((acc, val, idx) => {
      if (val === void 0) {
        return acc;
      }
      switch (idx) {
        case 0:
          acc.metadata = val;
          break;
        case 1:
          acc.chainConfig = val;
          break;
        case 2:
          acc.stateConfig = val;
          break;
        default:
          return acc;
      }
      return acc;
    }, {});
    return mergeDeepRight_default(obj, nodeOptions?.snapshotConfig ?? {});
  }
  function getFuelCoreArgs(nodeOptions) {
    const envArgs = process.env.DEFAULT_FUEL_CORE_ARGS ? process.env.DEFAULT_FUEL_CORE_ARGS.split(" ") : void 0;
    return nodeOptions?.args ?? envArgs;
  }
  function getWalletForDeployment(config, wallets) {
    if (!("walletIndex" in config) || !config.walletIndex) {
      return wallets[0];
    }
    const validWalletIndex = config.walletIndex >= 0 && config.walletIndex < wallets.length;
    if (!validWalletIndex) {
      throw new FuelError(
        FuelError.CODES.INVALID_INPUT_PARAMETERS,
        `Invalid walletIndex ${config.walletIndex}; wallets array contains ${wallets.length} elements.`
      );
    }
    return wallets[config.walletIndex];
  }
  async function launchTestNode({
    providerOptions = {},
    walletsConfig = {},
    nodeOptions = {},
    contractsConfigs
  } = {}) {
    const snapshotConfig = getChainSnapshot(nodeOptions);
    const args = getFuelCoreArgs(nodeOptions);
    const { provider, wallets, cleanup } = await setupTestProviderAndWallets({
      walletsConfig,
      providerOptions,
      nodeOptions: {
        ...nodeOptions,
        snapshotConfig,
        args
      }
    });
    const contracts = [];
    const configs = contractsConfigs ?? [];
    try {
      for (let i = 0; i < configs.length; i++) {
        const config = configs[i];
        const deploy = "factory" in config ? config.factory.deploy : config.deploy;
        const options = "factory" in config ? config.options ?? {} : {};
        const { waitForResult } = await deploy(getWalletForDeployment(config, wallets), options);
        const { contract } = await waitForResult();
        contracts.push(contract);
      }
    } catch (err) {
      cleanup();
      throw err;
    }
    return {
      provider,
      wallets,
      contracts,
      cleanup,
      [Symbol.dispose]: cleanup
    };
  }

  // ../errors/dist/test-utils.mjs
  var safeExec = async (lambda) => {
    let error2;
    let result;
    try {
      result = await lambda();
    } catch (_error) {
      error2 = _error;
    }
    return { error: error2, result };
  };
  var ErrorCode2 = /* @__PURE__ */ ((ErrorCode22) => {
    ErrorCode22["NO_ABIS_FOUND"] = "no-abis-found";
    ErrorCode22["ABI_TYPES_AND_VALUES_MISMATCH"] = "abi-types-and-values-mismatch";
    ErrorCode22["ABI_MAIN_METHOD_MISSING"] = "abi-main-method-missing";
    ErrorCode22["INVALID_COMPONENT"] = "invalid-component";
    ErrorCode22["CONFIGURABLE_NOT_FOUND"] = "configurable-not-found";
    ErrorCode22["TYPE_NOT_FOUND"] = "type-not-found";
    ErrorCode22["LOG_TYPE_NOT_FOUND"] = "log-type-not-found";
    ErrorCode22["TYPE_NOT_SUPPORTED"] = "type-not-supported";
    ErrorCode22["INVALID_DECODE_VALUE"] = "invalid-decode-value";
    ErrorCode22["JSON_ABI_ERROR"] = "json-abi-error";
    ErrorCode22["TYPE_ID_NOT_FOUND"] = "type-id-not-found";
    ErrorCode22["BIN_FILE_NOT_FOUND"] = "bin-file-not-found";
    ErrorCode22["CODER_NOT_FOUND"] = "coder-not-found";
    ErrorCode22["INVALID_DATA"] = "invalid-data";
    ErrorCode22["FUNCTION_NOT_FOUND"] = "function-not-found";
    ErrorCode22["UNSUPPORTED_ENCODING_VERSION"] = "unsupported-encoding-version";
    ErrorCode22["TIMEOUT_EXCEEDED"] = "timeout-exceeded";
    ErrorCode22["CONFIG_FILE_NOT_FOUND"] = "config-file-not-found";
    ErrorCode22["CONFIG_FILE_ALREADY_EXISTS"] = "config-file-already-exists";
    ErrorCode22["WORKSPACE_NOT_DETECTED"] = "workspace-not-detected";
    ErrorCode22["INVALID_ADDRESS"] = "invalid-address";
    ErrorCode22["INVALID_EVM_ADDRESS"] = "invalid-evm-address";
    ErrorCode22["INVALID_B256_ADDRESS"] = "invalid-b256-address";
    ErrorCode22["CHAIN_INFO_CACHE_EMPTY"] = "chain-info-cache-empty";
    ErrorCode22["NODE_INFO_CACHE_EMPTY"] = "node-info-cache-empty";
    ErrorCode22["MISSING_PROVIDER"] = "missing-provider";
    ErrorCode22["INVALID_PROVIDER"] = "invalid-provider";
    ErrorCode22["CONNECTION_REFUSED"] = "connection-refused";
    ErrorCode22["INVALID_URL"] = "invalid-url";
    ErrorCode22["INVALID_PUBLIC_KEY"] = "invalid-public-key";
    ErrorCode22["WALLET_MANAGER_ERROR"] = "wallet-manager-error";
    ErrorCode22["HD_WALLET_ERROR"] = "hd-wallet-error";
    ErrorCode22["MISSING_CONNECTOR"] = "missing-connector";
    ErrorCode22["PARSE_FAILED"] = "parse-failed";
    ErrorCode22["ENCODE_ERROR"] = "encode-error";
    ErrorCode22["DECODE_ERROR"] = "decode-error";
    ErrorCode22["ENV_DEPENDENCY_MISSING"] = "env-dependency-missing";
    ErrorCode22["INVALID_TTL"] = "invalid-ttl";
    ErrorCode22["INVALID_INPUT_PARAMETERS"] = "invalid-input-parameters";
    ErrorCode22["NOT_IMPLEMENTED"] = "not-implemented";
    ErrorCode22["NOT_SUPPORTED"] = "not-supported";
    ErrorCode22["CONVERTING_FAILED"] = "converting-error";
    ErrorCode22["ELEMENT_NOT_FOUND"] = "element-not-found";
    ErrorCode22["MISSING_REQUIRED_PARAMETER"] = "missing-required-parameter";
    ErrorCode22["INVALID_REQUEST"] = "invalid-request";
    ErrorCode22["INVALID_TRANSFER_AMOUNT"] = "invalid-transfer-amount";
    ErrorCode22["NOT_ENOUGH_FUNDS"] = "not-enough-funds";
    ErrorCode22["INVALID_CREDENTIALS"] = "invalid-credentials";
    ErrorCode22["HASHER_LOCKED"] = "hasher-locked";
    ErrorCode22["GAS_PRICE_TOO_LOW"] = "gas-price-too-low";
    ErrorCode22["GAS_LIMIT_TOO_LOW"] = "gas-limit-too-low";
    ErrorCode22["MAX_FEE_TOO_LOW"] = "max-fee-too-low";
    ErrorCode22["TRANSACTION_NOT_FOUND"] = "transaction-not-found";
    ErrorCode22["TRANSACTION_FAILED"] = "transaction-failed";
    ErrorCode22["INVALID_CONFIGURABLE_CONSTANTS"] = "invalid-configurable-constants";
    ErrorCode22["INVALID_TRANSACTION_INPUT"] = "invalid-transaction-input";
    ErrorCode22["INVALID_TRANSACTION_OUTPUT"] = "invalid-transaction-output";
    ErrorCode22["INVALID_TRANSACTION_STATUS"] = "invalid-transaction-status";
    ErrorCode22["UNSUPPORTED_TRANSACTION_TYPE"] = "unsupported-transaction-type";
    ErrorCode22["TRANSACTION_ERROR"] = "transaction-error";
    ErrorCode22["INVALID_POLICY_TYPE"] = "invalid-policy-type";
    ErrorCode22["DUPLICATED_POLICY"] = "duplicated-policy";
    ErrorCode22["TRANSACTION_SQUEEZED_OUT"] = "transaction-squeezed-out";
    ErrorCode22["CONTRACT_SIZE_EXCEEDS_LIMIT"] = "contract-size-exceeds-limit";
    ErrorCode22["INVALID_CHUNK_SIZE_MULTIPLIER"] = "invalid-chunk-size-multiplier";
    ErrorCode22["MAX_INPUTS_EXCEEDED"] = "max-inputs-exceeded";
    ErrorCode22["FUNDS_TOO_LOW"] = "funds-too-low";
    ErrorCode22["MAX_OUTPUTS_EXCEEDED"] = "max-outputs-exceeded";
    ErrorCode22["MAX_COINS_REACHED"] = "max-coins-reached";
    ErrorCode22["ASSET_BURN_DETECTED"] = "asset-burn-detected";
    ErrorCode22["INVALID_RECEIPT_TYPE"] = "invalid-receipt-type";
    ErrorCode22["INVALID_WORD_LIST"] = "invalid-word-list";
    ErrorCode22["INVALID_MNEMONIC"] = "invalid-mnemonic";
    ErrorCode22["INVALID_ENTROPY"] = "invalid-entropy";
    ErrorCode22["INVALID_SEED"] = "invalid-seed";
    ErrorCode22["INVALID_CHECKSUM"] = "invalid-checksum";
    ErrorCode22["INVALID_PASSWORD"] = "invalid-password";
    ErrorCode22["ACCOUNT_REQUIRED"] = "account-required";
    ErrorCode22["UNLOCKED_WALLET_REQUIRED"] = "unlocked-wallet-required";
    ErrorCode22["ERROR_BUILDING_BLOCK_EXPLORER_URL"] = "error-building-block-explorer-url";
    ErrorCode22["VITEPRESS_PLUGIN_ERROR"] = "vitepress-plugin-error";
    ErrorCode22["SCRIPT_REVERTED"] = "script-reverted";
    ErrorCode22["SCRIPT_RETURN_INVALID_TYPE"] = "script-return-invalid-type";
    ErrorCode22["STREAM_PARSING_ERROR"] = "stream-parsing-error";
    ErrorCode22["NODE_LAUNCH_FAILED"] = "node-launch-failed";
    ErrorCode22["UNKNOWN"] = "unknown";
    return ErrorCode22;
  })(ErrorCode2 || {});
  var codes = Object.values(ErrorCode2);
  var expectToThrowFuelError = async (lambda, expectedError) => {
    if (!expectedError.code) {
      throw new Error("Expected error must contain a code.");
    }
    if (!codes.includes(expectedError.code)) {
      throw new Error(`Expected error code '${expectedError.code}' is not a valid FuelError code.`);
    }
    const { error: thrownError } = await safeExec(lambda);
    if (!thrownError) {
      throw new Error(`Passed-in lambda didn't throw.`);
    }
    const thrownErrorStr = `Thrown error >>> ${thrownError.toString()}`;
    if (!thrownError.code) {
      throw new Error(`Thrown error must contain a code. ${thrownErrorStr}`);
    }
    if (!codes.includes(thrownError.code)) {
      throw new Error(
        `Thrown error code '${thrownError.code}' is not a valid FuelError code. ${thrownErrorStr}`
      );
    }
    if (expectedError.code !== thrownError.code) {
      throw new Error(
        `Expected error code '${expectedError.code}' doesn't match thrown error code '${thrownError.code}'. ${thrownErrorStr}`
      );
    }
    if (expectedError.metadata) {
      expect(thrownError.metadata).toEqual(expect.objectContaining(expectedError.metadata));
    }
    if (expectedError.message) {
      expect(thrownError.message).toEqual(expectedError.message);
    }
    if (expectedError.rawError) {
      expect(thrownError.rawError).toEqual(expectedError.rawError);
    }
    expect(thrownError.name).toEqual("FuelError");
    expect(thrownError).toMatchObject(expectedError);
    return thrownError;
  };

  // ../utils/dist/test-utils.mjs
  var import_fs3 = __require("fs");
  var import_path2 = __require("path");
  var arrayify2 = (value, name, copy = true) => {
    if (value instanceof Uint8Array) {
      if (copy) {
        return new Uint8Array(value);
      }
      return value;
    }
    if (typeof value === "string" && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
      const result = new Uint8Array((value.length - 2) / 2);
      let offset = 2;
      for (let i = 0; i < result.length; i++) {
        result[i] = parseInt(value.substring(offset, offset + 2), 16);
        offset += 2;
      }
      return result;
    }
    const nameMessage = name ? ` ${name} -` : "";
    const message = `invalid data:${nameMessage} ${value}
If you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;
    throw new FuelError(ErrorCode.INVALID_DATA, message);
  };
  var HexCharacters2 = "0123456789abcdef";
  function hexlify2(data) {
    const bytes2 = arrayify2(data);
    let result = "0x";
    for (let i = 0; i < bytes2.length; i++) {
      const v = bytes2[i];
      result += HexCharacters2[(v & 240) >> 4] + HexCharacters2[v & 15];
    }
    return result;
  }
  var normalizeString = (str) => {
    const transformations = [
      (s) => s.replace(/\s+/g, "-"),
      // spaces to -
      (s) => s.replace(/\./g, "-"),
      // dots to -
      (s) => s.replace(/_/g, "-"),
      // underscore to -
      (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()),
      // delete '-' and capitalize the letter after them
      (s) => s.replace(/-/g, ""),
      // delete any '-' left
      (s) => s.replace(/^\d+/, ""),
      // removes leading digits
      (s) => s[0].toUpperCase() + s.slice(1)
      // capitalize first letter
    ];
    const output2 = transformations.reduce((s, t) => t(s), str);
    if (output2 === "") {
      const errMsg = `The provided string '${str}' results in an empty output after`.concat(
        ` normalization, therefore, it can't normalize string.`
      );
      throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);
    }
    return output2;
  };
  var TAI64_LEAP_SECONDS2 = 37;
  var TAI64_UNIX_OFFSET2 = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS2);
  function sleep2(time) {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(true);
      }, time);
    });
  }
  var BN_02 = bn(0);
  var BN_582 = bn(58);
  var getProjectBuildDir = (params) => (0, import_path2.join)(params.projectDir, "out", params.build);
  var getProjectReleaseDir = (params) => (0, import_path2.join)(params.projectDir, "out", params.build);
  var getProjectTempDir = (params) => (0, import_path2.join)(getProjectBuildDir(params), "__temp__");
  var getProjectAbiPath = (params) => (0, import_path2.join)(getProjectBuildDir(params), `${params.projectName}-abi.json`);
  var getProjectBinPath = (params) => (0, import_path2.join)(getProjectBuildDir(params), `${params.projectName}.bin`);
  var getProjectStorageSlotsPath = (params) => (0, import_path2.join)(getProjectBuildDir(params), `${params.projectName}-storage_slots.json`);
  var getProjectAbiName = (params) => `${params.projectName}-abi`;
  var getProjectNormalizedName = (params) => normalizeString(params.projectName);
  var getProjectAbi = (params) => {
    const projectPath = getProjectAbiPath(params);
    const abiContents = JSON.parse((0, import_fs3.readFileSync)(projectPath, "utf-8"));
    return abiContents;
  };
  var getProjectStorageSlots = (params) => {
    const storageSlotsFilePath = getProjectStorageSlotsPath(params);
    if (!(0, import_fs3.existsSync)(storageSlotsFilePath)) {
      return [];
    }
    const storageSlots = JSON.parse((0, import_fs3.readFileSync)(storageSlotsFilePath, "utf-8"));
    return storageSlots;
  };
  var getForcProject = (params) => {
    const buildDir = getProjectBuildDir(params);
    const tempDir = getProjectTempDir(params);
    const binPath = getProjectBinPath(params);
    const binHexlified = hexlify2((0, import_fs3.readFileSync)(binPath));
    const abiPath = getProjectAbiPath(params);
    const abiName = getProjectAbiName(params);
    const abiContents = getProjectAbi(params);
    const normalizedName = getProjectNormalizedName(params);
    const storageSlots = getProjectStorageSlots(params);
    const inputGlobal = `${buildDir}/*-abi.json`;
    return {
      name: params.projectName,
      storageSlots,
      normalizedName,
      buildDir,
      tempDir,
      binPath,
      binHexlified,
      abiPath,
      abiName,
      abiContents,
      inputGlobal
    };
  };
  var expectToBeInRange = (params) => {
    const { value, min, max } = params;
    if (value >= min && value <= max) {
      return true;
    }
    throw new FuelError(
      FuelError.CODES.INVALID_INPUT_PARAMETERS,
      `Expected value: '${value}' to be within range: '${min}-${max}'`
    );
  };
  var ASSET_A = "0x0101010101010101010101010101010101010101010101010101010101010101";
  var ASSET_B = "0x0202020202020202020202020202020202020202020202020202020202020202";
  async function waitUntilUnreachable(url) {
    let isLive;
    try {
      await fetch(url);
      isLive = true;
    } catch (e) {
      isLive = false;
    }
    if (!isLive) {
      return;
    }
    await sleep2(250);
    await waitUntilUnreachable(url);
  }
  var setupTestMatchers = (expect2) => {
    expect2.extend({
      toEqualBn(received, expected) {
        const actualBn = bn(received);
        const expectedBn = bn(expected);
        const pass = actualBn.eq(expectedBn);
        if (pass) {
          return {
            pass,
            message: () => `Expected ${actualBn} not to equal ${expectedBn}`,
            actual: actualBn
          };
        }
        return {
          pass,
          message: () => `Expected ${actualBn} to equal ${expectedBn}`,
          actual: expectedBn
        };
      }
    });
  };
})();
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=test-utils.global.js.map