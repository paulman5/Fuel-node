{"version":3,"sources":["../src/cli.ts","../src/cli/utils/logger.ts","../src/cli/commands/build/generateTypes.ts","../src/cli/config/forcUtils.ts","../src/cli/templates/index.ts","../src/cli/commands/deploy/deployContracts.ts","../src/cli/commands/deploy/createWallet.ts","../src/cli/commands/deploy/getDeployConfig.ts","../src/cli/commands/deploy/deployPredicates.ts","../src/cli/commands/deploy/deployScripts.ts","../src/cli/commands/deploy/saveContractIds.ts","../src/cli/commands/deploy/savePredicateFiles.ts","../src/cli/commands/deploy/saveScriptFiles.ts","../src/cli/commands/deploy/index.ts","../src/cli/commands/dev/autoStartFuelCore.ts","../src/test-utils.ts","../src/cli/commands/build/buildSwayProgram.ts","../src/cli/commands/build/forcHandlers.ts","../src/cli/commands/build/buildSwayPrograms.ts","../src/cli/commands/build/index.ts","../src/cli/commands/dev/index.ts","../src/cli/config/loadConfig.ts","../src/cli-utils.ts","../src/cli/config/validateConfig.ts","../src/cli/commands/withConfig.ts","../src/cli/commands/init/index.ts","../src/cli/templates/fuels.config.ts","../src/cli/commands/node/index.ts","../src/cli/commands/withBinaryPaths.ts","../src/cli/commands/withProgram.ts"],"sourcesContent":["import { configureCliOptions as configureTypegenCliOptions } from '@fuel-ts/abi-typegen/cli';\nimport { versions } from '@fuel-ts/versions';\nimport { runVersions } from '@fuel-ts/versions/cli';\nimport { Command, Option } from 'commander';\n\nimport { build } from './cli/commands/build';\nimport { deploy } from './cli/commands/deploy';\nimport { dev } from './cli/commands/dev';\nimport { init } from './cli/commands/init';\nimport { node } from './cli/commands/node';\nimport { withBinaryPaths } from './cli/commands/withBinaryPaths';\nimport { withConfig } from './cli/commands/withConfig';\nimport { withProgram } from './cli/commands/withProgram';\nimport { Commands } from './cli/types';\nimport { configureLogging } from './cli/utils/logger';\n\nexport const onPreAction = (command: Command) => {\n  const opts = command.opts();\n  configureLogging({\n    isDebugEnabled: opts.debug,\n    isLoggingEnabled: !opts.silent,\n  });\n};\n\nexport const configureCli = () => {\n  const program = new Command();\n\n  program.name('fuels');\n\n  program.option('-D, --debug', 'Enables verbose logging', false);\n  program.option('-S, --silent', 'Omit output messages', false);\n\n  program.version(versions.FUELS, '-v, --version', 'Output the version number');\n  program.helpOption('-h, --help', 'Display help');\n  program.helpCommand('help [command]', 'Display help for command');\n\n  program.enablePositionalOptions(true);\n\n  program.hook('preAction', onPreAction);\n\n  /**\n   * Defining local commands\n   */\n\n  const pathOption = new Option('--path <path>', 'Path to project root').default(process.cwd());\n\n  let command: Command;\n\n  (command = program.command(Commands.init))\n    .description('Create a sample `fuel.config.ts` file')\n    .addOption(pathOption)\n    .option('-w, --workspace <path>', 'Relative dir path to Forc workspace')\n    .addOption(\n      new Option(`-c, --contracts [paths...]`, `Relative paths to Contracts`).conflicts('workspace')\n    )\n    .addOption(\n      new Option(`-s, --scripts [paths...]`, `Relative paths to Scripts`).conflicts('workspace')\n    )\n    .addOption(\n      new Option(`-p, --predicates [paths...]`, `Relative paths to Predicates`).conflicts(\n        'workspace'\n      )\n    )\n    .requiredOption('-o, --output <path>', 'Relative dir path for Typescript generation output')\n    .option('--forc-path <path>', 'Path to the `forc` binary')\n    .option('--fuel-core-path <path>', 'Path to the `fuel-core` binary')\n    .option('--auto-start-fuel-core', 'Auto-starts a `fuel-core` node during `dev` command')\n    .option(\n      '--fuel-core-port <port>',\n      'Port to use when starting a local `fuel-core` node for dev mode'\n    )\n    .action(withProgram(command, Commands.init, init));\n\n  (command = program.command(Commands.dev))\n    .description('Start a Fuel node with hot-reload capabilities')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.dev, dev));\n\n  (command = program.command(Commands.node))\n    .description('Start a Fuel node using project configs')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.node, node));\n\n  (command = program.command(Commands.build))\n    .description('Build Sway programs and generate Typescript for them')\n    .addOption(pathOption)\n    .option(\n      '-d, --deploy',\n      'Deploy contracts after build (auto-starts a `fuel-core` node if needed)'\n    )\n    .action(withConfig(command, Commands.build, build));\n\n  (command = program.command(Commands.deploy))\n    .description('Deploy contracts to the Fuel network')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.deploy, deploy));\n\n  /**\n   * Routing external commands from sub-packages' CLIs\n   */\n\n  // Typegen\n  configureTypegenCliOptions(\n    program.command('typegen').description(`Generate Typescript from Sway ABI JSON files`)\n  );\n\n  // Versions\n  (command = program.command('versions'))\n    .description('Check for version incompatibilities')\n    .addOption(pathOption)\n    .action(withBinaryPaths(command, Commands.versions, runVersions));\n\n  return program;\n};\n","import chalk from 'chalk';\n\nexport const loggingConfig = {\n  isDebugEnabled: false,\n  isLoggingEnabled: true,\n};\n\nexport function configureLogging(params: { isDebugEnabled: boolean; isLoggingEnabled: boolean }) {\n  loggingConfig.isLoggingEnabled = params.isLoggingEnabled;\n  loggingConfig.isDebugEnabled = params.isDebugEnabled && loggingConfig.isLoggingEnabled;\n}\n\nexport function log(...data: unknown[]) {\n  if (loggingConfig.isLoggingEnabled) {\n    // eslint-disable-next-line no-console\n    console.log(data.join(' '));\n  }\n}\n\nexport function debug(...data: unknown[]) {\n  if (loggingConfig.isDebugEnabled) {\n    log(data);\n  }\n}\n\nexport function error(...data: unknown[]) {\n  // eslint-disable-next-line no-console\n  console.log(chalk.red(data.join(' ')));\n}\n\nexport function warn(...data: unknown[]) {\n  log(chalk.yellow(data.join(' ')));\n}\n","import { ProgramTypeEnum } from '@fuel-ts/abi-typegen';\nimport { runTypegen } from '@fuel-ts/abi-typegen/runTypegen';\nimport { getBinaryVersions } from '@fuel-ts/versions/cli';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { globSync } from 'glob';\nimport { join } from 'path';\n\nimport { getABIPaths } from '../../config/forcUtils';\nimport { renderIndexTemplate } from '../../templates';\nimport type { FuelsConfig } from '../../types';\nimport { debug, log, loggingConfig } from '../../utils/logger';\n\nasync function generateTypesForProgramType(\n  config: FuelsConfig,\n  paths: string[],\n  programType: ProgramTypeEnum\n) {\n  debug('Generating types..');\n\n  let filepaths = await getABIPaths(paths, config);\n  const pluralizedDirName = `${String(programType).toLocaleLowerCase()}s`;\n  const versions = getBinaryVersions(config);\n\n  const isScript = programType === ProgramTypeEnum.SCRIPT;\n  const isPredicate = programType === ProgramTypeEnum.PREDICATE;\n\n  if (isScript || isPredicate) {\n    const loaderFiles = paths.flatMap((dirpath) => {\n      const glob = `*-abi.json`;\n      const cwd = `${dirpath}/out`;\n      return globSync(glob, { cwd }).map((filename) => `${dirpath}/out/${filename}`);\n    });\n    filepaths = filepaths.concat(loaderFiles);\n  }\n\n  runTypegen({\n    programType,\n    cwd: config.basePath,\n    filepaths,\n    output: join(config.output, pluralizedDirName),\n    silent: !loggingConfig.isDebugEnabled,\n    versions,\n  });\n\n  return pluralizedDirName;\n}\n\nexport async function generateTypes(config: FuelsConfig) {\n  log('Generating types..');\n\n  const { contracts, scripts, predicates, output } = config;\n\n  mkdirSync(output, { recursive: true });\n\n  const members = [\n    { type: ProgramTypeEnum.CONTRACT, programs: contracts },\n    { type: ProgramTypeEnum.SCRIPT, programs: scripts },\n    { type: ProgramTypeEnum.PREDICATE, programs: predicates },\n  ];\n\n  const pluralizedDirNames = await Promise.all(\n    members\n      .filter(({ programs }) => !!programs.length)\n      .map(({ programs, type }) => generateTypesForProgramType(config, programs, type))\n  );\n\n  const indexFile = await renderIndexTemplate(pluralizedDirNames);\n\n  writeFileSync(join(config.output, 'index.ts'), indexFile);\n}\n","import { FuelError } from '@fuel-ts/errors';\nimport { readFileSync, existsSync, writeFileSync } from 'fs';\nimport camelCase from 'lodash.camelcase';\nimport { join } from 'path';\nimport toml from 'toml';\n\nimport type { FuelsConfig } from '../types';\n\nexport type ForcToml = {\n  project: {\n    authors?: string[];\n    entry: string;\n    license: string;\n    name: string;\n  };\n  workspace: {\n    members: string[];\n  };\n  dependencies: {\n    [key: string]: string;\n  };\n  proxy?: {\n    enabled: boolean;\n    address?: string;\n  };\n};\n\nexport enum SwayType {\n  contract = 'contract',\n  script = 'script',\n  predicate = 'predicate',\n  library = 'library',\n}\n\nexport const swayFiles = new Map<string, SwayType>();\n\nexport const getClosestForcTomlDir = (dir: string): string => {\n  let forcPath = join(dir, 'Forc.toml');\n\n  if (existsSync(forcPath)) {\n    return forcPath;\n  }\n\n  const parent = join(dir, '..');\n  forcPath = getClosestForcTomlDir(parent);\n\n  if (parent === '/' && !existsSync(forcPath)) {\n    const msg = `TOML file not found:\\n  ${dir}`;\n    throw new FuelError(FuelError.CODES.CONFIG_FILE_NOT_FOUND, msg);\n  }\n\n  return forcPath;\n};\n\nexport function readForcToml(contractPath: string) {\n  if (!existsSync(contractPath)) {\n    throw new FuelError(\n      FuelError.CODES.CONFIG_FILE_NOT_FOUND,\n      `TOML file not found:\\n  ${contractPath}`\n    );\n  }\n\n  const forcPath = getClosestForcTomlDir(contractPath);\n\n  if (!existsSync(forcPath)) {\n    throw new FuelError(\n      FuelError.CODES.CONFIG_FILE_NOT_FOUND,\n      `TOML file not found:\\n  ${forcPath}`\n    );\n  }\n\n  const forcFile = readFileSync(forcPath, 'utf8');\n  return toml.parse(forcFile) as ForcToml;\n}\n\nexport function setForcTomlProxyAddress(contractPath: string, address: string) {\n  const forcPath = getClosestForcTomlDir(contractPath);\n  const tomlPristine = readFileSync(forcPath).toString();\n  const tomlJson = readForcToml(forcPath);\n\n  const isProxyEnabled = tomlJson.proxy?.enabled;\n  const hasProxyAddress = tomlJson.proxy?.address;\n\n  // never override address\n  if (isProxyEnabled && hasProxyAddress) {\n    return address;\n  }\n\n  // injects address into toml string\n  const replaceReg = /(\\[proxy\\][\\s\\S]+^enabled.+$)/gm;\n  const replaceStr = `$1\\naddress = \"${address}\"`;\n  const modifiedToml = tomlPristine.replace(replaceReg, replaceStr);\n\n  writeFileSync(forcPath, modifiedToml);\n\n  return address;\n}\n\nexport function readSwayType(path: string) {\n  const forcToml = readForcToml(path);\n  const entryFile = forcToml.project.entry || 'main.sw';\n  const swayEntryPath = join(path, 'src', entryFile);\n\n  if (!swayFiles.has(swayEntryPath)) {\n    const swayFile = readFileSync(swayEntryPath, 'utf8');\n    const swayTypeLines = Object.values(SwayType).map((type) => `${type};`);\n    const swayType = swayFile\n      .split('\\n')\n      .find((line) => swayTypeLines.some((swayTypeLine) => line === swayTypeLine))\n      ?.split(';')[0];\n    swayFiles.set(swayEntryPath, swayType as SwayType);\n  }\n\n  return swayFiles.get(swayEntryPath) as SwayType;\n}\n\nexport function getContractName(contractPath: string) {\n  const { project } = readForcToml(contractPath);\n  return project.name;\n}\n\nexport function getScriptName(scriptPath: string) {\n  const { project } = readForcToml(scriptPath);\n  return project.name;\n}\n\nexport function getPredicateName(predicatePath: string) {\n  const { project } = readForcToml(predicatePath);\n  return project.name;\n}\n\nexport function getContractCamelCase(contractPath: string) {\n  const projectName = getContractName(contractPath);\n  return camelCase(projectName);\n}\n\nexport function getBinaryPath(contractPath: string, { buildMode }: FuelsConfig) {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/${buildMode}/${projectName}.bin`);\n}\n\nexport function getABIPath(contractPath: string, { buildMode }: FuelsConfig) {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/${buildMode}/${projectName}-abi.json`);\n}\n\nexport function getABIPaths(paths: string[], config: FuelsConfig) {\n  return Promise.all(paths.map((path) => getABIPath(path, config)));\n}\n\nexport const getStorageSlotsPath = (contractPath: string, { buildMode }: FuelsConfig) => {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/${buildMode}/${projectName}-storage_slots.json`);\n};\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"../../hbs.d.ts\" />\n\n// TODO: once abi-typegen implements a way to generate all types of sway\n// programs in a bundle file we don't need to create a index.ts file\nimport Handlebars from 'handlebars';\n\nimport indexTemplate from './index.hbs';\n\nexport function renderIndexTemplate(paths: string[]) {\n  const renderTemplate = Handlebars.compile(indexTemplate, {\n    strict: true,\n    noEscape: true,\n  });\n  return renderTemplate({\n    paths,\n  });\n}\n","import type { WalletUnlocked } from '@fuel-ts/account';\nimport { ContractFactory } from '@fuel-ts/contract';\nimport type { DeployContractOptions } from '@fuel-ts/contract';\nimport { Contract } from '@fuel-ts/program';\nimport { Src14OwnedProxy, Src14OwnedProxyFactory } from '@fuel-ts/recipes';\nimport { existsSync, readFileSync } from 'fs';\n\nimport {\n  getABIPath,\n  getBinaryPath,\n  getClosestForcTomlDir,\n  getContractCamelCase,\n  getContractName,\n  getStorageSlotsPath,\n  readForcToml,\n  setForcTomlProxyAddress,\n  type ForcToml,\n} from '../../config/forcUtils';\nimport type { FuelsConfig, DeployedContract } from '../../types';\nimport { debug, log } from '../../utils/logger';\n\nimport { createWallet } from './createWallet';\nimport { getDeployConfig } from './getDeployConfig';\n\n/**\n * Deploys one contract.\n */\nexport async function deployContract(\n  wallet: WalletUnlocked,\n  binaryPath: string,\n  abiPath: string,\n  storageSlotsPath: string,\n  deployConfig: DeployContractOptions,\n  contractPath: string,\n  tomlContents: ForcToml\n) {\n  debug(`Deploying contract for ABI: ${abiPath}`);\n\n  if (existsSync(storageSlotsPath)) {\n    const storageSlots = JSON.parse(readFileSync(storageSlotsPath, 'utf-8'));\n    // eslint-disable-next-line no-param-reassign\n    deployConfig.storageSlots = storageSlots;\n  }\n\n  const targetBytecode = readFileSync(binaryPath);\n  const targetAbi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n  const targetStorageSlots = deployConfig.storageSlots ?? [];\n\n  const proxyBytecode = Src14OwnedProxyFactory.bytecode;\n  const proxyAbi = Src14OwnedProxy.abi;\n  const proxyStorageSlots = Src14OwnedProxy.storageSlots ?? [];\n\n  const isProxyEnabled = tomlContents?.proxy?.enabled;\n  const proxyAddress = tomlContents?.proxy?.address;\n\n  /**\n   * 0. If contract does NOT require a proxy.\n   * Deploy as normal contract\n   */\n  if (!isProxyEnabled) {\n    // a. Deploy the target contract\n    const contractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n    const { waitForResult } = await contractFactory.deploy(deployConfig);\n    const { contract } = await waitForResult();\n    return contract.id.toB256();\n  }\n\n  /**\n   * 1. If contract DOES require a proxy and HAS the `address` property set in their `Forc.Toml` file.\n   * We need to re-deploy the target contract and update its ID in the proxy contract.\n   */\n  if (proxyAddress) {\n    // a. Deploy the target contract\n    const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n    const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);\n    const { contract: targetContract } = await waitForTarget();\n\n    // b. Update proxy contract with the new target contract ID\n    const proxyContract = new Contract(proxyAddress, proxyAbi, wallet);\n    const { waitForResult: waitForProxyUpdate } = await proxyContract.functions\n      .set_proxy_target({ bits: targetContract.id.toB256() })\n      .call();\n\n    await waitForProxyUpdate();\n\n    return proxyAddress;\n  }\n\n  /**\n   * 2. If contract DOES require proxy and the address is NOT set.\n   * We need to deploy the proxy and the target contracts, and update the\n   * [proxy].address property in the users' Forc.Toml file.\n   */\n\n  // a. Deploy the target contract\n  const targetContractFactory = new ContractFactory(targetBytecode, targetAbi, wallet);\n  const { waitForResult: waitForTarget } = await targetContractFactory.deploy(deployConfig);\n  const { contract: targetContract } = await waitForTarget();\n\n  // b. Deploy the SR-C14 Compliant / Proxy Contract\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { storageSlots, stateRoot, ...commonDeployConfig } = deployConfig;\n  const mergedStorageSlots = targetStorageSlots.concat(proxyStorageSlots);\n\n  const proxyDeployConfig: DeployContractOptions = {\n    ...commonDeployConfig,\n    storageSlots: mergedStorageSlots,\n    configurableConstants: {\n      INITIAL_TARGET: { bits: targetContract.id.toB256() },\n      INITIAL_OWNER: { Initialized: { Address: { bits: wallet.address.toB256() } } },\n    },\n  };\n\n  const proxyFactory = new ContractFactory(proxyBytecode, proxyAbi, wallet);\n  const { waitForResult: waitForProxy } = await proxyFactory.deploy(proxyDeployConfig);\n  const { contract: proxyContract } = await waitForProxy();\n\n  // c. Initialize the proxy contract\n  const { waitForResult: waitForProxyInit } = await proxyContract.functions\n    .initialize_proxy()\n    .call();\n\n  await waitForProxyInit();\n\n  const proxyContractId = proxyContract.id.toB256();\n\n  // d. Write the address of the proxy contract to user's Forc.Toml file\n  setForcTomlProxyAddress(contractPath, proxyContractId);\n\n  return proxyContractId;\n}\n\n/**\n * Deploys all contracts.\n */\nexport async function deployContracts(config: FuelsConfig) {\n  const contracts: DeployedContract[] = [];\n\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n\n  log(`Deploying contracts to: ${wallet.provider.url}`);\n\n  const contractsLen = config.contracts.length;\n\n  for (let i = 0; i < contractsLen; i++) {\n    const contractPath = config.contracts[i];\n    const forcTomlPath = getClosestForcTomlDir(contractPath);\n    const binaryPath = getBinaryPath(contractPath, config);\n    const abiPath = getABIPath(contractPath, config);\n    const storageSlotsPath = getStorageSlotsPath(contractPath, config);\n    const projectName = getContractName(contractPath);\n    const contractName = getContractCamelCase(contractPath);\n    const tomlContents = readForcToml(forcTomlPath);\n    const deployConfig = await getDeployConfig(config.deployConfig, {\n      contracts: Array.from(contracts),\n      contractName,\n      contractPath,\n    });\n\n    const contractId = await deployContract(\n      wallet,\n      binaryPath,\n      abiPath,\n      storageSlotsPath,\n      deployConfig,\n      contractPath,\n      tomlContents\n    );\n\n    debug(`Contract deployed: ${projectName} - ${contractId}`);\n\n    contracts.push({\n      name: contractName,\n      contractId,\n    });\n  }\n\n  return contracts;\n}\n","import { Wallet, Provider } from '@fuel-ts/account';\nimport { FuelError } from '@fuel-ts/errors';\n\nexport async function createWallet(providerUrl: string, privateKey?: string) {\n  let pvtKey: string;\n\n  if (privateKey) {\n    pvtKey = privateKey;\n  } else if (process.env.PRIVATE_KEY) {\n    pvtKey = process.env.PRIVATE_KEY;\n  } else {\n    throw new FuelError(\n      FuelError.CODES.MISSING_REQUIRED_PARAMETER,\n      'You must provide a privateKey via config.privateKey or env PRIVATE_KEY'\n    );\n  }\n\n  try {\n    const provider = new Provider(providerUrl);\n    await provider.init(); // can probably be removed\n\n    return Wallet.fromPrivateKey(pvtKey, provider);\n  } catch (e) {\n    const error = e as Error & { cause?: { code: string } };\n    if (/EADDRNOTAVAIL|ECONNREFUSED/.test(error.cause?.code ?? '')) {\n      throw new FuelError(\n        FuelError.CODES.CONNECTION_REFUSED,\n        `Couldn't connect to the node at \"${providerUrl}\". Check that you've got a node running at the config's providerUrl or set autoStartFuelCore to true.`\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n","import type { DeployContractOptions } from '@fuel-ts/contract';\n\nimport type { ContractDeployOptions, OptionsFunction } from '../../types';\n\nexport async function getDeployConfig(\n  deployConfig: DeployContractOptions | OptionsFunction,\n  options: ContractDeployOptions\n) {\n  let config: DeployContractOptions;\n\n  if (typeof deployConfig === 'function') {\n    config = await deployConfig(options);\n  } else {\n    config = deployConfig;\n  }\n\n  return config;\n}\n","import { getPredicateRoot, Predicate } from '@fuel-ts/account';\nimport { debug, log } from 'console';\nimport { readFileSync } from 'fs';\n\nimport { getABIPath, getBinaryPath, getPredicateName } from '../../config/forcUtils';\nimport type { DeployedPredicate, FuelsConfig } from '../../types';\n\nimport { createWallet } from './createWallet';\n\n/**\n * Deploys all predicates.\n */\nexport async function deployPredicates(config: FuelsConfig) {\n  const predicates: DeployedPredicate[] = [];\n\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n\n  log(`Deploying predicates to: ${wallet.provider.url}`);\n\n  const predicatesLen = config.predicates.length;\n\n  for (let i = 0; i < predicatesLen; i++) {\n    const predicatePath = config.predicates[i];\n    const binaryPath = getBinaryPath(predicatePath, config);\n    const abiPath = getABIPath(predicatePath, config);\n    const projectName = getPredicateName(predicatePath);\n    const bytecode = readFileSync(binaryPath);\n    const abi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n\n    const predicate = new Predicate({ abi, bytecode, provider: wallet.provider });\n    const {\n      bytes: loaderBytecode,\n      interface: { jsonAbi },\n    } = await (await predicate.deploy(wallet)).waitForResult();\n\n    const predicateRoot = getPredicateRoot(loaderBytecode);\n\n    debug(`Predicate deployed: ${projectName} - ${predicateRoot}`);\n\n    predicates.push({\n      path: predicatePath,\n      predicateRoot,\n      loaderBytecode,\n      abi: jsonAbi,\n    });\n  }\n\n  return predicates;\n}\n","import { Script } from '@fuel-ts/script';\nimport { debug, log } from 'console';\nimport { readFileSync } from 'fs';\n\nimport { getBinaryPath, getABIPath, getScriptName } from '../../config/forcUtils';\nimport type { FuelsConfig, DeployedScript } from '../../types';\n\nimport { createWallet } from './createWallet';\n\n/**\n * Deploys all scripts.\n */\nexport async function deployScripts(config: FuelsConfig) {\n  const scripts: DeployedScript[] = [];\n\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n\n  log(`Deploying scripts to: ${wallet.provider.url}`);\n\n  const scriptsLen = config.scripts.length;\n\n  for (let i = 0; i < scriptsLen; i++) {\n    const scriptPath = config.scripts[i];\n    const binaryPath = getBinaryPath(scriptPath, config);\n    const abiPath = getABIPath(scriptPath, config);\n    const projectName = getScriptName(scriptPath);\n\n    const bytecode = readFileSync(binaryPath);\n    const abi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n\n    const script = new Script(bytecode, abi, wallet);\n    const {\n      bytes: loaderBytecode,\n      interface: { jsonAbi },\n    } = await (await script.deploy(wallet)).waitForResult();\n\n    debug(`Script deployed: ${projectName}`);\n\n    scripts.push({\n      path: scriptPath,\n      loaderBytecode,\n      abi: jsonAbi,\n    });\n  }\n\n  return scripts;\n}\n","import { writeFile, mkdir } from 'fs/promises';\nimport { resolve } from 'path';\n\nimport type { DeployedContract } from '../../types';\nimport { log } from '../../utils/logger';\n\nexport async function saveContractIds(contracts: DeployedContract[], output: string) {\n  const contractsMap = contracts.reduce(\n    (cConfig, { name, contractId }) => ({\n      ...cConfig,\n      [name]: contractId,\n    }),\n    {}\n  );\n\n  const filePath = resolve(output, 'contract-ids.json');\n\n  await mkdir(output, { recursive: true });\n  await writeFile(filePath, JSON.stringify(contractsMap, null, 2));\n\n  log(`Contract IDs saved at: ${filePath}`);\n}\n","import { writeFileSync } from 'fs';\n\nimport { getPredicateName } from '../../config/forcUtils';\nimport type { DeployedPredicate, FuelsConfig } from '../../types';\n\nexport function savePredicateFiles(predicates: DeployedPredicate[], _config: FuelsConfig) {\n  for (const { path, predicateRoot, loaderBytecode, abi } of predicates) {\n    const predicateName = getPredicateName(path);\n\n    const predicateRootPath = `${path}/out/${predicateName}-loader-bin-root`;\n    writeFileSync(predicateRootPath, predicateRoot);\n\n    const loaderBytecodePath = `${path}/out/${predicateName}-loader.bin`;\n    writeFileSync(loaderBytecodePath, loaderBytecode);\n\n    const abiPath = `${path}/out/${predicateName}-loader-abi.json`;\n    writeFileSync(abiPath, JSON.stringify(abi, null, 2));\n  }\n}\n","import { writeFileSync } from 'fs';\n\nimport { getScriptName } from '../../config/forcUtils';\nimport type { DeployedScript, FuelsConfig } from '../../types';\n\nexport function saveScriptFiles(scripts: DeployedScript[], _config: FuelsConfig) {\n  for (const { path, loaderBytecode, abi } of scripts) {\n    const scriptName = getScriptName(path);\n\n    const loaderBytecodePath = `${path}/out/${scriptName}-loader.bin`;\n    writeFileSync(loaderBytecodePath, loaderBytecode);\n\n    const abiPath = `${path}/out/${scriptName}-loader-abi.json`;\n    writeFileSync(abiPath, JSON.stringify(abi, null, 2));\n  }\n}\n","import type { FuelsConfig } from '../../types';\nimport { generateTypes } from '../build/generateTypes';\n\nimport { deployContracts } from './deployContracts';\nimport { deployPredicates } from './deployPredicates';\nimport { deployScripts } from './deployScripts';\nimport { saveContractIds } from './saveContractIds';\nimport { savePredicateFiles } from './savePredicateFiles';\nimport { saveScriptFiles } from './saveScriptFiles';\n\nexport async function deploy(config: FuelsConfig) {\n  /**\n   * Deploy contract and save their IDs to JSON file.\n   */\n  const contracts = await deployContracts(config);\n  await saveContractIds(contracts, config.output);\n\n  /**\n   * Deploy scripts and save deployed files to disk.\n   */\n  const scripts = await deployScripts(config);\n  saveScriptFiles(scripts, config);\n\n  /**\n   * Deploy predicates and save deployed files to disk.\n   */\n  const predicates = await deployPredicates(config);\n  savePredicateFiles(predicates, config);\n\n  config.onDeploy?.(config, {\n    contracts,\n    scripts,\n    predicates,\n  });\n\n  /**\n   * After deploying scripts/predicates, we need to\n   * re-generate factory classe with the loader coee\n   */\n  await generateTypes(config);\n\n  return {\n    contracts,\n    scripts,\n    predicates,\n  };\n}\n","import { defaultConsensusKey } from '@fuel-ts/utils';\nimport { getPortPromise } from 'portfinder';\n\nimport { launchNode } from '../../../test-utils';\nimport type { FuelsConfig } from '../../types';\nimport { log, loggingConfig } from '../../utils/logger';\n\nexport type FuelCoreNode = {\n  bindIp: string;\n  accessIp: string;\n  port: number;\n  providerUrl: string;\n  snapshotDir: string;\n  killChildProcess: () => void;\n};\n\nexport const autoStartFuelCore = async (config: FuelsConfig) => {\n  let fuelCore: FuelCoreNode | undefined;\n\n  if (config.autoStartFuelCore) {\n    log(`Starting node using: '${config.fuelCorePath}'`);\n\n    const bindIp = '0.0.0.0';\n    const accessIp = '127.0.0.1';\n\n    const port = config.fuelCorePort ?? (await getPortPromise({ port: 4000 }));\n\n    const { cleanup, url, snapshotDir } = await launchNode({\n      args: [\n        ['--snapshot', config.snapshotDir],\n        ['--db-type', 'in-memory'],\n      ].flat() as string[],\n      ip: bindIp,\n      port: port.toString(),\n      loggingEnabled: loggingConfig.isLoggingEnabled,\n      basePath: config.basePath,\n      fuelCorePath: config.fuelCorePath,\n      includeInitialState: true,\n      killProcessOnExit: true,\n    });\n\n    fuelCore = {\n      bindIp,\n      accessIp,\n      port,\n      providerUrl: url,\n      snapshotDir,\n      killChildProcess: cleanup,\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    config.providerUrl = fuelCore.providerUrl;\n    // eslint-disable-next-line no-param-reassign\n    config.privateKey = defaultConsensusKey;\n  }\n\n  return fuelCore;\n};\n","export * from '@fuel-ts/contract/test-utils';\nexport * from '@fuel-ts/account/test-utils';\nexport * from '@fuel-ts/errors/test-utils';\nexport * from '@fuel-ts/utils/test-utils';\n","import { spawn } from 'child_process';\n\nimport type { FuelsConfig } from '../../types';\nimport { debug, loggingConfig } from '../../utils/logger';\n\nimport { onForcExit, onForcError } from './forcHandlers';\n\nexport const buildSwayProgram = async (config: FuelsConfig, path: string) => {\n  debug('Building Sway program', path);\n\n  return new Promise<void>((resolve, reject) => {\n    const args = ['build', '-p', path].concat(config.forcBuildFlags);\n    const forc = spawn(config.forcPath, args, { stdio: 'pipe' });\n    if (loggingConfig.isLoggingEnabled) {\n      // eslint-disable-next-line no-console\n      forc.stderr?.on('data', (chunk) => console.log(chunk.toString()));\n    }\n\n    if (loggingConfig.isDebugEnabled) {\n      forc.stdout?.on('data', (chunk) => {\n        // eslint-disable-next-line no-console\n        console.log(chunk.toString());\n      });\n    }\n\n    const onExit = onForcExit(resolve, reject);\n    const onError = onForcError(reject);\n\n    forc.on('exit', onExit);\n    forc.on('error', onError);\n  });\n};\n","import { error } from '../../utils/logger';\n\ntype OnResultFn = () => void;\ntype OnErrorFn = (reason?: number | Error) => void;\n\nexport const onForcExit =\n  (onResultFn: OnResultFn, onErrorFn: OnErrorFn) => (code: number | null) => {\n    if (code) {\n      onErrorFn(code);\n      //  process.exit()?\n    } else {\n      onResultFn();\n    }\n  };\n\nexport const onForcError = (onError: OnErrorFn) => (err: Error) => {\n  error(err);\n  onError(err);\n};\n","import type { FuelsConfig } from '../../types';\nimport { log } from '../../utils/logger';\n\nimport { buildSwayProgram } from './buildSwayProgram';\n\nexport async function buildSwayPrograms(config: FuelsConfig) {\n  log(`Building Sway programs using: '${config.forcPath}'`);\n\n  const paths = config.workspace\n    ? [config.workspace]\n    : [config.contracts, config.predicates, config.scripts].flat();\n\n  await Promise.all(paths.map((path) => buildSwayProgram(config, path)));\n}\n","import { type Command } from 'commander';\n\nimport type { FuelsConfig } from '../../types';\nimport { log } from '../../utils/logger';\nimport { deploy } from '../deploy';\nimport { autoStartFuelCore } from '../dev/autoStartFuelCore';\n\nimport { buildSwayPrograms } from './buildSwayPrograms';\nimport { generateTypes } from './generateTypes';\n\nexport async function build(config: FuelsConfig, program?: Command) {\n  log('Building..');\n\n  await buildSwayPrograms(config);\n  await generateTypes(config);\n  config.onBuild?.(config);\n\n  const options = program?.opts();\n  if (options?.deploy) {\n    const fuelCore = await autoStartFuelCore(config);\n    await deploy(config);\n    fuelCore?.killChildProcess();\n  }\n}\n","import type { FSWatcher } from 'chokidar';\nimport { watch } from 'chokidar';\nimport { globSync } from 'glob';\n\nimport { loadConfig } from '../../config/loadConfig';\nimport { type FuelsConfig } from '../../types';\nimport { error, log } from '../../utils/logger';\nimport { build } from '../build';\nimport { deploy } from '../deploy';\nimport { withConfigErrorHandler } from '../withConfig';\n\nimport type { FuelCoreNode } from './autoStartFuelCore';\nimport { autoStartFuelCore } from './autoStartFuelCore';\n\nexport const closeAllFileHandlers = (handlers: FSWatcher[]) => {\n  handlers.forEach((h) => h.close());\n};\n\nexport const buildAndDeploy = async (config: FuelsConfig) => {\n  await build(config);\n  const deployedContracts = await deploy(config);\n  config.onDev?.(config);\n\n  return deployedContracts;\n};\n\nexport const getConfigFilepathsToWatch = (config: FuelsConfig) => {\n  const configFilePathsToWatch: string[] = [config.configPath];\n  if (config.snapshotDir) {\n    configFilePathsToWatch.push(config.snapshotDir);\n  }\n  return configFilePathsToWatch;\n};\n\nexport type DevState = {\n  config: FuelsConfig;\n  watchHandlers: FSWatcher[];\n  fuelCore?: FuelCoreNode;\n};\n\nexport const workspaceFileChanged = (state: DevState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n  await buildAndDeploy(state.config);\n};\n\nexport const configFileChanged = (state: DevState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n\n  closeAllFileHandlers(state.watchHandlers);\n  state.fuelCore?.killChildProcess();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    await dev(await loadConfig(state.config.basePath));\n  } catch (err: unknown) {\n    await withConfigErrorHandler(<Error>err, state.config);\n  }\n};\n\nexport const dev = async (config: FuelsConfig) => {\n  const fuelCore = await autoStartFuelCore(config);\n\n  const configFilePaths = getConfigFilepathsToWatch(config);\n\n  const { contracts, scripts, predicates, basePath: cwd } = config;\n\n  const workspaceFilePaths = [contracts, predicates, scripts]\n    .flat()\n    .flatMap((dir) => [\n      dir,\n      globSync(`${dir}/**/*.toml`, { cwd }),\n      globSync(`${dir}/**/*.sw`, { cwd }),\n    ])\n    .flat();\n\n  try {\n    // Run once\n    await buildAndDeploy(config);\n\n    const watchHandlers: FSWatcher[] = [];\n    const options = { persistent: true, ignoreInitial: true, ignored: '**/out/**' };\n    const state = { config, watchHandlers, fuelCore };\n\n    // watch: fuels.config.ts and snapshotDir\n    watchHandlers.push(watch(configFilePaths, options).on('all', configFileChanged(state)));\n\n    // watch: Forc's workspace members\n    watchHandlers.push(watch(workspaceFilePaths, options).on('all', workspaceFileChanged(state)));\n  } catch (err: unknown) {\n    error(err);\n    throw err;\n  }\n};\n","import { FuelError } from '@fuel-ts/errors';\nimport { defaultConsensusKey } from '@fuel-ts/utils';\nimport { bundleRequire } from 'bundle-require';\nimport type { BuildOptions } from 'esbuild';\nimport JoyCon from 'joycon';\nimport { resolve, parse } from 'path';\n\nimport { tryFindBinaries } from '../../cli-utils';\nimport type { FuelsConfig, UserFuelsConfig } from '../types';\n\nimport { SwayType, readForcToml, readSwayType } from './forcUtils';\nimport { validateConfig } from './validateConfig';\n\nexport async function loadUserConfig(\n  cwd: string\n): Promise<{ userConfig: UserFuelsConfig; configPath: string }> {\n  const configJoycon = new JoyCon();\n\n  const configPath = await configJoycon.resolve({\n    files: ['ts', 'js', 'cjs', 'mjs'].map((e) => `fuels.config.${e}`),\n    cwd,\n    stopDir: parse(cwd).root,\n  });\n\n  if (!configPath) {\n    throw new FuelError(FuelError.CODES.CONFIG_FILE_NOT_FOUND, 'Config file not found!');\n  }\n\n  const esbuildOptions: BuildOptions = {\n    target: 'ES2021',\n    platform: 'node',\n    format: 'esm',\n  };\n\n  const result = await bundleRequire({\n    filepath: configPath,\n    esbuildOptions,\n    cwd,\n  });\n\n  const userConfig: UserFuelsConfig = result.mod.default;\n  return { configPath, userConfig };\n}\n\nexport async function loadConfig(cwd: string): Promise<FuelsConfig> {\n  const { configPath, userConfig } = await loadUserConfig(cwd);\n  await validateConfig(userConfig);\n\n  const { forcBuildFlags = [] } = userConfig;\n  const releaseFlag = forcBuildFlags.find((f) => f === '--release');\n  const buildMode = releaseFlag ? 'release' : 'debug';\n\n  const { forcPath, fuelCorePath } = tryFindBinaries({\n    forcPath: userConfig.forcPath,\n    fuelCorePath: userConfig.fuelCorePath,\n  });\n\n  // Start clone-object while initializing optional props\n  const config: FuelsConfig = {\n    contracts: [],\n    scripts: [],\n    predicates: [],\n    deployConfig: {},\n    autoStartFuelCore: true,\n    fuelCorePort: 4000,\n    providerUrl: process.env.FUEL_NETWORK_URL ?? 'http://127.0.0.1:4000/v1/graphql',\n    privateKey: defaultConsensusKey,\n    ...userConfig,\n    basePath: cwd,\n    forcPath,\n    fuelCorePath,\n    configPath,\n    forcBuildFlags,\n    buildMode,\n  };\n\n  // Resolve the output path on loaded config\n  config.output = resolve(cwd, config.output);\n\n  // Initialize optional variables\n  config.autoStartFuelCore = userConfig.autoStartFuelCore ?? true;\n\n  if (!userConfig.workspace) {\n    // Resolve members individually\n    const { contracts, predicates, scripts } = userConfig;\n    config.contracts = (contracts || []).map((c: string) => resolve(cwd, c));\n    config.scripts = (scripts || []).map((s: string) => resolve(cwd, s));\n    config.predicates = (predicates || []).map((p: string) => resolve(cwd, p));\n  } else {\n    // Resolve members via workspace\n    const workspace = resolve(cwd, userConfig.workspace);\n    const forcToml = readForcToml(workspace);\n\n    if (!forcToml.workspace) {\n      const workspaceMsg = `Forc workspace not detected in:\\n  ${workspace}/Forc.toml`;\n\n      const swayProgramType = readSwayType(workspace);\n      const exampleMsg = `Try using '${swayProgramType}s' instead of 'workspace' in:\\n  ${configPath}`;\n\n      throw new FuelError(\n        FuelError.CODES.WORKSPACE_NOT_DETECTED,\n        [workspaceMsg, exampleMsg].join('\\n\\n')\n      );\n    }\n\n    const swayMembers = forcToml.workspace.members.map((member) => resolve(workspace, member));\n\n    swayMembers\n      .map((path) => ({ path, type: readSwayType(path) }))\n      .filter(({ type }) => type !== SwayType.library)\n      .forEach(({ path, type }) => config[`${type as Exclude<SwayType, 'library'>}s`].push(path));\n\n    config.workspace = workspace;\n  }\n\n  return config;\n}\n","export * from '@fuel-ts/utils/cli-utils';\n","import * as yup from 'yup';\n\nimport type { UserFuelsConfig } from '../types';\n\nconst schema = yup\n  .object({\n    workspace: yup.string(),\n    contracts: yup.array(yup.string()),\n    scripts: yup.array(yup.string()),\n    predicates: yup.array(yup.string()),\n    output: yup.string().required('config.output should be a valid string'),\n  })\n  .required();\n\nexport async function validateConfig(config: UserFuelsConfig) {\n  return schema.validate(config);\n}\n","import { capitalizeString } from '@fuel-ts/utils';\nimport type { Command } from 'commander';\n\nimport { loadConfig } from '../config/loadConfig';\nimport type { Commands, FuelsConfig, CommandEvent } from '../types';\nimport { error, log } from '../utils/logger';\n\nexport const withConfigErrorHandler = async (err: Error, config?: FuelsConfig) => {\n  error(err.message);\n  if (config) {\n    await config.onFailure?.(config, <Error>err);\n  }\n};\n\nexport function withConfig<CType extends Commands>(\n  program: Command,\n  command: CType,\n  fn: (\n    config: FuelsConfig,\n    options?: Command\n  ) => Promise<Extract<CommandEvent, { type: CType }>['data']>\n) {\n  return async () => {\n    const options = program.opts();\n\n    let config: FuelsConfig;\n\n    try {\n      config = await loadConfig(options.path);\n    } catch (err) {\n      await withConfigErrorHandler(<Error>err);\n      return;\n    }\n\n    try {\n      await fn(config, program);\n      log(`🎉  ${capitalizeString(command)} completed successfully!`);\n    } catch (err: unknown) {\n      await withConfigErrorHandler(<Error>err, config);\n    }\n  };\n}\n","import { FuelError } from '@fuel-ts/errors';\nimport { type Command } from 'commander';\nimport { existsSync, writeFileSync } from 'fs';\nimport { globSync } from 'glob';\nimport { join, relative, resolve } from 'path';\n\nimport { renderFuelsConfigTemplate } from '../../templates/fuels.config';\nimport { log } from '../../utils/logger';\n\nexport function init(program: Command) {\n  const options = program.opts();\n\n  const { path, autoStartFuelCore, forcPath, fuelCorePath, fuelCorePort } = options;\n\n  let workspace: string | undefined;\n  let absoluteWorkspace: string | undefined;\n\n  if (options.workspace) {\n    absoluteWorkspace = resolve(path, options.workspace);\n    workspace = `./${relative(path, absoluteWorkspace)}`;\n  }\n\n  const absoluteOutput = resolve(path, options.output);\n  const output = `./${relative(path, absoluteOutput)}`;\n\n  const [contracts, scripts, predicates] = ['contracts', 'scripts', 'predicates'].map(\n    (optionName) => {\n      const pathOrGlob: string = options[optionName];\n      if (!pathOrGlob) {\n        return undefined;\n      }\n      const expanded = globSync(pathOrGlob, { cwd: path });\n      const relatives = expanded.map((e) => relative(path, e));\n      return relatives;\n    }\n  );\n\n  const noneIsInformed = ![workspace, contracts, scripts, predicates].find((v) => v !== undefined);\n\n  if (noneIsInformed) {\n    // mimicking commander property validation\n    // eslint-disable-next-line no-console\n    console.log(`error: required option '-w, --workspace <path>' not specified\\r`);\n    process.exit(1);\n  } else {\n    const fuelsConfigPath = join(path, 'fuels.config.ts');\n\n    if (existsSync(fuelsConfigPath)) {\n      throw new FuelError(\n        FuelError.CODES.CONFIG_FILE_ALREADY_EXISTS,\n        `Config file exists, aborting.\\n  ${fuelsConfigPath}`\n      );\n    }\n\n    const renderedConfig = renderFuelsConfigTemplate({\n      workspace,\n      contracts,\n      scripts,\n      predicates,\n      output,\n      forcPath,\n      fuelCorePath,\n      autoStartFuelCore,\n      fuelCorePort,\n    });\n\n    writeFileSync(fuelsConfigPath, renderedConfig);\n\n    log(`Config file created at:\\n\\n ${fuelsConfigPath}\\n`);\n  }\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"../../hbs.d.ts\" />\n\nimport Handlebars from 'handlebars';\n\nimport fuelsConfigTemplate from './fuels.config.hbs';\n\nHandlebars.registerHelper('isDefined', (v) => v !== undefined);\n\nexport function renderFuelsConfigTemplate(props: {\n  workspace?: string;\n  contracts?: string[];\n  scripts?: string[];\n  predicates?: string[];\n  output: string;\n  forcPath?: string;\n  fuelCorePath?: string;\n  autoStartFuelCore?: boolean;\n  fuelCorePort?: string;\n}) {\n  const renderTemplate = Handlebars.compile(fuelsConfigTemplate, {\n    strict: true,\n    noEscape: true,\n  });\n\n  return renderTemplate(props);\n}\n","import { watch, type FSWatcher } from 'chokidar';\n\nimport { loadConfig } from '../../config/loadConfig';\nimport type { FuelsConfig } from '../../types';\nimport { error, log } from '../../utils/logger';\nimport type { FuelCoreNode } from '../dev/autoStartFuelCore';\nimport { autoStartFuelCore } from '../dev/autoStartFuelCore';\nimport { withConfigErrorHandler } from '../withConfig';\n\nexport type NodeState = {\n  config: FuelsConfig;\n  watchHandlers: FSWatcher[];\n  fuelCore?: FuelCoreNode;\n};\n\nexport const getConfigFilepathsToWatch = (config: FuelsConfig) => {\n  const configFilePathsToWatch: string[] = [config.configPath];\n  if (config.snapshotDir) {\n    configFilePathsToWatch.push(config.snapshotDir);\n  }\n  return configFilePathsToWatch;\n};\n\nexport const closeAllFileHandlers = (handlers: FSWatcher[]) => {\n  handlers.forEach((h) => h.close());\n};\n\nexport const configFileChanged = (state: NodeState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n\n  closeAllFileHandlers(state.watchHandlers);\n  state.fuelCore?.killChildProcess();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    await node(await loadConfig(state.config.basePath));\n    state.config.onNode?.(state.config);\n  } catch (err: unknown) {\n    await withConfigErrorHandler(<Error>err, state.config);\n  }\n};\n\nexport const node = async (config: FuelsConfig) => {\n  const fuelCore = await autoStartFuelCore(config);\n\n  const configFilePaths = getConfigFilepathsToWatch(config);\n\n  try {\n    const watchHandlers: FSWatcher[] = [];\n    const options = { persistent: true, ignoreInitial: true, ignored: '**/out/**' };\n    const state = { config, watchHandlers, fuelCore };\n\n    // watch: fuels.config.ts and snapshotDir\n    watchHandlers.push(watch(configFilePaths, options).on('all', configFileChanged(state)));\n  } catch (err: unknown) {\n    error(err);\n    throw err;\n  }\n};\n","import type { Command } from 'commander';\n\nimport { loadUserConfig } from '../config/loadConfig';\nimport type { Commands, UserFuelsConfig } from '../types';\nimport { debug, error } from '../utils/logger';\n\ntype BinaryPaths = Pick<UserFuelsConfig, 'forcPath' | 'fuelCorePath'>;\n\nexport function withBinaryPaths<CType extends Commands>(\n  program: Command,\n  _command: CType,\n  fn: (paths: BinaryPaths) => void\n) {\n  return async () => {\n    const options = program.opts();\n\n    const paths: BinaryPaths = {};\n\n    try {\n      const { userConfig } = await loadUserConfig(options.path);\n      paths.forcPath = userConfig.forcPath;\n      paths.fuelCorePath = userConfig.fuelCorePath;\n    } catch (err) {\n      debug((<Error>err).message);\n    }\n\n    try {\n      await fn(paths);\n    } catch (err) {\n      error(err);\n    }\n  };\n}\n","import type { Command } from 'commander';\n\nimport type { Commands } from '../types';\nimport { error } from '../utils/logger';\n\nexport function withProgram<CType extends Commands>(\n  program: Command,\n  _command: CType,\n  fn: (program: Command) => void\n) {\n  return async () => {\n    try {\n      await fn(program);\n    } catch (err) {\n      error(err);\n    }\n  };\n}\n"],"mappings":"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","names":["writeFileSync","join","SwayType","versions","join","writeFileSync","existsSync","readFileSync","FuelError","error","existsSync","storageSlots","readFileSync","targetContractFactory","waitForTarget","targetContract","proxyContract","debug","log","readFileSync","log","readFileSync","debug","debug","log","readFileSync","log","readFileSync","debug","writeFileSync","writeFileSync","writeFileSync","writeFileSync","test_utils_star","resolve","globSync","FuelError","defaultConsensusKey","resolve","FuelError","defaultConsensusKey","resolve","globSync","FuelError","existsSync","writeFileSync","globSync","join","resolve","Handlebars","Handlebars","autoStartFuelCore","resolve","globSync","join","existsSync","FuelError","writeFileSync","watch","getConfigFilepathsToWatch","closeAllFileHandlers","configFileChanged","watch"]}