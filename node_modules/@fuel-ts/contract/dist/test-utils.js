"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/test-utils.ts
var test_utils_exports = {};
__export(test_utils_exports, {
  launchTestNode: () => launchTestNode
});
module.exports = __toCommonJS(test_utils_exports);

// src/test-utils/launch-test-node.ts
var import_test_utils = require("@fuel-ts/account/test-utils");
var import_errors = require("@fuel-ts/errors");
var import_fs = require("fs");
var path = __toESM(require("path"));
var import_ramda = require("ramda");
function getChainSnapshot(nodeOptions) {
  let envChainMetadata;
  let chainConfig;
  let stateConfig;
  if (process.env.DEFAULT_CHAIN_SNAPSHOT_DIR) {
    const dirname = process.env.DEFAULT_CHAIN_SNAPSHOT_DIR;
    envChainMetadata = JSON.parse(
      (0, import_fs.readFileSync)(path.join(dirname, "metadata.json"), "utf-8")
    );
    chainConfig = JSON.parse(
      (0, import_fs.readFileSync)(path.join(dirname, envChainMetadata.chain_config), "utf-8")
    );
    stateConfig = JSON.parse(
      (0, import_fs.readFileSync)(path.join(dirname, envChainMetadata.table_encoding.Json.filepath), "utf-8")
    );
  }
  const obj = [envChainMetadata, chainConfig, stateConfig].reduce((acc, val, idx) => {
    if (val === void 0) {
      return acc;
    }
    switch (idx) {
      case 0:
        acc.metadata = val;
        break;
      case 1:
        acc.chainConfig = val;
        break;
      case 2:
        acc.stateConfig = val;
        break;
      default:
        return acc;
    }
    return acc;
  }, {});
  return (0, import_ramda.mergeDeepRight)(obj, nodeOptions?.snapshotConfig ?? {});
}
function getFuelCoreArgs(nodeOptions) {
  const envArgs = process.env.DEFAULT_FUEL_CORE_ARGS ? process.env.DEFAULT_FUEL_CORE_ARGS.split(" ") : void 0;
  return nodeOptions?.args ?? envArgs;
}
function getWalletForDeployment(config, wallets) {
  if (!("walletIndex" in config) || !config.walletIndex) {
    return wallets[0];
  }
  const validWalletIndex = config.walletIndex >= 0 && config.walletIndex < wallets.length;
  if (!validWalletIndex) {
    throw new import_errors.FuelError(
      import_errors.FuelError.CODES.INVALID_INPUT_PARAMETERS,
      `Invalid walletIndex ${config.walletIndex}; wallets array contains ${wallets.length} elements.`
    );
  }
  return wallets[config.walletIndex];
}
async function launchTestNode({
  providerOptions = {},
  walletsConfig = {},
  nodeOptions = {},
  contractsConfigs
} = {}) {
  const snapshotConfig = getChainSnapshot(nodeOptions);
  const args = getFuelCoreArgs(nodeOptions);
  const { provider, wallets, cleanup } = await (0, import_test_utils.setupTestProviderAndWallets)({
    walletsConfig,
    providerOptions,
    nodeOptions: {
      ...nodeOptions,
      snapshotConfig,
      args
    }
  });
  const contracts = [];
  const configs = contractsConfigs ?? [];
  try {
    for (let i = 0; i < configs.length; i++) {
      const config = configs[i];
      const deploy = "factory" in config ? config.factory.deploy : config.deploy;
      const options = "factory" in config ? config.options ?? {} : {};
      const { waitForResult } = await deploy(getWalletForDeployment(config, wallets), options);
      const { contract } = await waitForResult();
      contracts.push(contract);
    }
  } catch (err) {
    cleanup();
    throw err;
  }
  return {
    provider,
    wallets,
    contracts,
    cleanup,
    [Symbol.dispose]: cleanup
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  launchTestNode
});
//# sourceMappingURL=test-utils.js.map