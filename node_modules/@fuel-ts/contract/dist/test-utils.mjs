// src/test-utils/launch-test-node.ts
import { setupTestProviderAndWallets } from "@fuel-ts/account/test-utils";
import { FuelError } from "@fuel-ts/errors";
import { readFileSync } from "fs";
import * as path from "path";
import { mergeDeepRight } from "ramda";
function getChainSnapshot(nodeOptions) {
  let envChainMetadata;
  let chainConfig;
  let stateConfig;
  if (process.env.DEFAULT_CHAIN_SNAPSHOT_DIR) {
    const dirname = process.env.DEFAULT_CHAIN_SNAPSHOT_DIR;
    envChainMetadata = JSON.parse(
      readFileSync(path.join(dirname, "metadata.json"), "utf-8")
    );
    chainConfig = JSON.parse(
      readFileSync(path.join(dirname, envChainMetadata.chain_config), "utf-8")
    );
    stateConfig = JSON.parse(
      readFileSync(path.join(dirname, envChainMetadata.table_encoding.Json.filepath), "utf-8")
    );
  }
  const obj = [envChainMetadata, chainConfig, stateConfig].reduce((acc, val, idx) => {
    if (val === void 0) {
      return acc;
    }
    switch (idx) {
      case 0:
        acc.metadata = val;
        break;
      case 1:
        acc.chainConfig = val;
        break;
      case 2:
        acc.stateConfig = val;
        break;
      default:
        return acc;
    }
    return acc;
  }, {});
  return mergeDeepRight(obj, nodeOptions?.snapshotConfig ?? {});
}
function getFuelCoreArgs(nodeOptions) {
  const envArgs = process.env.DEFAULT_FUEL_CORE_ARGS ? process.env.DEFAULT_FUEL_CORE_ARGS.split(" ") : void 0;
  return nodeOptions?.args ?? envArgs;
}
function getWalletForDeployment(config, wallets) {
  if (!("walletIndex" in config) || !config.walletIndex) {
    return wallets[0];
  }
  const validWalletIndex = config.walletIndex >= 0 && config.walletIndex < wallets.length;
  if (!validWalletIndex) {
    throw new FuelError(
      FuelError.CODES.INVALID_INPUT_PARAMETERS,
      `Invalid walletIndex ${config.walletIndex}; wallets array contains ${wallets.length} elements.`
    );
  }
  return wallets[config.walletIndex];
}
async function launchTestNode({
  providerOptions = {},
  walletsConfig = {},
  nodeOptions = {},
  contractsConfigs
} = {}) {
  const snapshotConfig = getChainSnapshot(nodeOptions);
  const args = getFuelCoreArgs(nodeOptions);
  const { provider, wallets, cleanup } = await setupTestProviderAndWallets({
    walletsConfig,
    providerOptions,
    nodeOptions: {
      ...nodeOptions,
      snapshotConfig,
      args
    }
  });
  const contracts = [];
  const configs = contractsConfigs ?? [];
  try {
    for (let i = 0; i < configs.length; i++) {
      const config = configs[i];
      const deploy = "factory" in config ? config.factory.deploy : config.deploy;
      const options = "factory" in config ? config.options ?? {} : {};
      const { waitForResult } = await deploy(getWalletForDeployment(config, wallets), options);
      const { contract } = await waitForResult();
      contracts.push(contract);
    }
  } catch (err) {
    cleanup();
    throw err;
  }
  return {
    provider,
    wallets,
    contracts,
    cleanup,
    [Symbol.dispose]: cleanup
  };
}
export {
  launchTestNode
};
//# sourceMappingURL=test-utils.mjs.map