import { Interface } from '@fuel-ts/abi-coder';
import type { JsonAbi } from '@fuel-ts/abi-coder';
import type { Account, CreateTransactionRequestLike, Provider, TransactionResult, TransactionType } from '@fuel-ts/account';
import { CreateTransactionRequest } from '@fuel-ts/account';
import { Contract } from '@fuel-ts/program';
import type { StorageSlot } from '@fuel-ts/transactions';
import type { BytesLike } from '@fuel-ts/utils';
/**
 * Options for deploying a contract.
 */
export type DeployContractOptions = {
    salt?: BytesLike;
    storageSlots?: StorageSlot[];
    stateRoot?: BytesLike;
    configurableConstants?: {
        [name: string]: unknown;
    };
    chunkSizeMultiplier?: number;
} & CreateTransactionRequestLike;
export type DeployContractResult<TContract extends Contract = Contract> = {
    contractId: string;
    waitForTransactionId: () => Promise<string>;
    waitForResult: () => Promise<{
        contract: TContract;
        transactionResult: TransactionResult<TransactionType.Create>;
    }>;
};
/**
 * `ContractFactory` provides utilities for deploying and configuring contracts.
 */
export default class ContractFactory<TContract extends Contract = Contract> {
    bytecode: BytesLike;
    interface: Interface;
    provider: Provider | null;
    account: Account | null;
    storageSlots: StorageSlot[];
    /**
     * Create a ContractFactory instance.
     *
     * @param bytecode - The bytecode of the contract.
     * @param abi - The contract's ABI (Application Binary Interface).
     * @param accountOrProvider - An account or provider to be associated with the factory.
     */
    constructor(bytecode: BytesLike, abi: JsonAbi | Interface, accountOrProvider?: Account | Provider | null, storageSlots?: StorageSlot[]);
    /**
     * Connect the factory to a provider.
     *
     * @param provider - The provider to be associated with the factory.
     * @returns A new ContractFactory instance.
     */
    connect(provider: Provider): ContractFactory<Contract>;
    /**
     * Create a transaction request to deploy a contract with the specified options.
     *
     * @param deployOptions - Options for deploying the contract.
     * @returns The CreateTransactionRequest object for deploying the contract.
     */
    createTransactionRequest(deployOptions?: DeployContractOptions & {
        bytecode?: BytesLike;
    }): {
        contractId: string;
        transactionRequest: CreateTransactionRequest;
    };
    /**
     * Takes a transaction request, estimates it and funds it.
     *
     * @param request - the request to fund.
     * @param options - options for funding the request.
     * @returns a funded transaction request.
     */
    private fundTransactionRequest;
    /**
     * Deploy a contract of any length with the specified options.
     *
     * @param deployOptions - Options for deploying the contract.
     * @returns A promise that resolves to the deployed contract instance.
     */
    deploy<T extends Contract = TContract>(deployOptions?: DeployContractOptions): Promise<DeployContractResult<T>>;
    /**
     * Deploy a contract with the specified options.
     *
     * @param deployOptions - Options for deploying the contract.
     * @returns A promise that resolves to the deployed contract instance.
     */
    deployAsCreateTx<T extends Contract = TContract>(deployOptions?: DeployContractOptions): Promise<DeployContractResult<T>>;
    /**
     * Chunks and deploys a contract via a loader contract. Suitable for deploying contracts larger than the max contract size.
     *
     * @param deployOptions - Options for deploying the contract.
     * @returns A promise that resolves to the deployed contract instance.
     */
    deployAsBlobTx<T extends Contract = TContract>(deployOptions?: DeployContractOptions): Promise<DeployContractResult<T>>;
    /**
     * Set configurable constants of the contract with the specified values.
     *
     * @param configurableConstants - An object containing configurable names and their values.
     */
    setConfigurableConstants(configurableConstants: {
        [name: string]: unknown;
    }): void;
    private getAccount;
    private prepareDeploy;
    /**
     * Create a blob transaction request, used for deploying contract chunks.
     *
     * @param options - options for creating a blob transaction request.
     * @returns a populated BlobTransactionRequest.
     */
    private blobTransactionRequest;
    /**
     * Get the maximum chunk size for deploying a contract by chunks.
     */
    private getMaxChunkSize;
}
//# sourceMappingURL=contract-factory.d.ts.map