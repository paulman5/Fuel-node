import { Contract, type InvokeFunction } from '@fuel-ts/program';
import { Interface, type FunctionFragment } from '@fuel-ts/abi-coder';
import { type Provider, type Account } from '@fuel-ts/account';
import { type StorageSlot } from '@fuel-ts/transactions';
import { type Address } from '@fuel-ts/address';
import type { Option, Enum } from './common';
export declare enum AccessErrorInput {
    NotOwner = "NotOwner"
}
export declare enum AccessErrorOutput {
    NotOwner = "NotOwner"
}
export type IdentityInput = Enum<{
    Address: AddressInput;
    ContractId: ContractIdInput;
}>;
export type IdentityOutput = Enum<{
    Address: AddressOutput;
    ContractId: ContractIdOutput;
}>;
export declare enum InitializationErrorInput {
    CannotReinitialized = "CannotReinitialized"
}
export declare enum InitializationErrorOutput {
    CannotReinitialized = "CannotReinitialized"
}
export declare enum SetProxyOwnerErrorInput {
    CannotUninitialize = "CannotUninitialize"
}
export declare enum SetProxyOwnerErrorOutput {
    CannotUninitialize = "CannotUninitialize"
}
export type StateInput = Enum<{
    Uninitialized: undefined;
    Initialized: IdentityInput;
    Revoked: undefined;
}>;
export type StateOutput = Enum<{
    Uninitialized: void;
    Initialized: IdentityOutput;
    Revoked: void;
}>;
export type AddressInput = {
    bits: string;
};
export type AddressOutput = AddressInput;
export type ContractIdInput = {
    bits: string;
};
export type ContractIdOutput = ContractIdInput;
export type ProxyOwnerSetInput = {
    new_proxy_owner: StateInput;
};
export type ProxyOwnerSetOutput = {
    new_proxy_owner: StateOutput;
};
export type ProxyTargetSetInput = {
    new_target: ContractIdInput;
};
export type ProxyTargetSetOutput = {
    new_target: ContractIdOutput;
};
export type Src14OwnedProxyConfigurables = Partial<{
    INITIAL_TARGET: Option<ContractIdInput>;
    INITIAL_OWNER: StateInput;
}>;
export declare class Src14OwnedProxyInterface extends Interface {
    constructor();
    functions: {
        proxy_target: FunctionFragment;
        set_proxy_target: FunctionFragment;
        proxy_owner: FunctionFragment;
        initialize_proxy: FunctionFragment;
        set_proxy_owner: FunctionFragment;
    };
}
export declare class Src14OwnedProxy extends Contract {
    static readonly abi: {
        programType: string;
        specVersion: string;
        encodingVersion: string;
        concreteTypes: ({
            type: string;
            concreteTypeId: string;
            metadataTypeId?: undefined;
            typeArguments?: undefined;
        } | {
            type: string;
            concreteTypeId: string;
            metadataTypeId: number;
            typeArguments?: undefined;
        } | {
            type: string;
            concreteTypeId: string;
            metadataTypeId: number;
            typeArguments: string[];
        })[];
        metadataTypes: ({
            type: string;
            metadataTypeId: number;
            components?: undefined;
            typeParameters?: undefined;
        } | {
            type: string;
            metadataTypeId: number;
            components: ({
                name: string;
                typeId: string;
            } | {
                name: string;
                typeId: number;
            })[];
            typeParameters?: undefined;
        } | {
            type: string;
            metadataTypeId: number;
            components: ({
                name: string;
                typeId: string;
            } | {
                name: string;
                typeId: number;
            })[];
            typeParameters: number[];
        })[];
        functions: {
            inputs: {
                name: string;
                concreteTypeId: string;
            }[];
            name: string;
            output: string;
            attributes: {
                name: string;
                arguments: string[];
            }[];
        }[];
        loggedTypes: {
            logId: string;
            concreteTypeId: string;
        }[];
        messagesTypes: never[];
        configurables: {
            name: string;
            concreteTypeId: string;
            offset: number;
        }[];
    };
    static readonly storageSlots: StorageSlot[];
    interface: Src14OwnedProxyInterface;
    functions: {
        proxy_target: InvokeFunction<[], Option<ContractIdOutput>>;
        set_proxy_target: InvokeFunction<[new_target: ContractIdInput], void>;
        proxy_owner: InvokeFunction<[], StateOutput>;
        initialize_proxy: InvokeFunction<[], void>;
        set_proxy_owner: InvokeFunction<[new_proxy_owner: StateInput], void>;
    };
    constructor(id: string | Address, accountOrProvider: Account | Provider);
}
//# sourceMappingURL=Src14OwnedProxy.d.ts.map