import { Address } from '@fuel-ts/address';
import type { WalletUnlocked } from '../../wallet';
import type { WalletManagerAccount, Vault } from '../types';
export interface PkVaultOptions {
    secret?: string;
    accounts?: Array<string>;
}
export declare class PrivateKeyVault implements Vault<PkVaultOptions> {
    #private;
    static readonly type = "privateKey";
    /**
     * If privateKey vault is initialized with a secretKey, it creates
     * one account with the fallowing secret
     */
    constructor(options?: PkVaultOptions);
    serialize(): PkVaultOptions;
    getPublicAccount(privateKey: string): {
        address: Address;
        publicKey: string;
    };
    getAccounts(): WalletManagerAccount[];
    addAccount(): {
        address: Address;
        publicKey: string;
    };
    exportAccount(address: string | Address): string;
    getWallet(address: string | Address): WalletUnlocked;
}
//# sourceMappingURL=privatekey-vault.d.ts.map