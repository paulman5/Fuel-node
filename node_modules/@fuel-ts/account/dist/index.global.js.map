{"version":3,"sources":["../../../node_modules/.pnpm/bn.js@5.2.1/node_modules/bn.js/lib/bn.js","../../../node_modules/.pnpm/webidl-conversions@7.0.0/node_modules/webidl-conversions/lib/index.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/utils.js","../../../node_modules/.pnpm/punycode@2.3.1/node_modules/punycode/punycode.es6.js","../../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/regexes.js","../../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/mappingTable.json","../../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/lib/statusMapping.js","../../../node_modules/.pnpm/tr46@5.0.0/node_modules/tr46/index.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/infra.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/encoding.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/percent-encoding.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/url-state-machine.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/urlencoded.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/Function.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URLSearchParams-impl.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URLSearchParams.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URL-impl.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/lib/URL.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/webidl2js-wrapper.js","../../../node_modules/.pnpm/whatwg-url@14.1.0/node_modules/whatwg-url/index.js","../../../node_modules/.pnpm/node-fetch@2.7.0/node_modules/node-fetch/lib/index.mjs","../../../node_modules/.pnpm/cross-fetch@4.0.0/node_modules/cross-fetch/dist/node-ponyfill.js","../../../node_modules/.pnpm/@fuels+vm-asm@0.58.2/node_modules/@fuels/vm-asm/dist/node/index.cjs","../../versions/src/lib/getBuiltinVersions.ts","../../versions/src/lib/semver.ts","../../versions/src/lib/checkFuelCoreVersionCompatibility.ts","../../versions/src/index.ts","../../errors/src/error-codes.ts","../../errors/src/fuel-error.ts","../../math/src/bn.ts","../../math/src/configs.ts","../../math/src/decimal.ts","../../math/src/functional.ts","../../math/src/math.ts","../../utils/src/utils/capitalizeString.ts","../../utils/src/utils/chunkAndPadBytes.ts","../../utils/src/utils/arrayify.ts","../../utils/src/utils/concat.ts","../../utils/src/utils/hexlify.ts","../../utils/src/utils/normalizeString.ts","../../utils/src/utils/date-time.ts","../../utils/src/utils/sleep.ts","../../utils/src/utils/defaultSnapshots/chainConfig.json","../../utils/src/utils/defaultSnapshots/metadata.json","../../utils/src/utils/defaultSnapshots/stateConfig.json","../../utils/src/utils/defaultSnapshotConfigs.ts","../../utils/src/utils/isDefined.ts","../../utils/src/utils/base58.ts","../../utils/src/utils/dataSlice.ts","../../utils/src/utils/toUtf8Bytes.ts","../../utils/src/utils/toUtf8String.ts","../../utils/src/utils/bytecode.ts","../../utils/src/index.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/_assert.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/cryptoNode.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/utils.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/_md.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/sha256.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/hmac.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/pbkdf2.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/scrypt.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/_u64.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/sha3.ts","../../../node_modules/.pnpm/@noble+hashes@1.5.0/node_modules/@noble/hashes/src/ripemd160.ts","../../crypto/src/shared/scrypt.ts","../../crypto/src/shared/keccak256.ts","../../crypto/src/shared/ripemd160.ts","../../crypto/src/node/aes-ctr.ts","../../crypto/src/node/bufferFromString.ts","../../crypto/src/node/pbkdf2.ts","../../crypto/src/node/randomBytes.ts","../../crypto/src/node/stringFromBuffer.ts","../../crypto/src/node/encryptJsonWalletData.ts","../../crypto/src/node/hmac.ts","../../crypto/src/node/randomUUID.ts","../../crypto/src/node/index.ts","../../crypto/src/index.ts","../../hasher/src/hasher.ts","../../abi-coder/src/encoding/coders/AbstractCoder.ts","../../abi-coder/src/encoding/coders/ArrayCoder.ts","../../abi-coder/src/utils/constants.ts","../../abi-coder/src/utils/utilities.ts","../../abi-coder/src/encoding/coders/B256Coder.ts","../../abi-coder/src/encoding/coders/B512Coder.ts","../../abi-coder/src/encoding/coders/BigNumberCoder.ts","../../abi-coder/src/encoding/coders/BooleanCoder.ts","../../abi-coder/src/encoding/coders/ByteCoder.ts","../../abi-coder/src/encoding/coders/EnumCoder.ts","../../abi-coder/src/encoding/coders/NumberCoder.ts","../../abi-coder/src/encoding/coders/OptionCoder.ts","../../abi-coder/src/encoding/coders/RawSliceCoder.ts","../../abi-coder/src/encoding/coders/StdStringCoder.ts","../../abi-coder/src/encoding/coders/StrSliceCoder.ts","../../abi-coder/src/encoding/coders/StringCoder.ts","../../abi-coder/src/encoding/coders/StructCoder.ts","../../abi-coder/src/encoding/coders/TupleCoder.ts","../../abi-coder/src/encoding/coders/VecCoder.ts","../../abi-coder/src/Interface.ts","../../abi-coder/src/ResolvedAbiType.ts","../../abi-coder/src/utils/json-abi.ts","../../abi-coder/src/encoding/strategies/getCoderForEncoding.ts","../../abi-coder/src/encoding/strategies/getCoderV1.ts","../../abi-coder/src/encoding/coders/VoidCoder.ts","../../abi-coder/src/encoding/strategies/getCoders.ts","../../abi-coder/src/AbiCoder.ts","../../abi-coder/src/FunctionFragment.ts","../../abi-coder/src/utils/getFunctionInputs.ts","../../abi-coder/src/utils/padValuesWithUndefined.ts","../../abi-coder/src/utils/transpile-abi.ts","../../address/src/address.ts","../../address/src/utils.ts","../../transactions/src/coders/input.ts","../../transactions/src/coders/byte-array.ts","../../transactions/src/coders/tx-pointer.ts","../../transactions/src/coders/output.ts","../../transactions/src/coders/policy.ts","../../transactions/src/receipt.ts","../../transactions/src/coders/storage-slot.ts","../../transactions/src/coders/transaction.ts","../../transactions/src/coders/upgrade-purpose.ts","../../transactions/src/coders/witness.ts","../../transactions/src/coders/utxo-id.ts","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_isPlaceholder.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_curry1.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/type.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_cloneRegExp.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/internal/_clone.js","../../../node_modules/.pnpm/ramda@0.30.1/node_modules/ramda/es/clone.js","../src/providers/coin-quantity.ts","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/src/abstract/utils.ts","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/defaultJsonSerializer.ts","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/helpers.ts","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/parseArgs.ts","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/devAssert.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/isObjectLike.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/invariant.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/location.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printLocation.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/error/GraphQLError.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/error/syntaxError.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/ast.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/directiveLocation.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/kinds.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/characterClasses.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/blockString.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/tokenKind.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/lexer.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/inspect.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/jsutils/instanceOf.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/source.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/parser.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printString.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/visitor.mjs","../../../node_modules/.pnpm/graphql@16.9.0/node_modules/graphql/language/printer.mjs","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/resolveRequestDocument.ts","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/types.ts","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/index.ts","../../../node_modules/.pnpm/graphql-request@6.1.0_graphql@16.9.0/node_modules/graphql-request/src/graphql-ws.ts","../../../node_modules/.pnpm/tslib@2.8.0/node_modules/tslib/tslib.es6.mjs","../../../node_modules/.pnpm/graphql-tag@2.12.6_graphql@16.9.0/node_modules/graphql-tag/src/index.ts","../src/providers/__generated__/operations.ts","../src/providers/fuel-graphql-subscriber.ts","../src/providers/resource-cache.ts","../../address/src/configs.ts","../src/providers/transaction-request/input.ts","../src/providers/transaction-request/output.ts","../src/providers/message.ts","../src/providers/resource.ts","../../transactions/src/configs.ts","../src/providers/utils/receipts.ts","../src/providers/utils/block-explorer.ts","../src/providers/utils/gas.ts","../src/providers/utils/json.ts","../src/providers/utils/extract-tx-error.ts","../src/providers/transaction-request/errors.ts","../src/providers/transaction-request/helpers.ts","../src/providers/transaction-request/witness.ts","../src/providers/transaction-request/transaction-request.ts","../src/providers/transaction-request/hash-transaction.ts","../src/providers/transaction-request/blob-transaction-request.ts","../src/providers/transaction-request/storage-slot.ts","../src/providers/transaction-request/create-transaction-request.ts","../src/providers/transaction-request/scripts.ts","../src/providers/transaction-request/script-transaction-request.ts","../src/providers/transaction-request/upgrade-transaction-request.ts","../src/providers/transaction-request/upload-transaction-request.ts","../src/providers/transaction-request/types.ts","../src/providers/transaction-request/utils.ts","../src/providers/transaction-summary/calculate-tx-fee-for-summary.ts","../src/providers/transaction-summary/call.ts","../src/providers/transaction-summary/input.ts","../src/providers/transaction-summary/output.ts","../src/providers/transaction-summary/types.ts","../src/providers/transaction-summary/operations.ts","../src/providers/transaction-summary/receipt.ts","../src/providers/transaction-summary/status.ts","../src/providers/transaction-summary/assemble-transaction-summary.ts","../src/providers/transaction-response/getDecodedLogs.ts","../src/providers/transaction-response/transaction-response.ts","../src/providers/utils/auto-retry-fetch.ts","../src/providers/utils/handle-gql-error-message.ts","../src/providers/utils/validate-pagination-args.ts","../src/providers/provider.ts","../src/providers/transaction-summary/get-transaction-summary.ts","../src/providers/chains.ts","../src/providers/assets/utils/network.ts","../src/providers/assets/utils/url.ts","../src/providers/assets/utils/resolveIconPaths.ts","../src/providers/assets/utils/fuelAssetsBaseUrl.ts","../src/providers/assets/assets.ts","../src/providers/utils/merge-quantities.ts","../src/types.ts","../src/utils/formatTransferToContractScriptData.ts","../src/account.ts","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/src/abstract/modular.ts","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/src/abstract/curve.ts","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/src/abstract/weierstrass.ts","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/src/_shortw_utils.ts","../../../node_modules/.pnpm/@noble+curves@1.6.0/node_modules/@noble/curves/src/secp256k1.ts","../src/signer/signer.ts","../src/wallet/keystore-wallet.ts","../src/wallet/base-wallet-unlocked.ts","../src/wordlists/words/english.ts","../src/wordlists/index.ts","../src/mnemonic/utils.ts","../src/mnemonic/mnemonic.ts","../src/hdwallet/hdwallet.ts","../src/wallet/wallets.ts","../src/wallet/wallet.ts","../src/wallet-manager/wallet-manager.ts","../src/wallet-manager/storages/memory-storage.ts","../src/wallet-manager/vaults/mnemonic-vault.ts","../src/wallet-manager/vaults/privatekey-vault.ts","../src/wallet-manager/types.ts","../src/utils/predicate-script-loader-instructions.ts","../src/utils/deployScriptOrPredicate.ts","../../merkle/src/binary/binaryMerkleTree.ts","../../merkle/src/common/common.ts","../../merkle/src/binary/types/node.ts","../../merkle/src/sparse/sparseMerkleTree.ts","../../merkle/src/sparse/proofs.ts","../../merkle/src/sparse/treeHasher.ts","../../merkle/src/sparse/types/sparseCompactMerkleProof.ts","../../merkle/src/sparse/types/sparseMerkleProof.ts","../../merkle/src/sparse/utils.ts","../src/predicate/utils/getPredicateRoot.ts","../src/predicate/predicate.ts","../src/connectors/fuel-connector.ts","../src/connectors/types/connector-types.ts","../src/connectors/types/local-storage.ts","../src/connectors/utils/cache.ts","../src/connectors/utils/dispatch-fuel-connector-event.ts","../src/connectors/utils/promises.ts","../src/connectors/fuel.ts"],"sourcesContent":["(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","\"use strict\";\n\nfunction makeException(ErrorType, message, options) {\n  if (options.globals) {\n    ErrorType = options.globals[ErrorType.name];\n  }\n  return new ErrorType(`${options.context ? options.context : \"Value\"} ${message}.`);\n}\n\nfunction toNumber(value, options) {\n  if (typeof value === \"bigint\") {\n    throw makeException(TypeError, \"is a BigInt which cannot be converted to a number\", options);\n  }\n  if (!options.globals) {\n    return Number(value);\n  }\n  return options.globals.Number(value);\n}\n\n// Round x to the nearest integer, choosing the even integer if it lies halfway between two.\nfunction evenRound(x) {\n  // There are four cases for numbers with fractional part being .5:\n  //\n  // case |     x     | floor(x) | round(x) | expected | x <> 0 | x % 1 | x & 1 |   example\n  //   1  |  2n + 0.5 |  2n      |  2n + 1  |  2n      |   >    |  0.5  |   0   |  0.5 ->  0\n  //   2  |  2n + 1.5 |  2n + 1  |  2n + 2  |  2n + 2  |   >    |  0.5  |   1   |  1.5 ->  2\n  //   3  | -2n - 0.5 | -2n - 1  | -2n      | -2n      |   <    | -0.5  |   0   | -0.5 ->  0\n  //   4  | -2n - 1.5 | -2n - 2  | -2n - 1  | -2n - 2  |   <    | -0.5  |   1   | -1.5 -> -2\n  // (where n is a non-negative integer)\n  //\n  // Branch here for cases 1 and 4\n  if ((x > 0 && (x % 1) === +0.5 && (x & 1) === 0) ||\n        (x < 0 && (x % 1) === -0.5 && (x & 1) === 1)) {\n    return censorNegativeZero(Math.floor(x));\n  }\n\n  return censorNegativeZero(Math.round(x));\n}\n\nfunction integerPart(n) {\n  return censorNegativeZero(Math.trunc(n));\n}\n\nfunction sign(x) {\n  return x < 0 ? -1 : 1;\n}\n\nfunction modulo(x, y) {\n  // https://tc39.github.io/ecma262/#eqn-modulo\n  // Note that http://stackoverflow.com/a/4467559/3191 does NOT work for large modulos\n  const signMightNotMatch = x % y;\n  if (sign(y) !== sign(signMightNotMatch)) {\n    return signMightNotMatch + y;\n  }\n  return signMightNotMatch;\n}\n\nfunction censorNegativeZero(x) {\n  return x === 0 ? 0 : x;\n}\n\nfunction createIntegerConversion(bitLength, { unsigned }) {\n  let lowerBound, upperBound;\n  if (unsigned) {\n    lowerBound = 0;\n    upperBound = 2 ** bitLength - 1;\n  } else {\n    lowerBound = -(2 ** (bitLength - 1));\n    upperBound = 2 ** (bitLength - 1) - 1;\n  }\n\n  const twoToTheBitLength = 2 ** bitLength;\n  const twoToOneLessThanTheBitLength = 2 ** (bitLength - 1);\n\n  return (value, options = {}) => {\n    let x = toNumber(value, options);\n    x = censorNegativeZero(x);\n\n    if (options.enforceRange) {\n      if (!Number.isFinite(x)) {\n        throw makeException(TypeError, \"is not a finite number\", options);\n      }\n\n      x = integerPart(x);\n\n      if (x < lowerBound || x > upperBound) {\n        throw makeException(\n          TypeError,\n          `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,\n          options\n        );\n      }\n\n      return x;\n    }\n\n    if (!Number.isNaN(x) && options.clamp) {\n      x = Math.min(Math.max(x, lowerBound), upperBound);\n      x = evenRound(x);\n      return x;\n    }\n\n    if (!Number.isFinite(x) || x === 0) {\n      return 0;\n    }\n    x = integerPart(x);\n\n    // Math.pow(2, 64) is not accurately representable in JavaScript, so try to avoid these per-spec operations if\n    // possible. Hopefully it's an optimization for the non-64-bitLength cases too.\n    if (x >= lowerBound && x <= upperBound) {\n      return x;\n    }\n\n    // These will not work great for bitLength of 64, but oh well. See the README for more details.\n    x = modulo(x, twoToTheBitLength);\n    if (!unsigned && x >= twoToOneLessThanTheBitLength) {\n      return x - twoToTheBitLength;\n    }\n    return x;\n  };\n}\n\nfunction createLongLongConversion(bitLength, { unsigned }) {\n  const upperBound = Number.MAX_SAFE_INTEGER;\n  const lowerBound = unsigned ? 0 : Number.MIN_SAFE_INTEGER;\n  const asBigIntN = unsigned ? BigInt.asUintN : BigInt.asIntN;\n\n  return (value, options = {}) => {\n    let x = toNumber(value, options);\n    x = censorNegativeZero(x);\n\n    if (options.enforceRange) {\n      if (!Number.isFinite(x)) {\n        throw makeException(TypeError, \"is not a finite number\", options);\n      }\n\n      x = integerPart(x);\n\n      if (x < lowerBound || x > upperBound) {\n        throw makeException(\n          TypeError,\n          `is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,\n          options\n        );\n      }\n\n      return x;\n    }\n\n    if (!Number.isNaN(x) && options.clamp) {\n      x = Math.min(Math.max(x, lowerBound), upperBound);\n      x = evenRound(x);\n      return x;\n    }\n\n    if (!Number.isFinite(x) || x === 0) {\n      return 0;\n    }\n\n    let xBigInt = BigInt(integerPart(x));\n    xBigInt = asBigIntN(bitLength, xBigInt);\n    return Number(xBigInt);\n  };\n}\n\nexports.any = value => {\n  return value;\n};\n\nexports.undefined = () => {\n  return undefined;\n};\n\nexports.boolean = value => {\n  return Boolean(value);\n};\n\nexports.byte = createIntegerConversion(8, { unsigned: false });\nexports.octet = createIntegerConversion(8, { unsigned: true });\n\nexports.short = createIntegerConversion(16, { unsigned: false });\nexports[\"unsigned short\"] = createIntegerConversion(16, { unsigned: true });\n\nexports.long = createIntegerConversion(32, { unsigned: false });\nexports[\"unsigned long\"] = createIntegerConversion(32, { unsigned: true });\n\nexports[\"long long\"] = createLongLongConversion(64, { unsigned: false });\nexports[\"unsigned long long\"] = createLongLongConversion(64, { unsigned: true });\n\nexports.double = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  if (!Number.isFinite(x)) {\n    throw makeException(TypeError, \"is not a finite floating-point value\", options);\n  }\n\n  return x;\n};\n\nexports[\"unrestricted double\"] = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  return x;\n};\n\nexports.float = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  if (!Number.isFinite(x)) {\n    throw makeException(TypeError, \"is not a finite floating-point value\", options);\n  }\n\n  if (Object.is(x, -0)) {\n    return x;\n  }\n\n  const y = Math.fround(x);\n\n  if (!Number.isFinite(y)) {\n    throw makeException(TypeError, \"is outside the range of a single-precision floating-point value\", options);\n  }\n\n  return y;\n};\n\nexports[\"unrestricted float\"] = (value, options = {}) => {\n  const x = toNumber(value, options);\n\n  if (isNaN(x)) {\n    return x;\n  }\n\n  if (Object.is(x, -0)) {\n    return x;\n  }\n\n  return Math.fround(x);\n};\n\nexports.DOMString = (value, options = {}) => {\n  if (options.treatNullAsEmptyString && value === null) {\n    return \"\";\n  }\n\n  if (typeof value === \"symbol\") {\n    throw makeException(TypeError, \"is a symbol, which cannot be converted to a string\", options);\n  }\n\n  const StringCtor = options.globals ? options.globals.String : String;\n  return StringCtor(value);\n};\n\nexports.ByteString = (value, options = {}) => {\n  const x = exports.DOMString(value, options);\n  let c;\n  for (let i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {\n    if (c > 255) {\n      throw makeException(TypeError, \"is not a valid ByteString\", options);\n    }\n  }\n\n  return x;\n};\n\nexports.USVString = (value, options = {}) => {\n  const S = exports.DOMString(value, options);\n  const n = S.length;\n  const U = [];\n  for (let i = 0; i < n; ++i) {\n    const c = S.charCodeAt(i);\n    if (c < 0xD800 || c > 0xDFFF) {\n      U.push(String.fromCodePoint(c));\n    } else if (0xDC00 <= c && c <= 0xDFFF) {\n      U.push(String.fromCodePoint(0xFFFD));\n    } else if (i === n - 1) {\n      U.push(String.fromCodePoint(0xFFFD));\n    } else {\n      const d = S.charCodeAt(i + 1);\n      if (0xDC00 <= d && d <= 0xDFFF) {\n        const a = c & 0x3FF;\n        const b = d & 0x3FF;\n        U.push(String.fromCodePoint((2 << 15) + ((2 << 9) * a) + b));\n        ++i;\n      } else {\n        U.push(String.fromCodePoint(0xFFFD));\n      }\n    }\n  }\n\n  return U.join(\"\");\n};\n\nexports.object = (value, options = {}) => {\n  if (value === null || (typeof value !== \"object\" && typeof value !== \"function\")) {\n    throw makeException(TypeError, \"is not an object\", options);\n  }\n\n  return value;\n};\n\nconst abByteLengthGetter =\n    Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nconst sabByteLengthGetter =\n    typeof SharedArrayBuffer === \"function\" ?\n      Object.getOwnPropertyDescriptor(SharedArrayBuffer.prototype, \"byteLength\").get :\n      null;\n\nfunction isNonSharedArrayBuffer(value) {\n  try {\n    // This will throw on SharedArrayBuffers, but not detached ArrayBuffers.\n    // (The spec says it should throw, but the spec conflicts with implementations: https://github.com/tc39/ecma262/issues/678)\n    abByteLengthGetter.call(value);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isSharedArrayBuffer(value) {\n  try {\n    sabByteLengthGetter.call(value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction isArrayBufferDetached(value) {\n  try {\n    // eslint-disable-next-line no-new\n    new Uint8Array(value);\n    return false;\n  } catch {\n    return true;\n  }\n}\n\nexports.ArrayBuffer = (value, options = {}) => {\n  if (!isNonSharedArrayBuffer(value)) {\n    if (options.allowShared && !isSharedArrayBuffer(value)) {\n      throw makeException(TypeError, \"is not an ArrayBuffer or SharedArrayBuffer\", options);\n    }\n    throw makeException(TypeError, \"is not an ArrayBuffer\", options);\n  }\n  if (isArrayBufferDetached(value)) {\n    throw makeException(TypeError, \"is a detached ArrayBuffer\", options);\n  }\n\n  return value;\n};\n\nconst dvByteLengthGetter =\n    Object.getOwnPropertyDescriptor(DataView.prototype, \"byteLength\").get;\nexports.DataView = (value, options = {}) => {\n  try {\n    dvByteLengthGetter.call(value);\n  } catch (e) {\n    throw makeException(TypeError, \"is not a DataView\", options);\n  }\n\n  if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n    throw makeException(TypeError, \"is backed by a SharedArrayBuffer, which is not allowed\", options);\n  }\n  if (isArrayBufferDetached(value.buffer)) {\n    throw makeException(TypeError, \"is backed by a detached ArrayBuffer\", options);\n  }\n\n  return value;\n};\n\n// Returns the unforgeable `TypedArray` constructor name or `undefined`,\n// if the `this` value isn't a valid `TypedArray` object.\n//\n// https://tc39.es/ecma262/#sec-get-%typedarray%.prototype-@@tostringtag\nconst typedArrayNameGetter = Object.getOwnPropertyDescriptor(\n  Object.getPrototypeOf(Uint8Array).prototype,\n  Symbol.toStringTag\n).get;\n[\n  Int8Array,\n  Int16Array,\n  Int32Array,\n  Uint8Array,\n  Uint16Array,\n  Uint32Array,\n  Uint8ClampedArray,\n  Float32Array,\n  Float64Array\n].forEach(func => {\n  const { name } = func;\n  const article = /^[AEIOU]/u.test(name) ? \"an\" : \"a\";\n  exports[name] = (value, options = {}) => {\n    if (!ArrayBuffer.isView(value) || typedArrayNameGetter.call(value) !== name) {\n      throw makeException(TypeError, `is not ${article} ${name} object`, options);\n    }\n    if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n    }\n    if (isArrayBufferDetached(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n    }\n\n    return value;\n  };\n});\n\n// Common definitions\n\nexports.ArrayBufferView = (value, options = {}) => {\n  if (!ArrayBuffer.isView(value)) {\n    throw makeException(TypeError, \"is not a view on an ArrayBuffer or SharedArrayBuffer\", options);\n  }\n\n  if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n    throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n  }\n\n  if (isArrayBufferDetached(value.buffer)) {\n    throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n  }\n  return value;\n};\n\nexports.BufferSource = (value, options = {}) => {\n  if (ArrayBuffer.isView(value)) {\n    if (!options.allowShared && isSharedArrayBuffer(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a SharedArrayBuffer, which is not allowed\", options);\n    }\n\n    if (isArrayBufferDetached(value.buffer)) {\n      throw makeException(TypeError, \"is a view on a detached ArrayBuffer\", options);\n    }\n    return value;\n  }\n\n  if (!options.allowShared && !isNonSharedArrayBuffer(value)) {\n    throw makeException(TypeError, \"is not an ArrayBuffer or a view on one\", options);\n  }\n  if (options.allowShared && !isSharedArrayBuffer(value) && !isNonSharedArrayBuffer(value)) {\n    throw makeException(TypeError, \"is not an ArrayBuffer, SharedArrayBuffer, or a view on one\", options);\n  }\n  if (isArrayBufferDetached(value)) {\n    throw makeException(TypeError, \"is a detached ArrayBuffer\", options);\n  }\n\n  return value;\n};\n\nexports.DOMTimeStamp = exports[\"unsigned long long\"];\n","\"use strict\";\n\n// Returns \"Type(value) is Object\" in ES terminology.\nfunction isObject(value) {\n  return (typeof value === \"object\" && value !== null) || typeof value === \"function\";\n}\n\nconst hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\n\n// Like `Object.assign`, but using `[[GetOwnProperty]]` and `[[DefineOwnProperty]]`\n// instead of `[[Get]]` and `[[Set]]` and only allowing objects\nfunction define(target, source) {\n  for (const key of Reflect.ownKeys(source)) {\n    const descriptor = Reflect.getOwnPropertyDescriptor(source, key);\n    if (descriptor && !Reflect.defineProperty(target, key, descriptor)) {\n      throw new TypeError(`Cannot redefine property: ${String(key)}`);\n    }\n  }\n}\n\nfunction newObjectInRealm(globalObject, object) {\n  const ctorRegistry = initCtorRegistry(globalObject);\n  return Object.defineProperties(\n    Object.create(ctorRegistry[\"%Object.prototype%\"]),\n    Object.getOwnPropertyDescriptors(object)\n  );\n}\n\nconst wrapperSymbol = Symbol(\"wrapper\");\nconst implSymbol = Symbol(\"impl\");\nconst sameObjectCaches = Symbol(\"SameObject caches\");\nconst ctorRegistrySymbol = Symbol.for(\"[webidl2js] constructor registry\");\n\nconst AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {}).prototype);\n\nfunction initCtorRegistry(globalObject) {\n  if (hasOwn(globalObject, ctorRegistrySymbol)) {\n    return globalObject[ctorRegistrySymbol];\n  }\n\n  const ctorRegistry = Object.create(null);\n\n  // In addition to registering all the WebIDL2JS-generated types in the constructor registry,\n  // we also register a few intrinsics that we make use of in generated code, since they are not\n  // easy to grab from the globalObject variable.\n  ctorRegistry[\"%Object.prototype%\"] = globalObject.Object.prototype;\n  ctorRegistry[\"%IteratorPrototype%\"] = Object.getPrototypeOf(\n    Object.getPrototypeOf(new globalObject.Array()[Symbol.iterator]())\n  );\n\n  try {\n    ctorRegistry[\"%AsyncIteratorPrototype%\"] = Object.getPrototypeOf(\n      Object.getPrototypeOf(\n        globalObject.eval(\"(async function* () {})\").prototype\n      )\n    );\n  } catch {\n    ctorRegistry[\"%AsyncIteratorPrototype%\"] = AsyncIteratorPrototype;\n  }\n\n  globalObject[ctorRegistrySymbol] = ctorRegistry;\n  return ctorRegistry;\n}\n\nfunction getSameObject(wrapper, prop, creator) {\n  if (!wrapper[sameObjectCaches]) {\n    wrapper[sameObjectCaches] = Object.create(null);\n  }\n\n  if (prop in wrapper[sameObjectCaches]) {\n    return wrapper[sameObjectCaches][prop];\n  }\n\n  wrapper[sameObjectCaches][prop] = creator();\n  return wrapper[sameObjectCaches][prop];\n}\n\nfunction wrapperForImpl(impl) {\n  return impl ? impl[wrapperSymbol] : null;\n}\n\nfunction implForWrapper(wrapper) {\n  return wrapper ? wrapper[implSymbol] : null;\n}\n\nfunction tryWrapperForImpl(impl) {\n  const wrapper = wrapperForImpl(impl);\n  return wrapper ? wrapper : impl;\n}\n\nfunction tryImplForWrapper(wrapper) {\n  const impl = implForWrapper(wrapper);\n  return impl ? impl : wrapper;\n}\n\nconst iterInternalSymbol = Symbol(\"internal\");\n\nfunction isArrayIndexPropName(P) {\n  if (typeof P !== \"string\") {\n    return false;\n  }\n  const i = P >>> 0;\n  if (i === 2 ** 32 - 1) {\n    return false;\n  }\n  const s = `${i}`;\n  if (P !== s) {\n    return false;\n  }\n  return true;\n}\n\nconst byteLengthGetter =\n    Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\nfunction isArrayBuffer(value) {\n  try {\n    byteLengthGetter.call(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction iteratorResult([key, value], kind) {\n  let result;\n  switch (kind) {\n    case \"key\":\n      result = key;\n      break;\n    case \"value\":\n      result = value;\n      break;\n    case \"key+value\":\n      result = [key, value];\n      break;\n  }\n  return { value: result, done: false };\n}\n\nconst supportsPropertyIndex = Symbol(\"supports property index\");\nconst supportedPropertyIndices = Symbol(\"supported property indices\");\nconst supportsPropertyName = Symbol(\"supports property name\");\nconst supportedPropertyNames = Symbol(\"supported property names\");\nconst indexedGet = Symbol(\"indexed property get\");\nconst indexedSetNew = Symbol(\"indexed property set new\");\nconst indexedSetExisting = Symbol(\"indexed property set existing\");\nconst namedGet = Symbol(\"named property get\");\nconst namedSetNew = Symbol(\"named property set new\");\nconst namedSetExisting = Symbol(\"named property set existing\");\nconst namedDelete = Symbol(\"named property delete\");\n\nconst asyncIteratorNext = Symbol(\"async iterator get the next iteration result\");\nconst asyncIteratorReturn = Symbol(\"async iterator return steps\");\nconst asyncIteratorInit = Symbol(\"async iterator initialization steps\");\nconst asyncIteratorEOI = Symbol(\"async iterator end of iteration\");\n\nmodule.exports = exports = {\n  isObject,\n  hasOwn,\n  define,\n  newObjectInRealm,\n  wrapperSymbol,\n  implSymbol,\n  getSameObject,\n  ctorRegistrySymbol,\n  initCtorRegistry,\n  wrapperForImpl,\n  implForWrapper,\n  tryWrapperForImpl,\n  tryImplForWrapper,\n  iterInternalSymbol,\n  isArrayBuffer,\n  isArrayIndexPropName,\n  supportsPropertyIndex,\n  supportedPropertyIndices,\n  supportsPropertyName,\n  supportedPropertyNames,\n  indexedGet,\n  indexedSetNew,\n  indexedSetExisting,\n  namedGet,\n  namedSetNew,\n  namedSetExisting,\n  namedDelete,\n  asyncIteratorNext,\n  asyncIteratorReturn,\n  asyncIteratorInit,\n  asyncIteratorEOI,\n  iteratorResult\n};\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","\"use strict\";\n\nconst combiningMarks = /[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3C\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0CF3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D81-\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA82C\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10EAB}\\u{10EAC}\\u{10EFD}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11000}-\\u{11002}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11082}\\u{110B0}-\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{11134}\\u{11145}\\u{11146}\\u{11173}\\u{11180}-\\u{11182}\\u{111B3}-\\u{111C0}\\u{111C9}-\\u{111CC}\\u{111CE}\\u{111CF}\\u{1122C}-\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}-\\u{112EA}\\u{11300}-\\u{11303}\\u{1133B}\\u{1133C}\\u{1133E}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11357}\\u{11362}\\u{11363}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11435}-\\u{11446}\\u{1145E}\\u{114B0}-\\u{114C3}\\u{115AF}-\\u{115B5}\\u{115B8}-\\u{115C0}\\u{115DC}\\u{115DD}\\u{11630}-\\u{11640}\\u{116AB}-\\u{116B7}\\u{1171D}-\\u{1172B}\\u{1182C}-\\u{1183A}\\u{11930}-\\u{11935}\\u{11937}\\u{11938}\\u{1193B}-\\u{1193E}\\u{11940}\\u{11942}\\u{11943}\\u{119D1}-\\u{119D7}\\u{119DA}-\\u{119E0}\\u{119E4}\\u{11A01}-\\u{11A0A}\\u{11A33}-\\u{11A39}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A5B}\\u{11A8A}-\\u{11A99}\\u{11C2F}-\\u{11C36}\\u{11C38}-\\u{11C3F}\\u{11C92}-\\u{11CA7}\\u{11CA9}-\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D8A}-\\u{11D8E}\\u{11D90}\\u{11D91}\\u{11D93}-\\u{11D97}\\u{11EF3}-\\u{11EF6}\\u{11F00}\\u{11F01}\\u{11F03}\\u{11F34}-\\u{11F3A}\\u{11F3E}-\\u{11F42}\\u{13440}\\u{13447}-\\u{13455}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F51}-\\u{16F87}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{16FF0}\\u{16FF1}\\u{1BC9D}\\u{1BC9E}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D165}-\\u{1D169}\\u{1D16D}-\\u{1D172}\\u{1D17B}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{E0100}-\\u{E01EF}]/u;\nconst combiningClassVirama = /[\\u094D\\u09CD\\u0A4D\\u0ACD\\u0B4D\\u0BCD\\u0C4D\\u0CCD\\u0D3B\\u0D3C\\u0D4D\\u0DCA\\u0E3A\\u0EBA\\u0F84\\u1039\\u103A\\u1714\\u1715\\u1734\\u17D2\\u1A60\\u1B44\\u1BAA\\u1BAB\\u1BF2\\u1BF3\\u2D7F\\uA806\\uA82C\\uA8C4\\uA953\\uA9C0\\uAAF6\\uABED\\u{10A3F}\\u{11046}\\u{11070}\\u{1107F}\\u{110B9}\\u{11133}\\u{11134}\\u{111C0}\\u{11235}\\u{112EA}\\u{1134D}\\u{11442}\\u{114C2}\\u{115BF}\\u{1163F}\\u{116B6}\\u{1172B}\\u{11839}\\u{1193D}\\u{1193E}\\u{119E0}\\u{11A34}\\u{11A47}\\u{11A99}\\u{11C3F}\\u{11D44}\\u{11D45}\\u{11D97}\\u{11F41}\\u{11F42}]/u;\nconst validZWNJ = /[\\u0620\\u0626\\u0628\\u062A-\\u062E\\u0633-\\u063F\\u0641-\\u0647\\u0649\\u064A\\u066E\\u066F\\u0678-\\u0687\\u069A-\\u06BF\\u06C1\\u06C2\\u06CC\\u06CE\\u06D0\\u06D1\\u06FA-\\u06FC\\u06FF\\u0712-\\u0714\\u071A-\\u071D\\u071F-\\u0727\\u0729\\u072B\\u072D\\u072E\\u074E-\\u0758\\u075C-\\u076A\\u076D-\\u0770\\u0772\\u0775-\\u0777\\u077A-\\u077F\\u07CA-\\u07EA\\u0841-\\u0845\\u0848\\u084A-\\u0853\\u0855\\u0860\\u0862-\\u0865\\u0868\\u0886\\u0889-\\u088D\\u08A0-\\u08A9\\u08AF\\u08B0\\u08B3-\\u08B8\\u08BA-\\u08C8\\u1807\\u1820-\\u1878\\u1887-\\u18A8\\u18AA\\uA840-\\uA872\\u{10AC0}-\\u{10AC4}\\u{10ACD}\\u{10AD3}-\\u{10ADC}\\u{10ADE}-\\u{10AE0}\\u{10AEB}-\\u{10AEE}\\u{10B80}\\u{10B82}\\u{10B86}-\\u{10B88}\\u{10B8A}\\u{10B8B}\\u{10B8D}\\u{10B90}\\u{10BAD}\\u{10BAE}\\u{10D00}-\\u{10D21}\\u{10D23}\\u{10F30}-\\u{10F32}\\u{10F34}-\\u{10F44}\\u{10F51}-\\u{10F53}\\u{10F70}-\\u{10F73}\\u{10F76}-\\u{10F81}\\u{10FB0}\\u{10FB2}\\u{10FB3}\\u{10FB8}\\u{10FBB}\\u{10FBC}\\u{10FBE}\\u{10FBF}\\u{10FC1}\\u{10FC4}\\u{10FCA}\\u{10FCB}\\u{1E900}-\\u{1E943}][\\xAD\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u061C\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u070F\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u200B\\u200E\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u206A-\\u206F\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFEFF\\uFFF9-\\uFFFB\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10EAB}\\u{10EAC}\\u{10EFD}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}-\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C3F}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{13430}-\\u{13440}\\u{13447}-\\u{13455}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1BCA0}-\\u{1BCA3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D173}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94B}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}]*\\u200C[\\xAD\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u061C\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u070F\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u200B\\u200E\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u206A-\\u206F\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFEFF\\uFFF9-\\uFFFB\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10EAB}\\u{10EAC}\\u{10EFD}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}-\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C3F}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{13430}-\\u{13440}\\u{13447}-\\u{13455}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1BCA0}-\\u{1BCA3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D173}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94B}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}]*[\\u0620\\u0622-\\u063F\\u0641-\\u064A\\u066E\\u066F\\u0671-\\u0673\\u0675-\\u06D3\\u06D5\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u077F\\u07CA-\\u07EA\\u0840-\\u0858\\u0860\\u0862-\\u0865\\u0867-\\u086A\\u0870-\\u0882\\u0886\\u0889-\\u088E\\u08A0-\\u08AC\\u08AE-\\u08C8\\u1807\\u1820-\\u1878\\u1887-\\u18A8\\u18AA\\uA840-\\uA871\\u{10AC0}-\\u{10AC5}\\u{10AC7}\\u{10AC9}\\u{10ACA}\\u{10ACE}-\\u{10AD6}\\u{10AD8}-\\u{10AE1}\\u{10AE4}\\u{10AEB}-\\u{10AEF}\\u{10B80}-\\u{10B91}\\u{10BA9}-\\u{10BAE}\\u{10D01}-\\u{10D23}\\u{10F30}-\\u{10F44}\\u{10F51}-\\u{10F54}\\u{10F70}-\\u{10F81}\\u{10FB0}\\u{10FB2}-\\u{10FB6}\\u{10FB8}-\\u{10FBF}\\u{10FC1}-\\u{10FC4}\\u{10FC9}\\u{10FCA}\\u{1E900}-\\u{1E943}]/u;\nconst bidiDomain = /[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0600-\\u0605\\u0608\\u060B\\u060D\\u061B-\\u064A\\u0660-\\u0669\\u066B-\\u066F\\u0671-\\u06D5\\u06DD\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u0890\\u0891\\u08A0-\\u08C9\\u08E2\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFE74\\uFE76-\\uFEFC\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{10920}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A00}\\u{10A10}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A40}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE4}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B40}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D23}\\u{10D30}-\\u{10D39}\\u{10E60}-\\u{10E7E}\\u{10E80}-\\u{10EA9}\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10F00}-\\u{10F27}\\u{10F30}-\\u{10F45}\\u{10F51}-\\u{10F59}\\u{10F70}-\\u{10F81}\\u{10F86}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8CF}\\u{1E900}-\\u{1E943}\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}]/u;\nconst bidiS1LTR = /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02BB-\\u02C1\\u02D0\\u02D1\\u02E0-\\u02E4\\u02EE\\u0370-\\u0373\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0482\\u048A-\\u052F\\u0531-\\u0556\\u0559-\\u0589\\u0903-\\u0939\\u093B\\u093D-\\u0940\\u0949-\\u094C\\u094E-\\u0950\\u0958-\\u0961\\u0964-\\u0980\\u0982\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09FA\\u09FC\\u09FD\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A40\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A76\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AF0\\u0AF9\\u0B02\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C41-\\u0C44\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C77\\u0C7F\\u0C80\\u0C82-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1-\\u0CF3\\u0D02-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D4F\\u0D54-\\u0D61\\u0D66-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E4F-\\u0E5B\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00-\\u0F17\\u0F1A-\\u0F34\\u0F36\\u0F38\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F7F\\u0F85\\u0F88-\\u0F8C\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u1000-\\u102C\\u1031\\u1038\\u103B\\u103C\\u103F-\\u1057\\u105A-\\u105D\\u1061-\\u1070\\u1075-\\u1081\\u1083\\u1084\\u1087-\\u108C\\u108E-\\u109C\\u109E-\\u10C5\\u10C7\\u10CD\\u10D0-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1360-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u167F\\u1681-\\u169A\\u16A0-\\u16F8\\u1700-\\u1711\\u1715\\u171F-\\u1731\\u1734-\\u1736\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u17D4-\\u17DA\\u17DC\\u17E0-\\u17E9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A19\\u1A1A\\u1A1E-\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD\\u1B04-\\u1B33\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B4C\\u1B50-\\u1B6A\\u1B74-\\u1B7E\\u1B82-\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BAE-\\u1BE5\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1BFC-\\u1C2B\\u1C34\\u1C35\\u1C3B-\\u1C49\\u1C4D-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CC7\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5-\\u1CF7\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200E\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u214F\\u2160-\\u2188\\u2336-\\u237A\\u2395\\u249C-\\u24E9\\u26AC\\u2800-\\u28FF\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u302E\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3190-\\u31BF\\u31F0-\\u321C\\u3220-\\u324F\\u3260-\\u327B\\u327F-\\u32B0\\u32C0-\\u32CB\\u32D0-\\u3376\\u337B-\\u33DD\\u33E0-\\u33FE\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA680-\\uA69D\\uA6A0-\\uA6EF\\uA6F2-\\uA6F7\\uA722-\\uA787\\uA789-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA824\\uA827\\uA830-\\uA837\\uA840-\\uA873\\uA880-\\uA8C3\\uA8CE-\\uA8D9\\uA8F2-\\uA8FE\\uA900-\\uA925\\uA92E-\\uA946\\uA952\\uA953\\uA95F-\\uA97C\\uA983-\\uA9B2\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9CD\\uA9CF-\\uA9D9\\uA9DE-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA7B\\uAA7D-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAAEB\\uAAEE-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB69\\uAB70-\\uABE4\\uABE6\\uABE7\\uABE9-\\uABEC\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uD800-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u{10000}-\\u{1000B}\\u{1000D}-\\u{10026}\\u{10028}-\\u{1003A}\\u{1003C}\\u{1003D}\\u{1003F}-\\u{1004D}\\u{10050}-\\u{1005D}\\u{10080}-\\u{100FA}\\u{10100}\\u{10102}\\u{10107}-\\u{10133}\\u{10137}-\\u{1013F}\\u{1018D}\\u{1018E}\\u{101D0}-\\u{101FC}\\u{10280}-\\u{1029C}\\u{102A0}-\\u{102D0}\\u{10300}-\\u{10323}\\u{1032D}-\\u{1034A}\\u{10350}-\\u{10375}\\u{10380}-\\u{1039D}\\u{1039F}-\\u{103C3}\\u{103C8}-\\u{103D5}\\u{10400}-\\u{1049D}\\u{104A0}-\\u{104A9}\\u{104B0}-\\u{104D3}\\u{104D8}-\\u{104FB}\\u{10500}-\\u{10527}\\u{10530}-\\u{10563}\\u{1056F}-\\u{1057A}\\u{1057C}-\\u{1058A}\\u{1058C}-\\u{10592}\\u{10594}\\u{10595}\\u{10597}-\\u{105A1}\\u{105A3}-\\u{105B1}\\u{105B3}-\\u{105B9}\\u{105BB}\\u{105BC}\\u{10600}-\\u{10736}\\u{10740}-\\u{10755}\\u{10760}-\\u{10767}\\u{10780}-\\u{10785}\\u{10787}-\\u{107B0}\\u{107B2}-\\u{107BA}\\u{11000}\\u{11002}-\\u{11037}\\u{11047}-\\u{1104D}\\u{11066}-\\u{1106F}\\u{11071}\\u{11072}\\u{11075}\\u{11082}-\\u{110B2}\\u{110B7}\\u{110B8}\\u{110BB}-\\u{110C1}\\u{110CD}\\u{110D0}-\\u{110E8}\\u{110F0}-\\u{110F9}\\u{11103}-\\u{11126}\\u{1112C}\\u{11136}-\\u{11147}\\u{11150}-\\u{11172}\\u{11174}-\\u{11176}\\u{11182}-\\u{111B5}\\u{111BF}-\\u{111C8}\\u{111CD}\\u{111CE}\\u{111D0}-\\u{111DF}\\u{111E1}-\\u{111F4}\\u{11200}-\\u{11211}\\u{11213}-\\u{1122E}\\u{11232}\\u{11233}\\u{11235}\\u{11238}-\\u{1123D}\\u{1123F}\\u{11240}\\u{11280}-\\u{11286}\\u{11288}\\u{1128A}-\\u{1128D}\\u{1128F}-\\u{1129D}\\u{1129F}-\\u{112A9}\\u{112B0}-\\u{112DE}\\u{112E0}-\\u{112E2}\\u{112F0}-\\u{112F9}\\u{11302}\\u{11303}\\u{11305}-\\u{1130C}\\u{1130F}\\u{11310}\\u{11313}-\\u{11328}\\u{1132A}-\\u{11330}\\u{11332}\\u{11333}\\u{11335}-\\u{11339}\\u{1133D}-\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11350}\\u{11357}\\u{1135D}-\\u{11363}\\u{11400}-\\u{11437}\\u{11440}\\u{11441}\\u{11445}\\u{11447}-\\u{1145B}\\u{1145D}\\u{1145F}-\\u{11461}\\u{11480}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BE}\\u{114C1}\\u{114C4}-\\u{114C7}\\u{114D0}-\\u{114D9}\\u{11580}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{115C1}-\\u{115DB}\\u{11600}-\\u{11632}\\u{1163B}\\u{1163C}\\u{1163E}\\u{11641}-\\u{11644}\\u{11650}-\\u{11659}\\u{11680}-\\u{116AA}\\u{116AC}\\u{116AE}\\u{116AF}\\u{116B6}\\u{116B8}\\u{116B9}\\u{116C0}-\\u{116C9}\\u{11700}-\\u{1171A}\\u{11720}\\u{11721}\\u{11726}\\u{11730}-\\u{11746}\\u{11800}-\\u{1182E}\\u{11838}\\u{1183B}\\u{118A0}-\\u{118F2}\\u{118FF}-\\u{11906}\\u{11909}\\u{1190C}-\\u{11913}\\u{11915}\\u{11916}\\u{11918}-\\u{11935}\\u{11937}\\u{11938}\\u{1193D}\\u{1193F}-\\u{11942}\\u{11944}-\\u{11946}\\u{11950}-\\u{11959}\\u{119A0}-\\u{119A7}\\u{119AA}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E1}-\\u{119E4}\\u{11A00}\\u{11A07}\\u{11A08}\\u{11A0B}-\\u{11A32}\\u{11A39}\\u{11A3A}\\u{11A3F}-\\u{11A46}\\u{11A50}\\u{11A57}\\u{11A58}\\u{11A5C}-\\u{11A89}\\u{11A97}\\u{11A9A}-\\u{11AA2}\\u{11AB0}-\\u{11AF8}\\u{11B00}-\\u{11B09}\\u{11C00}-\\u{11C08}\\u{11C0A}-\\u{11C2F}\\u{11C3E}-\\u{11C45}\\u{11C50}-\\u{11C6C}\\u{11C70}-\\u{11C8F}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D00}-\\u{11D06}\\u{11D08}\\u{11D09}\\u{11D0B}-\\u{11D30}\\u{11D46}\\u{11D50}-\\u{11D59}\\u{11D60}-\\u{11D65}\\u{11D67}\\u{11D68}\\u{11D6A}-\\u{11D8E}\\u{11D93}\\u{11D94}\\u{11D96}\\u{11D98}\\u{11DA0}-\\u{11DA9}\\u{11EE0}-\\u{11EF2}\\u{11EF5}-\\u{11EF8}\\u{11F02}-\\u{11F10}\\u{11F12}-\\u{11F35}\\u{11F3E}\\u{11F3F}\\u{11F41}\\u{11F43}-\\u{11F59}\\u{11FB0}\\u{11FC0}-\\u{11FD4}\\u{11FFF}-\\u{12399}\\u{12400}-\\u{1246E}\\u{12470}-\\u{12474}\\u{12480}-\\u{12543}\\u{12F90}-\\u{12FF2}\\u{13000}-\\u{1343F}\\u{13441}-\\u{13446}\\u{14400}-\\u{14646}\\u{16800}-\\u{16A38}\\u{16A40}-\\u{16A5E}\\u{16A60}-\\u{16A69}\\u{16A6E}-\\u{16ABE}\\u{16AC0}-\\u{16AC9}\\u{16AD0}-\\u{16AED}\\u{16AF5}\\u{16B00}-\\u{16B2F}\\u{16B37}-\\u{16B45}\\u{16B50}-\\u{16B59}\\u{16B5B}-\\u{16B61}\\u{16B63}-\\u{16B77}\\u{16B7D}-\\u{16B8F}\\u{16E40}-\\u{16E9A}\\u{16F00}-\\u{16F4A}\\u{16F50}-\\u{16F87}\\u{16F93}-\\u{16F9F}\\u{16FE0}\\u{16FE1}\\u{16FE3}\\u{16FF0}\\u{16FF1}\\u{17000}-\\u{187F7}\\u{18800}-\\u{18CD5}\\u{18D00}-\\u{18D08}\\u{1AFF0}-\\u{1AFF3}\\u{1AFF5}-\\u{1AFFB}\\u{1AFFD}\\u{1AFFE}\\u{1B000}-\\u{1B122}\\u{1B132}\\u{1B150}-\\u{1B152}\\u{1B155}\\u{1B164}-\\u{1B167}\\u{1B170}-\\u{1B2FB}\\u{1BC00}-\\u{1BC6A}\\u{1BC70}-\\u{1BC7C}\\u{1BC80}-\\u{1BC88}\\u{1BC90}-\\u{1BC99}\\u{1BC9C}\\u{1BC9F}\\u{1CF50}-\\u{1CFC3}\\u{1D000}-\\u{1D0F5}\\u{1D100}-\\u{1D126}\\u{1D129}-\\u{1D166}\\u{1D16A}-\\u{1D172}\\u{1D183}\\u{1D184}\\u{1D18C}-\\u{1D1A9}\\u{1D1AE}-\\u{1D1E8}\\u{1D2C0}-\\u{1D2D3}\\u{1D2E0}-\\u{1D2F3}\\u{1D360}-\\u{1D378}\\u{1D400}-\\u{1D454}\\u{1D456}-\\u{1D49C}\\u{1D49E}\\u{1D49F}\\u{1D4A2}\\u{1D4A5}\\u{1D4A6}\\u{1D4A9}-\\u{1D4AC}\\u{1D4AE}-\\u{1D4B9}\\u{1D4BB}\\u{1D4BD}-\\u{1D4C3}\\u{1D4C5}-\\u{1D505}\\u{1D507}-\\u{1D50A}\\u{1D50D}-\\u{1D514}\\u{1D516}-\\u{1D51C}\\u{1D51E}-\\u{1D539}\\u{1D53B}-\\u{1D53E}\\u{1D540}-\\u{1D544}\\u{1D546}\\u{1D54A}-\\u{1D550}\\u{1D552}-\\u{1D6A5}\\u{1D6A8}-\\u{1D6DA}\\u{1D6DC}-\\u{1D714}\\u{1D716}-\\u{1D74E}\\u{1D750}-\\u{1D788}\\u{1D78A}-\\u{1D7C2}\\u{1D7C4}-\\u{1D7CB}\\u{1D800}-\\u{1D9FF}\\u{1DA37}-\\u{1DA3A}\\u{1DA6D}-\\u{1DA74}\\u{1DA76}-\\u{1DA83}\\u{1DA85}-\\u{1DA8B}\\u{1DF00}-\\u{1DF1E}\\u{1DF25}-\\u{1DF2A}\\u{1E030}-\\u{1E06D}\\u{1E100}-\\u{1E12C}\\u{1E137}-\\u{1E13D}\\u{1E140}-\\u{1E149}\\u{1E14E}\\u{1E14F}\\u{1E290}-\\u{1E2AD}\\u{1E2C0}-\\u{1E2EB}\\u{1E2F0}-\\u{1E2F9}\\u{1E4D0}-\\u{1E4EB}\\u{1E4F0}-\\u{1E4F9}\\u{1E7E0}-\\u{1E7E6}\\u{1E7E8}-\\u{1E7EB}\\u{1E7ED}\\u{1E7EE}\\u{1E7F0}-\\u{1E7FE}\\u{1F110}-\\u{1F12E}\\u{1F130}-\\u{1F169}\\u{1F170}-\\u{1F1AC}\\u{1F1E6}-\\u{1F202}\\u{1F210}-\\u{1F23B}\\u{1F240}-\\u{1F248}\\u{1F250}\\u{1F251}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B739}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2EBF0}-\\u{2EE5D}\\u{2F800}-\\u{2FA1D}\\u{30000}-\\u{3134A}\\u{31350}-\\u{323AF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}]/u;\nconst bidiS1RTL = /[\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0608\\u060B\\u060D\\u061B-\\u064A\\u066D-\\u066F\\u0671-\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u08A0-\\u08C9\\u200F\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFE74\\uFE76-\\uFEFC\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{10920}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A00}\\u{10A10}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A40}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE4}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B40}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D23}\\u{10E80}-\\u{10EA9}\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10F00}-\\u{10F27}\\u{10F30}-\\u{10F45}\\u{10F51}-\\u{10F59}\\u{10F70}-\\u{10F81}\\u{10F86}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8CF}\\u{1E900}-\\u{1E943}\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}]/u;\nconst bidiS2 = /^[\\0-\\x08\\x0E-\\x1B!-@\\[-`\\{-\\x84\\x86-\\xA9\\xAB-\\xB4\\xB6-\\xB9\\xBB-\\xBF\\xD7\\xF7\\u02B9\\u02BA\\u02C2-\\u02CF\\u02D2-\\u02DF\\u02E5-\\u02ED\\u02EF-\\u036F\\u0374\\u0375\\u037E\\u0384\\u0385\\u0387\\u03F6\\u0483-\\u0489\\u058A\\u058D-\\u058F\\u0591-\\u05C7\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0600-\\u070D\\u070F-\\u074A\\u074D-\\u07B1\\u07C0-\\u07FA\\u07FD-\\u082D\\u0830-\\u083E\\u0840-\\u085B\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u0890\\u0891\\u0898-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09F2\\u09F3\\u09FB\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AF1\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0BF3-\\u0BFA\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C78-\\u0C7E\\u0C81\\u0CBC\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E3F\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39-\\u0F3D\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1390-\\u1399\\u1400\\u169B\\u169C\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DB\\u17DD\\u17F0-\\u17F9\\u1800-\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1940\\u1944\\u1945\\u19DE-\\u19FF\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u200B-\\u200D\\u200F-\\u2027\\u202F-\\u205E\\u2060-\\u2064\\u206A-\\u2070\\u2074-\\u207E\\u2080-\\u208E\\u20A0-\\u20C0\\u20D0-\\u20F0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u2150-\\u215F\\u2189-\\u218B\\u2190-\\u2335\\u237B-\\u2394\\u2396-\\u2426\\u2440-\\u244A\\u2460-\\u249B\\u24EA-\\u26AB\\u26AD-\\u27FF\\u2900-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2CEF-\\u2CF1\\u2CF9-\\u2CFF\\u2D7F\\u2DE0-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u3004\\u3008-\\u3020\\u302A-\\u302D\\u3030\\u3036\\u3037\\u303D-\\u303F\\u3099-\\u309C\\u30A0\\u30FB\\u31C0-\\u31E3\\u31EF\\u321D\\u321E\\u3250-\\u325F\\u327C-\\u327E\\u32B1-\\u32BF\\u32CC-\\u32CF\\u3377-\\u337A\\u33DE\\u33DF\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA60D-\\uA60F\\uA66F-\\uA67F\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA700-\\uA721\\uA788\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA828-\\uA82C\\uA838\\uA839\\uA874-\\uA877\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uAB6A\\uAB6B\\uABE5\\uABE8\\uABED\\uFB1D-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD8F\\uFD92-\\uFDC7\\uFDCF\\uFDF0-\\uFE19\\uFE20-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFEFF\\uFF01-\\uFF20\\uFF3B-\\uFF40\\uFF5B-\\uFF65\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD\\u{10101}\\u{10140}-\\u{1018C}\\u{10190}-\\u{1019C}\\u{101A0}\\u{101FD}\\u{102E0}-\\u{102FB}\\u{10376}-\\u{1037A}\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{1091F}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A38}-\\u{10A3A}\\u{10A3F}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE6}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B39}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D27}\\u{10D30}-\\u{10D39}\\u{10E60}-\\u{10E7E}\\u{10E80}-\\u{10EA9}\\u{10EAB}-\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10EFD}-\\u{10F27}\\u{10F30}-\\u{10F59}\\u{10F70}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{11001}\\u{11038}-\\u{11046}\\u{11052}-\\u{11065}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{11660}-\\u{1166C}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}-\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A06}\\u{11A09}\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{11FD5}-\\u{11FF1}\\u{13440}\\u{13447}-\\u{13455}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE2}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1BCA0}-\\u{1BCA3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D173}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D1E9}\\u{1D1EA}\\u{1D200}-\\u{1D245}\\u{1D300}-\\u{1D356}\\u{1D6DB}\\u{1D715}\\u{1D74F}\\u{1D789}\\u{1D7C3}\\u{1D7CE}-\\u{1D7FF}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E2FF}\\u{1E4EC}-\\u{1E4EF}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8D6}\\u{1E900}-\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}\\u{1EEF0}\\u{1EEF1}\\u{1F000}-\\u{1F02B}\\u{1F030}-\\u{1F093}\\u{1F0A0}-\\u{1F0AE}\\u{1F0B1}-\\u{1F0BF}\\u{1F0C1}-\\u{1F0CF}\\u{1F0D1}-\\u{1F0F5}\\u{1F100}-\\u{1F10F}\\u{1F12F}\\u{1F16A}-\\u{1F16F}\\u{1F1AD}\\u{1F260}-\\u{1F265}\\u{1F300}-\\u{1F6D7}\\u{1F6DC}-\\u{1F6EC}\\u{1F6F0}-\\u{1F6FC}\\u{1F700}-\\u{1F776}\\u{1F77B}-\\u{1F7D9}\\u{1F7E0}-\\u{1F7EB}\\u{1F7F0}\\u{1F800}-\\u{1F80B}\\u{1F810}-\\u{1F847}\\u{1F850}-\\u{1F859}\\u{1F860}-\\u{1F887}\\u{1F890}-\\u{1F8AD}\\u{1F8B0}\\u{1F8B1}\\u{1F900}-\\u{1FA53}\\u{1FA60}-\\u{1FA6D}\\u{1FA70}-\\u{1FA7C}\\u{1FA80}-\\u{1FA88}\\u{1FA90}-\\u{1FABD}\\u{1FABF}-\\u{1FAC5}\\u{1FACE}-\\u{1FADB}\\u{1FAE0}-\\u{1FAE8}\\u{1FAF0}-\\u{1FAF8}\\u{1FB00}-\\u{1FB92}\\u{1FB94}-\\u{1FBCA}\\u{1FBF0}-\\u{1FBF9}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}]*$/u;\nconst bidiS3 = /[0-9\\xB2\\xB3\\xB9\\u05BE\\u05C0\\u05C3\\u05C6\\u05D0-\\u05EA\\u05EF-\\u05F4\\u0600-\\u0605\\u0608\\u060B\\u060D\\u061B-\\u064A\\u0660-\\u0669\\u066B-\\u066F\\u0671-\\u06D5\\u06DD\\u06E5\\u06E6\\u06EE-\\u070D\\u070F\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u07FE-\\u0815\\u081A\\u0824\\u0828\\u0830-\\u083E\\u0840-\\u0858\\u085E\\u0860-\\u086A\\u0870-\\u088E\\u0890\\u0891\\u08A0-\\u08C9\\u08E2\\u200F\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2488-\\u249B\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBC2\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFC\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\u{102E1}-\\u{102FB}\\u{10800}-\\u{10805}\\u{10808}\\u{1080A}-\\u{10835}\\u{10837}\\u{10838}\\u{1083C}\\u{1083F}-\\u{10855}\\u{10857}-\\u{1089E}\\u{108A7}-\\u{108AF}\\u{108E0}-\\u{108F2}\\u{108F4}\\u{108F5}\\u{108FB}-\\u{1091B}\\u{10920}-\\u{10939}\\u{1093F}\\u{10980}-\\u{109B7}\\u{109BC}-\\u{109CF}\\u{109D2}-\\u{10A00}\\u{10A10}-\\u{10A13}\\u{10A15}-\\u{10A17}\\u{10A19}-\\u{10A35}\\u{10A40}-\\u{10A48}\\u{10A50}-\\u{10A58}\\u{10A60}-\\u{10A9F}\\u{10AC0}-\\u{10AE4}\\u{10AEB}-\\u{10AF6}\\u{10B00}-\\u{10B35}\\u{10B40}-\\u{10B55}\\u{10B58}-\\u{10B72}\\u{10B78}-\\u{10B91}\\u{10B99}-\\u{10B9C}\\u{10BA9}-\\u{10BAF}\\u{10C00}-\\u{10C48}\\u{10C80}-\\u{10CB2}\\u{10CC0}-\\u{10CF2}\\u{10CFA}-\\u{10D23}\\u{10D30}-\\u{10D39}\\u{10E60}-\\u{10E7E}\\u{10E80}-\\u{10EA9}\\u{10EAD}\\u{10EB0}\\u{10EB1}\\u{10F00}-\\u{10F27}\\u{10F30}-\\u{10F45}\\u{10F51}-\\u{10F59}\\u{10F70}-\\u{10F81}\\u{10F86}-\\u{10F89}\\u{10FB0}-\\u{10FCB}\\u{10FE0}-\\u{10FF6}\\u{1D7CE}-\\u{1D7FF}\\u{1E800}-\\u{1E8C4}\\u{1E8C7}-\\u{1E8CF}\\u{1E900}-\\u{1E943}\\u{1E94B}\\u{1E950}-\\u{1E959}\\u{1E95E}\\u{1E95F}\\u{1EC71}-\\u{1ECB4}\\u{1ED01}-\\u{1ED3D}\\u{1EE00}-\\u{1EE03}\\u{1EE05}-\\u{1EE1F}\\u{1EE21}\\u{1EE22}\\u{1EE24}\\u{1EE27}\\u{1EE29}-\\u{1EE32}\\u{1EE34}-\\u{1EE37}\\u{1EE39}\\u{1EE3B}\\u{1EE42}\\u{1EE47}\\u{1EE49}\\u{1EE4B}\\u{1EE4D}-\\u{1EE4F}\\u{1EE51}\\u{1EE52}\\u{1EE54}\\u{1EE57}\\u{1EE59}\\u{1EE5B}\\u{1EE5D}\\u{1EE5F}\\u{1EE61}\\u{1EE62}\\u{1EE64}\\u{1EE67}-\\u{1EE6A}\\u{1EE6C}-\\u{1EE72}\\u{1EE74}-\\u{1EE77}\\u{1EE79}-\\u{1EE7C}\\u{1EE7E}\\u{1EE80}-\\u{1EE89}\\u{1EE8B}-\\u{1EE9B}\\u{1EEA1}-\\u{1EEA3}\\u{1EEA5}-\\u{1EEA9}\\u{1EEAB}-\\u{1EEBB}\\u{1F100}-\\u{1F10A}\\u{1FBF0}-\\u{1FBF9}][\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10EAB}\\u{10EAC}\\u{10EFD}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}-\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A06}\\u{11A09}\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{13440}\\u{13447}-\\u{13455}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D17B}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{E0100}-\\u{E01EF}]*$/u;\nconst bidiS4EN = /[0-9\\xB2\\xB3\\xB9\\u06F0-\\u06F9\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2488-\\u249B\\uFF10-\\uFF19\\u{102E1}-\\u{102FB}\\u{1D7CE}-\\u{1D7FF}\\u{1F100}-\\u{1F10A}\\u{1FBF0}-\\u{1FBF9}]/u;\nconst bidiS4AN = /[\\u0600-\\u0605\\u0660-\\u0669\\u066B\\u066C\\u06DD\\u0890\\u0891\\u08E2\\u{10D30}-\\u{10D39}\\u{10E60}-\\u{10E7E}]/u;\nconst bidiS5 = /^[\\0-\\x08\\x0E-\\x1B!-\\x84\\x86-\\u0377\\u037A-\\u037F\\u0384-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u052F\\u0531-\\u0556\\u0559-\\u058A\\u058D-\\u058F\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0606\\u0607\\u0609\\u060A\\u060C\\u060E-\\u061A\\u064B-\\u065F\\u066A\\u0670\\u06D6-\\u06DC\\u06DE-\\u06E4\\u06E7-\\u06ED\\u06F0-\\u06F9\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07F6-\\u07F9\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09FE\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A76\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AF1\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B55-\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B77\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BFA\\u0C00-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3C-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C5D\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C77-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDD\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1-\\u0CF3\\u0D00-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4F\\u0D54-\\u0D63\\u0D66-\\u0D7F\\u0D81-\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4\\u0E01-\\u0E3A\\u0E3F-\\u0E5B\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECE\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F97\\u0F99-\\u0FBC\\u0FBE-\\u0FCC\\u0FCE-\\u0FDA\\u1000-\\u10C5\\u10C7\\u10CD\\u10D0-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u137C\\u1380-\\u1399\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1400-\\u167F\\u1681-\\u169C\\u16A0-\\u16F8\\u1700-\\u1715\\u171F-\\u1736\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1800-\\u1819\\u1820-\\u1878\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1940\\u1944-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u19DE-\\u1A1B\\u1A1E-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD\\u1AB0-\\u1ACE\\u1B00-\\u1B4C\\u1B50-\\u1B7E\\u1B80-\\u1BF3\\u1BFC-\\u1C37\\u1C3B-\\u1C49\\u1C4D-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CC7\\u1CD0-\\u1CFA\\u1D00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FC4\\u1FC6-\\u1FD3\\u1FD6-\\u1FDB\\u1FDD-\\u1FEF\\u1FF2-\\u1FF4\\u1FF6-\\u1FFE\\u200B-\\u200E\\u2010-\\u2027\\u202F-\\u205E\\u2060-\\u2064\\u206A-\\u2071\\u2074-\\u208E\\u2090-\\u209C\\u20A0-\\u20C0\\u20D0-\\u20F0\\u2100-\\u218B\\u2190-\\u2426\\u2440-\\u244A\\u2460-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2CF3\\u2CF9-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2E5D\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3001-\\u303F\\u3041-\\u3096\\u3099-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3190-\\u31E3\\u31EF-\\u321E\\u3220-\\uA48C\\uA490-\\uA4C6\\uA4D0-\\uA62B\\uA640-\\uA6F7\\uA700-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA82C\\uA830-\\uA839\\uA840-\\uA877\\uA880-\\uA8C5\\uA8CE-\\uA8D9\\uA8E0-\\uA953\\uA95F-\\uA97C\\uA980-\\uA9CD\\uA9CF-\\uA9D9\\uA9DE-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAAC2\\uAADB-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB6B\\uAB70-\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uD800-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1E\\uFB29\\uFD3E-\\uFD4F\\uFDCF\\uFDFD-\\uFE19\\uFE20-\\uFE52\\uFE54-\\uFE66\\uFE68-\\uFE6B\\uFEFF\\uFF01-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFF9-\\uFFFD\\u{10000}-\\u{1000B}\\u{1000D}-\\u{10026}\\u{10028}-\\u{1003A}\\u{1003C}\\u{1003D}\\u{1003F}-\\u{1004D}\\u{10050}-\\u{1005D}\\u{10080}-\\u{100FA}\\u{10100}-\\u{10102}\\u{10107}-\\u{10133}\\u{10137}-\\u{1018E}\\u{10190}-\\u{1019C}\\u{101A0}\\u{101D0}-\\u{101FD}\\u{10280}-\\u{1029C}\\u{102A0}-\\u{102D0}\\u{102E0}-\\u{102FB}\\u{10300}-\\u{10323}\\u{1032D}-\\u{1034A}\\u{10350}-\\u{1037A}\\u{10380}-\\u{1039D}\\u{1039F}-\\u{103C3}\\u{103C8}-\\u{103D5}\\u{10400}-\\u{1049D}\\u{104A0}-\\u{104A9}\\u{104B0}-\\u{104D3}\\u{104D8}-\\u{104FB}\\u{10500}-\\u{10527}\\u{10530}-\\u{10563}\\u{1056F}-\\u{1057A}\\u{1057C}-\\u{1058A}\\u{1058C}-\\u{10592}\\u{10594}\\u{10595}\\u{10597}-\\u{105A1}\\u{105A3}-\\u{105B1}\\u{105B3}-\\u{105B9}\\u{105BB}\\u{105BC}\\u{10600}-\\u{10736}\\u{10740}-\\u{10755}\\u{10760}-\\u{10767}\\u{10780}-\\u{10785}\\u{10787}-\\u{107B0}\\u{107B2}-\\u{107BA}\\u{1091F}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10B39}-\\u{10B3F}\\u{10D24}-\\u{10D27}\\u{10EAB}\\u{10EAC}\\u{10EFD}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11000}-\\u{1104D}\\u{11052}-\\u{11075}\\u{1107F}-\\u{110C2}\\u{110CD}\\u{110D0}-\\u{110E8}\\u{110F0}-\\u{110F9}\\u{11100}-\\u{11134}\\u{11136}-\\u{11147}\\u{11150}-\\u{11176}\\u{11180}-\\u{111DF}\\u{111E1}-\\u{111F4}\\u{11200}-\\u{11211}\\u{11213}-\\u{11241}\\u{11280}-\\u{11286}\\u{11288}\\u{1128A}-\\u{1128D}\\u{1128F}-\\u{1129D}\\u{1129F}-\\u{112A9}\\u{112B0}-\\u{112EA}\\u{112F0}-\\u{112F9}\\u{11300}-\\u{11303}\\u{11305}-\\u{1130C}\\u{1130F}\\u{11310}\\u{11313}-\\u{11328}\\u{1132A}-\\u{11330}\\u{11332}\\u{11333}\\u{11335}-\\u{11339}\\u{1133B}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11350}\\u{11357}\\u{1135D}-\\u{11363}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11400}-\\u{1145B}\\u{1145D}-\\u{11461}\\u{11480}-\\u{114C7}\\u{114D0}-\\u{114D9}\\u{11580}-\\u{115B5}\\u{115B8}-\\u{115DD}\\u{11600}-\\u{11644}\\u{11650}-\\u{11659}\\u{11660}-\\u{1166C}\\u{11680}-\\u{116B9}\\u{116C0}-\\u{116C9}\\u{11700}-\\u{1171A}\\u{1171D}-\\u{1172B}\\u{11730}-\\u{11746}\\u{11800}-\\u{1183B}\\u{118A0}-\\u{118F2}\\u{118FF}-\\u{11906}\\u{11909}\\u{1190C}-\\u{11913}\\u{11915}\\u{11916}\\u{11918}-\\u{11935}\\u{11937}\\u{11938}\\u{1193B}-\\u{11946}\\u{11950}-\\u{11959}\\u{119A0}-\\u{119A7}\\u{119AA}-\\u{119D7}\\u{119DA}-\\u{119E4}\\u{11A00}-\\u{11A47}\\u{11A50}-\\u{11AA2}\\u{11AB0}-\\u{11AF8}\\u{11B00}-\\u{11B09}\\u{11C00}-\\u{11C08}\\u{11C0A}-\\u{11C36}\\u{11C38}-\\u{11C45}\\u{11C50}-\\u{11C6C}\\u{11C70}-\\u{11C8F}\\u{11C92}-\\u{11CA7}\\u{11CA9}-\\u{11CB6}\\u{11D00}-\\u{11D06}\\u{11D08}\\u{11D09}\\u{11D0B}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D47}\\u{11D50}-\\u{11D59}\\u{11D60}-\\u{11D65}\\u{11D67}\\u{11D68}\\u{11D6A}-\\u{11D8E}\\u{11D90}\\u{11D91}\\u{11D93}-\\u{11D98}\\u{11DA0}-\\u{11DA9}\\u{11EE0}-\\u{11EF8}\\u{11F00}-\\u{11F10}\\u{11F12}-\\u{11F3A}\\u{11F3E}-\\u{11F59}\\u{11FB0}\\u{11FC0}-\\u{11FF1}\\u{11FFF}-\\u{12399}\\u{12400}-\\u{1246E}\\u{12470}-\\u{12474}\\u{12480}-\\u{12543}\\u{12F90}-\\u{12FF2}\\u{13000}-\\u{13455}\\u{14400}-\\u{14646}\\u{16800}-\\u{16A38}\\u{16A40}-\\u{16A5E}\\u{16A60}-\\u{16A69}\\u{16A6E}-\\u{16ABE}\\u{16AC0}-\\u{16AC9}\\u{16AD0}-\\u{16AED}\\u{16AF0}-\\u{16AF5}\\u{16B00}-\\u{16B45}\\u{16B50}-\\u{16B59}\\u{16B5B}-\\u{16B61}\\u{16B63}-\\u{16B77}\\u{16B7D}-\\u{16B8F}\\u{16E40}-\\u{16E9A}\\u{16F00}-\\u{16F4A}\\u{16F4F}-\\u{16F87}\\u{16F8F}-\\u{16F9F}\\u{16FE0}-\\u{16FE4}\\u{16FF0}\\u{16FF1}\\u{17000}-\\u{187F7}\\u{18800}-\\u{18CD5}\\u{18D00}-\\u{18D08}\\u{1AFF0}-\\u{1AFF3}\\u{1AFF5}-\\u{1AFFB}\\u{1AFFD}\\u{1AFFE}\\u{1B000}-\\u{1B122}\\u{1B132}\\u{1B150}-\\u{1B152}\\u{1B155}\\u{1B164}-\\u{1B167}\\u{1B170}-\\u{1B2FB}\\u{1BC00}-\\u{1BC6A}\\u{1BC70}-\\u{1BC7C}\\u{1BC80}-\\u{1BC88}\\u{1BC90}-\\u{1BC99}\\u{1BC9C}-\\u{1BCA3}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1CF50}-\\u{1CFC3}\\u{1D000}-\\u{1D0F5}\\u{1D100}-\\u{1D126}\\u{1D129}-\\u{1D1EA}\\u{1D200}-\\u{1D245}\\u{1D2C0}-\\u{1D2D3}\\u{1D2E0}-\\u{1D2F3}\\u{1D300}-\\u{1D356}\\u{1D360}-\\u{1D378}\\u{1D400}-\\u{1D454}\\u{1D456}-\\u{1D49C}\\u{1D49E}\\u{1D49F}\\u{1D4A2}\\u{1D4A5}\\u{1D4A6}\\u{1D4A9}-\\u{1D4AC}\\u{1D4AE}-\\u{1D4B9}\\u{1D4BB}\\u{1D4BD}-\\u{1D4C3}\\u{1D4C5}-\\u{1D505}\\u{1D507}-\\u{1D50A}\\u{1D50D}-\\u{1D514}\\u{1D516}-\\u{1D51C}\\u{1D51E}-\\u{1D539}\\u{1D53B}-\\u{1D53E}\\u{1D540}-\\u{1D544}\\u{1D546}\\u{1D54A}-\\u{1D550}\\u{1D552}-\\u{1D6A5}\\u{1D6A8}-\\u{1D7CB}\\u{1D7CE}-\\u{1DA8B}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1DF00}-\\u{1DF1E}\\u{1DF25}-\\u{1DF2A}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E030}-\\u{1E06D}\\u{1E08F}\\u{1E100}-\\u{1E12C}\\u{1E130}-\\u{1E13D}\\u{1E140}-\\u{1E149}\\u{1E14E}\\u{1E14F}\\u{1E290}-\\u{1E2AE}\\u{1E2C0}-\\u{1E2F9}\\u{1E2FF}\\u{1E4D0}-\\u{1E4F9}\\u{1E7E0}-\\u{1E7E6}\\u{1E7E8}-\\u{1E7EB}\\u{1E7ED}\\u{1E7EE}\\u{1E7F0}-\\u{1E7FE}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{1EEF0}\\u{1EEF1}\\u{1F000}-\\u{1F02B}\\u{1F030}-\\u{1F093}\\u{1F0A0}-\\u{1F0AE}\\u{1F0B1}-\\u{1F0BF}\\u{1F0C1}-\\u{1F0CF}\\u{1F0D1}-\\u{1F0F5}\\u{1F100}-\\u{1F1AD}\\u{1F1E6}-\\u{1F202}\\u{1F210}-\\u{1F23B}\\u{1F240}-\\u{1F248}\\u{1F250}\\u{1F251}\\u{1F260}-\\u{1F265}\\u{1F300}-\\u{1F6D7}\\u{1F6DC}-\\u{1F6EC}\\u{1F6F0}-\\u{1F6FC}\\u{1F700}-\\u{1F776}\\u{1F77B}-\\u{1F7D9}\\u{1F7E0}-\\u{1F7EB}\\u{1F7F0}\\u{1F800}-\\u{1F80B}\\u{1F810}-\\u{1F847}\\u{1F850}-\\u{1F859}\\u{1F860}-\\u{1F887}\\u{1F890}-\\u{1F8AD}\\u{1F8B0}\\u{1F8B1}\\u{1F900}-\\u{1FA53}\\u{1FA60}-\\u{1FA6D}\\u{1FA70}-\\u{1FA7C}\\u{1FA80}-\\u{1FA88}\\u{1FA90}-\\u{1FABD}\\u{1FABF}-\\u{1FAC5}\\u{1FACE}-\\u{1FADB}\\u{1FAE0}-\\u{1FAE8}\\u{1FAF0}-\\u{1FAF8}\\u{1FB00}-\\u{1FB92}\\u{1FB94}-\\u{1FBCA}\\u{1FBF0}-\\u{1FBF9}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B739}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2EBF0}-\\u{2EE5D}\\u{2F800}-\\u{2FA1D}\\u{30000}-\\u{3134A}\\u{31350}-\\u{323AF}\\u{E0001}\\u{E0020}-\\u{E007F}\\u{E0100}-\\u{E01EF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}]*$/u;\nconst bidiS6 = /[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02B8\\u02BB-\\u02C1\\u02D0\\u02D1\\u02E0-\\u02E4\\u02EE\\u0370-\\u0373\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0482\\u048A-\\u052F\\u0531-\\u0556\\u0559-\\u0589\\u06F0-\\u06F9\\u0903-\\u0939\\u093B\\u093D-\\u0940\\u0949-\\u094C\\u094E-\\u0950\\u0958-\\u0961\\u0964-\\u0980\\u0982\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD-\\u09C0\\u09C7\\u09C8\\u09CB\\u09CC\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09FA\\u09FC\\u09FD\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3E-\\u0A40\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A76\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD-\\u0AC0\\u0AC9\\u0ACB\\u0ACC\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AF0\\u0AF9\\u0B02\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B3E\\u0B40\\u0B47\\u0B48\\u0B4B\\u0B4C\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE\\u0BBF\\u0BC1\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C01-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C41-\\u0C44\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C77\\u0C7F\\u0C80\\u0C82-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA\\u0CCB\\u0CD5\\u0CD6\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1-\\u0CF3\\u0D02-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D4E\\u0D4F\\u0D54-\\u0D61\\u0D66-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2-\\u0DF4\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E4F-\\u0E5B\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00-\\u0F17\\u0F1A-\\u0F34\\u0F36\\u0F38\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F7F\\u0F85\\u0F88-\\u0F8C\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE-\\u0FDA\\u1000-\\u102C\\u1031\\u1038\\u103B\\u103C\\u103F-\\u1057\\u105A-\\u105D\\u1061-\\u1070\\u1075-\\u1081\\u1083\\u1084\\u1087-\\u108C\\u108E-\\u109C\\u109E-\\u10C5\\u10C7\\u10CD\\u10D0-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1360-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u167F\\u1681-\\u169A\\u16A0-\\u16F8\\u1700-\\u1711\\u1715\\u171F-\\u1731\\u1734-\\u1736\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17B6\\u17BE-\\u17C5\\u17C7\\u17C8\\u17D4-\\u17DA\\u17DC\\u17E0-\\u17E9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1923-\\u1926\\u1929-\\u192B\\u1930\\u1931\\u1933-\\u1938\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A19\\u1A1A\\u1A1E-\\u1A55\\u1A57\\u1A61\\u1A63\\u1A64\\u1A6D-\\u1A72\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA0-\\u1AAD\\u1B04-\\u1B33\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B4C\\u1B50-\\u1B6A\\u1B74-\\u1B7E\\u1B82-\\u1BA1\\u1BA6\\u1BA7\\u1BAA\\u1BAE-\\u1BE5\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2\\u1BF3\\u1BFC-\\u1C2B\\u1C34\\u1C35\\u1C3B-\\u1C49\\u1C4D-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CC7\\u1CD3\\u1CE1\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5-\\u1CF7\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200E\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u214F\\u2160-\\u2188\\u2336-\\u237A\\u2395\\u2488-\\u24E9\\u26AC\\u2800-\\u28FF\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D70\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u302E\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3190-\\u31BF\\u31F0-\\u321C\\u3220-\\u324F\\u3260-\\u327B\\u327F-\\u32B0\\u32C0-\\u32CB\\u32D0-\\u3376\\u337B-\\u33DD\\u33E0-\\u33FE\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA680-\\uA69D\\uA6A0-\\uA6EF\\uA6F2-\\uA6F7\\uA722-\\uA787\\uA789-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA824\\uA827\\uA830-\\uA837\\uA840-\\uA873\\uA880-\\uA8C3\\uA8CE-\\uA8D9\\uA8F2-\\uA8FE\\uA900-\\uA925\\uA92E-\\uA946\\uA952\\uA953\\uA95F-\\uA97C\\uA983-\\uA9B2\\uA9B4\\uA9B5\\uA9BA\\uA9BB\\uA9BE-\\uA9CD\\uA9CF-\\uA9D9\\uA9DE-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA2F\\uAA30\\uAA33\\uAA34\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA4D\\uAA50-\\uAA59\\uAA5C-\\uAA7B\\uAA7D-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAAEB\\uAAEE-\\uAAF5\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB69\\uAB70-\\uABE4\\uABE6\\uABE7\\uABE9-\\uABEC\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uD800-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC\\u{10000}-\\u{1000B}\\u{1000D}-\\u{10026}\\u{10028}-\\u{1003A}\\u{1003C}\\u{1003D}\\u{1003F}-\\u{1004D}\\u{10050}-\\u{1005D}\\u{10080}-\\u{100FA}\\u{10100}\\u{10102}\\u{10107}-\\u{10133}\\u{10137}-\\u{1013F}\\u{1018D}\\u{1018E}\\u{101D0}-\\u{101FC}\\u{10280}-\\u{1029C}\\u{102A0}-\\u{102D0}\\u{102E1}-\\u{102FB}\\u{10300}-\\u{10323}\\u{1032D}-\\u{1034A}\\u{10350}-\\u{10375}\\u{10380}-\\u{1039D}\\u{1039F}-\\u{103C3}\\u{103C8}-\\u{103D5}\\u{10400}-\\u{1049D}\\u{104A0}-\\u{104A9}\\u{104B0}-\\u{104D3}\\u{104D8}-\\u{104FB}\\u{10500}-\\u{10527}\\u{10530}-\\u{10563}\\u{1056F}-\\u{1057A}\\u{1057C}-\\u{1058A}\\u{1058C}-\\u{10592}\\u{10594}\\u{10595}\\u{10597}-\\u{105A1}\\u{105A3}-\\u{105B1}\\u{105B3}-\\u{105B9}\\u{105BB}\\u{105BC}\\u{10600}-\\u{10736}\\u{10740}-\\u{10755}\\u{10760}-\\u{10767}\\u{10780}-\\u{10785}\\u{10787}-\\u{107B0}\\u{107B2}-\\u{107BA}\\u{11000}\\u{11002}-\\u{11037}\\u{11047}-\\u{1104D}\\u{11066}-\\u{1106F}\\u{11071}\\u{11072}\\u{11075}\\u{11082}-\\u{110B2}\\u{110B7}\\u{110B8}\\u{110BB}-\\u{110C1}\\u{110CD}\\u{110D0}-\\u{110E8}\\u{110F0}-\\u{110F9}\\u{11103}-\\u{11126}\\u{1112C}\\u{11136}-\\u{11147}\\u{11150}-\\u{11172}\\u{11174}-\\u{11176}\\u{11182}-\\u{111B5}\\u{111BF}-\\u{111C8}\\u{111CD}\\u{111CE}\\u{111D0}-\\u{111DF}\\u{111E1}-\\u{111F4}\\u{11200}-\\u{11211}\\u{11213}-\\u{1122E}\\u{11232}\\u{11233}\\u{11235}\\u{11238}-\\u{1123D}\\u{1123F}\\u{11240}\\u{11280}-\\u{11286}\\u{11288}\\u{1128A}-\\u{1128D}\\u{1128F}-\\u{1129D}\\u{1129F}-\\u{112A9}\\u{112B0}-\\u{112DE}\\u{112E0}-\\u{112E2}\\u{112F0}-\\u{112F9}\\u{11302}\\u{11303}\\u{11305}-\\u{1130C}\\u{1130F}\\u{11310}\\u{11313}-\\u{11328}\\u{1132A}-\\u{11330}\\u{11332}\\u{11333}\\u{11335}-\\u{11339}\\u{1133D}-\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}\\u{11348}\\u{1134B}-\\u{1134D}\\u{11350}\\u{11357}\\u{1135D}-\\u{11363}\\u{11400}-\\u{11437}\\u{11440}\\u{11441}\\u{11445}\\u{11447}-\\u{1145B}\\u{1145D}\\u{1145F}-\\u{11461}\\u{11480}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BE}\\u{114C1}\\u{114C4}-\\u{114C7}\\u{114D0}-\\u{114D9}\\u{11580}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{115C1}-\\u{115DB}\\u{11600}-\\u{11632}\\u{1163B}\\u{1163C}\\u{1163E}\\u{11641}-\\u{11644}\\u{11650}-\\u{11659}\\u{11680}-\\u{116AA}\\u{116AC}\\u{116AE}\\u{116AF}\\u{116B6}\\u{116B8}\\u{116B9}\\u{116C0}-\\u{116C9}\\u{11700}-\\u{1171A}\\u{11720}\\u{11721}\\u{11726}\\u{11730}-\\u{11746}\\u{11800}-\\u{1182E}\\u{11838}\\u{1183B}\\u{118A0}-\\u{118F2}\\u{118FF}-\\u{11906}\\u{11909}\\u{1190C}-\\u{11913}\\u{11915}\\u{11916}\\u{11918}-\\u{11935}\\u{11937}\\u{11938}\\u{1193D}\\u{1193F}-\\u{11942}\\u{11944}-\\u{11946}\\u{11950}-\\u{11959}\\u{119A0}-\\u{119A7}\\u{119AA}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E1}-\\u{119E4}\\u{11A00}\\u{11A07}\\u{11A08}\\u{11A0B}-\\u{11A32}\\u{11A39}\\u{11A3A}\\u{11A3F}-\\u{11A46}\\u{11A50}\\u{11A57}\\u{11A58}\\u{11A5C}-\\u{11A89}\\u{11A97}\\u{11A9A}-\\u{11AA2}\\u{11AB0}-\\u{11AF8}\\u{11B00}-\\u{11B09}\\u{11C00}-\\u{11C08}\\u{11C0A}-\\u{11C2F}\\u{11C3E}-\\u{11C45}\\u{11C50}-\\u{11C6C}\\u{11C70}-\\u{11C8F}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D00}-\\u{11D06}\\u{11D08}\\u{11D09}\\u{11D0B}-\\u{11D30}\\u{11D46}\\u{11D50}-\\u{11D59}\\u{11D60}-\\u{11D65}\\u{11D67}\\u{11D68}\\u{11D6A}-\\u{11D8E}\\u{11D93}\\u{11D94}\\u{11D96}\\u{11D98}\\u{11DA0}-\\u{11DA9}\\u{11EE0}-\\u{11EF2}\\u{11EF5}-\\u{11EF8}\\u{11F02}-\\u{11F10}\\u{11F12}-\\u{11F35}\\u{11F3E}\\u{11F3F}\\u{11F41}\\u{11F43}-\\u{11F59}\\u{11FB0}\\u{11FC0}-\\u{11FD4}\\u{11FFF}-\\u{12399}\\u{12400}-\\u{1246E}\\u{12470}-\\u{12474}\\u{12480}-\\u{12543}\\u{12F90}-\\u{12FF2}\\u{13000}-\\u{1343F}\\u{13441}-\\u{13446}\\u{14400}-\\u{14646}\\u{16800}-\\u{16A38}\\u{16A40}-\\u{16A5E}\\u{16A60}-\\u{16A69}\\u{16A6E}-\\u{16ABE}\\u{16AC0}-\\u{16AC9}\\u{16AD0}-\\u{16AED}\\u{16AF5}\\u{16B00}-\\u{16B2F}\\u{16B37}-\\u{16B45}\\u{16B50}-\\u{16B59}\\u{16B5B}-\\u{16B61}\\u{16B63}-\\u{16B77}\\u{16B7D}-\\u{16B8F}\\u{16E40}-\\u{16E9A}\\u{16F00}-\\u{16F4A}\\u{16F50}-\\u{16F87}\\u{16F93}-\\u{16F9F}\\u{16FE0}\\u{16FE1}\\u{16FE3}\\u{16FF0}\\u{16FF1}\\u{17000}-\\u{187F7}\\u{18800}-\\u{18CD5}\\u{18D00}-\\u{18D08}\\u{1AFF0}-\\u{1AFF3}\\u{1AFF5}-\\u{1AFFB}\\u{1AFFD}\\u{1AFFE}\\u{1B000}-\\u{1B122}\\u{1B132}\\u{1B150}-\\u{1B152}\\u{1B155}\\u{1B164}-\\u{1B167}\\u{1B170}-\\u{1B2FB}\\u{1BC00}-\\u{1BC6A}\\u{1BC70}-\\u{1BC7C}\\u{1BC80}-\\u{1BC88}\\u{1BC90}-\\u{1BC99}\\u{1BC9C}\\u{1BC9F}\\u{1CF50}-\\u{1CFC3}\\u{1D000}-\\u{1D0F5}\\u{1D100}-\\u{1D126}\\u{1D129}-\\u{1D166}\\u{1D16A}-\\u{1D172}\\u{1D183}\\u{1D184}\\u{1D18C}-\\u{1D1A9}\\u{1D1AE}-\\u{1D1E8}\\u{1D2C0}-\\u{1D2D3}\\u{1D2E0}-\\u{1D2F3}\\u{1D360}-\\u{1D378}\\u{1D400}-\\u{1D454}\\u{1D456}-\\u{1D49C}\\u{1D49E}\\u{1D49F}\\u{1D4A2}\\u{1D4A5}\\u{1D4A6}\\u{1D4A9}-\\u{1D4AC}\\u{1D4AE}-\\u{1D4B9}\\u{1D4BB}\\u{1D4BD}-\\u{1D4C3}\\u{1D4C5}-\\u{1D505}\\u{1D507}-\\u{1D50A}\\u{1D50D}-\\u{1D514}\\u{1D516}-\\u{1D51C}\\u{1D51E}-\\u{1D539}\\u{1D53B}-\\u{1D53E}\\u{1D540}-\\u{1D544}\\u{1D546}\\u{1D54A}-\\u{1D550}\\u{1D552}-\\u{1D6A5}\\u{1D6A8}-\\u{1D6DA}\\u{1D6DC}-\\u{1D714}\\u{1D716}-\\u{1D74E}\\u{1D750}-\\u{1D788}\\u{1D78A}-\\u{1D7C2}\\u{1D7C4}-\\u{1D7CB}\\u{1D7CE}-\\u{1D9FF}\\u{1DA37}-\\u{1DA3A}\\u{1DA6D}-\\u{1DA74}\\u{1DA76}-\\u{1DA83}\\u{1DA85}-\\u{1DA8B}\\u{1DF00}-\\u{1DF1E}\\u{1DF25}-\\u{1DF2A}\\u{1E030}-\\u{1E06D}\\u{1E100}-\\u{1E12C}\\u{1E137}-\\u{1E13D}\\u{1E140}-\\u{1E149}\\u{1E14E}\\u{1E14F}\\u{1E290}-\\u{1E2AD}\\u{1E2C0}-\\u{1E2EB}\\u{1E2F0}-\\u{1E2F9}\\u{1E4D0}-\\u{1E4EB}\\u{1E4F0}-\\u{1E4F9}\\u{1E7E0}-\\u{1E7E6}\\u{1E7E8}-\\u{1E7EB}\\u{1E7ED}\\u{1E7EE}\\u{1E7F0}-\\u{1E7FE}\\u{1F100}-\\u{1F10A}\\u{1F110}-\\u{1F12E}\\u{1F130}-\\u{1F169}\\u{1F170}-\\u{1F1AC}\\u{1F1E6}-\\u{1F202}\\u{1F210}-\\u{1F23B}\\u{1F240}-\\u{1F248}\\u{1F250}\\u{1F251}\\u{1FBF0}-\\u{1FBF9}\\u{20000}-\\u{2A6DF}\\u{2A700}-\\u{2B739}\\u{2B740}-\\u{2B81D}\\u{2B820}-\\u{2CEA1}\\u{2CEB0}-\\u{2EBE0}\\u{2EBF0}-\\u{2EE5D}\\u{2F800}-\\u{2FA1D}\\u{30000}-\\u{3134A}\\u{31350}-\\u{323AF}\\u{F0000}-\\u{FFFFD}\\u{100000}-\\u{10FFFD}][\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u0898-\\u089F\\u08CA-\\u08E1\\u08E3-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u09FE\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B55\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C00\\u0C04\\u0C3C\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81\\u0CBC\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D00\\u0D01\\u0D3B\\u0D3C\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0D81\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EBC\\u0EC8-\\u0ECE\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732\\u1733\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u180F\\u1885\\u1886\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1AB0-\\u1ACE\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB-\\u1BAD\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1CF8\\u1CF9\\u1DC0-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA82C\\uA8C4\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uA9BD\\uA9E5\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAA7C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\u{101FD}\\u{102E0}\\u{10376}-\\u{1037A}\\u{10A01}-\\u{10A03}\\u{10A05}\\u{10A06}\\u{10A0C}-\\u{10A0F}\\u{10A38}-\\u{10A3A}\\u{10A3F}\\u{10AE5}\\u{10AE6}\\u{10D24}-\\u{10D27}\\u{10EAB}\\u{10EAC}\\u{10EFD}-\\u{10EFF}\\u{10F46}-\\u{10F50}\\u{10F82}-\\u{10F85}\\u{11001}\\u{11038}-\\u{11046}\\u{11070}\\u{11073}\\u{11074}\\u{1107F}-\\u{11081}\\u{110B3}-\\u{110B6}\\u{110B9}\\u{110BA}\\u{110C2}\\u{11100}-\\u{11102}\\u{11127}-\\u{1112B}\\u{1112D}-\\u{11134}\\u{11173}\\u{11180}\\u{11181}\\u{111B6}-\\u{111BE}\\u{111C9}-\\u{111CC}\\u{111CF}\\u{1122F}-\\u{11231}\\u{11234}\\u{11236}\\u{11237}\\u{1123E}\\u{11241}\\u{112DF}\\u{112E3}-\\u{112EA}\\u{11300}\\u{11301}\\u{1133B}\\u{1133C}\\u{11340}\\u{11366}-\\u{1136C}\\u{11370}-\\u{11374}\\u{11438}-\\u{1143F}\\u{11442}-\\u{11444}\\u{11446}\\u{1145E}\\u{114B3}-\\u{114B8}\\u{114BA}\\u{114BF}\\u{114C0}\\u{114C2}\\u{114C3}\\u{115B2}-\\u{115B5}\\u{115BC}\\u{115BD}\\u{115BF}\\u{115C0}\\u{115DC}\\u{115DD}\\u{11633}-\\u{1163A}\\u{1163D}\\u{1163F}\\u{11640}\\u{116AB}\\u{116AD}\\u{116B0}-\\u{116B5}\\u{116B7}\\u{1171D}-\\u{1171F}\\u{11722}-\\u{11725}\\u{11727}-\\u{1172B}\\u{1182F}-\\u{11837}\\u{11839}\\u{1183A}\\u{1193B}\\u{1193C}\\u{1193E}\\u{11943}\\u{119D4}-\\u{119D7}\\u{119DA}\\u{119DB}\\u{119E0}\\u{11A01}-\\u{11A06}\\u{11A09}\\u{11A0A}\\u{11A33}-\\u{11A38}\\u{11A3B}-\\u{11A3E}\\u{11A47}\\u{11A51}-\\u{11A56}\\u{11A59}-\\u{11A5B}\\u{11A8A}-\\u{11A96}\\u{11A98}\\u{11A99}\\u{11C30}-\\u{11C36}\\u{11C38}-\\u{11C3D}\\u{11C92}-\\u{11CA7}\\u{11CAA}-\\u{11CB0}\\u{11CB2}\\u{11CB3}\\u{11CB5}\\u{11CB6}\\u{11D31}-\\u{11D36}\\u{11D3A}\\u{11D3C}\\u{11D3D}\\u{11D3F}-\\u{11D45}\\u{11D47}\\u{11D90}\\u{11D91}\\u{11D95}\\u{11D97}\\u{11EF3}\\u{11EF4}\\u{11F00}\\u{11F01}\\u{11F36}-\\u{11F3A}\\u{11F40}\\u{11F42}\\u{13440}\\u{13447}-\\u{13455}\\u{16AF0}-\\u{16AF4}\\u{16B30}-\\u{16B36}\\u{16F4F}\\u{16F8F}-\\u{16F92}\\u{16FE4}\\u{1BC9D}\\u{1BC9E}\\u{1CF00}-\\u{1CF2D}\\u{1CF30}-\\u{1CF46}\\u{1D167}-\\u{1D169}\\u{1D17B}-\\u{1D182}\\u{1D185}-\\u{1D18B}\\u{1D1AA}-\\u{1D1AD}\\u{1D242}-\\u{1D244}\\u{1DA00}-\\u{1DA36}\\u{1DA3B}-\\u{1DA6C}\\u{1DA75}\\u{1DA84}\\u{1DA9B}-\\u{1DA9F}\\u{1DAA1}-\\u{1DAAF}\\u{1E000}-\\u{1E006}\\u{1E008}-\\u{1E018}\\u{1E01B}-\\u{1E021}\\u{1E023}\\u{1E024}\\u{1E026}-\\u{1E02A}\\u{1E08F}\\u{1E130}-\\u{1E136}\\u{1E2AE}\\u{1E2EC}-\\u{1E2EF}\\u{1E4EC}-\\u{1E4EF}\\u{1E8D0}-\\u{1E8D6}\\u{1E944}-\\u{1E94A}\\u{E0100}-\\u{E01EF}]*$/u;\n\nmodule.exports = {\n    combiningMarks,\n  combiningClassVirama,\n  validZWNJ,\n  bidiDomain,\n  bidiS1LTR,\n  bidiS1RTL,\n  bidiS2,\n  bidiS3,\n  bidiS4EN,\n  bidiS4AN,\n  bidiS5,\n  bidiS6\n  };\n","[[[0,44],4],[[45,46],2],[47,4],[[48,57],2],[[58,64],4],[65,1,\"a\"],[66,1,\"b\"],[67,1,\"c\"],[68,1,\"d\"],[69,1,\"e\"],[70,1,\"f\"],[71,1,\"g\"],[72,1,\"h\"],[73,1,\"i\"],[74,1,\"j\"],[75,1,\"k\"],[76,1,\"l\"],[77,1,\"m\"],[78,1,\"n\"],[79,1,\"o\"],[80,1,\"p\"],[81,1,\"q\"],[82,1,\"r\"],[83,1,\"s\"],[84,1,\"t\"],[85,1,\"u\"],[86,1,\"v\"],[87,1,\"w\"],[88,1,\"x\"],[89,1,\"y\"],[90,1,\"z\"],[[91,96],4],[[97,122],2],[[123,127],4],[[128,159],3],[160,5,\" \"],[[161,167],2],[168,5,\" ̈\"],[169,2],[170,1,\"a\"],[[171,172],2],[173,7],[174,2],[175,5,\" ̄\"],[[176,177],2],[178,1,\"2\"],[179,1,\"3\"],[180,5,\" ́\"],[181,1,\"μ\"],[182,2],[183,2],[184,5,\" ̧\"],[185,1,\"1\"],[186,1,\"o\"],[187,2],[188,1,\"1⁄4\"],[189,1,\"1⁄2\"],[190,1,\"3⁄4\"],[191,2],[192,1,\"à\"],[193,1,\"á\"],[194,1,\"â\"],[195,1,\"ã\"],[196,1,\"ä\"],[197,1,\"å\"],[198,1,\"æ\"],[199,1,\"ç\"],[200,1,\"è\"],[201,1,\"é\"],[202,1,\"ê\"],[203,1,\"ë\"],[204,1,\"ì\"],[205,1,\"í\"],[206,1,\"î\"],[207,1,\"ï\"],[208,1,\"ð\"],[209,1,\"ñ\"],[210,1,\"ò\"],[211,1,\"ó\"],[212,1,\"ô\"],[213,1,\"õ\"],[214,1,\"ö\"],[215,2],[216,1,\"ø\"],[217,1,\"ù\"],[218,1,\"ú\"],[219,1,\"û\"],[220,1,\"ü\"],[221,1,\"ý\"],[222,1,\"þ\"],[223,6,\"ss\"],[[224,246],2],[247,2],[[248,255],2],[256,1,\"ā\"],[257,2],[258,1,\"ă\"],[259,2],[260,1,\"ą\"],[261,2],[262,1,\"ć\"],[263,2],[264,1,\"ĉ\"],[265,2],[266,1,\"ċ\"],[267,2],[268,1,\"č\"],[269,2],[270,1,\"ď\"],[271,2],[272,1,\"đ\"],[273,2],[274,1,\"ē\"],[275,2],[276,1,\"ĕ\"],[277,2],[278,1,\"ė\"],[279,2],[280,1,\"ę\"],[281,2],[282,1,\"ě\"],[283,2],[284,1,\"ĝ\"],[285,2],[286,1,\"ğ\"],[287,2],[288,1,\"ġ\"],[289,2],[290,1,\"ģ\"],[291,2],[292,1,\"ĥ\"],[293,2],[294,1,\"ħ\"],[295,2],[296,1,\"ĩ\"],[297,2],[298,1,\"ī\"],[299,2],[300,1,\"ĭ\"],[301,2],[302,1,\"į\"],[303,2],[304,1,\"i̇\"],[305,2],[[306,307],1,\"ij\"],[308,1,\"ĵ\"],[309,2],[310,1,\"ķ\"],[[311,312],2],[313,1,\"ĺ\"],[314,2],[315,1,\"ļ\"],[316,2],[317,1,\"ľ\"],[318,2],[[319,320],1,\"l·\"],[321,1,\"ł\"],[322,2],[323,1,\"ń\"],[324,2],[325,1,\"ņ\"],[326,2],[327,1,\"ň\"],[328,2],[329,1,\"ʼn\"],[330,1,\"ŋ\"],[331,2],[332,1,\"ō\"],[333,2],[334,1,\"ŏ\"],[335,2],[336,1,\"ő\"],[337,2],[338,1,\"œ\"],[339,2],[340,1,\"ŕ\"],[341,2],[342,1,\"ŗ\"],[343,2],[344,1,\"ř\"],[345,2],[346,1,\"ś\"],[347,2],[348,1,\"ŝ\"],[349,2],[350,1,\"ş\"],[351,2],[352,1,\"š\"],[353,2],[354,1,\"ţ\"],[355,2],[356,1,\"ť\"],[357,2],[358,1,\"ŧ\"],[359,2],[360,1,\"ũ\"],[361,2],[362,1,\"ū\"],[363,2],[364,1,\"ŭ\"],[365,2],[366,1,\"ů\"],[367,2],[368,1,\"ű\"],[369,2],[370,1,\"ų\"],[371,2],[372,1,\"ŵ\"],[373,2],[374,1,\"ŷ\"],[375,2],[376,1,\"ÿ\"],[377,1,\"ź\"],[378,2],[379,1,\"ż\"],[380,2],[381,1,\"ž\"],[382,2],[383,1,\"s\"],[384,2],[385,1,\"ɓ\"],[386,1,\"ƃ\"],[387,2],[388,1,\"ƅ\"],[389,2],[390,1,\"ɔ\"],[391,1,\"ƈ\"],[392,2],[393,1,\"ɖ\"],[394,1,\"ɗ\"],[395,1,\"ƌ\"],[[396,397],2],[398,1,\"ǝ\"],[399,1,\"ə\"],[400,1,\"ɛ\"],[401,1,\"ƒ\"],[402,2],[403,1,\"ɠ\"],[404,1,\"ɣ\"],[405,2],[406,1,\"ɩ\"],[407,1,\"ɨ\"],[408,1,\"ƙ\"],[[409,411],2],[412,1,\"ɯ\"],[413,1,\"ɲ\"],[414,2],[415,1,\"ɵ\"],[416,1,\"ơ\"],[417,2],[418,1,\"ƣ\"],[419,2],[420,1,\"ƥ\"],[421,2],[422,1,\"ʀ\"],[423,1,\"ƨ\"],[424,2],[425,1,\"ʃ\"],[[426,427],2],[428,1,\"ƭ\"],[429,2],[430,1,\"ʈ\"],[431,1,\"ư\"],[432,2],[433,1,\"ʊ\"],[434,1,\"ʋ\"],[435,1,\"ƴ\"],[436,2],[437,1,\"ƶ\"],[438,2],[439,1,\"ʒ\"],[440,1,\"ƹ\"],[[441,443],2],[444,1,\"ƽ\"],[[445,451],2],[[452,454],1,\"dž\"],[[455,457],1,\"lj\"],[[458,460],1,\"nj\"],[461,1,\"ǎ\"],[462,2],[463,1,\"ǐ\"],[464,2],[465,1,\"ǒ\"],[466,2],[467,1,\"ǔ\"],[468,2],[469,1,\"ǖ\"],[470,2],[471,1,\"ǘ\"],[472,2],[473,1,\"ǚ\"],[474,2],[475,1,\"ǜ\"],[[476,477],2],[478,1,\"ǟ\"],[479,2],[480,1,\"ǡ\"],[481,2],[482,1,\"ǣ\"],[483,2],[484,1,\"ǥ\"],[485,2],[486,1,\"ǧ\"],[487,2],[488,1,\"ǩ\"],[489,2],[490,1,\"ǫ\"],[491,2],[492,1,\"ǭ\"],[493,2],[494,1,\"ǯ\"],[[495,496],2],[[497,499],1,\"dz\"],[500,1,\"ǵ\"],[501,2],[502,1,\"ƕ\"],[503,1,\"ƿ\"],[504,1,\"ǹ\"],[505,2],[506,1,\"ǻ\"],[507,2],[508,1,\"ǽ\"],[509,2],[510,1,\"ǿ\"],[511,2],[512,1,\"ȁ\"],[513,2],[514,1,\"ȃ\"],[515,2],[516,1,\"ȅ\"],[517,2],[518,1,\"ȇ\"],[519,2],[520,1,\"ȉ\"],[521,2],[522,1,\"ȋ\"],[523,2],[524,1,\"ȍ\"],[525,2],[526,1,\"ȏ\"],[527,2],[528,1,\"ȑ\"],[529,2],[530,1,\"ȓ\"],[531,2],[532,1,\"ȕ\"],[533,2],[534,1,\"ȗ\"],[535,2],[536,1,\"ș\"],[537,2],[538,1,\"ț\"],[539,2],[540,1,\"ȝ\"],[541,2],[542,1,\"ȟ\"],[543,2],[544,1,\"ƞ\"],[545,2],[546,1,\"ȣ\"],[547,2],[548,1,\"ȥ\"],[549,2],[550,1,\"ȧ\"],[551,2],[552,1,\"ȩ\"],[553,2],[554,1,\"ȫ\"],[555,2],[556,1,\"ȭ\"],[557,2],[558,1,\"ȯ\"],[559,2],[560,1,\"ȱ\"],[561,2],[562,1,\"ȳ\"],[563,2],[[564,566],2],[[567,569],2],[570,1,\"ⱥ\"],[571,1,\"ȼ\"],[572,2],[573,1,\"ƚ\"],[574,1,\"ⱦ\"],[[575,576],2],[577,1,\"ɂ\"],[578,2],[579,1,\"ƀ\"],[580,1,\"ʉ\"],[581,1,\"ʌ\"],[582,1,\"ɇ\"],[583,2],[584,1,\"ɉ\"],[585,2],[586,1,\"ɋ\"],[587,2],[588,1,\"ɍ\"],[589,2],[590,1,\"ɏ\"],[591,2],[[592,680],2],[[681,685],2],[[686,687],2],[688,1,\"h\"],[689,1,\"ɦ\"],[690,1,\"j\"],[691,1,\"r\"],[692,1,\"ɹ\"],[693,1,\"ɻ\"],[694,1,\"ʁ\"],[695,1,\"w\"],[696,1,\"y\"],[[697,705],2],[[706,709],2],[[710,721],2],[[722,727],2],[728,5,\" ̆\"],[729,5,\" ̇\"],[730,5,\" ̊\"],[731,5,\" ̨\"],[732,5,\" ̃\"],[733,5,\" ̋\"],[734,2],[735,2],[736,1,\"ɣ\"],[737,1,\"l\"],[738,1,\"s\"],[739,1,\"x\"],[740,1,\"ʕ\"],[[741,745],2],[[746,747],2],[748,2],[749,2],[750,2],[[751,767],2],[[768,831],2],[832,1,\"̀\"],[833,1,\"́\"],[834,2],[835,1,\"̓\"],[836,1,\"̈́\"],[837,1,\"ι\"],[[838,846],2],[847,7],[[848,855],2],[[856,860],2],[[861,863],2],[[864,865],2],[866,2],[[867,879],2],[880,1,\"ͱ\"],[881,2],[882,1,\"ͳ\"],[883,2],[884,1,\"ʹ\"],[885,2],[886,1,\"ͷ\"],[887,2],[[888,889],3],[890,5,\" ι\"],[[891,893],2],[894,5,\";\"],[895,1,\"ϳ\"],[[896,899],3],[900,5,\" ́\"],[901,5,\" ̈́\"],[902,1,\"ά\"],[903,1,\"·\"],[904,1,\"έ\"],[905,1,\"ή\"],[906,1,\"ί\"],[907,3],[908,1,\"ό\"],[909,3],[910,1,\"ύ\"],[911,1,\"ώ\"],[912,2],[913,1,\"α\"],[914,1,\"β\"],[915,1,\"γ\"],[916,1,\"δ\"],[917,1,\"ε\"],[918,1,\"ζ\"],[919,1,\"η\"],[920,1,\"θ\"],[921,1,\"ι\"],[922,1,\"κ\"],[923,1,\"λ\"],[924,1,\"μ\"],[925,1,\"ν\"],[926,1,\"ξ\"],[927,1,\"ο\"],[928,1,\"π\"],[929,1,\"ρ\"],[930,3],[931,1,\"σ\"],[932,1,\"τ\"],[933,1,\"υ\"],[934,1,\"φ\"],[935,1,\"χ\"],[936,1,\"ψ\"],[937,1,\"ω\"],[938,1,\"ϊ\"],[939,1,\"ϋ\"],[[940,961],2],[962,6,\"σ\"],[[963,974],2],[975,1,\"ϗ\"],[976,1,\"β\"],[977,1,\"θ\"],[978,1,\"υ\"],[979,1,\"ύ\"],[980,1,\"ϋ\"],[981,1,\"φ\"],[982,1,\"π\"],[983,2],[984,1,\"ϙ\"],[985,2],[986,1,\"ϛ\"],[987,2],[988,1,\"ϝ\"],[989,2],[990,1,\"ϟ\"],[991,2],[992,1,\"ϡ\"],[993,2],[994,1,\"ϣ\"],[995,2],[996,1,\"ϥ\"],[997,2],[998,1,\"ϧ\"],[999,2],[1000,1,\"ϩ\"],[1001,2],[1002,1,\"ϫ\"],[1003,2],[1004,1,\"ϭ\"],[1005,2],[1006,1,\"ϯ\"],[1007,2],[1008,1,\"κ\"],[1009,1,\"ρ\"],[1010,1,\"σ\"],[1011,2],[1012,1,\"θ\"],[1013,1,\"ε\"],[1014,2],[1015,1,\"ϸ\"],[1016,2],[1017,1,\"σ\"],[1018,1,\"ϻ\"],[1019,2],[1020,2],[1021,1,\"ͻ\"],[1022,1,\"ͼ\"],[1023,1,\"ͽ\"],[1024,1,\"ѐ\"],[1025,1,\"ё\"],[1026,1,\"ђ\"],[1027,1,\"ѓ\"],[1028,1,\"є\"],[1029,1,\"ѕ\"],[1030,1,\"і\"],[1031,1,\"ї\"],[1032,1,\"ј\"],[1033,1,\"љ\"],[1034,1,\"њ\"],[1035,1,\"ћ\"],[1036,1,\"ќ\"],[1037,1,\"ѝ\"],[1038,1,\"ў\"],[1039,1,\"џ\"],[1040,1,\"а\"],[1041,1,\"б\"],[1042,1,\"в\"],[1043,1,\"г\"],[1044,1,\"д\"],[1045,1,\"е\"],[1046,1,\"ж\"],[1047,1,\"з\"],[1048,1,\"и\"],[1049,1,\"й\"],[1050,1,\"к\"],[1051,1,\"л\"],[1052,1,\"м\"],[1053,1,\"н\"],[1054,1,\"о\"],[1055,1,\"п\"],[1056,1,\"р\"],[1057,1,\"с\"],[1058,1,\"т\"],[1059,1,\"у\"],[1060,1,\"ф\"],[1061,1,\"х\"],[1062,1,\"ц\"],[1063,1,\"ч\"],[1064,1,\"ш\"],[1065,1,\"щ\"],[1066,1,\"ъ\"],[1067,1,\"ы\"],[1068,1,\"ь\"],[1069,1,\"э\"],[1070,1,\"ю\"],[1071,1,\"я\"],[[1072,1103],2],[1104,2],[[1105,1116],2],[1117,2],[[1118,1119],2],[1120,1,\"ѡ\"],[1121,2],[1122,1,\"ѣ\"],[1123,2],[1124,1,\"ѥ\"],[1125,2],[1126,1,\"ѧ\"],[1127,2],[1128,1,\"ѩ\"],[1129,2],[1130,1,\"ѫ\"],[1131,2],[1132,1,\"ѭ\"],[1133,2],[1134,1,\"ѯ\"],[1135,2],[1136,1,\"ѱ\"],[1137,2],[1138,1,\"ѳ\"],[1139,2],[1140,1,\"ѵ\"],[1141,2],[1142,1,\"ѷ\"],[1143,2],[1144,1,\"ѹ\"],[1145,2],[1146,1,\"ѻ\"],[1147,2],[1148,1,\"ѽ\"],[1149,2],[1150,1,\"ѿ\"],[1151,2],[1152,1,\"ҁ\"],[1153,2],[1154,2],[[1155,1158],2],[1159,2],[[1160,1161],2],[1162,1,\"ҋ\"],[1163,2],[1164,1,\"ҍ\"],[1165,2],[1166,1,\"ҏ\"],[1167,2],[1168,1,\"ґ\"],[1169,2],[1170,1,\"ғ\"],[1171,2],[1172,1,\"ҕ\"],[1173,2],[1174,1,\"җ\"],[1175,2],[1176,1,\"ҙ\"],[1177,2],[1178,1,\"қ\"],[1179,2],[1180,1,\"ҝ\"],[1181,2],[1182,1,\"ҟ\"],[1183,2],[1184,1,\"ҡ\"],[1185,2],[1186,1,\"ң\"],[1187,2],[1188,1,\"ҥ\"],[1189,2],[1190,1,\"ҧ\"],[1191,2],[1192,1,\"ҩ\"],[1193,2],[1194,1,\"ҫ\"],[1195,2],[1196,1,\"ҭ\"],[1197,2],[1198,1,\"ү\"],[1199,2],[1200,1,\"ұ\"],[1201,2],[1202,1,\"ҳ\"],[1203,2],[1204,1,\"ҵ\"],[1205,2],[1206,1,\"ҷ\"],[1207,2],[1208,1,\"ҹ\"],[1209,2],[1210,1,\"һ\"],[1211,2],[1212,1,\"ҽ\"],[1213,2],[1214,1,\"ҿ\"],[1215,2],[1216,3],[1217,1,\"ӂ\"],[1218,2],[1219,1,\"ӄ\"],[1220,2],[1221,1,\"ӆ\"],[1222,2],[1223,1,\"ӈ\"],[1224,2],[1225,1,\"ӊ\"],[1226,2],[1227,1,\"ӌ\"],[1228,2],[1229,1,\"ӎ\"],[1230,2],[1231,2],[1232,1,\"ӑ\"],[1233,2],[1234,1,\"ӓ\"],[1235,2],[1236,1,\"ӕ\"],[1237,2],[1238,1,\"ӗ\"],[1239,2],[1240,1,\"ә\"],[1241,2],[1242,1,\"ӛ\"],[1243,2],[1244,1,\"ӝ\"],[1245,2],[1246,1,\"ӟ\"],[1247,2],[1248,1,\"ӡ\"],[1249,2],[1250,1,\"ӣ\"],[1251,2],[1252,1,\"ӥ\"],[1253,2],[1254,1,\"ӧ\"],[1255,2],[1256,1,\"ө\"],[1257,2],[1258,1,\"ӫ\"],[1259,2],[1260,1,\"ӭ\"],[1261,2],[1262,1,\"ӯ\"],[1263,2],[1264,1,\"ӱ\"],[1265,2],[1266,1,\"ӳ\"],[1267,2],[1268,1,\"ӵ\"],[1269,2],[1270,1,\"ӷ\"],[1271,2],[1272,1,\"ӹ\"],[1273,2],[1274,1,\"ӻ\"],[1275,2],[1276,1,\"ӽ\"],[1277,2],[1278,1,\"ӿ\"],[1279,2],[1280,1,\"ԁ\"],[1281,2],[1282,1,\"ԃ\"],[1283,2],[1284,1,\"ԅ\"],[1285,2],[1286,1,\"ԇ\"],[1287,2],[1288,1,\"ԉ\"],[1289,2],[1290,1,\"ԋ\"],[1291,2],[1292,1,\"ԍ\"],[1293,2],[1294,1,\"ԏ\"],[1295,2],[1296,1,\"ԑ\"],[1297,2],[1298,1,\"ԓ\"],[1299,2],[1300,1,\"ԕ\"],[1301,2],[1302,1,\"ԗ\"],[1303,2],[1304,1,\"ԙ\"],[1305,2],[1306,1,\"ԛ\"],[1307,2],[1308,1,\"ԝ\"],[1309,2],[1310,1,\"ԟ\"],[1311,2],[1312,1,\"ԡ\"],[1313,2],[1314,1,\"ԣ\"],[1315,2],[1316,1,\"ԥ\"],[1317,2],[1318,1,\"ԧ\"],[1319,2],[1320,1,\"ԩ\"],[1321,2],[1322,1,\"ԫ\"],[1323,2],[1324,1,\"ԭ\"],[1325,2],[1326,1,\"ԯ\"],[1327,2],[1328,3],[1329,1,\"ա\"],[1330,1,\"բ\"],[1331,1,\"գ\"],[1332,1,\"դ\"],[1333,1,\"ե\"],[1334,1,\"զ\"],[1335,1,\"է\"],[1336,1,\"ը\"],[1337,1,\"թ\"],[1338,1,\"ժ\"],[1339,1,\"ի\"],[1340,1,\"լ\"],[1341,1,\"խ\"],[1342,1,\"ծ\"],[1343,1,\"կ\"],[1344,1,\"հ\"],[1345,1,\"ձ\"],[1346,1,\"ղ\"],[1347,1,\"ճ\"],[1348,1,\"մ\"],[1349,1,\"յ\"],[1350,1,\"ն\"],[1351,1,\"շ\"],[1352,1,\"ո\"],[1353,1,\"չ\"],[1354,1,\"պ\"],[1355,1,\"ջ\"],[1356,1,\"ռ\"],[1357,1,\"ս\"],[1358,1,\"վ\"],[1359,1,\"տ\"],[1360,1,\"ր\"],[1361,1,\"ց\"],[1362,1,\"ւ\"],[1363,1,\"փ\"],[1364,1,\"ք\"],[1365,1,\"օ\"],[1366,1,\"ֆ\"],[[1367,1368],3],[1369,2],[[1370,1375],2],[1376,2],[[1377,1414],2],[1415,1,\"եւ\"],[1416,2],[1417,2],[1418,2],[[1419,1420],3],[[1421,1422],2],[1423,2],[1424,3],[[1425,1441],2],[1442,2],[[1443,1455],2],[[1456,1465],2],[1466,2],[[1467,1469],2],[1470,2],[1471,2],[1472,2],[[1473,1474],2],[1475,2],[1476,2],[1477,2],[1478,2],[1479,2],[[1480,1487],3],[[1488,1514],2],[[1515,1518],3],[1519,2],[[1520,1524],2],[[1525,1535],3],[[1536,1539],3],[1540,3],[1541,3],[[1542,1546],2],[1547,2],[1548,2],[[1549,1551],2],[[1552,1557],2],[[1558,1562],2],[1563,2],[1564,3],[1565,2],[1566,2],[1567,2],[1568,2],[[1569,1594],2],[[1595,1599],2],[1600,2],[[1601,1618],2],[[1619,1621],2],[[1622,1624],2],[[1625,1630],2],[1631,2],[[1632,1641],2],[[1642,1645],2],[[1646,1647],2],[[1648,1652],2],[1653,1,\"اٴ\"],[1654,1,\"وٴ\"],[1655,1,\"ۇٴ\"],[1656,1,\"يٴ\"],[[1657,1719],2],[[1720,1721],2],[[1722,1726],2],[1727,2],[[1728,1742],2],[1743,2],[[1744,1747],2],[1748,2],[[1749,1756],2],[1757,3],[1758,2],[[1759,1768],2],[1769,2],[[1770,1773],2],[[1774,1775],2],[[1776,1785],2],[[1786,1790],2],[1791,2],[[1792,1805],2],[1806,3],[1807,3],[[1808,1836],2],[[1837,1839],2],[[1840,1866],2],[[1867,1868],3],[[1869,1871],2],[[1872,1901],2],[[1902,1919],2],[[1920,1968],2],[1969,2],[[1970,1983],3],[[1984,2037],2],[[2038,2042],2],[[2043,2044],3],[2045,2],[[2046,2047],2],[[2048,2093],2],[[2094,2095],3],[[2096,2110],2],[2111,3],[[2112,2139],2],[[2140,2141],3],[2142,2],[2143,3],[[2144,2154],2],[[2155,2159],3],[[2160,2183],2],[2184,2],[[2185,2190],2],[2191,3],[[2192,2193],3],[[2194,2199],3],[[2200,2207],2],[2208,2],[2209,2],[[2210,2220],2],[[2221,2226],2],[[2227,2228],2],[2229,2],[[2230,2237],2],[[2238,2247],2],[[2248,2258],2],[2259,2],[[2260,2273],2],[2274,3],[2275,2],[[2276,2302],2],[2303,2],[2304,2],[[2305,2307],2],[2308,2],[[2309,2361],2],[[2362,2363],2],[[2364,2381],2],[2382,2],[2383,2],[[2384,2388],2],[2389,2],[[2390,2391],2],[2392,1,\"क़\"],[2393,1,\"ख़\"],[2394,1,\"ग़\"],[2395,1,\"ज़\"],[2396,1,\"ड़\"],[2397,1,\"ढ़\"],[2398,1,\"फ़\"],[2399,1,\"य़\"],[[2400,2403],2],[[2404,2405],2],[[2406,2415],2],[2416,2],[[2417,2418],2],[[2419,2423],2],[2424,2],[[2425,2426],2],[[2427,2428],2],[2429,2],[[2430,2431],2],[2432,2],[[2433,2435],2],[2436,3],[[2437,2444],2],[[2445,2446],3],[[2447,2448],2],[[2449,2450],3],[[2451,2472],2],[2473,3],[[2474,2480],2],[2481,3],[2482,2],[[2483,2485],3],[[2486,2489],2],[[2490,2491],3],[2492,2],[2493,2],[[2494,2500],2],[[2501,2502],3],[[2503,2504],2],[[2505,2506],3],[[2507,2509],2],[2510,2],[[2511,2518],3],[2519,2],[[2520,2523],3],[2524,1,\"ড়\"],[2525,1,\"ঢ়\"],[2526,3],[2527,1,\"য়\"],[[2528,2531],2],[[2532,2533],3],[[2534,2545],2],[[2546,2554],2],[2555,2],[2556,2],[2557,2],[2558,2],[[2559,2560],3],[2561,2],[2562,2],[2563,2],[2564,3],[[2565,2570],2],[[2571,2574],3],[[2575,2576],2],[[2577,2578],3],[[2579,2600],2],[2601,3],[[2602,2608],2],[2609,3],[2610,2],[2611,1,\"ਲ਼\"],[2612,3],[2613,2],[2614,1,\"ਸ਼\"],[2615,3],[[2616,2617],2],[[2618,2619],3],[2620,2],[2621,3],[[2622,2626],2],[[2627,2630],3],[[2631,2632],2],[[2633,2634],3],[[2635,2637],2],[[2638,2640],3],[2641,2],[[2642,2648],3],[2649,1,\"ਖ਼\"],[2650,1,\"ਗ਼\"],[2651,1,\"ਜ਼\"],[2652,2],[2653,3],[2654,1,\"ਫ਼\"],[[2655,2661],3],[[2662,2676],2],[2677,2],[2678,2],[[2679,2688],3],[[2689,2691],2],[2692,3],[[2693,2699],2],[2700,2],[2701,2],[2702,3],[[2703,2705],2],[2706,3],[[2707,2728],2],[2729,3],[[2730,2736],2],[2737,3],[[2738,2739],2],[2740,3],[[2741,2745],2],[[2746,2747],3],[[2748,2757],2],[2758,3],[[2759,2761],2],[2762,3],[[2763,2765],2],[[2766,2767],3],[2768,2],[[2769,2783],3],[2784,2],[[2785,2787],2],[[2788,2789],3],[[2790,2799],2],[2800,2],[2801,2],[[2802,2808],3],[2809,2],[[2810,2815],2],[2816,3],[[2817,2819],2],[2820,3],[[2821,2828],2],[[2829,2830],3],[[2831,2832],2],[[2833,2834],3],[[2835,2856],2],[2857,3],[[2858,2864],2],[2865,3],[[2866,2867],2],[2868,3],[2869,2],[[2870,2873],2],[[2874,2875],3],[[2876,2883],2],[2884,2],[[2885,2886],3],[[2887,2888],2],[[2889,2890],3],[[2891,2893],2],[[2894,2900],3],[2901,2],[[2902,2903],2],[[2904,2907],3],[2908,1,\"ଡ଼\"],[2909,1,\"ଢ଼\"],[2910,3],[[2911,2913],2],[[2914,2915],2],[[2916,2917],3],[[2918,2927],2],[2928,2],[2929,2],[[2930,2935],2],[[2936,2945],3],[[2946,2947],2],[2948,3],[[2949,2954],2],[[2955,2957],3],[[2958,2960],2],[2961,3],[[2962,2965],2],[[2966,2968],3],[[2969,2970],2],[2971,3],[2972,2],[2973,3],[[2974,2975],2],[[2976,2978],3],[[2979,2980],2],[[2981,2983],3],[[2984,2986],2],[[2987,2989],3],[[2990,2997],2],[2998,2],[[2999,3001],2],[[3002,3005],3],[[3006,3010],2],[[3011,3013],3],[[3014,3016],2],[3017,3],[[3018,3021],2],[[3022,3023],3],[3024,2],[[3025,3030],3],[3031,2],[[3032,3045],3],[3046,2],[[3047,3055],2],[[3056,3058],2],[[3059,3066],2],[[3067,3071],3],[3072,2],[[3073,3075],2],[3076,2],[[3077,3084],2],[3085,3],[[3086,3088],2],[3089,3],[[3090,3112],2],[3113,3],[[3114,3123],2],[3124,2],[[3125,3129],2],[[3130,3131],3],[3132,2],[3133,2],[[3134,3140],2],[3141,3],[[3142,3144],2],[3145,3],[[3146,3149],2],[[3150,3156],3],[[3157,3158],2],[3159,3],[[3160,3161],2],[3162,2],[[3163,3164],3],[3165,2],[[3166,3167],3],[[3168,3169],2],[[3170,3171],2],[[3172,3173],3],[[3174,3183],2],[[3184,3190],3],[3191,2],[[3192,3199],2],[3200,2],[3201,2],[[3202,3203],2],[3204,2],[[3205,3212],2],[3213,3],[[3214,3216],2],[3217,3],[[3218,3240],2],[3241,3],[[3242,3251],2],[3252,3],[[3253,3257],2],[[3258,3259],3],[[3260,3261],2],[[3262,3268],2],[3269,3],[[3270,3272],2],[3273,3],[[3274,3277],2],[[3278,3284],3],[[3285,3286],2],[[3287,3292],3],[3293,2],[3294,2],[3295,3],[[3296,3297],2],[[3298,3299],2],[[3300,3301],3],[[3302,3311],2],[3312,3],[[3313,3314],2],[3315,2],[[3316,3327],3],[3328,2],[3329,2],[[3330,3331],2],[3332,2],[[3333,3340],2],[3341,3],[[3342,3344],2],[3345,3],[[3346,3368],2],[3369,2],[[3370,3385],2],[3386,2],[[3387,3388],2],[3389,2],[[3390,3395],2],[3396,2],[3397,3],[[3398,3400],2],[3401,3],[[3402,3405],2],[3406,2],[3407,2],[[3408,3411],3],[[3412,3414],2],[3415,2],[[3416,3422],2],[3423,2],[[3424,3425],2],[[3426,3427],2],[[3428,3429],3],[[3430,3439],2],[[3440,3445],2],[[3446,3448],2],[3449,2],[[3450,3455],2],[3456,3],[3457,2],[[3458,3459],2],[3460,3],[[3461,3478],2],[[3479,3481],3],[[3482,3505],2],[3506,3],[[3507,3515],2],[3516,3],[3517,2],[[3518,3519],3],[[3520,3526],2],[[3527,3529],3],[3530,2],[[3531,3534],3],[[3535,3540],2],[3541,3],[3542,2],[3543,3],[[3544,3551],2],[[3552,3557],3],[[3558,3567],2],[[3568,3569],3],[[3570,3571],2],[3572,2],[[3573,3584],3],[[3585,3634],2],[3635,1,\"ํา\"],[[3636,3642],2],[[3643,3646],3],[3647,2],[[3648,3662],2],[3663,2],[[3664,3673],2],[[3674,3675],2],[[3676,3712],3],[[3713,3714],2],[3715,3],[3716,2],[3717,3],[3718,2],[[3719,3720],2],[3721,2],[3722,2],[3723,3],[3724,2],[3725,2],[[3726,3731],2],[[3732,3735],2],[3736,2],[[3737,3743],2],[3744,2],[[3745,3747],2],[3748,3],[3749,2],[3750,3],[3751,2],[[3752,3753],2],[[3754,3755],2],[3756,2],[[3757,3762],2],[3763,1,\"ໍາ\"],[[3764,3769],2],[3770,2],[[3771,3773],2],[[3774,3775],3],[[3776,3780],2],[3781,3],[3782,2],[3783,3],[[3784,3789],2],[3790,2],[3791,3],[[3792,3801],2],[[3802,3803],3],[3804,1,\"ຫນ\"],[3805,1,\"ຫມ\"],[[3806,3807],2],[[3808,3839],3],[3840,2],[[3841,3850],2],[3851,2],[3852,1,\"་\"],[[3853,3863],2],[[3864,3865],2],[[3866,3871],2],[[3872,3881],2],[[3882,3892],2],[3893,2],[3894,2],[3895,2],[3896,2],[3897,2],[[3898,3901],2],[[3902,3906],2],[3907,1,\"གྷ\"],[[3908,3911],2],[3912,3],[[3913,3916],2],[3917,1,\"ཌྷ\"],[[3918,3921],2],[3922,1,\"དྷ\"],[[3923,3926],2],[3927,1,\"བྷ\"],[[3928,3931],2],[3932,1,\"ཛྷ\"],[[3933,3944],2],[3945,1,\"ཀྵ\"],[3946,2],[[3947,3948],2],[[3949,3952],3],[[3953,3954],2],[3955,1,\"ཱི\"],[3956,2],[3957,1,\"ཱུ\"],[3958,1,\"ྲྀ\"],[3959,1,\"ྲཱྀ\"],[3960,1,\"ླྀ\"],[3961,1,\"ླཱྀ\"],[[3962,3968],2],[3969,1,\"ཱྀ\"],[[3970,3972],2],[3973,2],[[3974,3979],2],[[3980,3983],2],[[3984,3986],2],[3987,1,\"ྒྷ\"],[[3988,3989],2],[3990,2],[3991,2],[3992,3],[[3993,3996],2],[3997,1,\"ྜྷ\"],[[3998,4001],2],[4002,1,\"ྡྷ\"],[[4003,4006],2],[4007,1,\"ྦྷ\"],[[4008,4011],2],[4012,1,\"ྫྷ\"],[4013,2],[[4014,4016],2],[[4017,4023],2],[4024,2],[4025,1,\"ྐྵ\"],[[4026,4028],2],[4029,3],[[4030,4037],2],[4038,2],[[4039,4044],2],[4045,3],[4046,2],[4047,2],[[4048,4049],2],[[4050,4052],2],[[4053,4056],2],[[4057,4058],2],[[4059,4095],3],[[4096,4129],2],[4130,2],[[4131,4135],2],[4136,2],[[4137,4138],2],[4139,2],[[4140,4146],2],[[4147,4149],2],[[4150,4153],2],[[4154,4159],2],[[4160,4169],2],[[4170,4175],2],[[4176,4185],2],[[4186,4249],2],[[4250,4253],2],[[4254,4255],2],[[4256,4293],3],[4294,3],[4295,1,\"ⴧ\"],[[4296,4300],3],[4301,1,\"ⴭ\"],[[4302,4303],3],[[4304,4342],2],[[4343,4344],2],[[4345,4346],2],[4347,2],[4348,1,\"ნ\"],[[4349,4351],2],[[4352,4441],2],[[4442,4446],2],[[4447,4448],3],[[4449,4514],2],[[4515,4519],2],[[4520,4601],2],[[4602,4607],2],[[4608,4614],2],[4615,2],[[4616,4678],2],[4679,2],[4680,2],[4681,3],[[4682,4685],2],[[4686,4687],3],[[4688,4694],2],[4695,3],[4696,2],[4697,3],[[4698,4701],2],[[4702,4703],3],[[4704,4742],2],[4743,2],[4744,2],[4745,3],[[4746,4749],2],[[4750,4751],3],[[4752,4782],2],[4783,2],[4784,2],[4785,3],[[4786,4789],2],[[4790,4791],3],[[4792,4798],2],[4799,3],[4800,2],[4801,3],[[4802,4805],2],[[4806,4807],3],[[4808,4814],2],[4815,2],[[4816,4822],2],[4823,3],[[4824,4846],2],[4847,2],[[4848,4878],2],[4879,2],[4880,2],[4881,3],[[4882,4885],2],[[4886,4887],3],[[4888,4894],2],[4895,2],[[4896,4934],2],[4935,2],[[4936,4954],2],[[4955,4956],3],[[4957,4958],2],[4959,2],[4960,2],[[4961,4988],2],[[4989,4991],3],[[4992,5007],2],[[5008,5017],2],[[5018,5023],3],[[5024,5108],2],[5109,2],[[5110,5111],3],[5112,1,\"Ᏸ\"],[5113,1,\"Ᏹ\"],[5114,1,\"Ᏺ\"],[5115,1,\"Ᏻ\"],[5116,1,\"Ᏼ\"],[5117,1,\"Ᏽ\"],[[5118,5119],3],[5120,2],[[5121,5740],2],[[5741,5742],2],[[5743,5750],2],[[5751,5759],2],[5760,3],[[5761,5786],2],[[5787,5788],2],[[5789,5791],3],[[5792,5866],2],[[5867,5872],2],[[5873,5880],2],[[5881,5887],3],[[5888,5900],2],[5901,2],[[5902,5908],2],[5909,2],[[5910,5918],3],[5919,2],[[5920,5940],2],[[5941,5942],2],[[5943,5951],3],[[5952,5971],2],[[5972,5983],3],[[5984,5996],2],[5997,3],[[5998,6000],2],[6001,3],[[6002,6003],2],[[6004,6015],3],[[6016,6067],2],[[6068,6069],3],[[6070,6099],2],[[6100,6102],2],[6103,2],[[6104,6107],2],[6108,2],[6109,2],[[6110,6111],3],[[6112,6121],2],[[6122,6127],3],[[6128,6137],2],[[6138,6143],3],[[6144,6149],2],[6150,3],[[6151,6154],2],[[6155,6157],7],[6158,3],[6159,7],[[6160,6169],2],[[6170,6175],3],[[6176,6263],2],[6264,2],[[6265,6271],3],[[6272,6313],2],[6314,2],[[6315,6319],3],[[6320,6389],2],[[6390,6399],3],[[6400,6428],2],[[6429,6430],2],[6431,3],[[6432,6443],2],[[6444,6447],3],[[6448,6459],2],[[6460,6463],3],[6464,2],[[6465,6467],3],[[6468,6469],2],[[6470,6509],2],[[6510,6511],3],[[6512,6516],2],[[6517,6527],3],[[6528,6569],2],[[6570,6571],2],[[6572,6575],3],[[6576,6601],2],[[6602,6607],3],[[6608,6617],2],[6618,2],[[6619,6621],3],[[6622,6623],2],[[6624,6655],2],[[6656,6683],2],[[6684,6685],3],[[6686,6687],2],[[6688,6750],2],[6751,3],[[6752,6780],2],[[6781,6782],3],[[6783,6793],2],[[6794,6799],3],[[6800,6809],2],[[6810,6815],3],[[6816,6822],2],[6823,2],[[6824,6829],2],[[6830,6831],3],[[6832,6845],2],[6846,2],[[6847,6848],2],[[6849,6862],2],[[6863,6911],3],[[6912,6987],2],[6988,2],[[6989,6991],3],[[6992,7001],2],[[7002,7018],2],[[7019,7027],2],[[7028,7036],2],[[7037,7038],2],[7039,3],[[7040,7082],2],[[7083,7085],2],[[7086,7097],2],[[7098,7103],2],[[7104,7155],2],[[7156,7163],3],[[7164,7167],2],[[7168,7223],2],[[7224,7226],3],[[7227,7231],2],[[7232,7241],2],[[7242,7244],3],[[7245,7293],2],[[7294,7295],2],[7296,1,\"в\"],[7297,1,\"д\"],[7298,1,\"о\"],[7299,1,\"с\"],[[7300,7301],1,\"т\"],[7302,1,\"ъ\"],[7303,1,\"ѣ\"],[7304,1,\"ꙋ\"],[[7305,7311],3],[7312,1,\"ა\"],[7313,1,\"ბ\"],[7314,1,\"გ\"],[7315,1,\"დ\"],[7316,1,\"ე\"],[7317,1,\"ვ\"],[7318,1,\"ზ\"],[7319,1,\"თ\"],[7320,1,\"ი\"],[7321,1,\"კ\"],[7322,1,\"ლ\"],[7323,1,\"მ\"],[7324,1,\"ნ\"],[7325,1,\"ო\"],[7326,1,\"პ\"],[7327,1,\"ჟ\"],[7328,1,\"რ\"],[7329,1,\"ს\"],[7330,1,\"ტ\"],[7331,1,\"უ\"],[7332,1,\"ფ\"],[7333,1,\"ქ\"],[7334,1,\"ღ\"],[7335,1,\"ყ\"],[7336,1,\"შ\"],[7337,1,\"ჩ\"],[7338,1,\"ც\"],[7339,1,\"ძ\"],[7340,1,\"წ\"],[7341,1,\"ჭ\"],[7342,1,\"ხ\"],[7343,1,\"ჯ\"],[7344,1,\"ჰ\"],[7345,1,\"ჱ\"],[7346,1,\"ჲ\"],[7347,1,\"ჳ\"],[7348,1,\"ჴ\"],[7349,1,\"ჵ\"],[7350,1,\"ჶ\"],[7351,1,\"ჷ\"],[7352,1,\"ჸ\"],[7353,1,\"ჹ\"],[7354,1,\"ჺ\"],[[7355,7356],3],[7357,1,\"ჽ\"],[7358,1,\"ჾ\"],[7359,1,\"ჿ\"],[[7360,7367],2],[[7368,7375],3],[[7376,7378],2],[7379,2],[[7380,7410],2],[[7411,7414],2],[7415,2],[[7416,7417],2],[7418,2],[[7419,7423],3],[[7424,7467],2],[7468,1,\"a\"],[7469,1,\"æ\"],[7470,1,\"b\"],[7471,2],[7472,1,\"d\"],[7473,1,\"e\"],[7474,1,\"ǝ\"],[7475,1,\"g\"],[7476,1,\"h\"],[7477,1,\"i\"],[7478,1,\"j\"],[7479,1,\"k\"],[7480,1,\"l\"],[7481,1,\"m\"],[7482,1,\"n\"],[7483,2],[7484,1,\"o\"],[7485,1,\"ȣ\"],[7486,1,\"p\"],[7487,1,\"r\"],[7488,1,\"t\"],[7489,1,\"u\"],[7490,1,\"w\"],[7491,1,\"a\"],[7492,1,\"ɐ\"],[7493,1,\"ɑ\"],[7494,1,\"ᴂ\"],[7495,1,\"b\"],[7496,1,\"d\"],[7497,1,\"e\"],[7498,1,\"ə\"],[7499,1,\"ɛ\"],[7500,1,\"ɜ\"],[7501,1,\"g\"],[7502,2],[7503,1,\"k\"],[7504,1,\"m\"],[7505,1,\"ŋ\"],[7506,1,\"o\"],[7507,1,\"ɔ\"],[7508,1,\"ᴖ\"],[7509,1,\"ᴗ\"],[7510,1,\"p\"],[7511,1,\"t\"],[7512,1,\"u\"],[7513,1,\"ᴝ\"],[7514,1,\"ɯ\"],[7515,1,\"v\"],[7516,1,\"ᴥ\"],[7517,1,\"β\"],[7518,1,\"γ\"],[7519,1,\"δ\"],[7520,1,\"φ\"],[7521,1,\"χ\"],[7522,1,\"i\"],[7523,1,\"r\"],[7524,1,\"u\"],[7525,1,\"v\"],[7526,1,\"β\"],[7527,1,\"γ\"],[7528,1,\"ρ\"],[7529,1,\"φ\"],[7530,1,\"χ\"],[7531,2],[[7532,7543],2],[7544,1,\"н\"],[[7545,7578],2],[7579,1,\"ɒ\"],[7580,1,\"c\"],[7581,1,\"ɕ\"],[7582,1,\"ð\"],[7583,1,\"ɜ\"],[7584,1,\"f\"],[7585,1,\"ɟ\"],[7586,1,\"ɡ\"],[7587,1,\"ɥ\"],[7588,1,\"ɨ\"],[7589,1,\"ɩ\"],[7590,1,\"ɪ\"],[7591,1,\"ᵻ\"],[7592,1,\"ʝ\"],[7593,1,\"ɭ\"],[7594,1,\"ᶅ\"],[7595,1,\"ʟ\"],[7596,1,\"ɱ\"],[7597,1,\"ɰ\"],[7598,1,\"ɲ\"],[7599,1,\"ɳ\"],[7600,1,\"ɴ\"],[7601,1,\"ɵ\"],[7602,1,\"ɸ\"],[7603,1,\"ʂ\"],[7604,1,\"ʃ\"],[7605,1,\"ƫ\"],[7606,1,\"ʉ\"],[7607,1,\"ʊ\"],[7608,1,\"ᴜ\"],[7609,1,\"ʋ\"],[7610,1,\"ʌ\"],[7611,1,\"z\"],[7612,1,\"ʐ\"],[7613,1,\"ʑ\"],[7614,1,\"ʒ\"],[7615,1,\"θ\"],[[7616,7619],2],[[7620,7626],2],[[7627,7654],2],[[7655,7669],2],[[7670,7673],2],[7674,2],[7675,2],[7676,2],[7677,2],[[7678,7679],2],[7680,1,\"ḁ\"],[7681,2],[7682,1,\"ḃ\"],[7683,2],[7684,1,\"ḅ\"],[7685,2],[7686,1,\"ḇ\"],[7687,2],[7688,1,\"ḉ\"],[7689,2],[7690,1,\"ḋ\"],[7691,2],[7692,1,\"ḍ\"],[7693,2],[7694,1,\"ḏ\"],[7695,2],[7696,1,\"ḑ\"],[7697,2],[7698,1,\"ḓ\"],[7699,2],[7700,1,\"ḕ\"],[7701,2],[7702,1,\"ḗ\"],[7703,2],[7704,1,\"ḙ\"],[7705,2],[7706,1,\"ḛ\"],[7707,2],[7708,1,\"ḝ\"],[7709,2],[7710,1,\"ḟ\"],[7711,2],[7712,1,\"ḡ\"],[7713,2],[7714,1,\"ḣ\"],[7715,2],[7716,1,\"ḥ\"],[7717,2],[7718,1,\"ḧ\"],[7719,2],[7720,1,\"ḩ\"],[7721,2],[7722,1,\"ḫ\"],[7723,2],[7724,1,\"ḭ\"],[7725,2],[7726,1,\"ḯ\"],[7727,2],[7728,1,\"ḱ\"],[7729,2],[7730,1,\"ḳ\"],[7731,2],[7732,1,\"ḵ\"],[7733,2],[7734,1,\"ḷ\"],[7735,2],[7736,1,\"ḹ\"],[7737,2],[7738,1,\"ḻ\"],[7739,2],[7740,1,\"ḽ\"],[7741,2],[7742,1,\"ḿ\"],[7743,2],[7744,1,\"ṁ\"],[7745,2],[7746,1,\"ṃ\"],[7747,2],[7748,1,\"ṅ\"],[7749,2],[7750,1,\"ṇ\"],[7751,2],[7752,1,\"ṉ\"],[7753,2],[7754,1,\"ṋ\"],[7755,2],[7756,1,\"ṍ\"],[7757,2],[7758,1,\"ṏ\"],[7759,2],[7760,1,\"ṑ\"],[7761,2],[7762,1,\"ṓ\"],[7763,2],[7764,1,\"ṕ\"],[7765,2],[7766,1,\"ṗ\"],[7767,2],[7768,1,\"ṙ\"],[7769,2],[7770,1,\"ṛ\"],[7771,2],[7772,1,\"ṝ\"],[7773,2],[7774,1,\"ṟ\"],[7775,2],[7776,1,\"ṡ\"],[7777,2],[7778,1,\"ṣ\"],[7779,2],[7780,1,\"ṥ\"],[7781,2],[7782,1,\"ṧ\"],[7783,2],[7784,1,\"ṩ\"],[7785,2],[7786,1,\"ṫ\"],[7787,2],[7788,1,\"ṭ\"],[7789,2],[7790,1,\"ṯ\"],[7791,2],[7792,1,\"ṱ\"],[7793,2],[7794,1,\"ṳ\"],[7795,2],[7796,1,\"ṵ\"],[7797,2],[7798,1,\"ṷ\"],[7799,2],[7800,1,\"ṹ\"],[7801,2],[7802,1,\"ṻ\"],[7803,2],[7804,1,\"ṽ\"],[7805,2],[7806,1,\"ṿ\"],[7807,2],[7808,1,\"ẁ\"],[7809,2],[7810,1,\"ẃ\"],[7811,2],[7812,1,\"ẅ\"],[7813,2],[7814,1,\"ẇ\"],[7815,2],[7816,1,\"ẉ\"],[7817,2],[7818,1,\"ẋ\"],[7819,2],[7820,1,\"ẍ\"],[7821,2],[7822,1,\"ẏ\"],[7823,2],[7824,1,\"ẑ\"],[7825,2],[7826,1,\"ẓ\"],[7827,2],[7828,1,\"ẕ\"],[[7829,7833],2],[7834,1,\"aʾ\"],[7835,1,\"ṡ\"],[[7836,7837],2],[7838,1,\"ß\"],[7839,2],[7840,1,\"ạ\"],[7841,2],[7842,1,\"ả\"],[7843,2],[7844,1,\"ấ\"],[7845,2],[7846,1,\"ầ\"],[7847,2],[7848,1,\"ẩ\"],[7849,2],[7850,1,\"ẫ\"],[7851,2],[7852,1,\"ậ\"],[7853,2],[7854,1,\"ắ\"],[7855,2],[7856,1,\"ằ\"],[7857,2],[7858,1,\"ẳ\"],[7859,2],[7860,1,\"ẵ\"],[7861,2],[7862,1,\"ặ\"],[7863,2],[7864,1,\"ẹ\"],[7865,2],[7866,1,\"ẻ\"],[7867,2],[7868,1,\"ẽ\"],[7869,2],[7870,1,\"ế\"],[7871,2],[7872,1,\"ề\"],[7873,2],[7874,1,\"ể\"],[7875,2],[7876,1,\"ễ\"],[7877,2],[7878,1,\"ệ\"],[7879,2],[7880,1,\"ỉ\"],[7881,2],[7882,1,\"ị\"],[7883,2],[7884,1,\"ọ\"],[7885,2],[7886,1,\"ỏ\"],[7887,2],[7888,1,\"ố\"],[7889,2],[7890,1,\"ồ\"],[7891,2],[7892,1,\"ổ\"],[7893,2],[7894,1,\"ỗ\"],[7895,2],[7896,1,\"ộ\"],[7897,2],[7898,1,\"ớ\"],[7899,2],[7900,1,\"ờ\"],[7901,2],[7902,1,\"ở\"],[7903,2],[7904,1,\"ỡ\"],[7905,2],[7906,1,\"ợ\"],[7907,2],[7908,1,\"ụ\"],[7909,2],[7910,1,\"ủ\"],[7911,2],[7912,1,\"ứ\"],[7913,2],[7914,1,\"ừ\"],[7915,2],[7916,1,\"ử\"],[7917,2],[7918,1,\"ữ\"],[7919,2],[7920,1,\"ự\"],[7921,2],[7922,1,\"ỳ\"],[7923,2],[7924,1,\"ỵ\"],[7925,2],[7926,1,\"ỷ\"],[7927,2],[7928,1,\"ỹ\"],[7929,2],[7930,1,\"ỻ\"],[7931,2],[7932,1,\"ỽ\"],[7933,2],[7934,1,\"ỿ\"],[7935,2],[[7936,7943],2],[7944,1,\"ἀ\"],[7945,1,\"ἁ\"],[7946,1,\"ἂ\"],[7947,1,\"ἃ\"],[7948,1,\"ἄ\"],[7949,1,\"ἅ\"],[7950,1,\"ἆ\"],[7951,1,\"ἇ\"],[[7952,7957],2],[[7958,7959],3],[7960,1,\"ἐ\"],[7961,1,\"ἑ\"],[7962,1,\"ἒ\"],[7963,1,\"ἓ\"],[7964,1,\"ἔ\"],[7965,1,\"ἕ\"],[[7966,7967],3],[[7968,7975],2],[7976,1,\"ἠ\"],[7977,1,\"ἡ\"],[7978,1,\"ἢ\"],[7979,1,\"ἣ\"],[7980,1,\"ἤ\"],[7981,1,\"ἥ\"],[7982,1,\"ἦ\"],[7983,1,\"ἧ\"],[[7984,7991],2],[7992,1,\"ἰ\"],[7993,1,\"ἱ\"],[7994,1,\"ἲ\"],[7995,1,\"ἳ\"],[7996,1,\"ἴ\"],[7997,1,\"ἵ\"],[7998,1,\"ἶ\"],[7999,1,\"ἷ\"],[[8000,8005],2],[[8006,8007],3],[8008,1,\"ὀ\"],[8009,1,\"ὁ\"],[8010,1,\"ὂ\"],[8011,1,\"ὃ\"],[8012,1,\"ὄ\"],[8013,1,\"ὅ\"],[[8014,8015],3],[[8016,8023],2],[8024,3],[8025,1,\"ὑ\"],[8026,3],[8027,1,\"ὓ\"],[8028,3],[8029,1,\"ὕ\"],[8030,3],[8031,1,\"ὗ\"],[[8032,8039],2],[8040,1,\"ὠ\"],[8041,1,\"ὡ\"],[8042,1,\"ὢ\"],[8043,1,\"ὣ\"],[8044,1,\"ὤ\"],[8045,1,\"ὥ\"],[8046,1,\"ὦ\"],[8047,1,\"ὧ\"],[8048,2],[8049,1,\"ά\"],[8050,2],[8051,1,\"έ\"],[8052,2],[8053,1,\"ή\"],[8054,2],[8055,1,\"ί\"],[8056,2],[8057,1,\"ό\"],[8058,2],[8059,1,\"ύ\"],[8060,2],[8061,1,\"ώ\"],[[8062,8063],3],[8064,1,\"ἀι\"],[8065,1,\"ἁι\"],[8066,1,\"ἂι\"],[8067,1,\"ἃι\"],[8068,1,\"ἄι\"],[8069,1,\"ἅι\"],[8070,1,\"ἆι\"],[8071,1,\"ἇι\"],[8072,1,\"ἀι\"],[8073,1,\"ἁι\"],[8074,1,\"ἂι\"],[8075,1,\"ἃι\"],[8076,1,\"ἄι\"],[8077,1,\"ἅι\"],[8078,1,\"ἆι\"],[8079,1,\"ἇι\"],[8080,1,\"ἠι\"],[8081,1,\"ἡι\"],[8082,1,\"ἢι\"],[8083,1,\"ἣι\"],[8084,1,\"ἤι\"],[8085,1,\"ἥι\"],[8086,1,\"ἦι\"],[8087,1,\"ἧι\"],[8088,1,\"ἠι\"],[8089,1,\"ἡι\"],[8090,1,\"ἢι\"],[8091,1,\"ἣι\"],[8092,1,\"ἤι\"],[8093,1,\"ἥι\"],[8094,1,\"ἦι\"],[8095,1,\"ἧι\"],[8096,1,\"ὠι\"],[8097,1,\"ὡι\"],[8098,1,\"ὢι\"],[8099,1,\"ὣι\"],[8100,1,\"ὤι\"],[8101,1,\"ὥι\"],[8102,1,\"ὦι\"],[8103,1,\"ὧι\"],[8104,1,\"ὠι\"],[8105,1,\"ὡι\"],[8106,1,\"ὢι\"],[8107,1,\"ὣι\"],[8108,1,\"ὤι\"],[8109,1,\"ὥι\"],[8110,1,\"ὦι\"],[8111,1,\"ὧι\"],[[8112,8113],2],[8114,1,\"ὰι\"],[8115,1,\"αι\"],[8116,1,\"άι\"],[8117,3],[8118,2],[8119,1,\"ᾶι\"],[8120,1,\"ᾰ\"],[8121,1,\"ᾱ\"],[8122,1,\"ὰ\"],[8123,1,\"ά\"],[8124,1,\"αι\"],[8125,5,\" ̓\"],[8126,1,\"ι\"],[8127,5,\" ̓\"],[8128,5,\" ͂\"],[8129,5,\" ̈͂\"],[8130,1,\"ὴι\"],[8131,1,\"ηι\"],[8132,1,\"ήι\"],[8133,3],[8134,2],[8135,1,\"ῆι\"],[8136,1,\"ὲ\"],[8137,1,\"έ\"],[8138,1,\"ὴ\"],[8139,1,\"ή\"],[8140,1,\"ηι\"],[8141,5,\" ̓̀\"],[8142,5,\" ̓́\"],[8143,5,\" ̓͂\"],[[8144,8146],2],[8147,1,\"ΐ\"],[[8148,8149],3],[[8150,8151],2],[8152,1,\"ῐ\"],[8153,1,\"ῑ\"],[8154,1,\"ὶ\"],[8155,1,\"ί\"],[8156,3],[8157,5,\" ̔̀\"],[8158,5,\" ̔́\"],[8159,5,\" ̔͂\"],[[8160,8162],2],[8163,1,\"ΰ\"],[[8164,8167],2],[8168,1,\"ῠ\"],[8169,1,\"ῡ\"],[8170,1,\"ὺ\"],[8171,1,\"ύ\"],[8172,1,\"ῥ\"],[8173,5,\" ̈̀\"],[8174,5,\" ̈́\"],[8175,5,\"`\"],[[8176,8177],3],[8178,1,\"ὼι\"],[8179,1,\"ωι\"],[8180,1,\"ώι\"],[8181,3],[8182,2],[8183,1,\"ῶι\"],[8184,1,\"ὸ\"],[8185,1,\"ό\"],[8186,1,\"ὼ\"],[8187,1,\"ώ\"],[8188,1,\"ωι\"],[8189,5,\" ́\"],[8190,5,\" ̔\"],[8191,3],[[8192,8202],5,\" \"],[8203,7],[[8204,8205],6,\"\"],[[8206,8207],3],[8208,2],[8209,1,\"‐\"],[[8210,8214],2],[8215,5,\" ̳\"],[[8216,8227],2],[[8228,8230],3],[8231,2],[[8232,8238],3],[8239,5,\" \"],[[8240,8242],2],[8243,1,\"′′\"],[8244,1,\"′′′\"],[8245,2],[8246,1,\"‵‵\"],[8247,1,\"‵‵‵\"],[[8248,8251],2],[8252,5,\"!!\"],[8253,2],[8254,5,\" ̅\"],[[8255,8262],2],[8263,5,\"??\"],[8264,5,\"?!\"],[8265,5,\"!?\"],[[8266,8269],2],[[8270,8274],2],[[8275,8276],2],[[8277,8278],2],[8279,1,\"′′′′\"],[[8280,8286],2],[8287,5,\" \"],[8288,7],[[8289,8291],3],[8292,7],[8293,3],[[8294,8297],3],[[8298,8303],3],[8304,1,\"0\"],[8305,1,\"i\"],[[8306,8307],3],[8308,1,\"4\"],[8309,1,\"5\"],[8310,1,\"6\"],[8311,1,\"7\"],[8312,1,\"8\"],[8313,1,\"9\"],[8314,5,\"+\"],[8315,1,\"−\"],[8316,5,\"=\"],[8317,5,\"(\"],[8318,5,\")\"],[8319,1,\"n\"],[8320,1,\"0\"],[8321,1,\"1\"],[8322,1,\"2\"],[8323,1,\"3\"],[8324,1,\"4\"],[8325,1,\"5\"],[8326,1,\"6\"],[8327,1,\"7\"],[8328,1,\"8\"],[8329,1,\"9\"],[8330,5,\"+\"],[8331,1,\"−\"],[8332,5,\"=\"],[8333,5,\"(\"],[8334,5,\")\"],[8335,3],[8336,1,\"a\"],[8337,1,\"e\"],[8338,1,\"o\"],[8339,1,\"x\"],[8340,1,\"ə\"],[8341,1,\"h\"],[8342,1,\"k\"],[8343,1,\"l\"],[8344,1,\"m\"],[8345,1,\"n\"],[8346,1,\"p\"],[8347,1,\"s\"],[8348,1,\"t\"],[[8349,8351],3],[[8352,8359],2],[8360,1,\"rs\"],[[8361,8362],2],[8363,2],[8364,2],[[8365,8367],2],[[8368,8369],2],[[8370,8373],2],[[8374,8376],2],[8377,2],[8378,2],[[8379,8381],2],[8382,2],[8383,2],[8384,2],[[8385,8399],3],[[8400,8417],2],[[8418,8419],2],[[8420,8426],2],[8427,2],[[8428,8431],2],[8432,2],[[8433,8447],3],[8448,5,\"a/c\"],[8449,5,\"a/s\"],[8450,1,\"c\"],[8451,1,\"°c\"],[8452,2],[8453,5,\"c/o\"],[8454,5,\"c/u\"],[8455,1,\"ɛ\"],[8456,2],[8457,1,\"°f\"],[8458,1,\"g\"],[[8459,8462],1,\"h\"],[8463,1,\"ħ\"],[[8464,8465],1,\"i\"],[[8466,8467],1,\"l\"],[8468,2],[8469,1,\"n\"],[8470,1,\"no\"],[[8471,8472],2],[8473,1,\"p\"],[8474,1,\"q\"],[[8475,8477],1,\"r\"],[[8478,8479],2],[8480,1,\"sm\"],[8481,1,\"tel\"],[8482,1,\"tm\"],[8483,2],[8484,1,\"z\"],[8485,2],[8486,1,\"ω\"],[8487,2],[8488,1,\"z\"],[8489,2],[8490,1,\"k\"],[8491,1,\"å\"],[8492,1,\"b\"],[8493,1,\"c\"],[8494,2],[[8495,8496],1,\"e\"],[8497,1,\"f\"],[8498,3],[8499,1,\"m\"],[8500,1,\"o\"],[8501,1,\"א\"],[8502,1,\"ב\"],[8503,1,\"ג\"],[8504,1,\"ד\"],[8505,1,\"i\"],[8506,2],[8507,1,\"fax\"],[8508,1,\"π\"],[[8509,8510],1,\"γ\"],[8511,1,\"π\"],[8512,1,\"∑\"],[[8513,8516],2],[[8517,8518],1,\"d\"],[8519,1,\"e\"],[8520,1,\"i\"],[8521,1,\"j\"],[[8522,8523],2],[8524,2],[8525,2],[8526,2],[8527,2],[8528,1,\"1⁄7\"],[8529,1,\"1⁄9\"],[8530,1,\"1⁄10\"],[8531,1,\"1⁄3\"],[8532,1,\"2⁄3\"],[8533,1,\"1⁄5\"],[8534,1,\"2⁄5\"],[8535,1,\"3⁄5\"],[8536,1,\"4⁄5\"],[8537,1,\"1⁄6\"],[8538,1,\"5⁄6\"],[8539,1,\"1⁄8\"],[8540,1,\"3⁄8\"],[8541,1,\"5⁄8\"],[8542,1,\"7⁄8\"],[8543,1,\"1⁄\"],[8544,1,\"i\"],[8545,1,\"ii\"],[8546,1,\"iii\"],[8547,1,\"iv\"],[8548,1,\"v\"],[8549,1,\"vi\"],[8550,1,\"vii\"],[8551,1,\"viii\"],[8552,1,\"ix\"],[8553,1,\"x\"],[8554,1,\"xi\"],[8555,1,\"xii\"],[8556,1,\"l\"],[8557,1,\"c\"],[8558,1,\"d\"],[8559,1,\"m\"],[8560,1,\"i\"],[8561,1,\"ii\"],[8562,1,\"iii\"],[8563,1,\"iv\"],[8564,1,\"v\"],[8565,1,\"vi\"],[8566,1,\"vii\"],[8567,1,\"viii\"],[8568,1,\"ix\"],[8569,1,\"x\"],[8570,1,\"xi\"],[8571,1,\"xii\"],[8572,1,\"l\"],[8573,1,\"c\"],[8574,1,\"d\"],[8575,1,\"m\"],[[8576,8578],2],[8579,3],[8580,2],[[8581,8584],2],[8585,1,\"0⁄3\"],[[8586,8587],2],[[8588,8591],3],[[8592,8682],2],[[8683,8691],2],[[8692,8703],2],[[8704,8747],2],[8748,1,\"∫∫\"],[8749,1,\"∫∫∫\"],[8750,2],[8751,1,\"∮∮\"],[8752,1,\"∮∮∮\"],[[8753,8945],2],[[8946,8959],2],[8960,2],[8961,2],[[8962,9000],2],[9001,1,\"〈\"],[9002,1,\"〉\"],[[9003,9082],2],[9083,2],[9084,2],[[9085,9114],2],[[9115,9166],2],[[9167,9168],2],[[9169,9179],2],[[9180,9191],2],[9192,2],[[9193,9203],2],[[9204,9210],2],[[9211,9214],2],[9215,2],[[9216,9252],2],[[9253,9254],2],[[9255,9279],3],[[9280,9290],2],[[9291,9311],3],[9312,1,\"1\"],[9313,1,\"2\"],[9314,1,\"3\"],[9315,1,\"4\"],[9316,1,\"5\"],[9317,1,\"6\"],[9318,1,\"7\"],[9319,1,\"8\"],[9320,1,\"9\"],[9321,1,\"10\"],[9322,1,\"11\"],[9323,1,\"12\"],[9324,1,\"13\"],[9325,1,\"14\"],[9326,1,\"15\"],[9327,1,\"16\"],[9328,1,\"17\"],[9329,1,\"18\"],[9330,1,\"19\"],[9331,1,\"20\"],[9332,5,\"(1)\"],[9333,5,\"(2)\"],[9334,5,\"(3)\"],[9335,5,\"(4)\"],[9336,5,\"(5)\"],[9337,5,\"(6)\"],[9338,5,\"(7)\"],[9339,5,\"(8)\"],[9340,5,\"(9)\"],[9341,5,\"(10)\"],[9342,5,\"(11)\"],[9343,5,\"(12)\"],[9344,5,\"(13)\"],[9345,5,\"(14)\"],[9346,5,\"(15)\"],[9347,5,\"(16)\"],[9348,5,\"(17)\"],[9349,5,\"(18)\"],[9350,5,\"(19)\"],[9351,5,\"(20)\"],[[9352,9371],3],[9372,5,\"(a)\"],[9373,5,\"(b)\"],[9374,5,\"(c)\"],[9375,5,\"(d)\"],[9376,5,\"(e)\"],[9377,5,\"(f)\"],[9378,5,\"(g)\"],[9379,5,\"(h)\"],[9380,5,\"(i)\"],[9381,5,\"(j)\"],[9382,5,\"(k)\"],[9383,5,\"(l)\"],[9384,5,\"(m)\"],[9385,5,\"(n)\"],[9386,5,\"(o)\"],[9387,5,\"(p)\"],[9388,5,\"(q)\"],[9389,5,\"(r)\"],[9390,5,\"(s)\"],[9391,5,\"(t)\"],[9392,5,\"(u)\"],[9393,5,\"(v)\"],[9394,5,\"(w)\"],[9395,5,\"(x)\"],[9396,5,\"(y)\"],[9397,5,\"(z)\"],[9398,1,\"a\"],[9399,1,\"b\"],[9400,1,\"c\"],[9401,1,\"d\"],[9402,1,\"e\"],[9403,1,\"f\"],[9404,1,\"g\"],[9405,1,\"h\"],[9406,1,\"i\"],[9407,1,\"j\"],[9408,1,\"k\"],[9409,1,\"l\"],[9410,1,\"m\"],[9411,1,\"n\"],[9412,1,\"o\"],[9413,1,\"p\"],[9414,1,\"q\"],[9415,1,\"r\"],[9416,1,\"s\"],[9417,1,\"t\"],[9418,1,\"u\"],[9419,1,\"v\"],[9420,1,\"w\"],[9421,1,\"x\"],[9422,1,\"y\"],[9423,1,\"z\"],[9424,1,\"a\"],[9425,1,\"b\"],[9426,1,\"c\"],[9427,1,\"d\"],[9428,1,\"e\"],[9429,1,\"f\"],[9430,1,\"g\"],[9431,1,\"h\"],[9432,1,\"i\"],[9433,1,\"j\"],[9434,1,\"k\"],[9435,1,\"l\"],[9436,1,\"m\"],[9437,1,\"n\"],[9438,1,\"o\"],[9439,1,\"p\"],[9440,1,\"q\"],[9441,1,\"r\"],[9442,1,\"s\"],[9443,1,\"t\"],[9444,1,\"u\"],[9445,1,\"v\"],[9446,1,\"w\"],[9447,1,\"x\"],[9448,1,\"y\"],[9449,1,\"z\"],[9450,1,\"0\"],[[9451,9470],2],[9471,2],[[9472,9621],2],[[9622,9631],2],[[9632,9711],2],[[9712,9719],2],[[9720,9727],2],[[9728,9747],2],[[9748,9749],2],[[9750,9751],2],[9752,2],[9753,2],[[9754,9839],2],[[9840,9841],2],[[9842,9853],2],[[9854,9855],2],[[9856,9865],2],[[9866,9873],2],[[9874,9884],2],[9885,2],[[9886,9887],2],[[9888,9889],2],[[9890,9905],2],[9906,2],[[9907,9916],2],[[9917,9919],2],[[9920,9923],2],[[9924,9933],2],[9934,2],[[9935,9953],2],[9954,2],[9955,2],[[9956,9959],2],[[9960,9983],2],[9984,2],[[9985,9988],2],[9989,2],[[9990,9993],2],[[9994,9995],2],[[9996,10023],2],[10024,2],[[10025,10059],2],[10060,2],[10061,2],[10062,2],[[10063,10066],2],[[10067,10069],2],[10070,2],[10071,2],[[10072,10078],2],[[10079,10080],2],[[10081,10087],2],[[10088,10101],2],[[10102,10132],2],[[10133,10135],2],[[10136,10159],2],[10160,2],[[10161,10174],2],[10175,2],[[10176,10182],2],[[10183,10186],2],[10187,2],[10188,2],[10189,2],[[10190,10191],2],[[10192,10219],2],[[10220,10223],2],[[10224,10239],2],[[10240,10495],2],[[10496,10763],2],[10764,1,\"∫∫∫∫\"],[[10765,10867],2],[10868,5,\"::=\"],[10869,5,\"==\"],[10870,5,\"===\"],[[10871,10971],2],[10972,1,\"⫝̸\"],[[10973,11007],2],[[11008,11021],2],[[11022,11027],2],[[11028,11034],2],[[11035,11039],2],[[11040,11043],2],[[11044,11084],2],[[11085,11087],2],[[11088,11092],2],[[11093,11097],2],[[11098,11123],2],[[11124,11125],3],[[11126,11157],2],[11158,3],[11159,2],[[11160,11193],2],[[11194,11196],2],[[11197,11208],2],[11209,2],[[11210,11217],2],[11218,2],[[11219,11243],2],[[11244,11247],2],[[11248,11262],2],[11263,2],[11264,1,\"ⰰ\"],[11265,1,\"ⰱ\"],[11266,1,\"ⰲ\"],[11267,1,\"ⰳ\"],[11268,1,\"ⰴ\"],[11269,1,\"ⰵ\"],[11270,1,\"ⰶ\"],[11271,1,\"ⰷ\"],[11272,1,\"ⰸ\"],[11273,1,\"ⰹ\"],[11274,1,\"ⰺ\"],[11275,1,\"ⰻ\"],[11276,1,\"ⰼ\"],[11277,1,\"ⰽ\"],[11278,1,\"ⰾ\"],[11279,1,\"ⰿ\"],[11280,1,\"ⱀ\"],[11281,1,\"ⱁ\"],[11282,1,\"ⱂ\"],[11283,1,\"ⱃ\"],[11284,1,\"ⱄ\"],[11285,1,\"ⱅ\"],[11286,1,\"ⱆ\"],[11287,1,\"ⱇ\"],[11288,1,\"ⱈ\"],[11289,1,\"ⱉ\"],[11290,1,\"ⱊ\"],[11291,1,\"ⱋ\"],[11292,1,\"ⱌ\"],[11293,1,\"ⱍ\"],[11294,1,\"ⱎ\"],[11295,1,\"ⱏ\"],[11296,1,\"ⱐ\"],[11297,1,\"ⱑ\"],[11298,1,\"ⱒ\"],[11299,1,\"ⱓ\"],[11300,1,\"ⱔ\"],[11301,1,\"ⱕ\"],[11302,1,\"ⱖ\"],[11303,1,\"ⱗ\"],[11304,1,\"ⱘ\"],[11305,1,\"ⱙ\"],[11306,1,\"ⱚ\"],[11307,1,\"ⱛ\"],[11308,1,\"ⱜ\"],[11309,1,\"ⱝ\"],[11310,1,\"ⱞ\"],[11311,1,\"ⱟ\"],[[11312,11358],2],[11359,2],[11360,1,\"ⱡ\"],[11361,2],[11362,1,\"ɫ\"],[11363,1,\"ᵽ\"],[11364,1,\"ɽ\"],[[11365,11366],2],[11367,1,\"ⱨ\"],[11368,2],[11369,1,\"ⱪ\"],[11370,2],[11371,1,\"ⱬ\"],[11372,2],[11373,1,\"ɑ\"],[11374,1,\"ɱ\"],[11375,1,\"ɐ\"],[11376,1,\"ɒ\"],[11377,2],[11378,1,\"ⱳ\"],[11379,2],[11380,2],[11381,1,\"ⱶ\"],[[11382,11383],2],[[11384,11387],2],[11388,1,\"j\"],[11389,1,\"v\"],[11390,1,\"ȿ\"],[11391,1,\"ɀ\"],[11392,1,\"ⲁ\"],[11393,2],[11394,1,\"ⲃ\"],[11395,2],[11396,1,\"ⲅ\"],[11397,2],[11398,1,\"ⲇ\"],[11399,2],[11400,1,\"ⲉ\"],[11401,2],[11402,1,\"ⲋ\"],[11403,2],[11404,1,\"ⲍ\"],[11405,2],[11406,1,\"ⲏ\"],[11407,2],[11408,1,\"ⲑ\"],[11409,2],[11410,1,\"ⲓ\"],[11411,2],[11412,1,\"ⲕ\"],[11413,2],[11414,1,\"ⲗ\"],[11415,2],[11416,1,\"ⲙ\"],[11417,2],[11418,1,\"ⲛ\"],[11419,2],[11420,1,\"ⲝ\"],[11421,2],[11422,1,\"ⲟ\"],[11423,2],[11424,1,\"ⲡ\"],[11425,2],[11426,1,\"ⲣ\"],[11427,2],[11428,1,\"ⲥ\"],[11429,2],[11430,1,\"ⲧ\"],[11431,2],[11432,1,\"ⲩ\"],[11433,2],[11434,1,\"ⲫ\"],[11435,2],[11436,1,\"ⲭ\"],[11437,2],[11438,1,\"ⲯ\"],[11439,2],[11440,1,\"ⲱ\"],[11441,2],[11442,1,\"ⲳ\"],[11443,2],[11444,1,\"ⲵ\"],[11445,2],[11446,1,\"ⲷ\"],[11447,2],[11448,1,\"ⲹ\"],[11449,2],[11450,1,\"ⲻ\"],[11451,2],[11452,1,\"ⲽ\"],[11453,2],[11454,1,\"ⲿ\"],[11455,2],[11456,1,\"ⳁ\"],[11457,2],[11458,1,\"ⳃ\"],[11459,2],[11460,1,\"ⳅ\"],[11461,2],[11462,1,\"ⳇ\"],[11463,2],[11464,1,\"ⳉ\"],[11465,2],[11466,1,\"ⳋ\"],[11467,2],[11468,1,\"ⳍ\"],[11469,2],[11470,1,\"ⳏ\"],[11471,2],[11472,1,\"ⳑ\"],[11473,2],[11474,1,\"ⳓ\"],[11475,2],[11476,1,\"ⳕ\"],[11477,2],[11478,1,\"ⳗ\"],[11479,2],[11480,1,\"ⳙ\"],[11481,2],[11482,1,\"ⳛ\"],[11483,2],[11484,1,\"ⳝ\"],[11485,2],[11486,1,\"ⳟ\"],[11487,2],[11488,1,\"ⳡ\"],[11489,2],[11490,1,\"ⳣ\"],[[11491,11492],2],[[11493,11498],2],[11499,1,\"ⳬ\"],[11500,2],[11501,1,\"ⳮ\"],[[11502,11505],2],[11506,1,\"ⳳ\"],[11507,2],[[11508,11512],3],[[11513,11519],2],[[11520,11557],2],[11558,3],[11559,2],[[11560,11564],3],[11565,2],[[11566,11567],3],[[11568,11621],2],[[11622,11623],2],[[11624,11630],3],[11631,1,\"ⵡ\"],[11632,2],[[11633,11646],3],[11647,2],[[11648,11670],2],[[11671,11679],3],[[11680,11686],2],[11687,3],[[11688,11694],2],[11695,3],[[11696,11702],2],[11703,3],[[11704,11710],2],[11711,3],[[11712,11718],2],[11719,3],[[11720,11726],2],[11727,3],[[11728,11734],2],[11735,3],[[11736,11742],2],[11743,3],[[11744,11775],2],[[11776,11799],2],[[11800,11803],2],[[11804,11805],2],[[11806,11822],2],[11823,2],[11824,2],[11825,2],[[11826,11835],2],[[11836,11842],2],[[11843,11844],2],[[11845,11849],2],[[11850,11854],2],[11855,2],[[11856,11858],2],[[11859,11869],2],[[11870,11903],3],[[11904,11929],2],[11930,3],[[11931,11934],2],[11935,1,\"母\"],[[11936,12018],2],[12019,1,\"龟\"],[[12020,12031],3],[12032,1,\"一\"],[12033,1,\"丨\"],[12034,1,\"丶\"],[12035,1,\"丿\"],[12036,1,\"乙\"],[12037,1,\"亅\"],[12038,1,\"二\"],[12039,1,\"亠\"],[12040,1,\"人\"],[12041,1,\"儿\"],[12042,1,\"入\"],[12043,1,\"八\"],[12044,1,\"冂\"],[12045,1,\"冖\"],[12046,1,\"冫\"],[12047,1,\"几\"],[12048,1,\"凵\"],[12049,1,\"刀\"],[12050,1,\"力\"],[12051,1,\"勹\"],[12052,1,\"匕\"],[12053,1,\"匚\"],[12054,1,\"匸\"],[12055,1,\"十\"],[12056,1,\"卜\"],[12057,1,\"卩\"],[12058,1,\"厂\"],[12059,1,\"厶\"],[12060,1,\"又\"],[12061,1,\"口\"],[12062,1,\"囗\"],[12063,1,\"土\"],[12064,1,\"士\"],[12065,1,\"夂\"],[12066,1,\"夊\"],[12067,1,\"夕\"],[12068,1,\"大\"],[12069,1,\"女\"],[12070,1,\"子\"],[12071,1,\"宀\"],[12072,1,\"寸\"],[12073,1,\"小\"],[12074,1,\"尢\"],[12075,1,\"尸\"],[12076,1,\"屮\"],[12077,1,\"山\"],[12078,1,\"巛\"],[12079,1,\"工\"],[12080,1,\"己\"],[12081,1,\"巾\"],[12082,1,\"干\"],[12083,1,\"幺\"],[12084,1,\"广\"],[12085,1,\"廴\"],[12086,1,\"廾\"],[12087,1,\"弋\"],[12088,1,\"弓\"],[12089,1,\"彐\"],[12090,1,\"彡\"],[12091,1,\"彳\"],[12092,1,\"心\"],[12093,1,\"戈\"],[12094,1,\"戶\"],[12095,1,\"手\"],[12096,1,\"支\"],[12097,1,\"攴\"],[12098,1,\"文\"],[12099,1,\"斗\"],[12100,1,\"斤\"],[12101,1,\"方\"],[12102,1,\"无\"],[12103,1,\"日\"],[12104,1,\"曰\"],[12105,1,\"月\"],[12106,1,\"木\"],[12107,1,\"欠\"],[12108,1,\"止\"],[12109,1,\"歹\"],[12110,1,\"殳\"],[12111,1,\"毋\"],[12112,1,\"比\"],[12113,1,\"毛\"],[12114,1,\"氏\"],[12115,1,\"气\"],[12116,1,\"水\"],[12117,1,\"火\"],[12118,1,\"爪\"],[12119,1,\"父\"],[12120,1,\"爻\"],[12121,1,\"爿\"],[12122,1,\"片\"],[12123,1,\"牙\"],[12124,1,\"牛\"],[12125,1,\"犬\"],[12126,1,\"玄\"],[12127,1,\"玉\"],[12128,1,\"瓜\"],[12129,1,\"瓦\"],[12130,1,\"甘\"],[12131,1,\"生\"],[12132,1,\"用\"],[12133,1,\"田\"],[12134,1,\"疋\"],[12135,1,\"疒\"],[12136,1,\"癶\"],[12137,1,\"白\"],[12138,1,\"皮\"],[12139,1,\"皿\"],[12140,1,\"目\"],[12141,1,\"矛\"],[12142,1,\"矢\"],[12143,1,\"石\"],[12144,1,\"示\"],[12145,1,\"禸\"],[12146,1,\"禾\"],[12147,1,\"穴\"],[12148,1,\"立\"],[12149,1,\"竹\"],[12150,1,\"米\"],[12151,1,\"糸\"],[12152,1,\"缶\"],[12153,1,\"网\"],[12154,1,\"羊\"],[12155,1,\"羽\"],[12156,1,\"老\"],[12157,1,\"而\"],[12158,1,\"耒\"],[12159,1,\"耳\"],[12160,1,\"聿\"],[12161,1,\"肉\"],[12162,1,\"臣\"],[12163,1,\"自\"],[12164,1,\"至\"],[12165,1,\"臼\"],[12166,1,\"舌\"],[12167,1,\"舛\"],[12168,1,\"舟\"],[12169,1,\"艮\"],[12170,1,\"色\"],[12171,1,\"艸\"],[12172,1,\"虍\"],[12173,1,\"虫\"],[12174,1,\"血\"],[12175,1,\"行\"],[12176,1,\"衣\"],[12177,1,\"襾\"],[12178,1,\"見\"],[12179,1,\"角\"],[12180,1,\"言\"],[12181,1,\"谷\"],[12182,1,\"豆\"],[12183,1,\"豕\"],[12184,1,\"豸\"],[12185,1,\"貝\"],[12186,1,\"赤\"],[12187,1,\"走\"],[12188,1,\"足\"],[12189,1,\"身\"],[12190,1,\"車\"],[12191,1,\"辛\"],[12192,1,\"辰\"],[12193,1,\"辵\"],[12194,1,\"邑\"],[12195,1,\"酉\"],[12196,1,\"釆\"],[12197,1,\"里\"],[12198,1,\"金\"],[12199,1,\"長\"],[12200,1,\"門\"],[12201,1,\"阜\"],[12202,1,\"隶\"],[12203,1,\"隹\"],[12204,1,\"雨\"],[12205,1,\"靑\"],[12206,1,\"非\"],[12207,1,\"面\"],[12208,1,\"革\"],[12209,1,\"韋\"],[12210,1,\"韭\"],[12211,1,\"音\"],[12212,1,\"頁\"],[12213,1,\"風\"],[12214,1,\"飛\"],[12215,1,\"食\"],[12216,1,\"首\"],[12217,1,\"香\"],[12218,1,\"馬\"],[12219,1,\"骨\"],[12220,1,\"高\"],[12221,1,\"髟\"],[12222,1,\"鬥\"],[12223,1,\"鬯\"],[12224,1,\"鬲\"],[12225,1,\"鬼\"],[12226,1,\"魚\"],[12227,1,\"鳥\"],[12228,1,\"鹵\"],[12229,1,\"鹿\"],[12230,1,\"麥\"],[12231,1,\"麻\"],[12232,1,\"黃\"],[12233,1,\"黍\"],[12234,1,\"黑\"],[12235,1,\"黹\"],[12236,1,\"黽\"],[12237,1,\"鼎\"],[12238,1,\"鼓\"],[12239,1,\"鼠\"],[12240,1,\"鼻\"],[12241,1,\"齊\"],[12242,1,\"齒\"],[12243,1,\"龍\"],[12244,1,\"龜\"],[12245,1,\"龠\"],[[12246,12271],3],[[12272,12283],3],[[12284,12287],3],[12288,5,\" \"],[12289,2],[12290,1,\".\"],[[12291,12292],2],[[12293,12295],2],[[12296,12329],2],[[12330,12333],2],[[12334,12341],2],[12342,1,\"〒\"],[12343,2],[12344,1,\"十\"],[12345,1,\"卄\"],[12346,1,\"卅\"],[12347,2],[12348,2],[12349,2],[12350,2],[12351,2],[12352,3],[[12353,12436],2],[[12437,12438],2],[[12439,12440],3],[[12441,12442],2],[12443,5,\" ゙\"],[12444,5,\" ゚\"],[[12445,12446],2],[12447,1,\"より\"],[12448,2],[[12449,12542],2],[12543,1,\"コト\"],[[12544,12548],3],[[12549,12588],2],[12589,2],[12590,2],[12591,2],[12592,3],[12593,1,\"ᄀ\"],[12594,1,\"ᄁ\"],[12595,1,\"ᆪ\"],[12596,1,\"ᄂ\"],[12597,1,\"ᆬ\"],[12598,1,\"ᆭ\"],[12599,1,\"ᄃ\"],[12600,1,\"ᄄ\"],[12601,1,\"ᄅ\"],[12602,1,\"ᆰ\"],[12603,1,\"ᆱ\"],[12604,1,\"ᆲ\"],[12605,1,\"ᆳ\"],[12606,1,\"ᆴ\"],[12607,1,\"ᆵ\"],[12608,1,\"ᄚ\"],[12609,1,\"ᄆ\"],[12610,1,\"ᄇ\"],[12611,1,\"ᄈ\"],[12612,1,\"ᄡ\"],[12613,1,\"ᄉ\"],[12614,1,\"ᄊ\"],[12615,1,\"ᄋ\"],[12616,1,\"ᄌ\"],[12617,1,\"ᄍ\"],[12618,1,\"ᄎ\"],[12619,1,\"ᄏ\"],[12620,1,\"ᄐ\"],[12621,1,\"ᄑ\"],[12622,1,\"ᄒ\"],[12623,1,\"ᅡ\"],[12624,1,\"ᅢ\"],[12625,1,\"ᅣ\"],[12626,1,\"ᅤ\"],[12627,1,\"ᅥ\"],[12628,1,\"ᅦ\"],[12629,1,\"ᅧ\"],[12630,1,\"ᅨ\"],[12631,1,\"ᅩ\"],[12632,1,\"ᅪ\"],[12633,1,\"ᅫ\"],[12634,1,\"ᅬ\"],[12635,1,\"ᅭ\"],[12636,1,\"ᅮ\"],[12637,1,\"ᅯ\"],[12638,1,\"ᅰ\"],[12639,1,\"ᅱ\"],[12640,1,\"ᅲ\"],[12641,1,\"ᅳ\"],[12642,1,\"ᅴ\"],[12643,1,\"ᅵ\"],[12644,3],[12645,1,\"ᄔ\"],[12646,1,\"ᄕ\"],[12647,1,\"ᇇ\"],[12648,1,\"ᇈ\"],[12649,1,\"ᇌ\"],[12650,1,\"ᇎ\"],[12651,1,\"ᇓ\"],[12652,1,\"ᇗ\"],[12653,1,\"ᇙ\"],[12654,1,\"ᄜ\"],[12655,1,\"ᇝ\"],[12656,1,\"ᇟ\"],[12657,1,\"ᄝ\"],[12658,1,\"ᄞ\"],[12659,1,\"ᄠ\"],[12660,1,\"ᄢ\"],[12661,1,\"ᄣ\"],[12662,1,\"ᄧ\"],[12663,1,\"ᄩ\"],[12664,1,\"ᄫ\"],[12665,1,\"ᄬ\"],[12666,1,\"ᄭ\"],[12667,1,\"ᄮ\"],[12668,1,\"ᄯ\"],[12669,1,\"ᄲ\"],[12670,1,\"ᄶ\"],[12671,1,\"ᅀ\"],[12672,1,\"ᅇ\"],[12673,1,\"ᅌ\"],[12674,1,\"ᇱ\"],[12675,1,\"ᇲ\"],[12676,1,\"ᅗ\"],[12677,1,\"ᅘ\"],[12678,1,\"ᅙ\"],[12679,1,\"ᆄ\"],[12680,1,\"ᆅ\"],[12681,1,\"ᆈ\"],[12682,1,\"ᆑ\"],[12683,1,\"ᆒ\"],[12684,1,\"ᆔ\"],[12685,1,\"ᆞ\"],[12686,1,\"ᆡ\"],[12687,3],[[12688,12689],2],[12690,1,\"一\"],[12691,1,\"二\"],[12692,1,\"三\"],[12693,1,\"四\"],[12694,1,\"上\"],[12695,1,\"中\"],[12696,1,\"下\"],[12697,1,\"甲\"],[12698,1,\"乙\"],[12699,1,\"丙\"],[12700,1,\"丁\"],[12701,1,\"天\"],[12702,1,\"地\"],[12703,1,\"人\"],[[12704,12727],2],[[12728,12730],2],[[12731,12735],2],[[12736,12751],2],[[12752,12771],2],[[12772,12782],3],[12783,3],[[12784,12799],2],[12800,5,\"(ᄀ)\"],[12801,5,\"(ᄂ)\"],[12802,5,\"(ᄃ)\"],[12803,5,\"(ᄅ)\"],[12804,5,\"(ᄆ)\"],[12805,5,\"(ᄇ)\"],[12806,5,\"(ᄉ)\"],[12807,5,\"(ᄋ)\"],[12808,5,\"(ᄌ)\"],[12809,5,\"(ᄎ)\"],[12810,5,\"(ᄏ)\"],[12811,5,\"(ᄐ)\"],[12812,5,\"(ᄑ)\"],[12813,5,\"(ᄒ)\"],[12814,5,\"(가)\"],[12815,5,\"(나)\"],[12816,5,\"(다)\"],[12817,5,\"(라)\"],[12818,5,\"(마)\"],[12819,5,\"(바)\"],[12820,5,\"(사)\"],[12821,5,\"(아)\"],[12822,5,\"(자)\"],[12823,5,\"(차)\"],[12824,5,\"(카)\"],[12825,5,\"(타)\"],[12826,5,\"(파)\"],[12827,5,\"(하)\"],[12828,5,\"(주)\"],[12829,5,\"(오전)\"],[12830,5,\"(오후)\"],[12831,3],[12832,5,\"(一)\"],[12833,5,\"(二)\"],[12834,5,\"(三)\"],[12835,5,\"(四)\"],[12836,5,\"(五)\"],[12837,5,\"(六)\"],[12838,5,\"(七)\"],[12839,5,\"(八)\"],[12840,5,\"(九)\"],[12841,5,\"(十)\"],[12842,5,\"(月)\"],[12843,5,\"(火)\"],[12844,5,\"(水)\"],[12845,5,\"(木)\"],[12846,5,\"(金)\"],[12847,5,\"(土)\"],[12848,5,\"(日)\"],[12849,5,\"(株)\"],[12850,5,\"(有)\"],[12851,5,\"(社)\"],[12852,5,\"(名)\"],[12853,5,\"(特)\"],[12854,5,\"(財)\"],[12855,5,\"(祝)\"],[12856,5,\"(労)\"],[12857,5,\"(代)\"],[12858,5,\"(呼)\"],[12859,5,\"(学)\"],[12860,5,\"(監)\"],[12861,5,\"(企)\"],[12862,5,\"(資)\"],[12863,5,\"(協)\"],[12864,5,\"(祭)\"],[12865,5,\"(休)\"],[12866,5,\"(自)\"],[12867,5,\"(至)\"],[12868,1,\"問\"],[12869,1,\"幼\"],[12870,1,\"文\"],[12871,1,\"箏\"],[[12872,12879],2],[12880,1,\"pte\"],[12881,1,\"21\"],[12882,1,\"22\"],[12883,1,\"23\"],[12884,1,\"24\"],[12885,1,\"25\"],[12886,1,\"26\"],[12887,1,\"27\"],[12888,1,\"28\"],[12889,1,\"29\"],[12890,1,\"30\"],[12891,1,\"31\"],[12892,1,\"32\"],[12893,1,\"33\"],[12894,1,\"34\"],[12895,1,\"35\"],[12896,1,\"ᄀ\"],[12897,1,\"ᄂ\"],[12898,1,\"ᄃ\"],[12899,1,\"ᄅ\"],[12900,1,\"ᄆ\"],[12901,1,\"ᄇ\"],[12902,1,\"ᄉ\"],[12903,1,\"ᄋ\"],[12904,1,\"ᄌ\"],[12905,1,\"ᄎ\"],[12906,1,\"ᄏ\"],[12907,1,\"ᄐ\"],[12908,1,\"ᄑ\"],[12909,1,\"ᄒ\"],[12910,1,\"가\"],[12911,1,\"나\"],[12912,1,\"다\"],[12913,1,\"라\"],[12914,1,\"마\"],[12915,1,\"바\"],[12916,1,\"사\"],[12917,1,\"아\"],[12918,1,\"자\"],[12919,1,\"차\"],[12920,1,\"카\"],[12921,1,\"타\"],[12922,1,\"파\"],[12923,1,\"하\"],[12924,1,\"참고\"],[12925,1,\"주의\"],[12926,1,\"우\"],[12927,2],[12928,1,\"一\"],[12929,1,\"二\"],[12930,1,\"三\"],[12931,1,\"四\"],[12932,1,\"五\"],[12933,1,\"六\"],[12934,1,\"七\"],[12935,1,\"八\"],[12936,1,\"九\"],[12937,1,\"十\"],[12938,1,\"月\"],[12939,1,\"火\"],[12940,1,\"水\"],[12941,1,\"木\"],[12942,1,\"金\"],[12943,1,\"土\"],[12944,1,\"日\"],[12945,1,\"株\"],[12946,1,\"有\"],[12947,1,\"社\"],[12948,1,\"名\"],[12949,1,\"特\"],[12950,1,\"財\"],[12951,1,\"祝\"],[12952,1,\"労\"],[12953,1,\"秘\"],[12954,1,\"男\"],[12955,1,\"女\"],[12956,1,\"適\"],[12957,1,\"優\"],[12958,1,\"印\"],[12959,1,\"注\"],[12960,1,\"項\"],[12961,1,\"休\"],[12962,1,\"写\"],[12963,1,\"正\"],[12964,1,\"上\"],[12965,1,\"中\"],[12966,1,\"下\"],[12967,1,\"左\"],[12968,1,\"右\"],[12969,1,\"医\"],[12970,1,\"宗\"],[12971,1,\"学\"],[12972,1,\"監\"],[12973,1,\"企\"],[12974,1,\"資\"],[12975,1,\"協\"],[12976,1,\"夜\"],[12977,1,\"36\"],[12978,1,\"37\"],[12979,1,\"38\"],[12980,1,\"39\"],[12981,1,\"40\"],[12982,1,\"41\"],[12983,1,\"42\"],[12984,1,\"43\"],[12985,1,\"44\"],[12986,1,\"45\"],[12987,1,\"46\"],[12988,1,\"47\"],[12989,1,\"48\"],[12990,1,\"49\"],[12991,1,\"50\"],[12992,1,\"1月\"],[12993,1,\"2月\"],[12994,1,\"3月\"],[12995,1,\"4月\"],[12996,1,\"5月\"],[12997,1,\"6月\"],[12998,1,\"7月\"],[12999,1,\"8月\"],[13000,1,\"9月\"],[13001,1,\"10月\"],[13002,1,\"11月\"],[13003,1,\"12月\"],[13004,1,\"hg\"],[13005,1,\"erg\"],[13006,1,\"ev\"],[13007,1,\"ltd\"],[13008,1,\"ア\"],[13009,1,\"イ\"],[13010,1,\"ウ\"],[13011,1,\"エ\"],[13012,1,\"オ\"],[13013,1,\"カ\"],[13014,1,\"キ\"],[13015,1,\"ク\"],[13016,1,\"ケ\"],[13017,1,\"コ\"],[13018,1,\"サ\"],[13019,1,\"シ\"],[13020,1,\"ス\"],[13021,1,\"セ\"],[13022,1,\"ソ\"],[13023,1,\"タ\"],[13024,1,\"チ\"],[13025,1,\"ツ\"],[13026,1,\"テ\"],[13027,1,\"ト\"],[13028,1,\"ナ\"],[13029,1,\"ニ\"],[13030,1,\"ヌ\"],[13031,1,\"ネ\"],[13032,1,\"ノ\"],[13033,1,\"ハ\"],[13034,1,\"ヒ\"],[13035,1,\"フ\"],[13036,1,\"ヘ\"],[13037,1,\"ホ\"],[13038,1,\"マ\"],[13039,1,\"ミ\"],[13040,1,\"ム\"],[13041,1,\"メ\"],[13042,1,\"モ\"],[13043,1,\"ヤ\"],[13044,1,\"ユ\"],[13045,1,\"ヨ\"],[13046,1,\"ラ\"],[13047,1,\"リ\"],[13048,1,\"ル\"],[13049,1,\"レ\"],[13050,1,\"ロ\"],[13051,1,\"ワ\"],[13052,1,\"ヰ\"],[13053,1,\"ヱ\"],[13054,1,\"ヲ\"],[13055,1,\"令和\"],[13056,1,\"アパート\"],[13057,1,\"アルファ\"],[13058,1,\"アンペア\"],[13059,1,\"アール\"],[13060,1,\"イニング\"],[13061,1,\"インチ\"],[13062,1,\"ウォン\"],[13063,1,\"エスクード\"],[13064,1,\"エーカー\"],[13065,1,\"オンス\"],[13066,1,\"オーム\"],[13067,1,\"カイリ\"],[13068,1,\"カラット\"],[13069,1,\"カロリー\"],[13070,1,\"ガロン\"],[13071,1,\"ガンマ\"],[13072,1,\"ギガ\"],[13073,1,\"ギニー\"],[13074,1,\"キュリー\"],[13075,1,\"ギルダー\"],[13076,1,\"キロ\"],[13077,1,\"キログラム\"],[13078,1,\"キロメートル\"],[13079,1,\"キロワット\"],[13080,1,\"グラム\"],[13081,1,\"グラムトン\"],[13082,1,\"クルゼイロ\"],[13083,1,\"クローネ\"],[13084,1,\"ケース\"],[13085,1,\"コルナ\"],[13086,1,\"コーポ\"],[13087,1,\"サイクル\"],[13088,1,\"サンチーム\"],[13089,1,\"シリング\"],[13090,1,\"センチ\"],[13091,1,\"セント\"],[13092,1,\"ダース\"],[13093,1,\"デシ\"],[13094,1,\"ドル\"],[13095,1,\"トン\"],[13096,1,\"ナノ\"],[13097,1,\"ノット\"],[13098,1,\"ハイツ\"],[13099,1,\"パーセント\"],[13100,1,\"パーツ\"],[13101,1,\"バーレル\"],[13102,1,\"ピアストル\"],[13103,1,\"ピクル\"],[13104,1,\"ピコ\"],[13105,1,\"ビル\"],[13106,1,\"ファラッド\"],[13107,1,\"フィート\"],[13108,1,\"ブッシェル\"],[13109,1,\"フラン\"],[13110,1,\"ヘクタール\"],[13111,1,\"ペソ\"],[13112,1,\"ペニヒ\"],[13113,1,\"ヘルツ\"],[13114,1,\"ペンス\"],[13115,1,\"ページ\"],[13116,1,\"ベータ\"],[13117,1,\"ポイント\"],[13118,1,\"ボルト\"],[13119,1,\"ホン\"],[13120,1,\"ポンド\"],[13121,1,\"ホール\"],[13122,1,\"ホーン\"],[13123,1,\"マイクロ\"],[13124,1,\"マイル\"],[13125,1,\"マッハ\"],[13126,1,\"マルク\"],[13127,1,\"マンション\"],[13128,1,\"ミクロン\"],[13129,1,\"ミリ\"],[13130,1,\"ミリバール\"],[13131,1,\"メガ\"],[13132,1,\"メガトン\"],[13133,1,\"メートル\"],[13134,1,\"ヤード\"],[13135,1,\"ヤール\"],[13136,1,\"ユアン\"],[13137,1,\"リットル\"],[13138,1,\"リラ\"],[13139,1,\"ルピー\"],[13140,1,\"ルーブル\"],[13141,1,\"レム\"],[13142,1,\"レントゲン\"],[13143,1,\"ワット\"],[13144,1,\"0点\"],[13145,1,\"1点\"],[13146,1,\"2点\"],[13147,1,\"3点\"],[13148,1,\"4点\"],[13149,1,\"5点\"],[13150,1,\"6点\"],[13151,1,\"7点\"],[13152,1,\"8点\"],[13153,1,\"9点\"],[13154,1,\"10点\"],[13155,1,\"11点\"],[13156,1,\"12点\"],[13157,1,\"13点\"],[13158,1,\"14点\"],[13159,1,\"15点\"],[13160,1,\"16点\"],[13161,1,\"17点\"],[13162,1,\"18点\"],[13163,1,\"19点\"],[13164,1,\"20点\"],[13165,1,\"21点\"],[13166,1,\"22点\"],[13167,1,\"23点\"],[13168,1,\"24点\"],[13169,1,\"hpa\"],[13170,1,\"da\"],[13171,1,\"au\"],[13172,1,\"bar\"],[13173,1,\"ov\"],[13174,1,\"pc\"],[13175,1,\"dm\"],[13176,1,\"dm2\"],[13177,1,\"dm3\"],[13178,1,\"iu\"],[13179,1,\"平成\"],[13180,1,\"昭和\"],[13181,1,\"大正\"],[13182,1,\"明治\"],[13183,1,\"株式会社\"],[13184,1,\"pa\"],[13185,1,\"na\"],[13186,1,\"μa\"],[13187,1,\"ma\"],[13188,1,\"ka\"],[13189,1,\"kb\"],[13190,1,\"mb\"],[13191,1,\"gb\"],[13192,1,\"cal\"],[13193,1,\"kcal\"],[13194,1,\"pf\"],[13195,1,\"nf\"],[13196,1,\"μf\"],[13197,1,\"μg\"],[13198,1,\"mg\"],[13199,1,\"kg\"],[13200,1,\"hz\"],[13201,1,\"khz\"],[13202,1,\"mhz\"],[13203,1,\"ghz\"],[13204,1,\"thz\"],[13205,1,\"μl\"],[13206,1,\"ml\"],[13207,1,\"dl\"],[13208,1,\"kl\"],[13209,1,\"fm\"],[13210,1,\"nm\"],[13211,1,\"μm\"],[13212,1,\"mm\"],[13213,1,\"cm\"],[13214,1,\"km\"],[13215,1,\"mm2\"],[13216,1,\"cm2\"],[13217,1,\"m2\"],[13218,1,\"km2\"],[13219,1,\"mm3\"],[13220,1,\"cm3\"],[13221,1,\"m3\"],[13222,1,\"km3\"],[13223,1,\"m∕s\"],[13224,1,\"m∕s2\"],[13225,1,\"pa\"],[13226,1,\"kpa\"],[13227,1,\"mpa\"],[13228,1,\"gpa\"],[13229,1,\"rad\"],[13230,1,\"rad∕s\"],[13231,1,\"rad∕s2\"],[13232,1,\"ps\"],[13233,1,\"ns\"],[13234,1,\"μs\"],[13235,1,\"ms\"],[13236,1,\"pv\"],[13237,1,\"nv\"],[13238,1,\"μv\"],[13239,1,\"mv\"],[13240,1,\"kv\"],[13241,1,\"mv\"],[13242,1,\"pw\"],[13243,1,\"nw\"],[13244,1,\"μw\"],[13245,1,\"mw\"],[13246,1,\"kw\"],[13247,1,\"mw\"],[13248,1,\"kω\"],[13249,1,\"mω\"],[13250,3],[13251,1,\"bq\"],[13252,1,\"cc\"],[13253,1,\"cd\"],[13254,1,\"c∕kg\"],[13255,3],[13256,1,\"db\"],[13257,1,\"gy\"],[13258,1,\"ha\"],[13259,1,\"hp\"],[13260,1,\"in\"],[13261,1,\"kk\"],[13262,1,\"km\"],[13263,1,\"kt\"],[13264,1,\"lm\"],[13265,1,\"ln\"],[13266,1,\"log\"],[13267,1,\"lx\"],[13268,1,\"mb\"],[13269,1,\"mil\"],[13270,1,\"mol\"],[13271,1,\"ph\"],[13272,3],[13273,1,\"ppm\"],[13274,1,\"pr\"],[13275,1,\"sr\"],[13276,1,\"sv\"],[13277,1,\"wb\"],[13278,1,\"v∕m\"],[13279,1,\"a∕m\"],[13280,1,\"1日\"],[13281,1,\"2日\"],[13282,1,\"3日\"],[13283,1,\"4日\"],[13284,1,\"5日\"],[13285,1,\"6日\"],[13286,1,\"7日\"],[13287,1,\"8日\"],[13288,1,\"9日\"],[13289,1,\"10日\"],[13290,1,\"11日\"],[13291,1,\"12日\"],[13292,1,\"13日\"],[13293,1,\"14日\"],[13294,1,\"15日\"],[13295,1,\"16日\"],[13296,1,\"17日\"],[13297,1,\"18日\"],[13298,1,\"19日\"],[13299,1,\"20日\"],[13300,1,\"21日\"],[13301,1,\"22日\"],[13302,1,\"23日\"],[13303,1,\"24日\"],[13304,1,\"25日\"],[13305,1,\"26日\"],[13306,1,\"27日\"],[13307,1,\"28日\"],[13308,1,\"29日\"],[13309,1,\"30日\"],[13310,1,\"31日\"],[13311,1,\"gal\"],[[13312,19893],2],[[19894,19903],2],[[19904,19967],2],[[19968,40869],2],[[40870,40891],2],[[40892,40899],2],[[40900,40907],2],[40908,2],[[40909,40917],2],[[40918,40938],2],[[40939,40943],2],[[40944,40956],2],[[40957,40959],2],[[40960,42124],2],[[42125,42127],3],[[42128,42145],2],[[42146,42147],2],[[42148,42163],2],[42164,2],[[42165,42176],2],[42177,2],[[42178,42180],2],[42181,2],[42182,2],[[42183,42191],3],[[42192,42237],2],[[42238,42239],2],[[42240,42508],2],[[42509,42511],2],[[42512,42539],2],[[42540,42559],3],[42560,1,\"ꙁ\"],[42561,2],[42562,1,\"ꙃ\"],[42563,2],[42564,1,\"ꙅ\"],[42565,2],[42566,1,\"ꙇ\"],[42567,2],[42568,1,\"ꙉ\"],[42569,2],[42570,1,\"ꙋ\"],[42571,2],[42572,1,\"ꙍ\"],[42573,2],[42574,1,\"ꙏ\"],[42575,2],[42576,1,\"ꙑ\"],[42577,2],[42578,1,\"ꙓ\"],[42579,2],[42580,1,\"ꙕ\"],[42581,2],[42582,1,\"ꙗ\"],[42583,2],[42584,1,\"ꙙ\"],[42585,2],[42586,1,\"ꙛ\"],[42587,2],[42588,1,\"ꙝ\"],[42589,2],[42590,1,\"ꙟ\"],[42591,2],[42592,1,\"ꙡ\"],[42593,2],[42594,1,\"ꙣ\"],[42595,2],[42596,1,\"ꙥ\"],[42597,2],[42598,1,\"ꙧ\"],[42599,2],[42600,1,\"ꙩ\"],[42601,2],[42602,1,\"ꙫ\"],[42603,2],[42604,1,\"ꙭ\"],[[42605,42607],2],[[42608,42611],2],[[42612,42619],2],[[42620,42621],2],[42622,2],[42623,2],[42624,1,\"ꚁ\"],[42625,2],[42626,1,\"ꚃ\"],[42627,2],[42628,1,\"ꚅ\"],[42629,2],[42630,1,\"ꚇ\"],[42631,2],[42632,1,\"ꚉ\"],[42633,2],[42634,1,\"ꚋ\"],[42635,2],[42636,1,\"ꚍ\"],[42637,2],[42638,1,\"ꚏ\"],[42639,2],[42640,1,\"ꚑ\"],[42641,2],[42642,1,\"ꚓ\"],[42643,2],[42644,1,\"ꚕ\"],[42645,2],[42646,1,\"ꚗ\"],[42647,2],[42648,1,\"ꚙ\"],[42649,2],[42650,1,\"ꚛ\"],[42651,2],[42652,1,\"ъ\"],[42653,1,\"ь\"],[42654,2],[42655,2],[[42656,42725],2],[[42726,42735],2],[[42736,42737],2],[[42738,42743],2],[[42744,42751],3],[[42752,42774],2],[[42775,42778],2],[[42779,42783],2],[[42784,42785],2],[42786,1,\"ꜣ\"],[42787,2],[42788,1,\"ꜥ\"],[42789,2],[42790,1,\"ꜧ\"],[42791,2],[42792,1,\"ꜩ\"],[42793,2],[42794,1,\"ꜫ\"],[42795,2],[42796,1,\"ꜭ\"],[42797,2],[42798,1,\"ꜯ\"],[[42799,42801],2],[42802,1,\"ꜳ\"],[42803,2],[42804,1,\"ꜵ\"],[42805,2],[42806,1,\"ꜷ\"],[42807,2],[42808,1,\"ꜹ\"],[42809,2],[42810,1,\"ꜻ\"],[42811,2],[42812,1,\"ꜽ\"],[42813,2],[42814,1,\"ꜿ\"],[42815,2],[42816,1,\"ꝁ\"],[42817,2],[42818,1,\"ꝃ\"],[42819,2],[42820,1,\"ꝅ\"],[42821,2],[42822,1,\"ꝇ\"],[42823,2],[42824,1,\"ꝉ\"],[42825,2],[42826,1,\"ꝋ\"],[42827,2],[42828,1,\"ꝍ\"],[42829,2],[42830,1,\"ꝏ\"],[42831,2],[42832,1,\"ꝑ\"],[42833,2],[42834,1,\"ꝓ\"],[42835,2],[42836,1,\"ꝕ\"],[42837,2],[42838,1,\"ꝗ\"],[42839,2],[42840,1,\"ꝙ\"],[42841,2],[42842,1,\"ꝛ\"],[42843,2],[42844,1,\"ꝝ\"],[42845,2],[42846,1,\"ꝟ\"],[42847,2],[42848,1,\"ꝡ\"],[42849,2],[42850,1,\"ꝣ\"],[42851,2],[42852,1,\"ꝥ\"],[42853,2],[42854,1,\"ꝧ\"],[42855,2],[42856,1,\"ꝩ\"],[42857,2],[42858,1,\"ꝫ\"],[42859,2],[42860,1,\"ꝭ\"],[42861,2],[42862,1,\"ꝯ\"],[42863,2],[42864,1,\"ꝯ\"],[[42865,42872],2],[42873,1,\"ꝺ\"],[42874,2],[42875,1,\"ꝼ\"],[42876,2],[42877,1,\"ᵹ\"],[42878,1,\"ꝿ\"],[42879,2],[42880,1,\"ꞁ\"],[42881,2],[42882,1,\"ꞃ\"],[42883,2],[42884,1,\"ꞅ\"],[42885,2],[42886,1,\"ꞇ\"],[[42887,42888],2],[[42889,42890],2],[42891,1,\"ꞌ\"],[42892,2],[42893,1,\"ɥ\"],[42894,2],[42895,2],[42896,1,\"ꞑ\"],[42897,2],[42898,1,\"ꞓ\"],[42899,2],[[42900,42901],2],[42902,1,\"ꞗ\"],[42903,2],[42904,1,\"ꞙ\"],[42905,2],[42906,1,\"ꞛ\"],[42907,2],[42908,1,\"ꞝ\"],[42909,2],[42910,1,\"ꞟ\"],[42911,2],[42912,1,\"ꞡ\"],[42913,2],[42914,1,\"ꞣ\"],[42915,2],[42916,1,\"ꞥ\"],[42917,2],[42918,1,\"ꞧ\"],[42919,2],[42920,1,\"ꞩ\"],[42921,2],[42922,1,\"ɦ\"],[42923,1,\"ɜ\"],[42924,1,\"ɡ\"],[42925,1,\"ɬ\"],[42926,1,\"ɪ\"],[42927,2],[42928,1,\"ʞ\"],[42929,1,\"ʇ\"],[42930,1,\"ʝ\"],[42931,1,\"ꭓ\"],[42932,1,\"ꞵ\"],[42933,2],[42934,1,\"ꞷ\"],[42935,2],[42936,1,\"ꞹ\"],[42937,2],[42938,1,\"ꞻ\"],[42939,2],[42940,1,\"ꞽ\"],[42941,2],[42942,1,\"ꞿ\"],[42943,2],[42944,1,\"ꟁ\"],[42945,2],[42946,1,\"ꟃ\"],[42947,2],[42948,1,\"ꞔ\"],[42949,1,\"ʂ\"],[42950,1,\"ᶎ\"],[42951,1,\"ꟈ\"],[42952,2],[42953,1,\"ꟊ\"],[42954,2],[[42955,42959],3],[42960,1,\"ꟑ\"],[42961,2],[42962,3],[42963,2],[42964,3],[42965,2],[42966,1,\"ꟗ\"],[42967,2],[42968,1,\"ꟙ\"],[42969,2],[[42970,42993],3],[42994,1,\"c\"],[42995,1,\"f\"],[42996,1,\"q\"],[42997,1,\"ꟶ\"],[42998,2],[42999,2],[43000,1,\"ħ\"],[43001,1,\"œ\"],[43002,2],[[43003,43007],2],[[43008,43047],2],[[43048,43051],2],[43052,2],[[43053,43055],3],[[43056,43065],2],[[43066,43071],3],[[43072,43123],2],[[43124,43127],2],[[43128,43135],3],[[43136,43204],2],[43205,2],[[43206,43213],3],[[43214,43215],2],[[43216,43225],2],[[43226,43231],3],[[43232,43255],2],[[43256,43258],2],[43259,2],[43260,2],[43261,2],[[43262,43263],2],[[43264,43309],2],[[43310,43311],2],[[43312,43347],2],[[43348,43358],3],[43359,2],[[43360,43388],2],[[43389,43391],3],[[43392,43456],2],[[43457,43469],2],[43470,3],[[43471,43481],2],[[43482,43485],3],[[43486,43487],2],[[43488,43518],2],[43519,3],[[43520,43574],2],[[43575,43583],3],[[43584,43597],2],[[43598,43599],3],[[43600,43609],2],[[43610,43611],3],[[43612,43615],2],[[43616,43638],2],[[43639,43641],2],[[43642,43643],2],[[43644,43647],2],[[43648,43714],2],[[43715,43738],3],[[43739,43741],2],[[43742,43743],2],[[43744,43759],2],[[43760,43761],2],[[43762,43766],2],[[43767,43776],3],[[43777,43782],2],[[43783,43784],3],[[43785,43790],2],[[43791,43792],3],[[43793,43798],2],[[43799,43807],3],[[43808,43814],2],[43815,3],[[43816,43822],2],[43823,3],[[43824,43866],2],[43867,2],[43868,1,\"ꜧ\"],[43869,1,\"ꬷ\"],[43870,1,\"ɫ\"],[43871,1,\"ꭒ\"],[[43872,43875],2],[[43876,43877],2],[[43878,43879],2],[43880,2],[43881,1,\"ʍ\"],[[43882,43883],2],[[43884,43887],3],[43888,1,\"Ꭰ\"],[43889,1,\"Ꭱ\"],[43890,1,\"Ꭲ\"],[43891,1,\"Ꭳ\"],[43892,1,\"Ꭴ\"],[43893,1,\"Ꭵ\"],[43894,1,\"Ꭶ\"],[43895,1,\"Ꭷ\"],[43896,1,\"Ꭸ\"],[43897,1,\"Ꭹ\"],[43898,1,\"Ꭺ\"],[43899,1,\"Ꭻ\"],[43900,1,\"Ꭼ\"],[43901,1,\"Ꭽ\"],[43902,1,\"Ꭾ\"],[43903,1,\"Ꭿ\"],[43904,1,\"Ꮀ\"],[43905,1,\"Ꮁ\"],[43906,1,\"Ꮂ\"],[43907,1,\"Ꮃ\"],[43908,1,\"Ꮄ\"],[43909,1,\"Ꮅ\"],[43910,1,\"Ꮆ\"],[43911,1,\"Ꮇ\"],[43912,1,\"Ꮈ\"],[43913,1,\"Ꮉ\"],[43914,1,\"Ꮊ\"],[43915,1,\"Ꮋ\"],[43916,1,\"Ꮌ\"],[43917,1,\"Ꮍ\"],[43918,1,\"Ꮎ\"],[43919,1,\"Ꮏ\"],[43920,1,\"Ꮐ\"],[43921,1,\"Ꮑ\"],[43922,1,\"Ꮒ\"],[43923,1,\"Ꮓ\"],[43924,1,\"Ꮔ\"],[43925,1,\"Ꮕ\"],[43926,1,\"Ꮖ\"],[43927,1,\"Ꮗ\"],[43928,1,\"Ꮘ\"],[43929,1,\"Ꮙ\"],[43930,1,\"Ꮚ\"],[43931,1,\"Ꮛ\"],[43932,1,\"Ꮜ\"],[43933,1,\"Ꮝ\"],[43934,1,\"Ꮞ\"],[43935,1,\"Ꮟ\"],[43936,1,\"Ꮠ\"],[43937,1,\"Ꮡ\"],[43938,1,\"Ꮢ\"],[43939,1,\"Ꮣ\"],[43940,1,\"Ꮤ\"],[43941,1,\"Ꮥ\"],[43942,1,\"Ꮦ\"],[43943,1,\"Ꮧ\"],[43944,1,\"Ꮨ\"],[43945,1,\"Ꮩ\"],[43946,1,\"Ꮪ\"],[43947,1,\"Ꮫ\"],[43948,1,\"Ꮬ\"],[43949,1,\"Ꮭ\"],[43950,1,\"Ꮮ\"],[43951,1,\"Ꮯ\"],[43952,1,\"Ꮰ\"],[43953,1,\"Ꮱ\"],[43954,1,\"Ꮲ\"],[43955,1,\"Ꮳ\"],[43956,1,\"Ꮴ\"],[43957,1,\"Ꮵ\"],[43958,1,\"Ꮶ\"],[43959,1,\"Ꮷ\"],[43960,1,\"Ꮸ\"],[43961,1,\"Ꮹ\"],[43962,1,\"Ꮺ\"],[43963,1,\"Ꮻ\"],[43964,1,\"Ꮼ\"],[43965,1,\"Ꮽ\"],[43966,1,\"Ꮾ\"],[43967,1,\"Ꮿ\"],[[43968,44010],2],[44011,2],[[44012,44013],2],[[44014,44015],3],[[44016,44025],2],[[44026,44031],3],[[44032,55203],2],[[55204,55215],3],[[55216,55238],2],[[55239,55242],3],[[55243,55291],2],[[55292,55295],3],[[55296,57343],3],[[57344,63743],3],[63744,1,\"豈\"],[63745,1,\"更\"],[63746,1,\"車\"],[63747,1,\"賈\"],[63748,1,\"滑\"],[63749,1,\"串\"],[63750,1,\"句\"],[[63751,63752],1,\"龜\"],[63753,1,\"契\"],[63754,1,\"金\"],[63755,1,\"喇\"],[63756,1,\"奈\"],[63757,1,\"懶\"],[63758,1,\"癩\"],[63759,1,\"羅\"],[63760,1,\"蘿\"],[63761,1,\"螺\"],[63762,1,\"裸\"],[63763,1,\"邏\"],[63764,1,\"樂\"],[63765,1,\"洛\"],[63766,1,\"烙\"],[63767,1,\"珞\"],[63768,1,\"落\"],[63769,1,\"酪\"],[63770,1,\"駱\"],[63771,1,\"亂\"],[63772,1,\"卵\"],[63773,1,\"欄\"],[63774,1,\"爛\"],[63775,1,\"蘭\"],[63776,1,\"鸞\"],[63777,1,\"嵐\"],[63778,1,\"濫\"],[63779,1,\"藍\"],[63780,1,\"襤\"],[63781,1,\"拉\"],[63782,1,\"臘\"],[63783,1,\"蠟\"],[63784,1,\"廊\"],[63785,1,\"朗\"],[63786,1,\"浪\"],[63787,1,\"狼\"],[63788,1,\"郎\"],[63789,1,\"來\"],[63790,1,\"冷\"],[63791,1,\"勞\"],[63792,1,\"擄\"],[63793,1,\"櫓\"],[63794,1,\"爐\"],[63795,1,\"盧\"],[63796,1,\"老\"],[63797,1,\"蘆\"],[63798,1,\"虜\"],[63799,1,\"路\"],[63800,1,\"露\"],[63801,1,\"魯\"],[63802,1,\"鷺\"],[63803,1,\"碌\"],[63804,1,\"祿\"],[63805,1,\"綠\"],[63806,1,\"菉\"],[63807,1,\"錄\"],[63808,1,\"鹿\"],[63809,1,\"論\"],[63810,1,\"壟\"],[63811,1,\"弄\"],[63812,1,\"籠\"],[63813,1,\"聾\"],[63814,1,\"牢\"],[63815,1,\"磊\"],[63816,1,\"賂\"],[63817,1,\"雷\"],[63818,1,\"壘\"],[63819,1,\"屢\"],[63820,1,\"樓\"],[63821,1,\"淚\"],[63822,1,\"漏\"],[63823,1,\"累\"],[63824,1,\"縷\"],[63825,1,\"陋\"],[63826,1,\"勒\"],[63827,1,\"肋\"],[63828,1,\"凜\"],[63829,1,\"凌\"],[63830,1,\"稜\"],[63831,1,\"綾\"],[63832,1,\"菱\"],[63833,1,\"陵\"],[63834,1,\"讀\"],[63835,1,\"拏\"],[63836,1,\"樂\"],[63837,1,\"諾\"],[63838,1,\"丹\"],[63839,1,\"寧\"],[63840,1,\"怒\"],[63841,1,\"率\"],[63842,1,\"異\"],[63843,1,\"北\"],[63844,1,\"磻\"],[63845,1,\"便\"],[63846,1,\"復\"],[63847,1,\"不\"],[63848,1,\"泌\"],[63849,1,\"數\"],[63850,1,\"索\"],[63851,1,\"參\"],[63852,1,\"塞\"],[63853,1,\"省\"],[63854,1,\"葉\"],[63855,1,\"說\"],[63856,1,\"殺\"],[63857,1,\"辰\"],[63858,1,\"沈\"],[63859,1,\"拾\"],[63860,1,\"若\"],[63861,1,\"掠\"],[63862,1,\"略\"],[63863,1,\"亮\"],[63864,1,\"兩\"],[63865,1,\"凉\"],[63866,1,\"梁\"],[63867,1,\"糧\"],[63868,1,\"良\"],[63869,1,\"諒\"],[63870,1,\"量\"],[63871,1,\"勵\"],[63872,1,\"呂\"],[63873,1,\"女\"],[63874,1,\"廬\"],[63875,1,\"旅\"],[63876,1,\"濾\"],[63877,1,\"礪\"],[63878,1,\"閭\"],[63879,1,\"驪\"],[63880,1,\"麗\"],[63881,1,\"黎\"],[63882,1,\"力\"],[63883,1,\"曆\"],[63884,1,\"歷\"],[63885,1,\"轢\"],[63886,1,\"年\"],[63887,1,\"憐\"],[63888,1,\"戀\"],[63889,1,\"撚\"],[63890,1,\"漣\"],[63891,1,\"煉\"],[63892,1,\"璉\"],[63893,1,\"秊\"],[63894,1,\"練\"],[63895,1,\"聯\"],[63896,1,\"輦\"],[63897,1,\"蓮\"],[63898,1,\"連\"],[63899,1,\"鍊\"],[63900,1,\"列\"],[63901,1,\"劣\"],[63902,1,\"咽\"],[63903,1,\"烈\"],[63904,1,\"裂\"],[63905,1,\"說\"],[63906,1,\"廉\"],[63907,1,\"念\"],[63908,1,\"捻\"],[63909,1,\"殮\"],[63910,1,\"簾\"],[63911,1,\"獵\"],[63912,1,\"令\"],[63913,1,\"囹\"],[63914,1,\"寧\"],[63915,1,\"嶺\"],[63916,1,\"怜\"],[63917,1,\"玲\"],[63918,1,\"瑩\"],[63919,1,\"羚\"],[63920,1,\"聆\"],[63921,1,\"鈴\"],[63922,1,\"零\"],[63923,1,\"靈\"],[63924,1,\"領\"],[63925,1,\"例\"],[63926,1,\"禮\"],[63927,1,\"醴\"],[63928,1,\"隸\"],[63929,1,\"惡\"],[63930,1,\"了\"],[63931,1,\"僚\"],[63932,1,\"寮\"],[63933,1,\"尿\"],[63934,1,\"料\"],[63935,1,\"樂\"],[63936,1,\"燎\"],[63937,1,\"療\"],[63938,1,\"蓼\"],[63939,1,\"遼\"],[63940,1,\"龍\"],[63941,1,\"暈\"],[63942,1,\"阮\"],[63943,1,\"劉\"],[63944,1,\"杻\"],[63945,1,\"柳\"],[63946,1,\"流\"],[63947,1,\"溜\"],[63948,1,\"琉\"],[63949,1,\"留\"],[63950,1,\"硫\"],[63951,1,\"紐\"],[63952,1,\"類\"],[63953,1,\"六\"],[63954,1,\"戮\"],[63955,1,\"陸\"],[63956,1,\"倫\"],[63957,1,\"崙\"],[63958,1,\"淪\"],[63959,1,\"輪\"],[63960,1,\"律\"],[63961,1,\"慄\"],[63962,1,\"栗\"],[63963,1,\"率\"],[63964,1,\"隆\"],[63965,1,\"利\"],[63966,1,\"吏\"],[63967,1,\"履\"],[63968,1,\"易\"],[63969,1,\"李\"],[63970,1,\"梨\"],[63971,1,\"泥\"],[63972,1,\"理\"],[63973,1,\"痢\"],[63974,1,\"罹\"],[63975,1,\"裏\"],[63976,1,\"裡\"],[63977,1,\"里\"],[63978,1,\"離\"],[63979,1,\"匿\"],[63980,1,\"溺\"],[63981,1,\"吝\"],[63982,1,\"燐\"],[63983,1,\"璘\"],[63984,1,\"藺\"],[63985,1,\"隣\"],[63986,1,\"鱗\"],[63987,1,\"麟\"],[63988,1,\"林\"],[63989,1,\"淋\"],[63990,1,\"臨\"],[63991,1,\"立\"],[63992,1,\"笠\"],[63993,1,\"粒\"],[63994,1,\"狀\"],[63995,1,\"炙\"],[63996,1,\"識\"],[63997,1,\"什\"],[63998,1,\"茶\"],[63999,1,\"刺\"],[64000,1,\"切\"],[64001,1,\"度\"],[64002,1,\"拓\"],[64003,1,\"糖\"],[64004,1,\"宅\"],[64005,1,\"洞\"],[64006,1,\"暴\"],[64007,1,\"輻\"],[64008,1,\"行\"],[64009,1,\"降\"],[64010,1,\"見\"],[64011,1,\"廓\"],[64012,1,\"兀\"],[64013,1,\"嗀\"],[[64014,64015],2],[64016,1,\"塚\"],[64017,2],[64018,1,\"晴\"],[[64019,64020],2],[64021,1,\"凞\"],[64022,1,\"猪\"],[64023,1,\"益\"],[64024,1,\"礼\"],[64025,1,\"神\"],[64026,1,\"祥\"],[64027,1,\"福\"],[64028,1,\"靖\"],[64029,1,\"精\"],[64030,1,\"羽\"],[64031,2],[64032,1,\"蘒\"],[64033,2],[64034,1,\"諸\"],[[64035,64036],2],[64037,1,\"逸\"],[64038,1,\"都\"],[[64039,64041],2],[64042,1,\"飯\"],[64043,1,\"飼\"],[64044,1,\"館\"],[64045,1,\"鶴\"],[64046,1,\"郞\"],[64047,1,\"隷\"],[64048,1,\"侮\"],[64049,1,\"僧\"],[64050,1,\"免\"],[64051,1,\"勉\"],[64052,1,\"勤\"],[64053,1,\"卑\"],[64054,1,\"喝\"],[64055,1,\"嘆\"],[64056,1,\"器\"],[64057,1,\"塀\"],[64058,1,\"墨\"],[64059,1,\"層\"],[64060,1,\"屮\"],[64061,1,\"悔\"],[64062,1,\"慨\"],[64063,1,\"憎\"],[64064,1,\"懲\"],[64065,1,\"敏\"],[64066,1,\"既\"],[64067,1,\"暑\"],[64068,1,\"梅\"],[64069,1,\"海\"],[64070,1,\"渚\"],[64071,1,\"漢\"],[64072,1,\"煮\"],[64073,1,\"爫\"],[64074,1,\"琢\"],[64075,1,\"碑\"],[64076,1,\"社\"],[64077,1,\"祉\"],[64078,1,\"祈\"],[64079,1,\"祐\"],[64080,1,\"祖\"],[64081,1,\"祝\"],[64082,1,\"禍\"],[64083,1,\"禎\"],[64084,1,\"穀\"],[64085,1,\"突\"],[64086,1,\"節\"],[64087,1,\"練\"],[64088,1,\"縉\"],[64089,1,\"繁\"],[64090,1,\"署\"],[64091,1,\"者\"],[64092,1,\"臭\"],[[64093,64094],1,\"艹\"],[64095,1,\"著\"],[64096,1,\"褐\"],[64097,1,\"視\"],[64098,1,\"謁\"],[64099,1,\"謹\"],[64100,1,\"賓\"],[64101,1,\"贈\"],[64102,1,\"辶\"],[64103,1,\"逸\"],[64104,1,\"難\"],[64105,1,\"響\"],[64106,1,\"頻\"],[64107,1,\"恵\"],[64108,1,\"𤋮\"],[64109,1,\"舘\"],[[64110,64111],3],[64112,1,\"並\"],[64113,1,\"况\"],[64114,1,\"全\"],[64115,1,\"侀\"],[64116,1,\"充\"],[64117,1,\"冀\"],[64118,1,\"勇\"],[64119,1,\"勺\"],[64120,1,\"喝\"],[64121,1,\"啕\"],[64122,1,\"喙\"],[64123,1,\"嗢\"],[64124,1,\"塚\"],[64125,1,\"墳\"],[64126,1,\"奄\"],[64127,1,\"奔\"],[64128,1,\"婢\"],[64129,1,\"嬨\"],[64130,1,\"廒\"],[64131,1,\"廙\"],[64132,1,\"彩\"],[64133,1,\"徭\"],[64134,1,\"惘\"],[64135,1,\"慎\"],[64136,1,\"愈\"],[64137,1,\"憎\"],[64138,1,\"慠\"],[64139,1,\"懲\"],[64140,1,\"戴\"],[64141,1,\"揄\"],[64142,1,\"搜\"],[64143,1,\"摒\"],[64144,1,\"敖\"],[64145,1,\"晴\"],[64146,1,\"朗\"],[64147,1,\"望\"],[64148,1,\"杖\"],[64149,1,\"歹\"],[64150,1,\"殺\"],[64151,1,\"流\"],[64152,1,\"滛\"],[64153,1,\"滋\"],[64154,1,\"漢\"],[64155,1,\"瀞\"],[64156,1,\"煮\"],[64157,1,\"瞧\"],[64158,1,\"爵\"],[64159,1,\"犯\"],[64160,1,\"猪\"],[64161,1,\"瑱\"],[64162,1,\"甆\"],[64163,1,\"画\"],[64164,1,\"瘝\"],[64165,1,\"瘟\"],[64166,1,\"益\"],[64167,1,\"盛\"],[64168,1,\"直\"],[64169,1,\"睊\"],[64170,1,\"着\"],[64171,1,\"磌\"],[64172,1,\"窱\"],[64173,1,\"節\"],[64174,1,\"类\"],[64175,1,\"絛\"],[64176,1,\"練\"],[64177,1,\"缾\"],[64178,1,\"者\"],[64179,1,\"荒\"],[64180,1,\"華\"],[64181,1,\"蝹\"],[64182,1,\"襁\"],[64183,1,\"覆\"],[64184,1,\"視\"],[64185,1,\"調\"],[64186,1,\"諸\"],[64187,1,\"請\"],[64188,1,\"謁\"],[64189,1,\"諾\"],[64190,1,\"諭\"],[64191,1,\"謹\"],[64192,1,\"變\"],[64193,1,\"贈\"],[64194,1,\"輸\"],[64195,1,\"遲\"],[64196,1,\"醙\"],[64197,1,\"鉶\"],[64198,1,\"陼\"],[64199,1,\"難\"],[64200,1,\"靖\"],[64201,1,\"韛\"],[64202,1,\"響\"],[64203,1,\"頋\"],[64204,1,\"頻\"],[64205,1,\"鬒\"],[64206,1,\"龜\"],[64207,1,\"𢡊\"],[64208,1,\"𢡄\"],[64209,1,\"𣏕\"],[64210,1,\"㮝\"],[64211,1,\"䀘\"],[64212,1,\"䀹\"],[64213,1,\"𥉉\"],[64214,1,\"𥳐\"],[64215,1,\"𧻓\"],[64216,1,\"齃\"],[64217,1,\"龎\"],[[64218,64255],3],[64256,1,\"ff\"],[64257,1,\"fi\"],[64258,1,\"fl\"],[64259,1,\"ffi\"],[64260,1,\"ffl\"],[[64261,64262],1,\"st\"],[[64263,64274],3],[64275,1,\"մն\"],[64276,1,\"մե\"],[64277,1,\"մի\"],[64278,1,\"վն\"],[64279,1,\"մխ\"],[[64280,64284],3],[64285,1,\"יִ\"],[64286,2],[64287,1,\"ײַ\"],[64288,1,\"ע\"],[64289,1,\"א\"],[64290,1,\"ד\"],[64291,1,\"ה\"],[64292,1,\"כ\"],[64293,1,\"ל\"],[64294,1,\"ם\"],[64295,1,\"ר\"],[64296,1,\"ת\"],[64297,5,\"+\"],[64298,1,\"שׁ\"],[64299,1,\"שׂ\"],[64300,1,\"שּׁ\"],[64301,1,\"שּׂ\"],[64302,1,\"אַ\"],[64303,1,\"אָ\"],[64304,1,\"אּ\"],[64305,1,\"בּ\"],[64306,1,\"גּ\"],[64307,1,\"דּ\"],[64308,1,\"הּ\"],[64309,1,\"וּ\"],[64310,1,\"זּ\"],[64311,3],[64312,1,\"טּ\"],[64313,1,\"יּ\"],[64314,1,\"ךּ\"],[64315,1,\"כּ\"],[64316,1,\"לּ\"],[64317,3],[64318,1,\"מּ\"],[64319,3],[64320,1,\"נּ\"],[64321,1,\"סּ\"],[64322,3],[64323,1,\"ףּ\"],[64324,1,\"פּ\"],[64325,3],[64326,1,\"צּ\"],[64327,1,\"קּ\"],[64328,1,\"רּ\"],[64329,1,\"שּ\"],[64330,1,\"תּ\"],[64331,1,\"וֹ\"],[64332,1,\"בֿ\"],[64333,1,\"כֿ\"],[64334,1,\"פֿ\"],[64335,1,\"אל\"],[[64336,64337],1,\"ٱ\"],[[64338,64341],1,\"ٻ\"],[[64342,64345],1,\"پ\"],[[64346,64349],1,\"ڀ\"],[[64350,64353],1,\"ٺ\"],[[64354,64357],1,\"ٿ\"],[[64358,64361],1,\"ٹ\"],[[64362,64365],1,\"ڤ\"],[[64366,64369],1,\"ڦ\"],[[64370,64373],1,\"ڄ\"],[[64374,64377],1,\"ڃ\"],[[64378,64381],1,\"چ\"],[[64382,64385],1,\"ڇ\"],[[64386,64387],1,\"ڍ\"],[[64388,64389],1,\"ڌ\"],[[64390,64391],1,\"ڎ\"],[[64392,64393],1,\"ڈ\"],[[64394,64395],1,\"ژ\"],[[64396,64397],1,\"ڑ\"],[[64398,64401],1,\"ک\"],[[64402,64405],1,\"گ\"],[[64406,64409],1,\"ڳ\"],[[64410,64413],1,\"ڱ\"],[[64414,64415],1,\"ں\"],[[64416,64419],1,\"ڻ\"],[[64420,64421],1,\"ۀ\"],[[64422,64425],1,\"ہ\"],[[64426,64429],1,\"ھ\"],[[64430,64431],1,\"ے\"],[[64432,64433],1,\"ۓ\"],[[64434,64449],2],[64450,2],[[64451,64466],3],[[64467,64470],1,\"ڭ\"],[[64471,64472],1,\"ۇ\"],[[64473,64474],1,\"ۆ\"],[[64475,64476],1,\"ۈ\"],[64477,1,\"ۇٴ\"],[[64478,64479],1,\"ۋ\"],[[64480,64481],1,\"ۅ\"],[[64482,64483],1,\"ۉ\"],[[64484,64487],1,\"ې\"],[[64488,64489],1,\"ى\"],[[64490,64491],1,\"ئا\"],[[64492,64493],1,\"ئە\"],[[64494,64495],1,\"ئو\"],[[64496,64497],1,\"ئۇ\"],[[64498,64499],1,\"ئۆ\"],[[64500,64501],1,\"ئۈ\"],[[64502,64504],1,\"ئې\"],[[64505,64507],1,\"ئى\"],[[64508,64511],1,\"ی\"],[64512,1,\"ئج\"],[64513,1,\"ئح\"],[64514,1,\"ئم\"],[64515,1,\"ئى\"],[64516,1,\"ئي\"],[64517,1,\"بج\"],[64518,1,\"بح\"],[64519,1,\"بخ\"],[64520,1,\"بم\"],[64521,1,\"بى\"],[64522,1,\"بي\"],[64523,1,\"تج\"],[64524,1,\"تح\"],[64525,1,\"تخ\"],[64526,1,\"تم\"],[64527,1,\"تى\"],[64528,1,\"تي\"],[64529,1,\"ثج\"],[64530,1,\"ثم\"],[64531,1,\"ثى\"],[64532,1,\"ثي\"],[64533,1,\"جح\"],[64534,1,\"جم\"],[64535,1,\"حج\"],[64536,1,\"حم\"],[64537,1,\"خج\"],[64538,1,\"خح\"],[64539,1,\"خم\"],[64540,1,\"سج\"],[64541,1,\"سح\"],[64542,1,\"سخ\"],[64543,1,\"سم\"],[64544,1,\"صح\"],[64545,1,\"صم\"],[64546,1,\"ضج\"],[64547,1,\"ضح\"],[64548,1,\"ضخ\"],[64549,1,\"ضم\"],[64550,1,\"طح\"],[64551,1,\"طم\"],[64552,1,\"ظم\"],[64553,1,\"عج\"],[64554,1,\"عم\"],[64555,1,\"غج\"],[64556,1,\"غم\"],[64557,1,\"فج\"],[64558,1,\"فح\"],[64559,1,\"فخ\"],[64560,1,\"فم\"],[64561,1,\"فى\"],[64562,1,\"في\"],[64563,1,\"قح\"],[64564,1,\"قم\"],[64565,1,\"قى\"],[64566,1,\"قي\"],[64567,1,\"كا\"],[64568,1,\"كج\"],[64569,1,\"كح\"],[64570,1,\"كخ\"],[64571,1,\"كل\"],[64572,1,\"كم\"],[64573,1,\"كى\"],[64574,1,\"كي\"],[64575,1,\"لج\"],[64576,1,\"لح\"],[64577,1,\"لخ\"],[64578,1,\"لم\"],[64579,1,\"لى\"],[64580,1,\"لي\"],[64581,1,\"مج\"],[64582,1,\"مح\"],[64583,1,\"مخ\"],[64584,1,\"مم\"],[64585,1,\"مى\"],[64586,1,\"مي\"],[64587,1,\"نج\"],[64588,1,\"نح\"],[64589,1,\"نخ\"],[64590,1,\"نم\"],[64591,1,\"نى\"],[64592,1,\"ني\"],[64593,1,\"هج\"],[64594,1,\"هم\"],[64595,1,\"هى\"],[64596,1,\"هي\"],[64597,1,\"يج\"],[64598,1,\"يح\"],[64599,1,\"يخ\"],[64600,1,\"يم\"],[64601,1,\"يى\"],[64602,1,\"يي\"],[64603,1,\"ذٰ\"],[64604,1,\"رٰ\"],[64605,1,\"ىٰ\"],[64606,5,\" ٌّ\"],[64607,5,\" ٍّ\"],[64608,5,\" َّ\"],[64609,5,\" ُّ\"],[64610,5,\" ِّ\"],[64611,5,\" ّٰ\"],[64612,1,\"ئر\"],[64613,1,\"ئز\"],[64614,1,\"ئم\"],[64615,1,\"ئن\"],[64616,1,\"ئى\"],[64617,1,\"ئي\"],[64618,1,\"بر\"],[64619,1,\"بز\"],[64620,1,\"بم\"],[64621,1,\"بن\"],[64622,1,\"بى\"],[64623,1,\"بي\"],[64624,1,\"تر\"],[64625,1,\"تز\"],[64626,1,\"تم\"],[64627,1,\"تن\"],[64628,1,\"تى\"],[64629,1,\"تي\"],[64630,1,\"ثر\"],[64631,1,\"ثز\"],[64632,1,\"ثم\"],[64633,1,\"ثن\"],[64634,1,\"ثى\"],[64635,1,\"ثي\"],[64636,1,\"فى\"],[64637,1,\"في\"],[64638,1,\"قى\"],[64639,1,\"قي\"],[64640,1,\"كا\"],[64641,1,\"كل\"],[64642,1,\"كم\"],[64643,1,\"كى\"],[64644,1,\"كي\"],[64645,1,\"لم\"],[64646,1,\"لى\"],[64647,1,\"لي\"],[64648,1,\"ما\"],[64649,1,\"مم\"],[64650,1,\"نر\"],[64651,1,\"نز\"],[64652,1,\"نم\"],[64653,1,\"نن\"],[64654,1,\"نى\"],[64655,1,\"ني\"],[64656,1,\"ىٰ\"],[64657,1,\"ير\"],[64658,1,\"يز\"],[64659,1,\"يم\"],[64660,1,\"ين\"],[64661,1,\"يى\"],[64662,1,\"يي\"],[64663,1,\"ئج\"],[64664,1,\"ئح\"],[64665,1,\"ئخ\"],[64666,1,\"ئم\"],[64667,1,\"ئه\"],[64668,1,\"بج\"],[64669,1,\"بح\"],[64670,1,\"بخ\"],[64671,1,\"بم\"],[64672,1,\"به\"],[64673,1,\"تج\"],[64674,1,\"تح\"],[64675,1,\"تخ\"],[64676,1,\"تم\"],[64677,1,\"ته\"],[64678,1,\"ثم\"],[64679,1,\"جح\"],[64680,1,\"جم\"],[64681,1,\"حج\"],[64682,1,\"حم\"],[64683,1,\"خج\"],[64684,1,\"خم\"],[64685,1,\"سج\"],[64686,1,\"سح\"],[64687,1,\"سخ\"],[64688,1,\"سم\"],[64689,1,\"صح\"],[64690,1,\"صخ\"],[64691,1,\"صم\"],[64692,1,\"ضج\"],[64693,1,\"ضح\"],[64694,1,\"ضخ\"],[64695,1,\"ضم\"],[64696,1,\"طح\"],[64697,1,\"ظم\"],[64698,1,\"عج\"],[64699,1,\"عم\"],[64700,1,\"غج\"],[64701,1,\"غم\"],[64702,1,\"فج\"],[64703,1,\"فح\"],[64704,1,\"فخ\"],[64705,1,\"فم\"],[64706,1,\"قح\"],[64707,1,\"قم\"],[64708,1,\"كج\"],[64709,1,\"كح\"],[64710,1,\"كخ\"],[64711,1,\"كل\"],[64712,1,\"كم\"],[64713,1,\"لج\"],[64714,1,\"لح\"],[64715,1,\"لخ\"],[64716,1,\"لم\"],[64717,1,\"له\"],[64718,1,\"مج\"],[64719,1,\"مح\"],[64720,1,\"مخ\"],[64721,1,\"مم\"],[64722,1,\"نج\"],[64723,1,\"نح\"],[64724,1,\"نخ\"],[64725,1,\"نم\"],[64726,1,\"نه\"],[64727,1,\"هج\"],[64728,1,\"هم\"],[64729,1,\"هٰ\"],[64730,1,\"يج\"],[64731,1,\"يح\"],[64732,1,\"يخ\"],[64733,1,\"يم\"],[64734,1,\"يه\"],[64735,1,\"ئم\"],[64736,1,\"ئه\"],[64737,1,\"بم\"],[64738,1,\"به\"],[64739,1,\"تم\"],[64740,1,\"ته\"],[64741,1,\"ثم\"],[64742,1,\"ثه\"],[64743,1,\"سم\"],[64744,1,\"سه\"],[64745,1,\"شم\"],[64746,1,\"شه\"],[64747,1,\"كل\"],[64748,1,\"كم\"],[64749,1,\"لم\"],[64750,1,\"نم\"],[64751,1,\"نه\"],[64752,1,\"يم\"],[64753,1,\"يه\"],[64754,1,\"ـَّ\"],[64755,1,\"ـُّ\"],[64756,1,\"ـِّ\"],[64757,1,\"طى\"],[64758,1,\"طي\"],[64759,1,\"عى\"],[64760,1,\"عي\"],[64761,1,\"غى\"],[64762,1,\"غي\"],[64763,1,\"سى\"],[64764,1,\"سي\"],[64765,1,\"شى\"],[64766,1,\"شي\"],[64767,1,\"حى\"],[64768,1,\"حي\"],[64769,1,\"جى\"],[64770,1,\"جي\"],[64771,1,\"خى\"],[64772,1,\"خي\"],[64773,1,\"صى\"],[64774,1,\"صي\"],[64775,1,\"ضى\"],[64776,1,\"ضي\"],[64777,1,\"شج\"],[64778,1,\"شح\"],[64779,1,\"شخ\"],[64780,1,\"شم\"],[64781,1,\"شر\"],[64782,1,\"سر\"],[64783,1,\"صر\"],[64784,1,\"ضر\"],[64785,1,\"طى\"],[64786,1,\"طي\"],[64787,1,\"عى\"],[64788,1,\"عي\"],[64789,1,\"غى\"],[64790,1,\"غي\"],[64791,1,\"سى\"],[64792,1,\"سي\"],[64793,1,\"شى\"],[64794,1,\"شي\"],[64795,1,\"حى\"],[64796,1,\"حي\"],[64797,1,\"جى\"],[64798,1,\"جي\"],[64799,1,\"خى\"],[64800,1,\"خي\"],[64801,1,\"صى\"],[64802,1,\"صي\"],[64803,1,\"ضى\"],[64804,1,\"ضي\"],[64805,1,\"شج\"],[64806,1,\"شح\"],[64807,1,\"شخ\"],[64808,1,\"شم\"],[64809,1,\"شر\"],[64810,1,\"سر\"],[64811,1,\"صر\"],[64812,1,\"ضر\"],[64813,1,\"شج\"],[64814,1,\"شح\"],[64815,1,\"شخ\"],[64816,1,\"شم\"],[64817,1,\"سه\"],[64818,1,\"شه\"],[64819,1,\"طم\"],[64820,1,\"سج\"],[64821,1,\"سح\"],[64822,1,\"سخ\"],[64823,1,\"شج\"],[64824,1,\"شح\"],[64825,1,\"شخ\"],[64826,1,\"طم\"],[64827,1,\"ظم\"],[[64828,64829],1,\"اً\"],[[64830,64831],2],[[64832,64847],2],[64848,1,\"تجم\"],[[64849,64850],1,\"تحج\"],[64851,1,\"تحم\"],[64852,1,\"تخم\"],[64853,1,\"تمج\"],[64854,1,\"تمح\"],[64855,1,\"تمخ\"],[[64856,64857],1,\"جمح\"],[64858,1,\"حمي\"],[64859,1,\"حمى\"],[64860,1,\"سحج\"],[64861,1,\"سجح\"],[64862,1,\"سجى\"],[[64863,64864],1,\"سمح\"],[64865,1,\"سمج\"],[[64866,64867],1,\"سمم\"],[[64868,64869],1,\"صحح\"],[64870,1,\"صمم\"],[[64871,64872],1,\"شحم\"],[64873,1,\"شجي\"],[[64874,64875],1,\"شمخ\"],[[64876,64877],1,\"شمم\"],[64878,1,\"ضحى\"],[[64879,64880],1,\"ضخم\"],[[64881,64882],1,\"طمح\"],[64883,1,\"طمم\"],[64884,1,\"طمي\"],[64885,1,\"عجم\"],[[64886,64887],1,\"عمم\"],[64888,1,\"عمى\"],[64889,1,\"غمم\"],[64890,1,\"غمي\"],[64891,1,\"غمى\"],[[64892,64893],1,\"فخم\"],[64894,1,\"قمح\"],[64895,1,\"قمم\"],[64896,1,\"لحم\"],[64897,1,\"لحي\"],[64898,1,\"لحى\"],[[64899,64900],1,\"لجج\"],[[64901,64902],1,\"لخم\"],[[64903,64904],1,\"لمح\"],[64905,1,\"محج\"],[64906,1,\"محم\"],[64907,1,\"محي\"],[64908,1,\"مجح\"],[64909,1,\"مجم\"],[64910,1,\"مخج\"],[64911,1,\"مخم\"],[[64912,64913],3],[64914,1,\"مجخ\"],[64915,1,\"همج\"],[64916,1,\"همم\"],[64917,1,\"نحم\"],[64918,1,\"نحى\"],[[64919,64920],1,\"نجم\"],[64921,1,\"نجى\"],[64922,1,\"نمي\"],[64923,1,\"نمى\"],[[64924,64925],1,\"يمم\"],[64926,1,\"بخي\"],[64927,1,\"تجي\"],[64928,1,\"تجى\"],[64929,1,\"تخي\"],[64930,1,\"تخى\"],[64931,1,\"تمي\"],[64932,1,\"تمى\"],[64933,1,\"جمي\"],[64934,1,\"جحى\"],[64935,1,\"جمى\"],[64936,1,\"سخى\"],[64937,1,\"صحي\"],[64938,1,\"شحي\"],[64939,1,\"ضحي\"],[64940,1,\"لجي\"],[64941,1,\"لمي\"],[64942,1,\"يحي\"],[64943,1,\"يجي\"],[64944,1,\"يمي\"],[64945,1,\"ممي\"],[64946,1,\"قمي\"],[64947,1,\"نحي\"],[64948,1,\"قمح\"],[64949,1,\"لحم\"],[64950,1,\"عمي\"],[64951,1,\"كمي\"],[64952,1,\"نجح\"],[64953,1,\"مخي\"],[64954,1,\"لجم\"],[64955,1,\"كمم\"],[64956,1,\"لجم\"],[64957,1,\"نجح\"],[64958,1,\"جحي\"],[64959,1,\"حجي\"],[64960,1,\"مجي\"],[64961,1,\"فمي\"],[64962,1,\"بحي\"],[64963,1,\"كمم\"],[64964,1,\"عجم\"],[64965,1,\"صمم\"],[64966,1,\"سخي\"],[64967,1,\"نجي\"],[[64968,64974],3],[64975,2],[[64976,65007],3],[65008,1,\"صلے\"],[65009,1,\"قلے\"],[65010,1,\"الله\"],[65011,1,\"اكبر\"],[65012,1,\"محمد\"],[65013,1,\"صلعم\"],[65014,1,\"رسول\"],[65015,1,\"عليه\"],[65016,1,\"وسلم\"],[65017,1,\"صلى\"],[65018,5,\"صلى الله عليه وسلم\"],[65019,5,\"جل جلاله\"],[65020,1,\"ریال\"],[65021,2],[[65022,65023],2],[[65024,65039],7],[65040,5,\",\"],[65041,1,\"、\"],[65042,3],[65043,5,\":\"],[65044,5,\";\"],[65045,5,\"!\"],[65046,5,\"?\"],[65047,1,\"〖\"],[65048,1,\"〗\"],[65049,3],[[65050,65055],3],[[65056,65059],2],[[65060,65062],2],[[65063,65069],2],[[65070,65071],2],[65072,3],[65073,1,\"—\"],[65074,1,\"–\"],[[65075,65076],5,\"_\"],[65077,5,\"(\"],[65078,5,\")\"],[65079,5,\"{\"],[65080,5,\"}\"],[65081,1,\"〔\"],[65082,1,\"〕\"],[65083,1,\"【\"],[65084,1,\"】\"],[65085,1,\"《\"],[65086,1,\"》\"],[65087,1,\"〈\"],[65088,1,\"〉\"],[65089,1,\"「\"],[65090,1,\"」\"],[65091,1,\"『\"],[65092,1,\"』\"],[[65093,65094],2],[65095,5,\"[\"],[65096,5,\"]\"],[[65097,65100],5,\" ̅\"],[[65101,65103],5,\"_\"],[65104,5,\",\"],[65105,1,\"、\"],[65106,3],[65107,3],[65108,5,\";\"],[65109,5,\":\"],[65110,5,\"?\"],[65111,5,\"!\"],[65112,1,\"—\"],[65113,5,\"(\"],[65114,5,\")\"],[65115,5,\"{\"],[65116,5,\"}\"],[65117,1,\"〔\"],[65118,1,\"〕\"],[65119,5,\"#\"],[65120,5,\"&\"],[65121,5,\"*\"],[65122,5,\"+\"],[65123,1,\"-\"],[65124,5,\"<\"],[65125,5,\">\"],[65126,5,\"=\"],[65127,3],[65128,5,\"\\\\\"],[65129,5,\"$\"],[65130,5,\"%\"],[65131,5,\"@\"],[[65132,65135],3],[65136,5,\" ً\"],[65137,1,\"ـً\"],[65138,5,\" ٌ\"],[65139,2],[65140,5,\" ٍ\"],[65141,3],[65142,5,\" َ\"],[65143,1,\"ـَ\"],[65144,5,\" ُ\"],[65145,1,\"ـُ\"],[65146,5,\" ِ\"],[65147,1,\"ـِ\"],[65148,5,\" ّ\"],[65149,1,\"ـّ\"],[65150,5,\" ْ\"],[65151,1,\"ـْ\"],[65152,1,\"ء\"],[[65153,65154],1,\"آ\"],[[65155,65156],1,\"أ\"],[[65157,65158],1,\"ؤ\"],[[65159,65160],1,\"إ\"],[[65161,65164],1,\"ئ\"],[[65165,65166],1,\"ا\"],[[65167,65170],1,\"ب\"],[[65171,65172],1,\"ة\"],[[65173,65176],1,\"ت\"],[[65177,65180],1,\"ث\"],[[65181,65184],1,\"ج\"],[[65185,65188],1,\"ح\"],[[65189,65192],1,\"خ\"],[[65193,65194],1,\"د\"],[[65195,65196],1,\"ذ\"],[[65197,65198],1,\"ر\"],[[65199,65200],1,\"ز\"],[[65201,65204],1,\"س\"],[[65205,65208],1,\"ش\"],[[65209,65212],1,\"ص\"],[[65213,65216],1,\"ض\"],[[65217,65220],1,\"ط\"],[[65221,65224],1,\"ظ\"],[[65225,65228],1,\"ع\"],[[65229,65232],1,\"غ\"],[[65233,65236],1,\"ف\"],[[65237,65240],1,\"ق\"],[[65241,65244],1,\"ك\"],[[65245,65248],1,\"ل\"],[[65249,65252],1,\"م\"],[[65253,65256],1,\"ن\"],[[65257,65260],1,\"ه\"],[[65261,65262],1,\"و\"],[[65263,65264],1,\"ى\"],[[65265,65268],1,\"ي\"],[[65269,65270],1,\"لآ\"],[[65271,65272],1,\"لأ\"],[[65273,65274],1,\"لإ\"],[[65275,65276],1,\"لاa\"],[65314,1,\"b\"],[65315,1,\"c\"],[65316,1,\"d\"],[65317,1,\"e\"],[65318,1,\"f\"],[65319,1,\"g\"],[65320,1,\"h\"],[65321,1,\"i\"],[65322,1,\"j\"],[65323,1,\"k\"],[65324,1,\"l\"],[65325,1,\"m\"],[65326,1,\"n\"],[65327,1,\"o\"],[65328,1,\"p\"],[65329,1,\"q\"],[65330,1,\"r\"],[65331,1,\"s\"],[65332,1,\"t\"],[65333,1,\"u\"],[65334,1,\"v\"],[65335,1,\"w\"],[65336,1,\"x\"],[65337,1,\"y\"],[65338,1,\"z\"],[65339,5,\"[\"],[65340,5,\"\\\\\"],[65341,5,\"]\"],[65342,5,\"^\"],[65343,5,\"_\"],[65344,5,\"`\"],[65345,1,\"a\"],[65346,1,\"b\"],[65347,1,\"c\"],[65348,1,\"d\"],[65349,1,\"e\"],[65350,1,\"f\"],[65351,1,\"g\"],[65352,1,\"h\"],[65353,1,\"i\"],[65354,1,\"j\"],[65355,1,\"k\"],[65356,1,\"l\"],[65357,1,\"m\"],[65358,1,\"n\"],[65359,1,\"o\"],[65360,1,\"p\"],[65361,1,\"q\"],[65362,1,\"r\"],[65363,1,\"s\"],[65364,1,\"t\"],[65365,1,\"u\"],[65366,1,\"v\"],[65367,1,\"w\"],[65368,1,\"x\"],[65369,1,\"y\"],[65370,1,\"z\"],[65371,5,\"{\"],[65372,5,\"|\"],[65373,5,\"}\"],[65374,5,\"~\"],[65375,1,\"⦅\"],[65376,1,\"⦆\"],[65377,1,\".\"],[65378,1,\"「\"],[65379,1,\"」\"],[65380,1,\"、\"],[65381,1,\"・\"],[65382,1,\"ヲ\"],[65383,1,\"ァ\"],[65384,1,\"ィ\"],[65385,1,\"ゥ\"],[65386,1,\"ェ\"],[65387,1,\"ォ\"],[65388,1,\"ャ\"],[65389,1,\"ュ\"],[65390,1,\"ョ\"],[65391,1,\"ッ\"],[65392,1,\"ー\"],[65393,1,\"ア\"],[65394,1,\"イ\"],[65395,1,\"ウ\"],[65396,1,\"エ\"],[65397,1,\"オ\"],[65398,1,\"カ\"],[65399,1,\"キ\"],[65400,1,\"ク\"],[65401,1,\"ケ\"],[65402,1,\"コ\"],[65403,1,\"サ\"],[65404,1,\"シ\"],[65405,1,\"ス\"],[65406,1,\"セ\"],[65407,1,\"ソ\"],[65408,1,\"タ\"],[65409,1,\"チ\"],[65410,1,\"ツ\"],[65411,1,\"テ\"],[65412,1,\"ト\"],[65413,1,\"ナ\"],[65414,1,\"ニ\"],[65415,1,\"ヌ\"],[65416,1,\"ネ\"],[65417,1,\"ノ\"],[65418,1,\"ハ\"],[65419,1,\"ヒ\"],[65420,1,\"フ\"],[65421,1,\"ヘ\"],[65422,1,\"ホ\"],[65423,1,\"マ\"],[65424,1,\"ミ\"],[65425,1,\"ム\"],[65426,1,\"メ\"],[65427,1,\"モ\"],[65428,1,\"ヤ\"],[65429,1,\"ユ\"],[65430,1,\"ヨ\"],[65431,1,\"ラ\"],[65432,1,\"リ\"],[65433,1,\"ル\"],[65434,1,\"レ\"],[65435,1,\"ロ\"],[65436,1,\"ワ\"],[65437,1,\"ン\"],[65438,1,\"゙\"],[65439,1,\"゚\"],[65440,3],[65441,1,\"ᄀ\"],[65442,1,\"ᄁ\"],[65443,1,\"ᆪ\"],[65444,1,\"ᄂ\"],[65445,1,\"ᆬ\"],[65446,1,\"ᆭ\"],[65447,1,\"ᄃ\"],[65448,1,\"ᄄ\"],[65449,1,\"ᄅ\"],[65450,1,\"ᆰ\"],[65451,1,\"ᆱ\"],[65452,1,\"ᆲ\"],[65453,1,\"ᆳ\"],[65454,1,\"ᆴ\"],[65455,1,\"ᆵ\"],[65456,1,\"ᄚ\"],[65457,1,\"ᄆ\"],[65458,1,\"ᄇ\"],[65459,1,\"ᄈ\"],[65460,1,\"ᄡ\"],[65461,1,\"ᄉ\"],[65462,1,\"ᄊ\"],[65463,1,\"ᄋ\"],[65464,1,\"ᄌ\"],[65465,1,\"ᄍ\"],[65466,1,\"ᄎ\"],[65467,1,\"ᄏ\"],[65468,1,\"ᄐ\"],[65469,1,\"ᄑ\"],[65470,1,\"ᄒ\"],[[65471,65473],3],[65474,1,\"ᅡ\"],[65475,1,\"ᅢ\"],[65476,1,\"ᅣ\"],[65477,1,\"ᅤ\"],[65478,1,\"ᅥ\"],[65479,1,\"ᅦ\"],[[65480,65481],3],[65482,1,\"ᅧ\"],[65483,1,\"ᅨ\"],[65484,1,\"ᅩ\"],[65485,1,\"ᅪ\"],[65486,1,\"ᅫ\"],[65487,1,\"ᅬ\"],[[65488,65489],3],[65490,1,\"ᅭ\"],[65491,1,\"ᅮ\"],[65492,1,\"ᅯ\"],[65493,1,\"ᅰ\"],[65494,1,\"ᅱ\"],[65495,1,\"ᅲ\"],[[65496,65497],3],[65498,1,\"ᅳ\"],[65499,1,\"ᅴ\"],[65500,1,\"ᅵ\"],[[65501,65503],3],[65504,1,\"¢\"],[65505,1,\"£\"],[65506,1,\"¬\"],[65507,5,\" ̄\"],[65508,1,\"¦\"],[65509,1,\"¥\"],[65510,1,\"₩\"],[65511,3],[65512,1,\"│\"],[65513,1,\"←\"],[65514,1,\"↑\"],[65515,1,\"→\"],[65516,1,\"↓\"],[65517,1,\"■\"],[65518,1,\"○\"],[[65519,65528],3],[[65529,65531],3],[65532,3],[65533,3],[[65534,65535],3],[[65536,65547],2],[65548,3],[[65549,65574],2],[65575,3],[[65576,65594],2],[65595,3],[[65596,65597],2],[65598,3],[[65599,65613],2],[[65614,65615],3],[[65616,65629],2],[[65630,65663],3],[[65664,65786],2],[[65787,65791],3],[[65792,65794],2],[[65795,65798],3],[[65799,65843],2],[[65844,65846],3],[[65847,65855],2],[[65856,65930],2],[[65931,65932],2],[[65933,65934],2],[65935,3],[[65936,65947],2],[65948,2],[[65949,65951],3],[65952,2],[[65953,65999],3],[[66000,66044],2],[66045,2],[[66046,66175],3],[[66176,66204],2],[[66205,66207],3],[[66208,66256],2],[[66257,66271],3],[66272,2],[[66273,66299],2],[[66300,66303],3],[[66304,66334],2],[66335,2],[[66336,66339],2],[[66340,66348],3],[[66349,66351],2],[[66352,66368],2],[66369,2],[[66370,66377],2],[66378,2],[[66379,66383],3],[[66384,66426],2],[[66427,66431],3],[[66432,66461],2],[66462,3],[66463,2],[[66464,66499],2],[[66500,66503],3],[[66504,66511],2],[[66512,66517],2],[[66518,66559],3],[66560,1,\"𐐨\"],[66561,1,\"𐐩\"],[66562,1,\"𐐪\"],[66563,1,\"𐐫\"],[66564,1,\"𐐬\"],[66565,1,\"𐐭\"],[66566,1,\"𐐮\"],[66567,1,\"𐐯\"],[66568,1,\"𐐰\"],[66569,1,\"𐐱\"],[66570,1,\"𐐲\"],[66571,1,\"𐐳\"],[66572,1,\"𐐴\"],[66573,1,\"𐐵\"],[66574,1,\"𐐶\"],[66575,1,\"𐐷\"],[66576,1,\"𐐸\"],[66577,1,\"𐐹\"],[66578,1,\"𐐺\"],[66579,1,\"𐐻\"],[66580,1,\"𐐼\"],[66581,1,\"𐐽\"],[66582,1,\"𐐾\"],[66583,1,\"𐐿\"],[66584,1,\"𐑀\"],[66585,1,\"𐑁\"],[66586,1,\"𐑂\"],[66587,1,\"𐑃\"],[66588,1,\"𐑄\"],[66589,1,\"𐑅\"],[66590,1,\"𐑆\"],[66591,1,\"𐑇\"],[66592,1,\"𐑈\"],[66593,1,\"𐑉\"],[66594,1,\"𐑊\"],[66595,1,\"𐑋\"],[66596,1,\"𐑌\"],[66597,1,\"𐑍\"],[66598,1,\"𐑎\"],[66599,1,\"𐑏\"],[[66600,66637],2],[[66638,66717],2],[[66718,66719],3],[[66720,66729],2],[[66730,66735],3],[66736,1,\"𐓘\"],[66737,1,\"𐓙\"],[66738,1,\"𐓚\"],[66739,1,\"𐓛\"],[66740,1,\"𐓜\"],[66741,1,\"𐓝\"],[66742,1,\"𐓞\"],[66743,1,\"𐓟\"],[66744,1,\"𐓠\"],[66745,1,\"𐓡\"],[66746,1,\"𐓢\"],[66747,1,\"𐓣\"],[66748,1,\"𐓤\"],[66749,1,\"𐓥\"],[66750,1,\"𐓦\"],[66751,1,\"𐓧\"],[66752,1,\"𐓨\"],[66753,1,\"𐓩\"],[66754,1,\"𐓪\"],[66755,1,\"𐓫\"],[66756,1,\"𐓬\"],[66757,1,\"𐓭\"],[66758,1,\"𐓮\"],[66759,1,\"𐓯\"],[66760,1,\"𐓰\"],[66761,1,\"𐓱\"],[66762,1,\"𐓲\"],[66763,1,\"𐓳\"],[66764,1,\"𐓴\"],[66765,1,\"𐓵\"],[66766,1,\"𐓶\"],[66767,1,\"𐓷\"],[66768,1,\"𐓸\"],[66769,1,\"𐓹\"],[66770,1,\"𐓺\"],[66771,1,\"𐓻\"],[[66772,66775],3],[[66776,66811],2],[[66812,66815],3],[[66816,66855],2],[[66856,66863],3],[[66864,66915],2],[[66916,66926],3],[66927,2],[66928,1,\"𐖗\"],[66929,1,\"𐖘\"],[66930,1,\"𐖙\"],[66931,1,\"𐖚\"],[66932,1,\"𐖛\"],[66933,1,\"𐖜\"],[66934,1,\"𐖝\"],[66935,1,\"𐖞\"],[66936,1,\"𐖟\"],[66937,1,\"𐖠\"],[66938,1,\"𐖡\"],[66939,3],[66940,1,\"𐖣\"],[66941,1,\"𐖤\"],[66942,1,\"𐖥\"],[66943,1,\"𐖦\"],[66944,1,\"𐖧\"],[66945,1,\"𐖨\"],[66946,1,\"𐖩\"],[66947,1,\"𐖪\"],[66948,1,\"𐖫\"],[66949,1,\"𐖬\"],[66950,1,\"𐖭\"],[66951,1,\"𐖮\"],[66952,1,\"𐖯\"],[66953,1,\"𐖰\"],[66954,1,\"𐖱\"],[66955,3],[66956,1,\"𐖳\"],[66957,1,\"𐖴\"],[66958,1,\"𐖵\"],[66959,1,\"𐖶\"],[66960,1,\"𐖷\"],[66961,1,\"𐖸\"],[66962,1,\"𐖹\"],[66963,3],[66964,1,\"𐖻\"],[66965,1,\"𐖼\"],[66966,3],[[66967,66977],2],[66978,3],[[66979,66993],2],[66994,3],[[66995,67001],2],[67002,3],[[67003,67004],2],[[67005,67071],3],[[67072,67382],2],[[67383,67391],3],[[67392,67413],2],[[67414,67423],3],[[67424,67431],2],[[67432,67455],3],[67456,2],[67457,1,\"ː\"],[67458,1,\"ˑ\"],[67459,1,\"æ\"],[67460,1,\"ʙ\"],[67461,1,\"ɓ\"],[67462,3],[67463,1,\"ʣ\"],[67464,1,\"ꭦ\"],[67465,1,\"ʥ\"],[67466,1,\"ʤ\"],[67467,1,\"ɖ\"],[67468,1,\"ɗ\"],[67469,1,\"ᶑ\"],[67470,1,\"ɘ\"],[67471,1,\"ɞ\"],[67472,1,\"ʩ\"],[67473,1,\"ɤ\"],[67474,1,\"ɢ\"],[67475,1,\"ɠ\"],[67476,1,\"ʛ\"],[67477,1,\"ħ\"],[67478,1,\"ʜ\"],[67479,1,\"ɧ\"],[67480,1,\"ʄ\"],[67481,1,\"ʪ\"],[67482,1,\"ʫ\"],[67483,1,\"ɬ\"],[67484,1,\"𝼄\"],[67485,1,\"ꞎ\"],[67486,1,\"ɮ\"],[67487,1,\"𝼅\"],[67488,1,\"ʎ\"],[67489,1,\"𝼆\"],[67490,1,\"ø\"],[67491,1,\"ɶ\"],[67492,1,\"ɷ\"],[67493,1,\"q\"],[67494,1,\"ɺ\"],[67495,1,\"𝼈\"],[67496,1,\"ɽ\"],[67497,1,\"ɾ\"],[67498,1,\"ʀ\"],[67499,1,\"ʨ\"],[67500,1,\"ʦ\"],[67501,1,\"ꭧ\"],[67502,1,\"ʧ\"],[67503,1,\"ʈ\"],[67504,1,\"ⱱ\"],[67505,3],[67506,1,\"ʏ\"],[67507,1,\"ʡ\"],[67508,1,\"ʢ\"],[67509,1,\"ʘ\"],[67510,1,\"ǀ\"],[67511,1,\"ǁ\"],[67512,1,\"ǂ\"],[67513,1,\"𝼊\"],[67514,1,\"𝼞\"],[[67515,67583],3],[[67584,67589],2],[[67590,67591],3],[67592,2],[67593,3],[[67594,67637],2],[67638,3],[[67639,67640],2],[[67641,67643],3],[67644,2],[[67645,67646],3],[67647,2],[[67648,67669],2],[67670,3],[[67671,67679],2],[[67680,67702],2],[[67703,67711],2],[[67712,67742],2],[[67743,67750],3],[[67751,67759],2],[[67760,67807],3],[[67808,67826],2],[67827,3],[[67828,67829],2],[[67830,67834],3],[[67835,67839],2],[[67840,67861],2],[[67862,67865],2],[[67866,67867],2],[[67868,67870],3],[67871,2],[[67872,67897],2],[[67898,67902],3],[67903,2],[[67904,67967],3],[[67968,68023],2],[[68024,68027],3],[[68028,68029],2],[[68030,68031],2],[[68032,68047],2],[[68048,68049],3],[[68050,68095],2],[[68096,68099],2],[68100,3],[[68101,68102],2],[[68103,68107],3],[[68108,68115],2],[68116,3],[[68117,68119],2],[68120,3],[[68121,68147],2],[[68148,68149],2],[[68150,68151],3],[[68152,68154],2],[[68155,68158],3],[68159,2],[[68160,68167],2],[68168,2],[[68169,68175],3],[[68176,68184],2],[[68185,68191],3],[[68192,68220],2],[[68221,68223],2],[[68224,68252],2],[[68253,68255],2],[[68256,68287],3],[[68288,68295],2],[68296,2],[[68297,68326],2],[[68327,68330],3],[[68331,68342],2],[[68343,68351],3],[[68352,68405],2],[[68406,68408],3],[[68409,68415],2],[[68416,68437],2],[[68438,68439],3],[[68440,68447],2],[[68448,68466],2],[[68467,68471],3],[[68472,68479],2],[[68480,68497],2],[[68498,68504],3],[[68505,68508],2],[[68509,68520],3],[[68521,68527],2],[[68528,68607],3],[[68608,68680],2],[[68681,68735],3],[68736,1,\"𐳀\"],[68737,1,\"𐳁\"],[68738,1,\"𐳂\"],[68739,1,\"𐳃\"],[68740,1,\"𐳄\"],[68741,1,\"𐳅\"],[68742,1,\"𐳆\"],[68743,1,\"𐳇\"],[68744,1,\"𐳈\"],[68745,1,\"𐳉\"],[68746,1,\"𐳊\"],[68747,1,\"𐳋\"],[68748,1,\"𐳌\"],[68749,1,\"𐳍\"],[68750,1,\"𐳎\"],[68751,1,\"𐳏\"],[68752,1,\"𐳐\"],[68753,1,\"𐳑\"],[68754,1,\"𐳒\"],[68755,1,\"𐳓\"],[68756,1,\"𐳔\"],[68757,1,\"𐳕\"],[68758,1,\"𐳖\"],[68759,1,\"𐳗\"],[68760,1,\"𐳘\"],[68761,1,\"𐳙\"],[68762,1,\"𐳚\"],[68763,1,\"𐳛\"],[68764,1,\"𐳜\"],[68765,1,\"𐳝\"],[68766,1,\"𐳞\"],[68767,1,\"𐳟\"],[68768,1,\"𐳠\"],[68769,1,\"𐳡\"],[68770,1,\"𐳢\"],[68771,1,\"𐳣\"],[68772,1,\"𐳤\"],[68773,1,\"𐳥\"],[68774,1,\"𐳦\"],[68775,1,\"𐳧\"],[68776,1,\"𐳨\"],[68777,1,\"𐳩\"],[68778,1,\"𐳪\"],[68779,1,\"𐳫\"],[68780,1,\"𐳬\"],[68781,1,\"𐳭\"],[68782,1,\"𐳮\"],[68783,1,\"𐳯\"],[68784,1,\"𐳰\"],[68785,1,\"𐳱\"],[68786,1,\"𐳲\"],[[68787,68799],3],[[68800,68850],2],[[68851,68857],3],[[68858,68863],2],[[68864,68903],2],[[68904,68911],3],[[68912,68921],2],[[68922,69215],3],[[69216,69246],2],[69247,3],[[69248,69289],2],[69290,3],[[69291,69292],2],[69293,2],[[69294,69295],3],[[69296,69297],2],[[69298,69372],3],[[69373,69375],2],[[69376,69404],2],[[69405,69414],2],[69415,2],[[69416,69423],3],[[69424,69456],2],[[69457,69465],2],[[69466,69487],3],[[69488,69509],2],[[69510,69513],2],[[69514,69551],3],[[69552,69572],2],[[69573,69579],2],[[69580,69599],3],[[69600,69622],2],[[69623,69631],3],[[69632,69702],2],[[69703,69709],2],[[69710,69713],3],[[69714,69733],2],[[69734,69743],2],[[69744,69749],2],[[69750,69758],3],[69759,2],[[69760,69818],2],[[69819,69820],2],[69821,3],[[69822,69825],2],[69826,2],[[69827,69836],3],[69837,3],[[69838,69839],3],[[69840,69864],2],[[69865,69871],3],[[69872,69881],2],[[69882,69887],3],[[69888,69940],2],[69941,3],[[69942,69951],2],[[69952,69955],2],[[69956,69958],2],[69959,2],[[69960,69967],3],[[69968,70003],2],[[70004,70005],2],[70006,2],[[70007,70015],3],[[70016,70084],2],[[70085,70088],2],[[70089,70092],2],[70093,2],[[70094,70095],2],[[70096,70105],2],[70106,2],[70107,2],[70108,2],[[70109,70111],2],[70112,3],[[70113,70132],2],[[70133,70143],3],[[70144,70161],2],[70162,3],[[70163,70199],2],[[70200,70205],2],[70206,2],[[70207,70209],2],[[70210,70271],3],[[70272,70278],2],[70279,3],[70280,2],[70281,3],[[70282,70285],2],[70286,3],[[70287,70301],2],[70302,3],[[70303,70312],2],[70313,2],[[70314,70319],3],[[70320,70378],2],[[70379,70383],3],[[70384,70393],2],[[70394,70399],3],[70400,2],[[70401,70403],2],[70404,3],[[70405,70412],2],[[70413,70414],3],[[70415,70416],2],[[70417,70418],3],[[70419,70440],2],[70441,3],[[70442,70448],2],[70449,3],[[70450,70451],2],[70452,3],[[70453,70457],2],[70458,3],[70459,2],[[70460,70468],2],[[70469,70470],3],[[70471,70472],2],[[70473,70474],3],[[70475,70477],2],[[70478,70479],3],[70480,2],[[70481,70486],3],[70487,2],[[70488,70492],3],[[70493,70499],2],[[70500,70501],3],[[70502,70508],2],[[70509,70511],3],[[70512,70516],2],[[70517,70655],3],[[70656,70730],2],[[70731,70735],2],[[70736,70745],2],[70746,2],[70747,2],[70748,3],[70749,2],[70750,2],[70751,2],[[70752,70753],2],[[70754,70783],3],[[70784,70853],2],[70854,2],[70855,2],[[70856,70863],3],[[70864,70873],2],[[70874,71039],3],[[71040,71093],2],[[71094,71095],3],[[71096,71104],2],[[71105,71113],2],[[71114,71127],2],[[71128,71133],2],[[71134,71167],3],[[71168,71232],2],[[71233,71235],2],[71236,2],[[71237,71247],3],[[71248,71257],2],[[71258,71263],3],[[71264,71276],2],[[71277,71295],3],[[71296,71351],2],[71352,2],[71353,2],[[71354,71359],3],[[71360,71369],2],[[71370,71423],3],[[71424,71449],2],[71450,2],[[71451,71452],3],[[71453,71467],2],[[71468,71471],3],[[71472,71481],2],[[71482,71487],2],[[71488,71494],2],[[71495,71679],3],[[71680,71738],2],[71739,2],[[71740,71839],3],[71840,1,\"𑣀\"],[71841,1,\"𑣁\"],[71842,1,\"𑣂\"],[71843,1,\"𑣃\"],[71844,1,\"𑣄\"],[71845,1,\"𑣅\"],[71846,1,\"𑣆\"],[71847,1,\"𑣇\"],[71848,1,\"𑣈\"],[71849,1,\"𑣉\"],[71850,1,\"𑣊\"],[71851,1,\"𑣋\"],[71852,1,\"𑣌\"],[71853,1,\"𑣍\"],[71854,1,\"𑣎\"],[71855,1,\"𑣏\"],[71856,1,\"𑣐\"],[71857,1,\"𑣑\"],[71858,1,\"𑣒\"],[71859,1,\"𑣓\"],[71860,1,\"𑣔\"],[71861,1,\"𑣕\"],[71862,1,\"𑣖\"],[71863,1,\"𑣗\"],[71864,1,\"𑣘\"],[71865,1,\"𑣙\"],[71866,1,\"𑣚\"],[71867,1,\"𑣛\"],[71868,1,\"𑣜\"],[71869,1,\"𑣝\"],[71870,1,\"𑣞\"],[71871,1,\"𑣟\"],[[71872,71913],2],[[71914,71922],2],[[71923,71934],3],[71935,2],[[71936,71942],2],[[71943,71944],3],[71945,2],[[71946,71947],3],[[71948,71955],2],[71956,3],[[71957,71958],2],[71959,3],[[71960,71989],2],[71990,3],[[71991,71992],2],[[71993,71994],3],[[71995,72003],2],[[72004,72006],2],[[72007,72015],3],[[72016,72025],2],[[72026,72095],3],[[72096,72103],2],[[72104,72105],3],[[72106,72151],2],[[72152,72153],3],[[72154,72161],2],[72162,2],[[72163,72164],2],[[72165,72191],3],[[72192,72254],2],[[72255,72262],2],[72263,2],[[72264,72271],3],[[72272,72323],2],[[72324,72325],2],[[72326,72345],2],[[72346,72348],2],[72349,2],[[72350,72354],2],[[72355,72367],3],[[72368,72383],2],[[72384,72440],2],[[72441,72447],3],[[72448,72457],2],[[72458,72703],3],[[72704,72712],2],[72713,3],[[72714,72758],2],[72759,3],[[72760,72768],2],[[72769,72773],2],[[72774,72783],3],[[72784,72793],2],[[72794,72812],2],[[72813,72815],3],[[72816,72817],2],[[72818,72847],2],[[72848,72849],3],[[72850,72871],2],[72872,3],[[72873,72886],2],[[72887,72959],3],[[72960,72966],2],[72967,3],[[72968,72969],2],[72970,3],[[72971,73014],2],[[73015,73017],3],[73018,2],[73019,3],[[73020,73021],2],[73022,3],[[73023,73031],2],[[73032,73039],3],[[73040,73049],2],[[73050,73055],3],[[73056,73061],2],[73062,3],[[73063,73064],2],[73065,3],[[73066,73102],2],[73103,3],[[73104,73105],2],[73106,3],[[73107,73112],2],[[73113,73119],3],[[73120,73129],2],[[73130,73439],3],[[73440,73462],2],[[73463,73464],2],[[73465,73471],3],[[73472,73488],2],[73489,3],[[73490,73530],2],[[73531,73533],3],[[73534,73538],2],[[73539,73551],2],[[73552,73561],2],[[73562,73647],3],[73648,2],[[73649,73663],3],[[73664,73713],2],[[73714,73726],3],[73727,2],[[73728,74606],2],[[74607,74648],2],[74649,2],[[74650,74751],3],[[74752,74850],2],[[74851,74862],2],[74863,3],[[74864,74867],2],[74868,2],[[74869,74879],3],[[74880,75075],2],[[75076,77711],3],[[77712,77808],2],[[77809,77810],2],[[77811,77823],3],[[77824,78894],2],[78895,2],[[78896,78904],3],[[78905,78911],3],[[78912,78933],2],[[78934,82943],3],[[82944,83526],2],[[83527,92159],3],[[92160,92728],2],[[92729,92735],3],[[92736,92766],2],[92767,3],[[92768,92777],2],[[92778,92781],3],[[92782,92783],2],[[92784,92862],2],[92863,3],[[92864,92873],2],[[92874,92879],3],[[92880,92909],2],[[92910,92911],3],[[92912,92916],2],[92917,2],[[92918,92927],3],[[92928,92982],2],[[92983,92991],2],[[92992,92995],2],[[92996,92997],2],[[92998,93007],3],[[93008,93017],2],[93018,3],[[93019,93025],2],[93026,3],[[93027,93047],2],[[93048,93052],3],[[93053,93071],2],[[93072,93759],3],[93760,1,\"𖹠\"],[93761,1,\"𖹡\"],[93762,1,\"𖹢\"],[93763,1,\"𖹣\"],[93764,1,\"𖹤\"],[93765,1,\"𖹥\"],[93766,1,\"𖹦\"],[93767,1,\"𖹧\"],[93768,1,\"𖹨\"],[93769,1,\"𖹩\"],[93770,1,\"𖹪\"],[93771,1,\"𖹫\"],[93772,1,\"𖹬\"],[93773,1,\"𖹭\"],[93774,1,\"𖹮\"],[93775,1,\"𖹯\"],[93776,1,\"𖹰\"],[93777,1,\"𖹱\"],[93778,1,\"𖹲\"],[93779,1,\"𖹳\"],[93780,1,\"𖹴\"],[93781,1,\"𖹵\"],[93782,1,\"𖹶\"],[93783,1,\"𖹷\"],[93784,1,\"𖹸\"],[93785,1,\"𖹹\"],[93786,1,\"𖹺\"],[93787,1,\"𖹻\"],[93788,1,\"𖹼\"],[93789,1,\"𖹽\"],[93790,1,\"𖹾\"],[93791,1,\"𖹿\"],[[93792,93823],2],[[93824,93850],2],[[93851,93951],3],[[93952,94020],2],[[94021,94026],2],[[94027,94030],3],[94031,2],[[94032,94078],2],[[94079,94087],2],[[94088,94094],3],[[94095,94111],2],[[94112,94175],3],[94176,2],[94177,2],[94178,2],[94179,2],[94180,2],[[94181,94191],3],[[94192,94193],2],[[94194,94207],3],[[94208,100332],2],[[100333,100337],2],[[100338,100343],2],[[100344,100351],3],[[100352,101106],2],[[101107,101589],2],[[101590,101631],3],[[101632,101640],2],[[101641,110575],3],[[110576,110579],2],[110580,3],[[110581,110587],2],[110588,3],[[110589,110590],2],[110591,3],[[110592,110593],2],[[110594,110878],2],[[110879,110882],2],[[110883,110897],3],[110898,2],[[110899,110927],3],[[110928,110930],2],[[110931,110932],3],[110933,2],[[110934,110947],3],[[110948,110951],2],[[110952,110959],3],[[110960,111355],2],[[111356,113663],3],[[113664,113770],2],[[113771,113775],3],[[113776,113788],2],[[113789,113791],3],[[113792,113800],2],[[113801,113807],3],[[113808,113817],2],[[113818,113819],3],[113820,2],[[113821,113822],2],[113823,2],[[113824,113827],7],[[113828,118527],3],[[118528,118573],2],[[118574,118575],3],[[118576,118598],2],[[118599,118607],3],[[118608,118723],2],[[118724,118783],3],[[118784,119029],2],[[119030,119039],3],[[119040,119078],2],[[119079,119080],3],[119081,2],[[119082,119133],2],[119134,1,\"𝅗𝅥\"],[119135,1,\"𝅘𝅥\"],[119136,1,\"𝅘𝅥𝅮\"],[119137,1,\"𝅘𝅥𝅯\"],[119138,1,\"𝅘𝅥𝅰\"],[119139,1,\"𝅘𝅥𝅱\"],[119140,1,\"𝅘𝅥𝅲\"],[[119141,119154],2],[[119155,119162],3],[[119163,119226],2],[119227,1,\"𝆹𝅥\"],[119228,1,\"𝆺𝅥\"],[119229,1,\"𝆹𝅥𝅮\"],[119230,1,\"𝆺𝅥𝅮\"],[119231,1,\"𝆹𝅥𝅯\"],[119232,1,\"𝆺𝅥𝅯\"],[[119233,119261],2],[[119262,119272],2],[[119273,119274],2],[[119275,119295],3],[[119296,119365],2],[[119366,119487],3],[[119488,119507],2],[[119508,119519],3],[[119520,119539],2],[[119540,119551],3],[[119552,119638],2],[[119639,119647],3],[[119648,119665],2],[[119666,119672],2],[[119673,119807],3],[119808,1,\"a\"],[119809,1,\"b\"],[119810,1,\"c\"],[119811,1,\"d\"],[119812,1,\"e\"],[119813,1,\"f\"],[119814,1,\"g\"],[119815,1,\"h\"],[119816,1,\"i\"],[119817,1,\"j\"],[119818,1,\"k\"],[119819,1,\"l\"],[119820,1,\"m\"],[119821,1,\"n\"],[119822,1,\"o\"],[119823,1,\"p\"],[119824,1,\"q\"],[119825,1,\"r\"],[119826,1,\"s\"],[119827,1,\"t\"],[119828,1,\"u\"],[119829,1,\"v\"],[119830,1,\"w\"],[119831,1,\"x\"],[119832,1,\"y\"],[119833,1,\"z\"],[119834,1,\"a\"],[119835,1,\"b\"],[119836,1,\"c\"],[119837,1,\"d\"],[119838,1,\"e\"],[119839,1,\"f\"],[119840,1,\"g\"],[119841,1,\"h\"],[119842,1,\"i\"],[119843,1,\"j\"],[119844,1,\"k\"],[119845,1,\"l\"],[119846,1,\"m\"],[119847,1,\"n\"],[119848,1,\"o\"],[119849,1,\"p\"],[119850,1,\"q\"],[119851,1,\"r\"],[119852,1,\"s\"],[119853,1,\"t\"],[119854,1,\"u\"],[119855,1,\"v\"],[119856,1,\"w\"],[119857,1,\"x\"],[119858,1,\"y\"],[119859,1,\"z\"],[119860,1,\"a\"],[119861,1,\"b\"],[119862,1,\"c\"],[119863,1,\"d\"],[119864,1,\"e\"],[119865,1,\"f\"],[119866,1,\"g\"],[119867,1,\"h\"],[119868,1,\"i\"],[119869,1,\"j\"],[119870,1,\"k\"],[119871,1,\"l\"],[119872,1,\"m\"],[119873,1,\"n\"],[119874,1,\"o\"],[119875,1,\"p\"],[119876,1,\"q\"],[119877,1,\"r\"],[119878,1,\"s\"],[119879,1,\"t\"],[119880,1,\"u\"],[119881,1,\"v\"],[119882,1,\"w\"],[119883,1,\"x\"],[119884,1,\"y\"],[119885,1,\"z\"],[119886,1,\"a\"],[119887,1,\"b\"],[119888,1,\"c\"],[119889,1,\"d\"],[119890,1,\"e\"],[119891,1,\"f\"],[119892,1,\"g\"],[119893,3],[119894,1,\"i\"],[119895,1,\"j\"],[119896,1,\"k\"],[119897,1,\"l\"],[119898,1,\"m\"],[119899,1,\"n\"],[119900,1,\"o\"],[119901,1,\"p\"],[119902,1,\"q\"],[119903,1,\"r\"],[119904,1,\"s\"],[119905,1,\"t\"],[119906,1,\"u\"],[119907,1,\"v\"],[119908,1,\"w\"],[119909,1,\"x\"],[119910,1,\"y\"],[119911,1,\"z\"],[119912,1,\"a\"],[119913,1,\"b\"],[119914,1,\"c\"],[119915,1,\"d\"],[119916,1,\"e\"],[119917,1,\"f\"],[119918,1,\"g\"],[119919,1,\"h\"],[119920,1,\"i\"],[119921,1,\"j\"],[119922,1,\"k\"],[119923,1,\"l\"],[119924,1,\"m\"],[119925,1,\"n\"],[119926,1,\"o\"],[119927,1,\"p\"],[119928,1,\"q\"],[119929,1,\"r\"],[119930,1,\"s\"],[119931,1,\"t\"],[119932,1,\"u\"],[119933,1,\"v\"],[119934,1,\"w\"],[119935,1,\"x\"],[119936,1,\"y\"],[119937,1,\"z\"],[119938,1,\"a\"],[119939,1,\"b\"],[119940,1,\"c\"],[119941,1,\"d\"],[119942,1,\"e\"],[119943,1,\"f\"],[119944,1,\"g\"],[119945,1,\"h\"],[119946,1,\"i\"],[119947,1,\"j\"],[119948,1,\"k\"],[119949,1,\"l\"],[119950,1,\"m\"],[119951,1,\"n\"],[119952,1,\"o\"],[119953,1,\"p\"],[119954,1,\"q\"],[119955,1,\"r\"],[119956,1,\"s\"],[119957,1,\"t\"],[119958,1,\"u\"],[119959,1,\"v\"],[119960,1,\"w\"],[119961,1,\"x\"],[119962,1,\"y\"],[119963,1,\"z\"],[119964,1,\"a\"],[119965,3],[119966,1,\"c\"],[119967,1,\"d\"],[[119968,119969],3],[119970,1,\"g\"],[[119971,119972],3],[119973,1,\"j\"],[119974,1,\"k\"],[[119975,119976],3],[119977,1,\"n\"],[119978,1,\"o\"],[119979,1,\"p\"],[119980,1,\"q\"],[119981,3],[119982,1,\"s\"],[119983,1,\"t\"],[119984,1,\"u\"],[119985,1,\"v\"],[119986,1,\"w\"],[119987,1,\"x\"],[119988,1,\"y\"],[119989,1,\"z\"],[119990,1,\"a\"],[119991,1,\"b\"],[119992,1,\"c\"],[119993,1,\"d\"],[119994,3],[119995,1,\"f\"],[119996,3],[119997,1,\"h\"],[119998,1,\"i\"],[119999,1,\"j\"],[120000,1,\"k\"],[120001,1,\"l\"],[120002,1,\"m\"],[120003,1,\"n\"],[120004,3],[120005,1,\"p\"],[120006,1,\"q\"],[120007,1,\"r\"],[120008,1,\"s\"],[120009,1,\"t\"],[120010,1,\"u\"],[120011,1,\"v\"],[120012,1,\"w\"],[120013,1,\"x\"],[120014,1,\"y\"],[120015,1,\"z\"],[120016,1,\"a\"],[120017,1,\"b\"],[120018,1,\"c\"],[120019,1,\"d\"],[120020,1,\"e\"],[120021,1,\"f\"],[120022,1,\"g\"],[120023,1,\"h\"],[120024,1,\"i\"],[120025,1,\"j\"],[120026,1,\"k\"],[120027,1,\"l\"],[120028,1,\"m\"],[120029,1,\"n\"],[120030,1,\"o\"],[120031,1,\"p\"],[120032,1,\"q\"],[120033,1,\"r\"],[120034,1,\"s\"],[120035,1,\"t\"],[120036,1,\"u\"],[120037,1,\"v\"],[120038,1,\"w\"],[120039,1,\"x\"],[120040,1,\"y\"],[120041,1,\"z\"],[120042,1,\"a\"],[120043,1,\"b\"],[120044,1,\"c\"],[120045,1,\"d\"],[120046,1,\"e\"],[120047,1,\"f\"],[120048,1,\"g\"],[120049,1,\"h\"],[120050,1,\"i\"],[120051,1,\"j\"],[120052,1,\"k\"],[120053,1,\"l\"],[120054,1,\"m\"],[120055,1,\"n\"],[120056,1,\"o\"],[120057,1,\"p\"],[120058,1,\"q\"],[120059,1,\"r\"],[120060,1,\"s\"],[120061,1,\"t\"],[120062,1,\"u\"],[120063,1,\"v\"],[120064,1,\"w\"],[120065,1,\"x\"],[120066,1,\"y\"],[120067,1,\"z\"],[120068,1,\"a\"],[120069,1,\"b\"],[120070,3],[120071,1,\"d\"],[120072,1,\"e\"],[120073,1,\"f\"],[120074,1,\"g\"],[[120075,120076],3],[120077,1,\"j\"],[120078,1,\"k\"],[120079,1,\"l\"],[120080,1,\"m\"],[120081,1,\"n\"],[120082,1,\"o\"],[120083,1,\"p\"],[120084,1,\"q\"],[120085,3],[120086,1,\"s\"],[120087,1,\"t\"],[120088,1,\"u\"],[120089,1,\"v\"],[120090,1,\"w\"],[120091,1,\"x\"],[120092,1,\"y\"],[120093,3],[120094,1,\"a\"],[120095,1,\"b\"],[120096,1,\"c\"],[120097,1,\"d\"],[120098,1,\"e\"],[120099,1,\"f\"],[120100,1,\"g\"],[120101,1,\"h\"],[120102,1,\"i\"],[120103,1,\"j\"],[120104,1,\"k\"],[120105,1,\"l\"],[120106,1,\"m\"],[120107,1,\"n\"],[120108,1,\"o\"],[120109,1,\"p\"],[120110,1,\"q\"],[120111,1,\"r\"],[120112,1,\"s\"],[120113,1,\"t\"],[120114,1,\"u\"],[120115,1,\"v\"],[120116,1,\"w\"],[120117,1,\"x\"],[120118,1,\"y\"],[120119,1,\"z\"],[120120,1,\"a\"],[120121,1,\"b\"],[120122,3],[120123,1,\"d\"],[120124,1,\"e\"],[120125,1,\"f\"],[120126,1,\"g\"],[120127,3],[120128,1,\"i\"],[120129,1,\"j\"],[120130,1,\"k\"],[120131,1,\"l\"],[120132,1,\"m\"],[120133,3],[120134,1,\"o\"],[[120135,120137],3],[120138,1,\"s\"],[120139,1,\"t\"],[120140,1,\"u\"],[120141,1,\"v\"],[120142,1,\"w\"],[120143,1,\"x\"],[120144,1,\"y\"],[120145,3],[120146,1,\"a\"],[120147,1,\"b\"],[120148,1,\"c\"],[120149,1,\"d\"],[120150,1,\"e\"],[120151,1,\"f\"],[120152,1,\"g\"],[120153,1,\"h\"],[120154,1,\"i\"],[120155,1,\"j\"],[120156,1,\"k\"],[120157,1,\"l\"],[120158,1,\"m\"],[120159,1,\"n\"],[120160,1,\"o\"],[120161,1,\"p\"],[120162,1,\"q\"],[120163,1,\"r\"],[120164,1,\"s\"],[120165,1,\"t\"],[120166,1,\"u\"],[120167,1,\"v\"],[120168,1,\"w\"],[120169,1,\"x\"],[120170,1,\"y\"],[120171,1,\"z\"],[120172,1,\"a\"],[120173,1,\"b\"],[120174,1,\"c\"],[120175,1,\"d\"],[120176,1,\"e\"],[120177,1,\"f\"],[120178,1,\"g\"],[120179,1,\"h\"],[120180,1,\"i\"],[120181,1,\"j\"],[120182,1,\"k\"],[120183,1,\"l\"],[120184,1,\"m\"],[120185,1,\"n\"],[120186,1,\"o\"],[120187,1,\"p\"],[120188,1,\"q\"],[120189,1,\"r\"],[120190,1,\"s\"],[120191,1,\"t\"],[120192,1,\"u\"],[120193,1,\"v\"],[120194,1,\"w\"],[120195,1,\"x\"],[120196,1,\"y\"],[120197,1,\"z\"],[120198,1,\"a\"],[120199,1,\"b\"],[120200,1,\"c\"],[120201,1,\"d\"],[120202,1,\"e\"],[120203,1,\"f\"],[120204,1,\"g\"],[120205,1,\"h\"],[120206,1,\"i\"],[120207,1,\"j\"],[120208,1,\"k\"],[120209,1,\"l\"],[120210,1,\"m\"],[120211,1,\"n\"],[120212,1,\"o\"],[120213,1,\"p\"],[120214,1,\"q\"],[120215,1,\"r\"],[120216,1,\"s\"],[120217,1,\"t\"],[120218,1,\"u\"],[120219,1,\"v\"],[120220,1,\"w\"],[120221,1,\"x\"],[120222,1,\"y\"],[120223,1,\"z\"],[120224,1,\"a\"],[120225,1,\"b\"],[120226,1,\"c\"],[120227,1,\"d\"],[120228,1,\"e\"],[120229,1,\"f\"],[120230,1,\"g\"],[120231,1,\"h\"],[120232,1,\"i\"],[120233,1,\"j\"],[120234,1,\"k\"],[120235,1,\"l\"],[120236,1,\"m\"],[120237,1,\"n\"],[120238,1,\"o\"],[120239,1,\"p\"],[120240,1,\"q\"],[120241,1,\"r\"],[120242,1,\"s\"],[120243,1,\"t\"],[120244,1,\"u\"],[120245,1,\"v\"],[120246,1,\"w\"],[120247,1,\"x\"],[120248,1,\"y\"],[120249,1,\"z\"],[120250,1,\"a\"],[120251,1,\"b\"],[120252,1,\"c\"],[120253,1,\"d\"],[120254,1,\"e\"],[120255,1,\"f\"],[120256,1,\"g\"],[120257,1,\"h\"],[120258,1,\"i\"],[120259,1,\"j\"],[120260,1,\"k\"],[120261,1,\"l\"],[120262,1,\"m\"],[120263,1,\"n\"],[120264,1,\"o\"],[120265,1,\"p\"],[120266,1,\"q\"],[120267,1,\"r\"],[120268,1,\"s\"],[120269,1,\"t\"],[120270,1,\"u\"],[120271,1,\"v\"],[120272,1,\"w\"],[120273,1,\"x\"],[120274,1,\"y\"],[120275,1,\"z\"],[120276,1,\"a\"],[120277,1,\"b\"],[120278,1,\"c\"],[120279,1,\"d\"],[120280,1,\"e\"],[120281,1,\"f\"],[120282,1,\"g\"],[120283,1,\"h\"],[120284,1,\"i\"],[120285,1,\"j\"],[120286,1,\"k\"],[120287,1,\"l\"],[120288,1,\"m\"],[120289,1,\"n\"],[120290,1,\"o\"],[120291,1,\"p\"],[120292,1,\"q\"],[120293,1,\"r\"],[120294,1,\"s\"],[120295,1,\"t\"],[120296,1,\"u\"],[120297,1,\"v\"],[120298,1,\"w\"],[120299,1,\"x\"],[120300,1,\"y\"],[120301,1,\"z\"],[120302,1,\"a\"],[120303,1,\"b\"],[120304,1,\"c\"],[120305,1,\"d\"],[120306,1,\"e\"],[120307,1,\"f\"],[120308,1,\"g\"],[120309,1,\"h\"],[120310,1,\"i\"],[120311,1,\"j\"],[120312,1,\"k\"],[120313,1,\"l\"],[120314,1,\"m\"],[120315,1,\"n\"],[120316,1,\"o\"],[120317,1,\"p\"],[120318,1,\"q\"],[120319,1,\"r\"],[120320,1,\"s\"],[120321,1,\"t\"],[120322,1,\"u\"],[120323,1,\"v\"],[120324,1,\"w\"],[120325,1,\"x\"],[120326,1,\"y\"],[120327,1,\"z\"],[120328,1,\"a\"],[120329,1,\"b\"],[120330,1,\"c\"],[120331,1,\"d\"],[120332,1,\"e\"],[120333,1,\"f\"],[120334,1,\"g\"],[120335,1,\"h\"],[120336,1,\"i\"],[120337,1,\"j\"],[120338,1,\"k\"],[120339,1,\"l\"],[120340,1,\"m\"],[120341,1,\"n\"],[120342,1,\"o\"],[120343,1,\"p\"],[120344,1,\"q\"],[120345,1,\"r\"],[120346,1,\"s\"],[120347,1,\"t\"],[120348,1,\"u\"],[120349,1,\"v\"],[120350,1,\"w\"],[120351,1,\"x\"],[120352,1,\"y\"],[120353,1,\"z\"],[120354,1,\"a\"],[120355,1,\"b\"],[120356,1,\"c\"],[120357,1,\"d\"],[120358,1,\"e\"],[120359,1,\"f\"],[120360,1,\"g\"],[120361,1,\"h\"],[120362,1,\"i\"],[120363,1,\"j\"],[120364,1,\"k\"],[120365,1,\"l\"],[120366,1,\"m\"],[120367,1,\"n\"],[120368,1,\"o\"],[120369,1,\"p\"],[120370,1,\"q\"],[120371,1,\"r\"],[120372,1,\"s\"],[120373,1,\"t\"],[120374,1,\"u\"],[120375,1,\"v\"],[120376,1,\"w\"],[120377,1,\"x\"],[120378,1,\"y\"],[120379,1,\"z\"],[120380,1,\"a\"],[120381,1,\"b\"],[120382,1,\"c\"],[120383,1,\"d\"],[120384,1,\"e\"],[120385,1,\"f\"],[120386,1,\"g\"],[120387,1,\"h\"],[120388,1,\"i\"],[120389,1,\"j\"],[120390,1,\"k\"],[120391,1,\"l\"],[120392,1,\"m\"],[120393,1,\"n\"],[120394,1,\"o\"],[120395,1,\"p\"],[120396,1,\"q\"],[120397,1,\"r\"],[120398,1,\"s\"],[120399,1,\"t\"],[120400,1,\"u\"],[120401,1,\"v\"],[120402,1,\"w\"],[120403,1,\"x\"],[120404,1,\"y\"],[120405,1,\"z\"],[120406,1,\"a\"],[120407,1,\"b\"],[120408,1,\"c\"],[120409,1,\"d\"],[120410,1,\"e\"],[120411,1,\"f\"],[120412,1,\"g\"],[120413,1,\"h\"],[120414,1,\"i\"],[120415,1,\"j\"],[120416,1,\"k\"],[120417,1,\"l\"],[120418,1,\"m\"],[120419,1,\"n\"],[120420,1,\"o\"],[120421,1,\"p\"],[120422,1,\"q\"],[120423,1,\"r\"],[120424,1,\"s\"],[120425,1,\"t\"],[120426,1,\"u\"],[120427,1,\"v\"],[120428,1,\"w\"],[120429,1,\"x\"],[120430,1,\"y\"],[120431,1,\"z\"],[120432,1,\"a\"],[120433,1,\"b\"],[120434,1,\"c\"],[120435,1,\"d\"],[120436,1,\"e\"],[120437,1,\"f\"],[120438,1,\"g\"],[120439,1,\"h\"],[120440,1,\"i\"],[120441,1,\"j\"],[120442,1,\"k\"],[120443,1,\"l\"],[120444,1,\"m\"],[120445,1,\"n\"],[120446,1,\"o\"],[120447,1,\"p\"],[120448,1,\"q\"],[120449,1,\"r\"],[120450,1,\"s\"],[120451,1,\"t\"],[120452,1,\"u\"],[120453,1,\"v\"],[120454,1,\"w\"],[120455,1,\"x\"],[120456,1,\"y\"],[120457,1,\"z\"],[120458,1,\"a\"],[120459,1,\"b\"],[120460,1,\"c\"],[120461,1,\"d\"],[120462,1,\"e\"],[120463,1,\"f\"],[120464,1,\"g\"],[120465,1,\"h\"],[120466,1,\"i\"],[120467,1,\"j\"],[120468,1,\"k\"],[120469,1,\"l\"],[120470,1,\"m\"],[120471,1,\"n\"],[120472,1,\"o\"],[120473,1,\"p\"],[120474,1,\"q\"],[120475,1,\"r\"],[120476,1,\"s\"],[120477,1,\"t\"],[120478,1,\"u\"],[120479,1,\"v\"],[120480,1,\"w\"],[120481,1,\"x\"],[120482,1,\"y\"],[120483,1,\"z\"],[120484,1,\"ı\"],[120485,1,\"ȷ\"],[[120486,120487],3],[120488,1,\"α\"],[120489,1,\"β\"],[120490,1,\"γ\"],[120491,1,\"δ\"],[120492,1,\"ε\"],[120493,1,\"ζ\"],[120494,1,\"η\"],[120495,1,\"θ\"],[120496,1,\"ι\"],[120497,1,\"κ\"],[120498,1,\"λ\"],[120499,1,\"μ\"],[120500,1,\"ν\"],[120501,1,\"ξ\"],[120502,1,\"ο\"],[120503,1,\"π\"],[120504,1,\"ρ\"],[120505,1,\"θ\"],[120506,1,\"σ\"],[120507,1,\"τ\"],[120508,1,\"υ\"],[120509,1,\"φ\"],[120510,1,\"χ\"],[120511,1,\"ψ\"],[120512,1,\"ω\"],[120513,1,\"∇\"],[120514,1,\"α\"],[120515,1,\"β\"],[120516,1,\"γ\"],[120517,1,\"δ\"],[120518,1,\"ε\"],[120519,1,\"ζ\"],[120520,1,\"η\"],[120521,1,\"θ\"],[120522,1,\"ι\"],[120523,1,\"κ\"],[120524,1,\"λ\"],[120525,1,\"μ\"],[120526,1,\"ν\"],[120527,1,\"ξ\"],[120528,1,\"ο\"],[120529,1,\"π\"],[120530,1,\"ρ\"],[[120531,120532],1,\"σ\"],[120533,1,\"τ\"],[120534,1,\"υ\"],[120535,1,\"φ\"],[120536,1,\"χ\"],[120537,1,\"ψ\"],[120538,1,\"ω\"],[120539,1,\"∂\"],[120540,1,\"ε\"],[120541,1,\"θ\"],[120542,1,\"κ\"],[120543,1,\"φ\"],[120544,1,\"ρ\"],[120545,1,\"π\"],[120546,1,\"α\"],[120547,1,\"β\"],[120548,1,\"γ\"],[120549,1,\"δ\"],[120550,1,\"ε\"],[120551,1,\"ζ\"],[120552,1,\"η\"],[120553,1,\"θ\"],[120554,1,\"ι\"],[120555,1,\"κ\"],[120556,1,\"λ\"],[120557,1,\"μ\"],[120558,1,\"ν\"],[120559,1,\"ξ\"],[120560,1,\"ο\"],[120561,1,\"π\"],[120562,1,\"ρ\"],[120563,1,\"θ\"],[120564,1,\"σ\"],[120565,1,\"τ\"],[120566,1,\"υ\"],[120567,1,\"φ\"],[120568,1,\"χ\"],[120569,1,\"ψ\"],[120570,1,\"ω\"],[120571,1,\"∇\"],[120572,1,\"α\"],[120573,1,\"β\"],[120574,1,\"γ\"],[120575,1,\"δ\"],[120576,1,\"ε\"],[120577,1,\"ζ\"],[120578,1,\"η\"],[120579,1,\"θ\"],[120580,1,\"ι\"],[120581,1,\"κ\"],[120582,1,\"λ\"],[120583,1,\"μ\"],[120584,1,\"ν\"],[120585,1,\"ξ\"],[120586,1,\"ο\"],[120587,1,\"π\"],[120588,1,\"ρ\"],[[120589,120590],1,\"σ\"],[120591,1,\"τ\"],[120592,1,\"υ\"],[120593,1,\"φ\"],[120594,1,\"χ\"],[120595,1,\"ψ\"],[120596,1,\"ω\"],[120597,1,\"∂\"],[120598,1,\"ε\"],[120599,1,\"θ\"],[120600,1,\"κ\"],[120601,1,\"φ\"],[120602,1,\"ρ\"],[120603,1,\"π\"],[120604,1,\"α\"],[120605,1,\"β\"],[120606,1,\"γ\"],[120607,1,\"δ\"],[120608,1,\"ε\"],[120609,1,\"ζ\"],[120610,1,\"η\"],[120611,1,\"θ\"],[120612,1,\"ι\"],[120613,1,\"κ\"],[120614,1,\"λ\"],[120615,1,\"μ\"],[120616,1,\"ν\"],[120617,1,\"ξ\"],[120618,1,\"ο\"],[120619,1,\"π\"],[120620,1,\"ρ\"],[120621,1,\"θ\"],[120622,1,\"σ\"],[120623,1,\"τ\"],[120624,1,\"υ\"],[120625,1,\"φ\"],[120626,1,\"χ\"],[120627,1,\"ψ\"],[120628,1,\"ω\"],[120629,1,\"∇\"],[120630,1,\"α\"],[120631,1,\"β\"],[120632,1,\"γ\"],[120633,1,\"δ\"],[120634,1,\"ε\"],[120635,1,\"ζ\"],[120636,1,\"η\"],[120637,1,\"θ\"],[120638,1,\"ι\"],[120639,1,\"κ\"],[120640,1,\"λ\"],[120641,1,\"μ\"],[120642,1,\"ν\"],[120643,1,\"ξ\"],[120644,1,\"ο\"],[120645,1,\"π\"],[120646,1,\"ρ\"],[[120647,120648],1,\"σ\"],[120649,1,\"τ\"],[120650,1,\"υ\"],[120651,1,\"φ\"],[120652,1,\"χ\"],[120653,1,\"ψ\"],[120654,1,\"ω\"],[120655,1,\"∂\"],[120656,1,\"ε\"],[120657,1,\"θ\"],[120658,1,\"κ\"],[120659,1,\"φ\"],[120660,1,\"ρ\"],[120661,1,\"π\"],[120662,1,\"α\"],[120663,1,\"β\"],[120664,1,\"γ\"],[120665,1,\"δ\"],[120666,1,\"ε\"],[120667,1,\"ζ\"],[120668,1,\"η\"],[120669,1,\"θ\"],[120670,1,\"ι\"],[120671,1,\"κ\"],[120672,1,\"λ\"],[120673,1,\"μ\"],[120674,1,\"ν\"],[120675,1,\"ξ\"],[120676,1,\"ο\"],[120677,1,\"π\"],[120678,1,\"ρ\"],[120679,1,\"θ\"],[120680,1,\"σ\"],[120681,1,\"τ\"],[120682,1,\"υ\"],[120683,1,\"φ\"],[120684,1,\"χ\"],[120685,1,\"ψ\"],[120686,1,\"ω\"],[120687,1,\"∇\"],[120688,1,\"α\"],[120689,1,\"β\"],[120690,1,\"γ\"],[120691,1,\"δ\"],[120692,1,\"ε\"],[120693,1,\"ζ\"],[120694,1,\"η\"],[120695,1,\"θ\"],[120696,1,\"ι\"],[120697,1,\"κ\"],[120698,1,\"λ\"],[120699,1,\"μ\"],[120700,1,\"ν\"],[120701,1,\"ξ\"],[120702,1,\"ο\"],[120703,1,\"π\"],[120704,1,\"ρ\"],[[120705,120706],1,\"σ\"],[120707,1,\"τ\"],[120708,1,\"υ\"],[120709,1,\"φ\"],[120710,1,\"χ\"],[120711,1,\"ψ\"],[120712,1,\"ω\"],[120713,1,\"∂\"],[120714,1,\"ε\"],[120715,1,\"θ\"],[120716,1,\"κ\"],[120717,1,\"φ\"],[120718,1,\"ρ\"],[120719,1,\"π\"],[120720,1,\"α\"],[120721,1,\"β\"],[120722,1,\"γ\"],[120723,1,\"δ\"],[120724,1,\"ε\"],[120725,1,\"ζ\"],[120726,1,\"η\"],[120727,1,\"θ\"],[120728,1,\"ι\"],[120729,1,\"κ\"],[120730,1,\"λ\"],[120731,1,\"μ\"],[120732,1,\"ν\"],[120733,1,\"ξ\"],[120734,1,\"ο\"],[120735,1,\"π\"],[120736,1,\"ρ\"],[120737,1,\"θ\"],[120738,1,\"σ\"],[120739,1,\"τ\"],[120740,1,\"υ\"],[120741,1,\"φ\"],[120742,1,\"χ\"],[120743,1,\"ψ\"],[120744,1,\"ω\"],[120745,1,\"∇\"],[120746,1,\"α\"],[120747,1,\"β\"],[120748,1,\"γ\"],[120749,1,\"δ\"],[120750,1,\"ε\"],[120751,1,\"ζ\"],[120752,1,\"η\"],[120753,1,\"θ\"],[120754,1,\"ι\"],[120755,1,\"κ\"],[120756,1,\"λ\"],[120757,1,\"μ\"],[120758,1,\"ν\"],[120759,1,\"ξ\"],[120760,1,\"ο\"],[120761,1,\"π\"],[120762,1,\"ρ\"],[[120763,120764],1,\"σ\"],[120765,1,\"τ\"],[120766,1,\"υ\"],[120767,1,\"φ\"],[120768,1,\"χ\"],[120769,1,\"ψ\"],[120770,1,\"ω\"],[120771,1,\"∂\"],[120772,1,\"ε\"],[120773,1,\"θ\"],[120774,1,\"κ\"],[120775,1,\"φ\"],[120776,1,\"ρ\"],[120777,1,\"π\"],[[120778,120779],1,\"ϝ\"],[[120780,120781],3],[120782,1,\"0\"],[120783,1,\"1\"],[120784,1,\"2\"],[120785,1,\"3\"],[120786,1,\"4\"],[120787,1,\"5\"],[120788,1,\"6\"],[120789,1,\"7\"],[120790,1,\"8\"],[120791,1,\"9\"],[120792,1,\"0\"],[120793,1,\"1\"],[120794,1,\"2\"],[120795,1,\"3\"],[120796,1,\"4\"],[120797,1,\"5\"],[120798,1,\"6\"],[120799,1,\"7\"],[120800,1,\"8\"],[120801,1,\"9\"],[120802,1,\"0\"],[120803,1,\"1\"],[120804,1,\"2\"],[120805,1,\"3\"],[120806,1,\"4\"],[120807,1,\"5\"],[120808,1,\"6\"],[120809,1,\"7\"],[120810,1,\"8\"],[120811,1,\"9\"],[120812,1,\"0\"],[120813,1,\"1\"],[120814,1,\"2\"],[120815,1,\"3\"],[120816,1,\"4\"],[120817,1,\"5\"],[120818,1,\"6\"],[120819,1,\"7\"],[120820,1,\"8\"],[120821,1,\"9\"],[120822,1,\"0\"],[120823,1,\"1\"],[120824,1,\"2\"],[120825,1,\"3\"],[120826,1,\"4\"],[120827,1,\"5\"],[120828,1,\"6\"],[120829,1,\"7\"],[120830,1,\"8\"],[120831,1,\"9\"],[[120832,121343],2],[[121344,121398],2],[[121399,121402],2],[[121403,121452],2],[[121453,121460],2],[121461,2],[[121462,121475],2],[121476,2],[[121477,121483],2],[[121484,121498],3],[[121499,121503],2],[121504,3],[[121505,121519],2],[[121520,122623],3],[[122624,122654],2],[[122655,122660],3],[[122661,122666],2],[[122667,122879],3],[[122880,122886],2],[122887,3],[[122888,122904],2],[[122905,122906],3],[[122907,122913],2],[122914,3],[[122915,122916],2],[122917,3],[[122918,122922],2],[[122923,122927],3],[122928,1,\"а\"],[122929,1,\"б\"],[122930,1,\"в\"],[122931,1,\"г\"],[122932,1,\"д\"],[122933,1,\"е\"],[122934,1,\"ж\"],[122935,1,\"з\"],[122936,1,\"и\"],[122937,1,\"к\"],[122938,1,\"л\"],[122939,1,\"м\"],[122940,1,\"о\"],[122941,1,\"п\"],[122942,1,\"р\"],[122943,1,\"с\"],[122944,1,\"т\"],[122945,1,\"у\"],[122946,1,\"ф\"],[122947,1,\"х\"],[122948,1,\"ц\"],[122949,1,\"ч\"],[122950,1,\"ш\"],[122951,1,\"ы\"],[122952,1,\"э\"],[122953,1,\"ю\"],[122954,1,\"ꚉ\"],[122955,1,\"ә\"],[122956,1,\"і\"],[122957,1,\"ј\"],[122958,1,\"ө\"],[122959,1,\"ү\"],[122960,1,\"ӏ\"],[122961,1,\"а\"],[122962,1,\"б\"],[122963,1,\"в\"],[122964,1,\"г\"],[122965,1,\"д\"],[122966,1,\"е\"],[122967,1,\"ж\"],[122968,1,\"з\"],[122969,1,\"и\"],[122970,1,\"к\"],[122971,1,\"л\"],[122972,1,\"о\"],[122973,1,\"п\"],[122974,1,\"с\"],[122975,1,\"у\"],[122976,1,\"ф\"],[122977,1,\"х\"],[122978,1,\"ц\"],[122979,1,\"ч\"],[122980,1,\"ш\"],[122981,1,\"ъ\"],[122982,1,\"ы\"],[122983,1,\"ґ\"],[122984,1,\"і\"],[122985,1,\"ѕ\"],[122986,1,\"џ\"],[122987,1,\"ҫ\"],[122988,1,\"ꙑ\"],[122989,1,\"ұ\"],[[122990,123022],3],[123023,2],[[123024,123135],3],[[123136,123180],2],[[123181,123183],3],[[123184,123197],2],[[123198,123199],3],[[123200,123209],2],[[123210,123213],3],[123214,2],[123215,2],[[123216,123535],3],[[123536,123566],2],[[123567,123583],3],[[123584,123641],2],[[123642,123646],3],[123647,2],[[123648,124111],3],[[124112,124153],2],[[124154,124895],3],[[124896,124902],2],[124903,3],[[124904,124907],2],[124908,3],[[124909,124910],2],[124911,3],[[124912,124926],2],[124927,3],[[124928,125124],2],[[125125,125126],3],[[125127,125135],2],[[125136,125142],2],[[125143,125183],3],[125184,1,\"𞤢\"],[125185,1,\"𞤣\"],[125186,1,\"𞤤\"],[125187,1,\"𞤥\"],[125188,1,\"𞤦\"],[125189,1,\"𞤧\"],[125190,1,\"𞤨\"],[125191,1,\"𞤩\"],[125192,1,\"𞤪\"],[125193,1,\"𞤫\"],[125194,1,\"𞤬\"],[125195,1,\"𞤭\"],[125196,1,\"𞤮\"],[125197,1,\"𞤯\"],[125198,1,\"𞤰\"],[125199,1,\"𞤱\"],[125200,1,\"𞤲\"],[125201,1,\"𞤳\"],[125202,1,\"𞤴\"],[125203,1,\"𞤵\"],[125204,1,\"𞤶\"],[125205,1,\"𞤷\"],[125206,1,\"𞤸\"],[125207,1,\"𞤹\"],[125208,1,\"𞤺\"],[125209,1,\"𞤻\"],[125210,1,\"𞤼\"],[125211,1,\"𞤽\"],[125212,1,\"𞤾\"],[125213,1,\"𞤿\"],[125214,1,\"𞥀\"],[125215,1,\"𞥁\"],[125216,1,\"𞥂\"],[125217,1,\"𞥃\"],[[125218,125258],2],[125259,2],[[125260,125263],3],[[125264,125273],2],[[125274,125277],3],[[125278,125279],2],[[125280,126064],3],[[126065,126132],2],[[126133,126208],3],[[126209,126269],2],[[126270,126463],3],[126464,1,\"ا\"],[126465,1,\"ب\"],[126466,1,\"ج\"],[126467,1,\"د\"],[126468,3],[126469,1,\"و\"],[126470,1,\"ز\"],[126471,1,\"ح\"],[126472,1,\"ط\"],[126473,1,\"ي\"],[126474,1,\"ك\"],[126475,1,\"ل\"],[126476,1,\"م\"],[126477,1,\"ن\"],[126478,1,\"س\"],[126479,1,\"ع\"],[126480,1,\"ف\"],[126481,1,\"ص\"],[126482,1,\"ق\"],[126483,1,\"ر\"],[126484,1,\"ش\"],[126485,1,\"ت\"],[126486,1,\"ث\"],[126487,1,\"خ\"],[126488,1,\"ذ\"],[126489,1,\"ض\"],[126490,1,\"ظ\"],[126491,1,\"غ\"],[126492,1,\"ٮ\"],[126493,1,\"ں\"],[126494,1,\"ڡ\"],[126495,1,\"ٯ\"],[126496,3],[126497,1,\"ب\"],[126498,1,\"ج\"],[126499,3],[126500,1,\"ه\"],[[126501,126502],3],[126503,1,\"ح\"],[126504,3],[126505,1,\"ي\"],[126506,1,\"ك\"],[126507,1,\"ل\"],[126508,1,\"م\"],[126509,1,\"ن\"],[126510,1,\"س\"],[126511,1,\"ع\"],[126512,1,\"ف\"],[126513,1,\"ص\"],[126514,1,\"ق\"],[126515,3],[126516,1,\"ش\"],[126517,1,\"ت\"],[126518,1,\"ث\"],[126519,1,\"خ\"],[126520,3],[126521,1,\"ض\"],[126522,3],[126523,1,\"غ\"],[[126524,126529],3],[126530,1,\"ج\"],[[126531,126534],3],[126535,1,\"ح\"],[126536,3],[126537,1,\"ي\"],[126538,3],[126539,1,\"ل\"],[126540,3],[126541,1,\"ن\"],[126542,1,\"س\"],[126543,1,\"ع\"],[126544,3],[126545,1,\"ص\"],[126546,1,\"ق\"],[126547,3],[126548,1,\"ش\"],[[126549,126550],3],[126551,1,\"خ\"],[126552,3],[126553,1,\"ض\"],[126554,3],[126555,1,\"غ\"],[126556,3],[126557,1,\"ں\"],[126558,3],[126559,1,\"ٯ\"],[126560,3],[126561,1,\"ب\"],[126562,1,\"ج\"],[126563,3],[126564,1,\"ه\"],[[126565,126566],3],[126567,1,\"ح\"],[126568,1,\"ط\"],[126569,1,\"ي\"],[126570,1,\"ك\"],[126571,3],[126572,1,\"م\"],[126573,1,\"ن\"],[126574,1,\"س\"],[126575,1,\"ع\"],[126576,1,\"ف\"],[126577,1,\"ص\"],[126578,1,\"ق\"],[126579,3],[126580,1,\"ش\"],[126581,1,\"ت\"],[126582,1,\"ث\"],[126583,1,\"خ\"],[126584,3],[126585,1,\"ض\"],[126586,1,\"ظ\"],[126587,1,\"غ\"],[126588,1,\"ٮ\"],[126589,3],[126590,1,\"ڡ\"],[126591,3],[126592,1,\"ا\"],[126593,1,\"ب\"],[126594,1,\"ج\"],[126595,1,\"د\"],[126596,1,\"ه\"],[126597,1,\"و\"],[126598,1,\"ز\"],[126599,1,\"ح\"],[126600,1,\"ط\"],[126601,1,\"ي\"],[126602,3],[126603,1,\"ل\"],[126604,1,\"م\"],[126605,1,\"ن\"],[126606,1,\"س\"],[126607,1,\"ع\"],[126608,1,\"ف\"],[126609,1,\"ص\"],[126610,1,\"ق\"],[126611,1,\"ر\"],[126612,1,\"ش\"],[126613,1,\"ت\"],[126614,1,\"ث\"],[126615,1,\"خ\"],[126616,1,\"ذ\"],[126617,1,\"ض\"],[126618,1,\"ظ\"],[126619,1,\"غ\"],[[126620,126624],3],[126625,1,\"ب\"],[126626,1,\"ج\"],[126627,1,\"د\"],[126628,3],[126629,1,\"و\"],[126630,1,\"ز\"],[126631,1,\"ح\"],[126632,1,\"ط\"],[126633,1,\"ي\"],[126634,3],[126635,1,\"ل\"],[126636,1,\"م\"],[126637,1,\"ن\"],[126638,1,\"س\"],[126639,1,\"ع\"],[126640,1,\"ف\"],[126641,1,\"ص\"],[126642,1,\"ق\"],[126643,1,\"ر\"],[126644,1,\"ش\"],[126645,1,\"ت\"],[126646,1,\"ث\"],[126647,1,\"خ\"],[126648,1,\"ذ\"],[126649,1,\"ض\"],[126650,1,\"ظ\"],[126651,1,\"غ\"],[[126652,126703],3],[[126704,126705],2],[[126706,126975],3],[[126976,127019],2],[[127020,127023],3],[[127024,127123],2],[[127124,127135],3],[[127136,127150],2],[[127151,127152],3],[[127153,127166],2],[127167,2],[127168,3],[[127169,127183],2],[127184,3],[[127185,127199],2],[[127200,127221],2],[[127222,127231],3],[127232,3],[127233,5,\"0,\"],[127234,5,\"1,\"],[127235,5,\"2,\"],[127236,5,\"3,\"],[127237,5,\"4,\"],[127238,5,\"5,\"],[127239,5,\"6,\"],[127240,5,\"7,\"],[127241,5,\"8,\"],[127242,5,\"9,\"],[[127243,127244],2],[[127245,127247],2],[127248,5,\"(a)\"],[127249,5,\"(b)\"],[127250,5,\"(c)\"],[127251,5,\"(d)\"],[127252,5,\"(e)\"],[127253,5,\"(f)\"],[127254,5,\"(g)\"],[127255,5,\"(h)\"],[127256,5,\"(i)\"],[127257,5,\"(j)\"],[127258,5,\"(k)\"],[127259,5,\"(l)\"],[127260,5,\"(m)\"],[127261,5,\"(n)\"],[127262,5,\"(o)\"],[127263,5,\"(p)\"],[127264,5,\"(q)\"],[127265,5,\"(r)\"],[127266,5,\"(s)\"],[127267,5,\"(t)\"],[127268,5,\"(u)\"],[127269,5,\"(v)\"],[127270,5,\"(w)\"],[127271,5,\"(x)\"],[127272,5,\"(y)\"],[127273,5,\"(z)\"],[127274,1,\"〔s〕\"],[127275,1,\"c\"],[127276,1,\"r\"],[127277,1,\"cd\"],[127278,1,\"wz\"],[127279,2],[127280,1,\"a\"],[127281,1,\"b\"],[127282,1,\"c\"],[127283,1,\"d\"],[127284,1,\"e\"],[127285,1,\"f\"],[127286,1,\"g\"],[127287,1,\"h\"],[127288,1,\"i\"],[127289,1,\"j\"],[127290,1,\"k\"],[127291,1,\"l\"],[127292,1,\"m\"],[127293,1,\"n\"],[127294,1,\"o\"],[127295,1,\"p\"],[127296,1,\"q\"],[127297,1,\"r\"],[127298,1,\"s\"],[127299,1,\"t\"],[127300,1,\"u\"],[127301,1,\"v\"],[127302,1,\"w\"],[127303,1,\"x\"],[127304,1,\"y\"],[127305,1,\"z\"],[127306,1,\"hv\"],[127307,1,\"mv\"],[127308,1,\"sd\"],[127309,1,\"ss\"],[127310,1,\"ppv\"],[127311,1,\"wc\"],[[127312,127318],2],[127319,2],[[127320,127326],2],[127327,2],[[127328,127337],2],[127338,1,\"mc\"],[127339,1,\"md\"],[127340,1,\"mr\"],[[127341,127343],2],[[127344,127352],2],[127353,2],[127354,2],[[127355,127356],2],[[127357,127358],2],[127359,2],[[127360,127369],2],[[127370,127373],2],[[127374,127375],2],[127376,1,\"dj\"],[[127377,127386],2],[[127387,127404],2],[127405,2],[[127406,127461],3],[[127462,127487],2],[127488,1,\"ほか\"],[127489,1,\"ココ\"],[127490,1,\"サ\"],[[127491,127503],3],[127504,1,\"手\"],[127505,1,\"字\"],[127506,1,\"双\"],[127507,1,\"デ\"],[127508,1,\"二\"],[127509,1,\"多\"],[127510,1,\"解\"],[127511,1,\"天\"],[127512,1,\"交\"],[127513,1,\"映\"],[127514,1,\"無\"],[127515,1,\"料\"],[127516,1,\"前\"],[127517,1,\"後\"],[127518,1,\"再\"],[127519,1,\"新\"],[127520,1,\"初\"],[127521,1,\"終\"],[127522,1,\"生\"],[127523,1,\"販\"],[127524,1,\"声\"],[127525,1,\"吹\"],[127526,1,\"演\"],[127527,1,\"投\"],[127528,1,\"捕\"],[127529,1,\"一\"],[127530,1,\"三\"],[127531,1,\"遊\"],[127532,1,\"左\"],[127533,1,\"中\"],[127534,1,\"右\"],[127535,1,\"指\"],[127536,1,\"走\"],[127537,1,\"打\"],[127538,1,\"禁\"],[127539,1,\"空\"],[127540,1,\"合\"],[127541,1,\"満\"],[127542,1,\"有\"],[127543,1,\"月\"],[127544,1,\"申\"],[127545,1,\"割\"],[127546,1,\"営\"],[127547,1,\"配\"],[[127548,127551],3],[127552,1,\"〔本〕\"],[127553,1,\"〔三〕\"],[127554,1,\"〔二〕\"],[127555,1,\"〔安〕\"],[127556,1,\"〔点〕\"],[127557,1,\"〔打〕\"],[127558,1,\"〔盗〕\"],[127559,1,\"〔勝〕\"],[127560,1,\"〔敗〕\"],[[127561,127567],3],[127568,1,\"得\"],[127569,1,\"可\"],[[127570,127583],3],[[127584,127589],2],[[127590,127743],3],[[127744,127776],2],[[127777,127788],2],[[127789,127791],2],[[127792,127797],2],[127798,2],[[127799,127868],2],[127869,2],[[127870,127871],2],[[127872,127891],2],[[127892,127903],2],[[127904,127940],2],[127941,2],[[127942,127946],2],[[127947,127950],2],[[127951,127955],2],[[127956,127967],2],[[127968,127984],2],[[127985,127991],2],[[127992,127999],2],[[128000,128062],2],[128063,2],[128064,2],[128065,2],[[128066,128247],2],[128248,2],[[128249,128252],2],[[128253,128254],2],[128255,2],[[128256,128317],2],[[128318,128319],2],[[128320,128323],2],[[128324,128330],2],[[128331,128335],2],[[128336,128359],2],[[128360,128377],2],[128378,2],[[128379,128419],2],[128420,2],[[128421,128506],2],[[128507,128511],2],[128512,2],[[128513,128528],2],[128529,2],[[128530,128532],2],[128533,2],[128534,2],[128535,2],[128536,2],[128537,2],[128538,2],[128539,2],[[128540,128542],2],[128543,2],[[128544,128549],2],[[128550,128551],2],[[128552,128555],2],[128556,2],[128557,2],[[128558,128559],2],[[128560,128563],2],[128564,2],[[128565,128576],2],[[128577,128578],2],[[128579,128580],2],[[128581,128591],2],[[128592,128639],2],[[128640,128709],2],[[128710,128719],2],[128720,2],[[128721,128722],2],[[128723,128724],2],[128725,2],[[128726,128727],2],[[128728,128731],3],[128732,2],[[128733,128735],2],[[128736,128748],2],[[128749,128751],3],[[128752,128755],2],[[128756,128758],2],[[128759,128760],2],[128761,2],[128762,2],[[128763,128764],2],[[128765,128767],3],[[128768,128883],2],[[128884,128886],2],[[128887,128890],3],[[128891,128895],2],[[128896,128980],2],[[128981,128984],2],[128985,2],[[128986,128991],3],[[128992,129003],2],[[129004,129007],3],[129008,2],[[129009,129023],3],[[129024,129035],2],[[129036,129039],3],[[129040,129095],2],[[129096,129103],3],[[129104,129113],2],[[129114,129119],3],[[129120,129159],2],[[129160,129167],3],[[129168,129197],2],[[129198,129199],3],[[129200,129201],2],[[129202,129279],3],[[129280,129291],2],[129292,2],[[129293,129295],2],[[129296,129304],2],[[129305,129310],2],[129311,2],[[129312,129319],2],[[129320,129327],2],[129328,2],[[129329,129330],2],[[129331,129342],2],[129343,2],[[129344,129355],2],[129356,2],[[129357,129359],2],[[129360,129374],2],[[129375,129387],2],[[129388,129392],2],[129393,2],[129394,2],[[129395,129398],2],[[129399,129400],2],[129401,2],[129402,2],[129403,2],[[129404,129407],2],[[129408,129412],2],[[129413,129425],2],[[129426,129431],2],[[129432,129442],2],[[129443,129444],2],[[129445,129450],2],[[129451,129453],2],[[129454,129455],2],[[129456,129465],2],[[129466,129471],2],[129472,2],[[129473,129474],2],[[129475,129482],2],[129483,2],[129484,2],[[129485,129487],2],[[129488,129510],2],[[129511,129535],2],[[129536,129619],2],[[129620,129631],3],[[129632,129645],2],[[129646,129647],3],[[129648,129651],2],[129652,2],[[129653,129655],2],[[129656,129658],2],[[129659,129660],2],[[129661,129663],3],[[129664,129666],2],[[129667,129670],2],[[129671,129672],2],[[129673,129679],3],[[129680,129685],2],[[129686,129704],2],[[129705,129708],2],[[129709,129711],2],[[129712,129718],2],[[129719,129722],2],[[129723,129725],2],[129726,3],[129727,2],[[129728,129730],2],[[129731,129733],2],[[129734,129741],3],[[129742,129743],2],[[129744,129750],2],[[129751,129753],2],[[129754,129755],2],[[129756,129759],3],[[129760,129767],2],[129768,2],[[129769,129775],3],[[129776,129782],2],[[129783,129784],2],[[129785,129791],3],[[129792,129938],2],[129939,3],[[129940,129994],2],[[129995,130031],3],[130032,1,\"0\"],[130033,1,\"1\"],[130034,1,\"2\"],[130035,1,\"3\"],[130036,1,\"4\"],[130037,1,\"5\"],[130038,1,\"6\"],[130039,1,\"7\"],[130040,1,\"8\"],[130041,1,\"9\"],[[130042,131069],3],[[131070,131071],3],[[131072,173782],2],[[173783,173789],2],[[173790,173791],2],[[173792,173823],3],[[173824,177972],2],[[177973,177976],2],[177977,2],[[177978,177983],3],[[177984,178205],2],[[178206,178207],3],[[178208,183969],2],[[183970,183983],3],[[183984,191456],2],[[191457,191471],3],[[191472,192093],2],[[192094,194559],3],[194560,1,\"丽\"],[194561,1,\"丸\"],[194562,1,\"乁\"],[194563,1,\"𠄢\"],[194564,1,\"你\"],[194565,1,\"侮\"],[194566,1,\"侻\"],[194567,1,\"倂\"],[194568,1,\"偺\"],[194569,1,\"備\"],[194570,1,\"僧\"],[194571,1,\"像\"],[194572,1,\"㒞\"],[194573,1,\"𠘺\"],[194574,1,\"免\"],[194575,1,\"兔\"],[194576,1,\"兤\"],[194577,1,\"具\"],[194578,1,\"𠔜\"],[194579,1,\"㒹\"],[194580,1,\"內\"],[194581,1,\"再\"],[194582,1,\"𠕋\"],[194583,1,\"冗\"],[194584,1,\"冤\"],[194585,1,\"仌\"],[194586,1,\"冬\"],[194587,1,\"况\"],[194588,1,\"𩇟\"],[194589,1,\"凵\"],[194590,1,\"刃\"],[194591,1,\"㓟\"],[194592,1,\"刻\"],[194593,1,\"剆\"],[194594,1,\"割\"],[194595,1,\"剷\"],[194596,1,\"㔕\"],[194597,1,\"勇\"],[194598,1,\"勉\"],[194599,1,\"勤\"],[194600,1,\"勺\"],[194601,1,\"包\"],[194602,1,\"匆\"],[194603,1,\"北\"],[194604,1,\"卉\"],[194605,1,\"卑\"],[194606,1,\"博\"],[194607,1,\"即\"],[194608,1,\"卽\"],[[194609,194611],1,\"卿\"],[194612,1,\"𠨬\"],[194613,1,\"灰\"],[194614,1,\"及\"],[194615,1,\"叟\"],[194616,1,\"𠭣\"],[194617,1,\"叫\"],[194618,1,\"叱\"],[194619,1,\"吆\"],[194620,1,\"咞\"],[194621,1,\"吸\"],[194622,1,\"呈\"],[194623,1,\"周\"],[194624,1,\"咢\"],[194625,1,\"哶\"],[194626,1,\"唐\"],[194627,1,\"啓\"],[194628,1,\"啣\"],[[194629,194630],1,\"善\"],[194631,1,\"喙\"],[194632,1,\"喫\"],[194633,1,\"喳\"],[194634,1,\"嗂\"],[194635,1,\"圖\"],[194636,1,\"嘆\"],[194637,1,\"圗\"],[194638,1,\"噑\"],[194639,1,\"噴\"],[194640,1,\"切\"],[194641,1,\"壮\"],[194642,1,\"城\"],[194643,1,\"埴\"],[194644,1,\"堍\"],[194645,1,\"型\"],[194646,1,\"堲\"],[194647,1,\"報\"],[194648,1,\"墬\"],[194649,1,\"𡓤\"],[194650,1,\"売\"],[194651,1,\"壷\"],[194652,1,\"夆\"],[194653,1,\"多\"],[194654,1,\"夢\"],[194655,1,\"奢\"],[194656,1,\"𡚨\"],[194657,1,\"𡛪\"],[194658,1,\"姬\"],[194659,1,\"娛\"],[194660,1,\"娧\"],[194661,1,\"姘\"],[194662,1,\"婦\"],[194663,1,\"㛮\"],[194664,3],[194665,1,\"嬈\"],[[194666,194667],1,\"嬾\"],[194668,1,\"𡧈\"],[194669,1,\"寃\"],[194670,1,\"寘\"],[194671,1,\"寧\"],[194672,1,\"寳\"],[194673,1,\"𡬘\"],[194674,1,\"寿\"],[194675,1,\"将\"],[194676,3],[194677,1,\"尢\"],[194678,1,\"㞁\"],[194679,1,\"屠\"],[194680,1,\"屮\"],[194681,1,\"峀\"],[194682,1,\"岍\"],[194683,1,\"𡷤\"],[194684,1,\"嵃\"],[194685,1,\"𡷦\"],[194686,1,\"嵮\"],[194687,1,\"嵫\"],[194688,1,\"嵼\"],[194689,1,\"巡\"],[194690,1,\"巢\"],[194691,1,\"㠯\"],[194692,1,\"巽\"],[194693,1,\"帨\"],[194694,1,\"帽\"],[194695,1,\"幩\"],[194696,1,\"㡢\"],[194697,1,\"𢆃\"],[194698,1,\"㡼\"],[194699,1,\"庰\"],[194700,1,\"庳\"],[194701,1,\"庶\"],[194702,1,\"廊\"],[194703,1,\"𪎒\"],[194704,1,\"廾\"],[[194705,194706],1,\"𢌱\"],[194707,1,\"舁\"],[[194708,194709],1,\"弢\"],[194710,1,\"㣇\"],[194711,1,\"𣊸\"],[194712,1,\"𦇚\"],[194713,1,\"形\"],[194714,1,\"彫\"],[194715,1,\"㣣\"],[194716,1,\"徚\"],[194717,1,\"忍\"],[194718,1,\"志\"],[194719,1,\"忹\"],[194720,1,\"悁\"],[194721,1,\"㤺\"],[194722,1,\"㤜\"],[194723,1,\"悔\"],[194724,1,\"𢛔\"],[194725,1,\"惇\"],[194726,1,\"慈\"],[194727,1,\"慌\"],[194728,1,\"慎\"],[194729,1,\"慌\"],[194730,1,\"慺\"],[194731,1,\"憎\"],[194732,1,\"憲\"],[194733,1,\"憤\"],[194734,1,\"憯\"],[194735,1,\"懞\"],[194736,1,\"懲\"],[194737,1,\"懶\"],[194738,1,\"成\"],[194739,1,\"戛\"],[194740,1,\"扝\"],[194741,1,\"抱\"],[194742,1,\"拔\"],[194743,1,\"捐\"],[194744,1,\"𢬌\"],[194745,1,\"挽\"],[194746,1,\"拼\"],[194747,1,\"捨\"],[194748,1,\"掃\"],[194749,1,\"揤\"],[194750,1,\"𢯱\"],[194751,1,\"搢\"],[194752,1,\"揅\"],[194753,1,\"掩\"],[194754,1,\"㨮\"],[194755,1,\"摩\"],[194756,1,\"摾\"],[194757,1,\"撝\"],[194758,1,\"摷\"],[194759,1,\"㩬\"],[194760,1,\"敏\"],[194761,1,\"敬\"],[194762,1,\"𣀊\"],[194763,1,\"旣\"],[194764,1,\"書\"],[194765,1,\"晉\"],[194766,1,\"㬙\"],[194767,1,\"暑\"],[194768,1,\"㬈\"],[194769,1,\"㫤\"],[194770,1,\"冒\"],[194771,1,\"冕\"],[194772,1,\"最\"],[194773,1,\"暜\"],[194774,1,\"肭\"],[194775,1,\"䏙\"],[194776,1,\"朗\"],[194777,1,\"望\"],[194778,1,\"朡\"],[194779,1,\"杞\"],[194780,1,\"杓\"],[194781,1,\"𣏃\"],[194782,1,\"㭉\"],[194783,1,\"柺\"],[194784,1,\"枅\"],[194785,1,\"桒\"],[194786,1,\"梅\"],[194787,1,\"𣑭\"],[194788,1,\"梎\"],[194789,1,\"栟\"],[194790,1,\"椔\"],[194791,1,\"㮝\"],[194792,1,\"楂\"],[194793,1,\"榣\"],[194794,1,\"槪\"],[194795,1,\"檨\"],[194796,1,\"𣚣\"],[194797,1,\"櫛\"],[194798,1,\"㰘\"],[194799,1,\"次\"],[194800,1,\"𣢧\"],[194801,1,\"歔\"],[194802,1,\"㱎\"],[194803,1,\"歲\"],[194804,1,\"殟\"],[194805,1,\"殺\"],[194806,1,\"殻\"],[194807,1,\"𣪍\"],[194808,1,\"𡴋\"],[194809,1,\"𣫺\"],[194810,1,\"汎\"],[194811,1,\"𣲼\"],[194812,1,\"沿\"],[194813,1,\"泍\"],[194814,1,\"汧\"],[194815,1,\"洖\"],[194816,1,\"派\"],[194817,1,\"海\"],[194818,1,\"流\"],[194819,1,\"浩\"],[194820,1,\"浸\"],[194821,1,\"涅\"],[194822,1,\"𣴞\"],[194823,1,\"洴\"],[194824,1,\"港\"],[194825,1,\"湮\"],[194826,1,\"㴳\"],[194827,1,\"滋\"],[194828,1,\"滇\"],[194829,1,\"𣻑\"],[194830,1,\"淹\"],[194831,1,\"潮\"],[194832,1,\"𣽞\"],[194833,1,\"𣾎\"],[194834,1,\"濆\"],[194835,1,\"瀹\"],[194836,1,\"瀞\"],[194837,1,\"瀛\"],[194838,1,\"㶖\"],[194839,1,\"灊\"],[194840,1,\"災\"],[194841,1,\"灷\"],[194842,1,\"炭\"],[194843,1,\"𠔥\"],[194844,1,\"煅\"],[194845,1,\"𤉣\"],[194846,1,\"熜\"],[194847,3],[194848,1,\"爨\"],[194849,1,\"爵\"],[194850,1,\"牐\"],[194851,1,\"𤘈\"],[194852,1,\"犀\"],[194853,1,\"犕\"],[194854,1,\"𤜵\"],[194855,1,\"𤠔\"],[194856,1,\"獺\"],[194857,1,\"王\"],[194858,1,\"㺬\"],[194859,1,\"玥\"],[[194860,194861],1,\"㺸\"],[194862,1,\"瑇\"],[194863,1,\"瑜\"],[194864,1,\"瑱\"],[194865,1,\"璅\"],[194866,1,\"瓊\"],[194867,1,\"㼛\"],[194868,1,\"甤\"],[194869,1,\"𤰶\"],[194870,1,\"甾\"],[194871,1,\"𤲒\"],[194872,1,\"異\"],[194873,1,\"𢆟\"],[194874,1,\"瘐\"],[194875,1,\"𤾡\"],[194876,1,\"𤾸\"],[194877,1,\"𥁄\"],[194878,1,\"㿼\"],[194879,1,\"䀈\"],[194880,1,\"直\"],[194881,1,\"𥃳\"],[194882,1,\"𥃲\"],[194883,1,\"𥄙\"],[194884,1,\"𥄳\"],[194885,1,\"眞\"],[[194886,194887],1,\"真\"],[194888,1,\"睊\"],[194889,1,\"䀹\"],[194890,1,\"瞋\"],[194891,1,\"䁆\"],[194892,1,\"䂖\"],[194893,1,\"𥐝\"],[194894,1,\"硎\"],[194895,1,\"碌\"],[194896,1,\"磌\"],[194897,1,\"䃣\"],[194898,1,\"𥘦\"],[194899,1,\"祖\"],[194900,1,\"𥚚\"],[194901,1,\"𥛅\"],[194902,1,\"福\"],[194903,1,\"秫\"],[194904,1,\"䄯\"],[194905,1,\"穀\"],[194906,1,\"穊\"],[194907,1,\"穏\"],[194908,1,\"𥥼\"],[[194909,194910],1,\"𥪧\"],[194911,3],[194912,1,\"䈂\"],[194913,1,\"𥮫\"],[194914,1,\"篆\"],[194915,1,\"築\"],[194916,1,\"䈧\"],[194917,1,\"𥲀\"],[194918,1,\"糒\"],[194919,1,\"䊠\"],[194920,1,\"糨\"],[194921,1,\"糣\"],[194922,1,\"紀\"],[194923,1,\"𥾆\"],[194924,1,\"絣\"],[194925,1,\"䌁\"],[194926,1,\"緇\"],[194927,1,\"縂\"],[194928,1,\"繅\"],[194929,1,\"䌴\"],[194930,1,\"𦈨\"],[194931,1,\"𦉇\"],[194932,1,\"䍙\"],[194933,1,\"𦋙\"],[194934,1,\"罺\"],[194935,1,\"𦌾\"],[194936,1,\"羕\"],[194937,1,\"翺\"],[194938,1,\"者\"],[194939,1,\"𦓚\"],[194940,1,\"𦔣\"],[194941,1,\"聠\"],[194942,1,\"𦖨\"],[194943,1,\"聰\"],[194944,1,\"𣍟\"],[194945,1,\"䏕\"],[194946,1,\"育\"],[194947,1,\"脃\"],[194948,1,\"䐋\"],[194949,1,\"脾\"],[194950,1,\"媵\"],[194951,1,\"𦞧\"],[194952,1,\"𦞵\"],[194953,1,\"𣎓\"],[194954,1,\"𣎜\"],[194955,1,\"舁\"],[194956,1,\"舄\"],[194957,1,\"辞\"],[194958,1,\"䑫\"],[194959,1,\"芑\"],[194960,1,\"芋\"],[194961,1,\"芝\"],[194962,1,\"劳\"],[194963,1,\"花\"],[194964,1,\"芳\"],[194965,1,\"芽\"],[194966,1,\"苦\"],[194967,1,\"𦬼\"],[194968,1,\"若\"],[194969,1,\"茝\"],[194970,1,\"荣\"],[194971,1,\"莭\"],[194972,1,\"茣\"],[194973,1,\"莽\"],[194974,1,\"菧\"],[194975,1,\"著\"],[194976,1,\"荓\"],[194977,1,\"菊\"],[194978,1,\"菌\"],[194979,1,\"菜\"],[194980,1,\"𦰶\"],[194981,1,\"𦵫\"],[194982,1,\"𦳕\"],[194983,1,\"䔫\"],[194984,1,\"蓱\"],[194985,1,\"蓳\"],[194986,1,\"蔖\"],[194987,1,\"𧏊\"],[194988,1,\"蕤\"],[194989,1,\"𦼬\"],[194990,1,\"䕝\"],[194991,1,\"䕡\"],[194992,1,\"𦾱\"],[194993,1,\"𧃒\"],[194994,1,\"䕫\"],[194995,1,\"虐\"],[194996,1,\"虜\"],[194997,1,\"虧\"],[194998,1,\"虩\"],[194999,1,\"蚩\"],[195000,1,\"蚈\"],[195001,1,\"蜎\"],[195002,1,\"蛢\"],[195003,1,\"蝹\"],[195004,1,\"蜨\"],[195005,1,\"蝫\"],[195006,1,\"螆\"],[195007,3],[195008,1,\"蟡\"],[195009,1,\"蠁\"],[195010,1,\"䗹\"],[195011,1,\"衠\"],[195012,1,\"衣\"],[195013,1,\"𧙧\"],[195014,1,\"裗\"],[195015,1,\"裞\"],[195016,1,\"䘵\"],[195017,1,\"裺\"],[195018,1,\"㒻\"],[195019,1,\"𧢮\"],[195020,1,\"𧥦\"],[195021,1,\"䚾\"],[195022,1,\"䛇\"],[195023,1,\"誠\"],[195024,1,\"諭\"],[195025,1,\"變\"],[195026,1,\"豕\"],[195027,1,\"𧲨\"],[195028,1,\"貫\"],[195029,1,\"賁\"],[195030,1,\"贛\"],[195031,1,\"起\"],[195032,1,\"𧼯\"],[195033,1,\"𠠄\"],[195034,1,\"跋\"],[195035,1,\"趼\"],[195036,1,\"跰\"],[195037,1,\"𠣞\"],[195038,1,\"軔\"],[195039,1,\"輸\"],[195040,1,\"𨗒\"],[195041,1,\"𨗭\"],[195042,1,\"邔\"],[195043,1,\"郱\"],[195044,1,\"鄑\"],[195045,1,\"𨜮\"],[195046,1,\"鄛\"],[195047,1,\"鈸\"],[195048,1,\"鋗\"],[195049,1,\"鋘\"],[195050,1,\"鉼\"],[195051,1,\"鏹\"],[195052,1,\"鐕\"],[195053,1,\"𨯺\"],[195054,1,\"開\"],[195055,1,\"䦕\"],[195056,1,\"閷\"],[195057,1,\"𨵷\"],[195058,1,\"䧦\"],[195059,1,\"雃\"],[195060,1,\"嶲\"],[195061,1,\"霣\"],[195062,1,\"𩅅\"],[195063,1,\"𩈚\"],[195064,1,\"䩮\"],[195065,1,\"䩶\"],[195066,1,\"韠\"],[195067,1,\"𩐊\"],[195068,1,\"䪲\"],[195069,1,\"𩒖\"],[[195070,195071],1,\"頋\"],[195072,1,\"頩\"],[195073,1,\"𩖶\"],[195074,1,\"飢\"],[195075,1,\"䬳\"],[195076,1,\"餩\"],[195077,1,\"馧\"],[195078,1,\"駂\"],[195079,1,\"駾\"],[195080,1,\"䯎\"],[195081,1,\"𩬰\"],[195082,1,\"鬒\"],[195083,1,\"鱀\"],[195084,1,\"鳽\"],[195085,1,\"䳎\"],[195086,1,\"䳭\"],[195087,1,\"鵧\"],[195088,1,\"𪃎\"],[195089,1,\"䳸\"],[195090,1,\"𪄅\"],[195091,1,\"𪈎\"],[195092,1,\"𪊑\"],[195093,1,\"麻\"],[195094,1,\"䵖\"],[195095,1,\"黹\"],[195096,1,\"黾\"],[195097,1,\"鼅\"],[195098,1,\"鼏\"],[195099,1,\"鼖\"],[195100,1,\"鼻\"],[195101,1,\"𪘀\"],[[195102,196605],3],[[196606,196607],3],[[196608,201546],2],[[201547,201551],3],[[201552,205743],2],[[205744,262141],3],[[262142,262143],3],[[262144,327677],3],[[327678,327679],3],[[327680,393213],3],[[393214,393215],3],[[393216,458749],3],[[458750,458751],3],[[458752,524285],3],[[524286,524287],3],[[524288,589821],3],[[589822,589823],3],[[589824,655357],3],[[655358,655359],3],[[655360,720893],3],[[720894,720895],3],[[720896,786429],3],[[786430,786431],3],[[786432,851965],3],[[851966,851967],3],[[851968,917501],3],[[917502,917503],3],[917504,3],[917505,3],[[917506,917535],3],[[917536,917631],3],[[917632,917759],3],[[917760,917999],7],[[918000,983037],3],[[983038,983039],3],[[983040,1048573],3],[[1048574,1048575],3],[[1048576,1114109],3],[[1114110,1114111],3]]","\"use strict\";\n\nmodule.exports.STATUS_MAPPING = {\n  mapped: 1,\n  valid: 2,\n  disallowed: 3,\n  disallowed_STD3_valid: 4,\n  disallowed_STD3_mapped: 5,\n  deviation: 6,\n  ignored: 7\n};\n","\"use strict\";\n\nconst punycode = require(\"punycode/\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nconst { STATUS_MAPPING } = require(\"./lib/statusMapping.js\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/u.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    const min = Array.isArray(target[0]) ? target[0][0] : target[0];\n    const max = Array.isArray(target[0]) ? target[0][1] : target[0];\n\n    if (min <= val && max >= val) {\n      if (useSTD3ASCIIRules &&\n          (target[1] === STATUS_MAPPING.disallowed_STD3_valid || target[1] === STATUS_MAPPING.disallowed_STD3_mapped)) {\n        return [STATUS_MAPPING.disallowed, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_valid) {\n        return [STATUS_MAPPING.valid, ...target.slice(2)];\n      } else if (target[1] === STATUS_MAPPING.disallowed_STD3_mapped) {\n        return [STATUS_MAPPING.mapped, ...target.slice(2)];\n      }\n\n      return target.slice(1);\n    } else if (min > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, transitionalProcessing }) {\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case STATUS_MAPPING.disallowed:\n        processed += ch;\n        break;\n      case STATUS_MAPPING.ignored:\n        break;\n      case STATUS_MAPPING.mapped:\n        if (transitionalProcessing && ch === \"ẞ\") {\n          processed += \"ss\";\n        } else {\n          processed += mapping;\n        }\n        break;\n      case STATUS_MAPPING.deviation:\n        if (transitionalProcessing) {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case STATUS_MAPPING.valid:\n        processed += ch;\n        break;\n    }\n  }\n\n  return processed;\n}\n\nfunction validateLabel(label, {\n  checkHyphens,\n  checkBidi,\n  checkJoiners,\n  transitionalProcessing,\n  useSTD3ASCIIRules,\n  isBidi\n}) {\n  // \"must be satisfied for a non-empty label\"\n  if (label.length === 0) {\n    return true;\n  }\n\n  // \"1. The label must be in Unicode Normalization Form NFC.\"\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  // \"2. If CheckHyphens, the label must not contain a U+002D HYPHEN-MINUS character in both the\n  // third and fourth positions.\"\n  //\n  // \"3. If CheckHyphens, the label must neither begin nor end with a U+002D HYPHEN-MINUS character.\"\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  // \"4. If not CheckHyphens, the label must not begin with “xn--”.\"\n  // Disabled while we figure out https://github.com/whatwg/url/issues/803.\n  // if (!checkHyphens) {\n  //   if (label.startsWith(\"xn--\")) {\n  //     return false;\n  //   }\n  // }\n\n  // \"5. The label must not contain a U+002E ( . ) FULL STOP.\"\n  if (label.includes(\".\")) {\n    return false;\n  }\n\n  // \"6. The label must not begin with a combining mark, that is: General_Category=Mark.\"\n  if (regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n\n  // \"7. Each code point in the label must only have certain Status values according to Section 5\"\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if (transitionalProcessing) {\n      // \"For Transitional Processing (deprecated), each value must be valid.\"\n      if (status !== STATUS_MAPPING.valid) {\n        return false;\n      }\n    } else if (status !== STATUS_MAPPING.valid && status !== STATUS_MAPPING.deviation) {\n      // \"For Nontransitional Processing, each value must be either valid or deviation.\"\n      return false;\n    }\n  }\n\n  // \"8. If CheckJoiners, the label must satisify the ContextJ rules\"\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // \"9. If CheckBidi, and if the domain name is a Bidi domain name, then the label must satisfy...\"\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi && isBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  // 1. Map.\n  let string = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  let error = false;\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let transitionalProcessingForThisLabel = options.transitionalProcessing;\n    if (label.startsWith(\"xn--\")) {\n      if (containsNonASCII(label)) {\n        error = true;\n        continue;\n      }\n\n      try {\n        label = punycode.decode(label.substring(4));\n      } catch {\n        if (!options.ignoreInvalidPunycode) {\n          error = true;\n          continue;\n        }\n      }\n      labels[i] = label;\n      transitionalProcessingForThisLabel = false;\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, {\n      ...options,\n      transitionalProcessing: transitionalProcessingForThisLabel,\n      isBidi\n    });\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  verifyDNSLength = false,\n  transitionalProcessing = false,\n  ignoreInvalidPunycode = false\n} = {}) {\n  const result = processing(domainName, {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules,\n    transitionalProcessing,\n    ignoreInvalidPunycode\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return `xn--${punycode.encode(l)}`;\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  transitionalProcessing = false,\n  ignoreInvalidPunycode = false\n} = {}) {\n  const result = processing(domainName, {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules,\n    transitionalProcessing,\n    ignoreInvalidPunycode\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n","\"use strict\";\n\n// Note that we take code points as JS numbers, not JS strings.\n\nfunction isASCIIDigit(c) {\n  return c >= 0x30 && c <= 0x39;\n}\n\nfunction isASCIIAlpha(c) {\n  return (c >= 0x41 && c <= 0x5A) || (c >= 0x61 && c <= 0x7A);\n}\n\nfunction isASCIIAlphanumeric(c) {\n  return isASCIIAlpha(c) || isASCIIDigit(c);\n}\n\nfunction isASCIIHex(c) {\n  return isASCIIDigit(c) || (c >= 0x41 && c <= 0x46) || (c >= 0x61 && c <= 0x66);\n}\n\nmodule.exports = {\n  isASCIIDigit,\n  isASCIIAlpha,\n  isASCIIAlphanumeric,\n  isASCIIHex\n};\n","\"use strict\";\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder(\"utf-8\", { ignoreBOM: true });\n\nfunction utf8Encode(string) {\n  return utf8Encoder.encode(string);\n}\n\nfunction utf8DecodeWithoutBOM(bytes) {\n  return utf8Decoder.decode(bytes);\n}\n\nmodule.exports = {\n  utf8Encode,\n  utf8DecodeWithoutBOM\n};\n","\"use strict\";\nconst { isASCIIHex } = require(\"./infra\");\nconst { utf8Encode } = require(\"./encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#percent-encode\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = `0${hex}`;\n  }\n\n  return `%${hex}`;\n}\n\n// https://url.spec.whatwg.org/#percent-decode\nfunction percentDecodeBytes(input) {\n  const output = new Uint8Array(input.byteLength);\n  let outputIndex = 0;\n  for (let i = 0; i < input.byteLength; ++i) {\n    const byte = input[i];\n    if (byte !== 0x25) {\n      output[outputIndex++] = byte;\n    } else if (byte === 0x25 && (!isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2]))) {\n      output[outputIndex++] = byte;\n    } else {\n      const bytePoint = parseInt(String.fromCodePoint(input[i + 1], input[i + 2]), 16);\n      output[outputIndex++] = bytePoint;\n      i += 2;\n    }\n  }\n\n  return output.slice(0, outputIndex);\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\nfunction percentDecodeString(input) {\n  const bytes = utf8Encode(input);\n  return percentDecodeBytes(bytes);\n}\n\n// https://url.spec.whatwg.org/#c0-control-percent-encode-set\nfunction isC0ControlPercentEncode(c) {\n  return c <= 0x1F || c > 0x7E;\n}\n\n// https://url.spec.whatwg.org/#fragment-percent-encode-set\nconst extraFragmentPercentEncodeSet = new Set([p(\" \"), p(\"\\\"\"), p(\"<\"), p(\">\"), p(\"`\")]);\nfunction isFragmentPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraFragmentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#query-percent-encode-set\nconst extraQueryPercentEncodeSet = new Set([p(\" \"), p(\"\\\"\"), p(\"#\"), p(\"<\"), p(\">\")]);\nfunction isQueryPercentEncode(c) {\n  return isC0ControlPercentEncode(c) || extraQueryPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#special-query-percent-encode-set\nfunction isSpecialQueryPercentEncode(c) {\n  return isQueryPercentEncode(c) || c === p(\"'\");\n}\n\n// https://url.spec.whatwg.org/#path-percent-encode-set\nconst extraPathPercentEncodeSet = new Set([p(\"?\"), p(\"`\"), p(\"{\"), p(\"}\")]);\nfunction isPathPercentEncode(c) {\n  return isQueryPercentEncode(c) || extraPathPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#userinfo-percent-encode-set\nconst extraUserinfoPercentEncodeSet =\n  new Set([p(\"/\"), p(\":\"), p(\";\"), p(\"=\"), p(\"@\"), p(\"[\"), p(\"\\\\\"), p(\"]\"), p(\"^\"), p(\"|\")]);\nfunction isUserinfoPercentEncode(c) {\n  return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#component-percent-encode-set\nconst extraComponentPercentEncodeSet = new Set([p(\"$\"), p(\"%\"), p(\"&\"), p(\"+\"), p(\",\")]);\nfunction isComponentPercentEncode(c) {\n  return isUserinfoPercentEncode(c) || extraComponentPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#application-x-www-form-urlencoded-percent-encode-set\nconst extraURLEncodedPercentEncodeSet = new Set([p(\"!\"), p(\"'\"), p(\"(\"), p(\")\"), p(\"~\")]);\nfunction isURLEncodedPercentEncode(c) {\n  return isComponentPercentEncode(c) || extraURLEncodedPercentEncodeSet.has(c);\n}\n\n// https://url.spec.whatwg.org/#code-point-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#utf-8-percent-encode\n// Assuming encoding is always utf-8 allows us to trim one of the logic branches. TODO: support encoding.\n// The \"-Internal\" variant here has code points as JS strings. The external version used by other files has code points\n// as JS numbers, like the rest of the codebase.\nfunction utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate) {\n  const bytes = utf8Encode(codePoint);\n  let output = \"\";\n  for (const byte of bytes) {\n    // Our percentEncodePredicate operates on bytes, not code points, so this is slightly different from the spec.\n    if (!percentEncodePredicate(byte)) {\n      output += String.fromCharCode(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n\n  return output;\n}\n\nfunction utf8PercentEncodeCodePoint(codePoint, percentEncodePredicate) {\n  return utf8PercentEncodeCodePointInternal(String.fromCodePoint(codePoint), percentEncodePredicate);\n}\n\n// https://url.spec.whatwg.org/#string-percent-encode-after-encoding\n// https://url.spec.whatwg.org/#string-utf-8-percent-encode\nfunction utf8PercentEncodeString(input, percentEncodePredicate, spaceAsPlus = false) {\n  let output = \"\";\n  for (const codePoint of input) {\n    if (spaceAsPlus && codePoint === \" \") {\n      output += \"+\";\n    } else {\n      output += utf8PercentEncodeCodePointInternal(codePoint, percentEncodePredicate);\n    }\n  }\n  return output;\n}\n\nmodule.exports = {\n  isC0ControlPercentEncode,\n  isFragmentPercentEncode,\n  isQueryPercentEncode,\n  isSpecialQueryPercentEncode,\n  isPathPercentEncode,\n  isUserinfoPercentEncode,\n  isURLEncodedPercentEncode,\n  percentDecodeString,\n  percentDecodeBytes,\n  utf8PercentEncodeString,\n  utf8PercentEncodeCodePoint\n};\n","\"use strict\";\nconst tr46 = require(\"tr46\");\n\nconst infra = require(\"./infra\");\nconst { utf8DecodeWithoutBOM } = require(\"./encoding\");\nconst { percentDecodeString, utf8PercentEncodeCodePoint, utf8PercentEncodeString, isC0ControlPercentEncode,\n  isFragmentPercentEncode, isQueryPercentEncode, isSpecialQueryPercentEncode, isPathPercentEncode,\n  isUserinfoPercentEncode } = require(\"./percent-encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\nconst specialSchemes = {\n  ftp: 21,\n  file: null,\n  http: 80,\n  https: 443,\n  ws: 80,\n  wss: 443\n};\n\nconst failure = Symbol(\"failure\");\n\nfunction countSymbols(str) {\n  return [...str].length;\n}\n\nfunction at(input, idx) {\n  const c = input[idx];\n  return isNaN(c) ? undefined : String.fromCodePoint(c);\n}\n\nfunction isSingleDot(buffer) {\n  return buffer === \".\" || buffer.toLowerCase() === \"%2e\";\n}\n\nfunction isDoubleDot(buffer) {\n  buffer = buffer.toLowerCase();\n  return buffer === \"..\" || buffer === \"%2e.\" || buffer === \".%2e\" || buffer === \"%2e%2e\";\n}\n\nfunction isWindowsDriveLetterCodePoints(cp1, cp2) {\n  return infra.isASCIIAlpha(cp1) && (cp2 === p(\":\") || cp2 === p(\"|\"));\n}\n\nfunction isWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && (string[1] === \":\" || string[1] === \"|\");\n}\n\nfunction isNormalizedWindowsDriveLetterString(string) {\n  return string.length === 2 && infra.isASCIIAlpha(string.codePointAt(0)) && string[1] === \":\";\n}\n\nfunction containsForbiddenHostCodePoint(string) {\n  return string.search(/\\u0000|\\u0009|\\u000A|\\u000D|\\u0020|#|\\/|:|<|>|\\?|@|\\[|\\\\|\\]|\\^|\\|/u) !== -1;\n}\n\nfunction containsForbiddenDomainCodePoint(string) {\n  return containsForbiddenHostCodePoint(string) || string.search(/[\\u0000-\\u001F]|%|\\u007F/u) !== -1;\n}\n\nfunction isSpecialScheme(scheme) {\n  return specialSchemes[scheme] !== undefined;\n}\n\nfunction isSpecial(url) {\n  return isSpecialScheme(url.scheme);\n}\n\nfunction isNotSpecial(url) {\n  return !isSpecialScheme(url.scheme);\n}\n\nfunction defaultPort(scheme) {\n  return specialSchemes[scheme];\n}\n\nfunction parseIPv4Number(input) {\n  if (input === \"\") {\n    return failure;\n  }\n\n  let R = 10;\n\n  if (input.length >= 2 && input.charAt(0) === \"0\" && input.charAt(1).toLowerCase() === \"x\") {\n    input = input.substring(2);\n    R = 16;\n  } else if (input.length >= 2 && input.charAt(0) === \"0\") {\n    input = input.substring(1);\n    R = 8;\n  }\n\n  if (input === \"\") {\n    return 0;\n  }\n\n  let regex = /[^0-7]/u;\n  if (R === 10) {\n    regex = /[^0-9]/u;\n  }\n  if (R === 16) {\n    regex = /[^0-9A-Fa-f]/u;\n  }\n\n  if (regex.test(input)) {\n    return failure;\n  }\n\n  return parseInt(input, R);\n}\n\nfunction parseIPv4(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length > 1) {\n      parts.pop();\n    }\n  }\n\n  if (parts.length > 4) {\n    return failure;\n  }\n\n  const numbers = [];\n  for (const part of parts) {\n    const n = parseIPv4Number(part);\n    if (n === failure) {\n      return failure;\n    }\n\n    numbers.push(n);\n  }\n\n  for (let i = 0; i < numbers.length - 1; ++i) {\n    if (numbers[i] > 255) {\n      return failure;\n    }\n  }\n  if (numbers[numbers.length - 1] >= 256 ** (5 - numbers.length)) {\n    return failure;\n  }\n\n  let ipv4 = numbers.pop();\n  let counter = 0;\n\n  for (const n of numbers) {\n    ipv4 += n * 256 ** (3 - counter);\n    ++counter;\n  }\n\n  return ipv4;\n}\n\nfunction serializeIPv4(address) {\n  let output = \"\";\n  let n = address;\n\n  for (let i = 1; i <= 4; ++i) {\n    output = String(n % 256) + output;\n    if (i !== 4) {\n      output = `.${output}`;\n    }\n    n = Math.floor(n / 256);\n  }\n\n  return output;\n}\n\nfunction parseIPv6(input) {\n  const address = [0, 0, 0, 0, 0, 0, 0, 0];\n  let pieceIndex = 0;\n  let compress = null;\n  let pointer = 0;\n\n  input = Array.from(input, c => c.codePointAt(0));\n\n  if (input[pointer] === p(\":\")) {\n    if (input[pointer + 1] !== p(\":\")) {\n      return failure;\n    }\n\n    pointer += 2;\n    ++pieceIndex;\n    compress = pieceIndex;\n  }\n\n  while (pointer < input.length) {\n    if (pieceIndex === 8) {\n      return failure;\n    }\n\n    if (input[pointer] === p(\":\")) {\n      if (compress !== null) {\n        return failure;\n      }\n      ++pointer;\n      ++pieceIndex;\n      compress = pieceIndex;\n      continue;\n    }\n\n    let value = 0;\n    let length = 0;\n\n    while (length < 4 && infra.isASCIIHex(input[pointer])) {\n      value = value * 0x10 + parseInt(at(input, pointer), 16);\n      ++pointer;\n      ++length;\n    }\n\n    if (input[pointer] === p(\".\")) {\n      if (length === 0) {\n        return failure;\n      }\n\n      pointer -= length;\n\n      if (pieceIndex > 6) {\n        return failure;\n      }\n\n      let numbersSeen = 0;\n\n      while (input[pointer] !== undefined) {\n        let ipv4Piece = null;\n\n        if (numbersSeen > 0) {\n          if (input[pointer] === p(\".\") && numbersSeen < 4) {\n            ++pointer;\n          } else {\n            return failure;\n          }\n        }\n\n        if (!infra.isASCIIDigit(input[pointer])) {\n          return failure;\n        }\n\n        while (infra.isASCIIDigit(input[pointer])) {\n          const number = parseInt(at(input, pointer));\n          if (ipv4Piece === null) {\n            ipv4Piece = number;\n          } else if (ipv4Piece === 0) {\n            return failure;\n          } else {\n            ipv4Piece = ipv4Piece * 10 + number;\n          }\n          if (ipv4Piece > 255) {\n            return failure;\n          }\n          ++pointer;\n        }\n\n        address[pieceIndex] = address[pieceIndex] * 0x100 + ipv4Piece;\n\n        ++numbersSeen;\n\n        if (numbersSeen === 2 || numbersSeen === 4) {\n          ++pieceIndex;\n        }\n      }\n\n      if (numbersSeen !== 4) {\n        return failure;\n      }\n\n      break;\n    } else if (input[pointer] === p(\":\")) {\n      ++pointer;\n      if (input[pointer] === undefined) {\n        return failure;\n      }\n    } else if (input[pointer] !== undefined) {\n      return failure;\n    }\n\n    address[pieceIndex] = value;\n    ++pieceIndex;\n  }\n\n  if (compress !== null) {\n    let swaps = pieceIndex - compress;\n    pieceIndex = 7;\n    while (pieceIndex !== 0 && swaps > 0) {\n      const temp = address[compress + swaps - 1];\n      address[compress + swaps - 1] = address[pieceIndex];\n      address[pieceIndex] = temp;\n      --pieceIndex;\n      --swaps;\n    }\n  } else if (compress === null && pieceIndex !== 8) {\n    return failure;\n  }\n\n  return address;\n}\n\nfunction serializeIPv6(address) {\n  let output = \"\";\n  const compress = findTheIPv6AddressCompressedPieceIndex(address);\n  let ignore0 = false;\n\n  for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {\n    if (ignore0 && address[pieceIndex] === 0) {\n      continue;\n    } else if (ignore0) {\n      ignore0 = false;\n    }\n\n    if (compress === pieceIndex) {\n      const separator = pieceIndex === 0 ? \"::\" : \":\";\n      output += separator;\n      ignore0 = true;\n      continue;\n    }\n\n    output += address[pieceIndex].toString(16);\n\n    if (pieceIndex !== 7) {\n      output += \":\";\n    }\n  }\n\n  return output;\n}\n\nfunction parseHost(input, isOpaque = false) {\n  if (input[0] === \"[\") {\n    if (input[input.length - 1] !== \"]\") {\n      return failure;\n    }\n\n    return parseIPv6(input.substring(1, input.length - 1));\n  }\n\n  if (isOpaque) {\n    return parseOpaqueHost(input);\n  }\n\n  const domain = utf8DecodeWithoutBOM(percentDecodeString(input));\n  const asciiDomain = domainToASCII(domain);\n  if (asciiDomain === failure) {\n    return failure;\n  }\n\n  if (containsForbiddenDomainCodePoint(asciiDomain)) {\n    return failure;\n  }\n\n  if (endsInANumber(asciiDomain)) {\n    return parseIPv4(asciiDomain);\n  }\n\n  return asciiDomain;\n}\n\nfunction endsInANumber(input) {\n  const parts = input.split(\".\");\n  if (parts[parts.length - 1] === \"\") {\n    if (parts.length === 1) {\n      return false;\n    }\n    parts.pop();\n  }\n\n  const last = parts[parts.length - 1];\n  if (parseIPv4Number(last) !== failure) {\n    return true;\n  }\n\n  if (/^[0-9]+$/u.test(last)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction parseOpaqueHost(input) {\n  if (containsForbiddenHostCodePoint(input)) {\n    return failure;\n  }\n\n  return utf8PercentEncodeString(input, isC0ControlPercentEncode);\n}\n\nfunction findTheIPv6AddressCompressedPieceIndex(address) {\n  let longestIndex = null;\n  let longestSize = 1; // only find elements > 1\n  let foundIndex = null;\n  let foundSize = 0;\n\n  for (let pieceIndex = 0; pieceIndex < address.length; ++pieceIndex) {\n    if (address[pieceIndex] !== 0) {\n      if (foundSize > longestSize) {\n        longestIndex = foundIndex;\n        longestSize = foundSize;\n      }\n\n      foundIndex = null;\n      foundSize = 0;\n    } else {\n      if (foundIndex === null) {\n        foundIndex = pieceIndex;\n      }\n      ++foundSize;\n    }\n  }\n\n  if (foundSize > longestSize) {\n    return foundIndex;\n  }\n\n  return longestIndex;\n}\n\nfunction serializeHost(host) {\n  if (typeof host === \"number\") {\n    return serializeIPv4(host);\n  }\n\n  // IPv6 serializer\n  if (host instanceof Array) {\n    return `[${serializeIPv6(host)}]`;\n  }\n\n  return host;\n}\n\nfunction domainToASCII(domain, beStrict = false) {\n  const result = tr46.toASCII(domain, {\n    checkBidi: true,\n    checkHyphens: false,\n    checkJoiners: true,\n    useSTD3ASCIIRules: beStrict,\n    verifyDNSLength: beStrict\n  });\n  if (result === null || result === \"\") {\n    return failure;\n  }\n  return result;\n}\n\nfunction trimControlChars(url) {\n  return url.replace(/^[\\u0000-\\u001F\\u0020]+|[\\u0000-\\u001F\\u0020]+$/ug, \"\");\n}\n\nfunction trimTabAndNewline(url) {\n  return url.replace(/\\u0009|\\u000A|\\u000D/ug, \"\");\n}\n\nfunction shortenPath(url) {\n  const { path } = url;\n  if (path.length === 0) {\n    return;\n  }\n  if (url.scheme === \"file\" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {\n    return;\n  }\n\n  path.pop();\n}\n\nfunction includesCredentials(url) {\n  return url.username !== \"\" || url.password !== \"\";\n}\n\nfunction cannotHaveAUsernamePasswordPort(url) {\n  return url.host === null || url.host === \"\" || url.scheme === \"file\";\n}\n\nfunction hasAnOpaquePath(url) {\n  return typeof url.path === \"string\";\n}\n\nfunction isNormalizedWindowsDriveLetter(string) {\n  return /^[A-Za-z]:$/u.test(string);\n}\n\nfunction URLStateMachine(input, base, encodingOverride, url, stateOverride) {\n  this.pointer = 0;\n  this.input = input;\n  this.base = base || null;\n  this.encodingOverride = encodingOverride || \"utf-8\";\n  this.stateOverride = stateOverride;\n  this.url = url;\n  this.failure = false;\n  this.parseError = false;\n\n  if (!this.url) {\n    this.url = {\n      scheme: \"\",\n      username: \"\",\n      password: \"\",\n      host: null,\n      port: null,\n      path: [],\n      query: null,\n      fragment: null\n    };\n\n    const res = trimControlChars(this.input);\n    if (res !== this.input) {\n      this.parseError = true;\n    }\n    this.input = res;\n  }\n\n  const res = trimTabAndNewline(this.input);\n  if (res !== this.input) {\n    this.parseError = true;\n  }\n  this.input = res;\n\n  this.state = stateOverride || \"scheme start\";\n\n  this.buffer = \"\";\n  this.atFlag = false;\n  this.arrFlag = false;\n  this.passwordTokenSeenFlag = false;\n\n  this.input = Array.from(this.input, c => c.codePointAt(0));\n\n  for (; this.pointer <= this.input.length; ++this.pointer) {\n    const c = this.input[this.pointer];\n    const cStr = isNaN(c) ? undefined : String.fromCodePoint(c);\n\n    // exec state machine\n    const ret = this[`parse ${this.state}`](c, cStr);\n    if (!ret) {\n      break; // terminate algorithm\n    } else if (ret === failure) {\n      this.failure = true;\n      break;\n    }\n  }\n}\n\nURLStateMachine.prototype[\"parse scheme start\"] = function parseSchemeStart(c, cStr) {\n  if (infra.isASCIIAlpha(c)) {\n    this.buffer += cStr.toLowerCase();\n    this.state = \"scheme\";\n  } else if (!this.stateOverride) {\n    this.state = \"no scheme\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse scheme\"] = function parseScheme(c, cStr) {\n  if (infra.isASCIIAlphanumeric(c) || c === p(\"+\") || c === p(\"-\") || c === p(\".\")) {\n    this.buffer += cStr.toLowerCase();\n  } else if (c === p(\":\")) {\n    if (this.stateOverride) {\n      if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {\n        return false;\n      }\n\n      if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {\n        return false;\n      }\n\n      if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === \"file\") {\n        return false;\n      }\n\n      if (this.url.scheme === \"file\" && this.url.host === \"\") {\n        return false;\n      }\n    }\n    this.url.scheme = this.buffer;\n    if (this.stateOverride) {\n      if (this.url.port === defaultPort(this.url.scheme)) {\n        this.url.port = null;\n      }\n      return false;\n    }\n    this.buffer = \"\";\n    if (this.url.scheme === \"file\") {\n      if (this.input[this.pointer + 1] !== p(\"/\") || this.input[this.pointer + 2] !== p(\"/\")) {\n        this.parseError = true;\n      }\n      this.state = \"file\";\n    } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {\n      this.state = \"special relative or authority\";\n    } else if (isSpecial(this.url)) {\n      this.state = \"special authority slashes\";\n    } else if (this.input[this.pointer + 1] === p(\"/\")) {\n      this.state = \"path or authority\";\n      ++this.pointer;\n    } else {\n      this.url.path = \"\";\n      this.state = \"opaque path\";\n    }\n  } else if (!this.stateOverride) {\n    this.buffer = \"\";\n    this.state = \"no scheme\";\n    this.pointer = -1;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse no scheme\"] = function parseNoScheme(c) {\n  if (this.base === null || (hasAnOpaquePath(this.base) && c !== p(\"#\"))) {\n    return failure;\n  } else if (hasAnOpaquePath(this.base) && c === p(\"#\")) {\n    this.url.scheme = this.base.scheme;\n    this.url.path = this.base.path;\n    this.url.query = this.base.query;\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (this.base.scheme === \"file\") {\n    this.state = \"file\";\n    --this.pointer;\n  } else {\n    this.state = \"relative\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special relative or authority\"] = function parseSpecialRelativeOrAuthority(c) {\n  if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"relative\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path or authority\"] = function parsePathOrAuthority(c) {\n  if (c === p(\"/\")) {\n    this.state = \"authority\";\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse relative\"] = function parseRelative(c) {\n  this.url.scheme = this.base.scheme;\n  if (c === p(\"/\")) {\n    this.state = \"relative slash\";\n  } else if (isSpecial(this.url) && c === p(\"\\\\\")) {\n    this.parseError = true;\n    this.state = \"relative slash\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      this.url.path.pop();\n      this.state = \"path\";\n      --this.pointer;\n    }\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse relative slash\"] = function parseRelativeSlash(c) {\n  if (isSpecial(this.url) && (c === p(\"/\") || c === p(\"\\\\\"))) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"special authority ignore slashes\";\n  } else if (c === p(\"/\")) {\n    this.state = \"authority\";\n  } else {\n    this.url.username = this.base.username;\n    this.url.password = this.base.password;\n    this.url.host = this.base.host;\n    this.url.port = this.base.port;\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special authority slashes\"] = function parseSpecialAuthoritySlashes(c) {\n  if (c === p(\"/\") && this.input[this.pointer + 1] === p(\"/\")) {\n    this.state = \"special authority ignore slashes\";\n    ++this.pointer;\n  } else {\n    this.parseError = true;\n    this.state = \"special authority ignore slashes\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse special authority ignore slashes\"] = function parseSpecialAuthorityIgnoreSlashes(c) {\n  if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n    this.state = \"authority\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse authority\"] = function parseAuthority(c, cStr) {\n  if (c === p(\"@\")) {\n    this.parseError = true;\n    if (this.atFlag) {\n      this.buffer = `%40${this.buffer}`;\n    }\n    this.atFlag = true;\n\n    // careful, this is based on buffer and has its own pointer (this.pointer != pointer) and inner chars\n    const len = countSymbols(this.buffer);\n    for (let pointer = 0; pointer < len; ++pointer) {\n      const codePoint = this.buffer.codePointAt(pointer);\n\n      if (codePoint === p(\":\") && !this.passwordTokenSeenFlag) {\n        this.passwordTokenSeenFlag = true;\n        continue;\n      }\n      const encodedCodePoints = utf8PercentEncodeCodePoint(codePoint, isUserinfoPercentEncode);\n      if (this.passwordTokenSeenFlag) {\n        this.url.password += encodedCodePoints;\n      } else {\n        this.url.username += encodedCodePoints;\n      }\n    }\n    this.buffer = \"\";\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\"))) {\n    if (this.atFlag && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n    this.pointer -= countSymbols(this.buffer) + 1;\n    this.buffer = \"\";\n    this.state = \"host\";\n  } else {\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse hostname\"] =\nURLStateMachine.prototype[\"parse host\"] = function parseHostName(c, cStr) {\n  if (this.stateOverride && this.url.scheme === \"file\") {\n    --this.pointer;\n    this.state = \"file host\";\n  } else if (c === p(\":\") && !this.arrFlag) {\n    if (this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    }\n\n    if (this.stateOverride === \"hostname\") {\n      return false;\n    }\n\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"port\";\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\"))) {\n    --this.pointer;\n    if (isSpecial(this.url) && this.buffer === \"\") {\n      this.parseError = true;\n      return failure;\n    } else if (this.stateOverride && this.buffer === \"\" &&\n               (includesCredentials(this.url) || this.url.port !== null)) {\n      this.parseError = true;\n      return false;\n    }\n\n    const host = parseHost(this.buffer, isNotSpecial(this.url));\n    if (host === failure) {\n      return failure;\n    }\n\n    this.url.host = host;\n    this.buffer = \"\";\n    this.state = \"path start\";\n    if (this.stateOverride) {\n      return false;\n    }\n  } else {\n    if (c === p(\"[\")) {\n      this.arrFlag = true;\n    } else if (c === p(\"]\")) {\n      this.arrFlag = false;\n    }\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse port\"] = function parsePort(c, cStr) {\n  if (infra.isASCIIDigit(c)) {\n    this.buffer += cStr;\n  } else if (isNaN(c) || c === p(\"/\") || c === p(\"?\") || c === p(\"#\") ||\n             (isSpecial(this.url) && c === p(\"\\\\\")) ||\n             this.stateOverride) {\n    if (this.buffer !== \"\") {\n      const port = parseInt(this.buffer);\n      if (port > 2 ** 16 - 1) {\n        this.parseError = true;\n        return failure;\n      }\n      this.url.port = port === defaultPort(this.url.scheme) ? null : port;\n      this.buffer = \"\";\n    }\n    if (this.stateOverride) {\n      return false;\n    }\n    this.state = \"path start\";\n    --this.pointer;\n  } else {\n    this.parseError = true;\n    return failure;\n  }\n\n  return true;\n};\n\nconst fileOtherwiseCodePoints = new Set([p(\"/\"), p(\"\\\\\"), p(\"?\"), p(\"#\")]);\n\nfunction startsWithWindowsDriveLetter(input, pointer) {\n  const length = input.length - pointer;\n  return length >= 2 &&\n    isWindowsDriveLetterCodePoints(input[pointer], input[pointer + 1]) &&\n    (length === 2 || fileOtherwiseCodePoints.has(input[pointer + 2]));\n}\n\nURLStateMachine.prototype[\"parse file\"] = function parseFile(c) {\n  this.url.scheme = \"file\";\n  this.url.host = \"\";\n\n  if (c === p(\"/\") || c === p(\"\\\\\")) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"file slash\";\n  } else if (this.base !== null && this.base.scheme === \"file\") {\n    this.url.host = this.base.host;\n    this.url.path = this.base.path.slice();\n    this.url.query = this.base.query;\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    } else if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    } else if (!isNaN(c)) {\n      this.url.query = null;\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer)) {\n        shortenPath(this.url);\n      } else {\n        this.parseError = true;\n        this.url.path = [];\n      }\n\n      this.state = \"path\";\n      --this.pointer;\n    }\n  } else {\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse file slash\"] = function parseFileSlash(c) {\n  if (c === p(\"/\") || c === p(\"\\\\\")) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"file host\";\n  } else {\n    if (this.base !== null && this.base.scheme === \"file\") {\n      if (!startsWithWindowsDriveLetter(this.input, this.pointer) &&\n          isNormalizedWindowsDriveLetterString(this.base.path[0])) {\n        this.url.path.push(this.base.path[0]);\n      }\n      this.url.host = this.base.host;\n    }\n    this.state = \"path\";\n    --this.pointer;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse file host\"] = function parseFileHost(c, cStr) {\n  if (isNaN(c) || c === p(\"/\") || c === p(\"\\\\\") || c === p(\"?\") || c === p(\"#\")) {\n    --this.pointer;\n    if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {\n      this.parseError = true;\n      this.state = \"path\";\n    } else if (this.buffer === \"\") {\n      this.url.host = \"\";\n      if (this.stateOverride) {\n        return false;\n      }\n      this.state = \"path start\";\n    } else {\n      let host = parseHost(this.buffer, isNotSpecial(this.url));\n      if (host === failure) {\n        return failure;\n      }\n      if (host === \"localhost\") {\n        host = \"\";\n      }\n      this.url.host = host;\n\n      if (this.stateOverride) {\n        return false;\n      }\n\n      this.buffer = \"\";\n      this.state = \"path start\";\n    }\n  } else {\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path start\"] = function parsePathStart(c) {\n  if (isSpecial(this.url)) {\n    if (c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n    this.state = \"path\";\n\n    if (c !== p(\"/\") && c !== p(\"\\\\\")) {\n      --this.pointer;\n    }\n  } else if (!this.stateOverride && c === p(\"?\")) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (!this.stateOverride && c === p(\"#\")) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else if (c !== undefined) {\n    this.state = \"path\";\n    if (c !== p(\"/\")) {\n      --this.pointer;\n    }\n  } else if (this.stateOverride && this.url.host === null) {\n    this.url.path.push(\"\");\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse path\"] = function parsePath(c) {\n  if (isNaN(c) || c === p(\"/\") || (isSpecial(this.url) && c === p(\"\\\\\")) ||\n      (!this.stateOverride && (c === p(\"?\") || c === p(\"#\")))) {\n    if (isSpecial(this.url) && c === p(\"\\\\\")) {\n      this.parseError = true;\n    }\n\n    if (isDoubleDot(this.buffer)) {\n      shortenPath(this.url);\n      if (c !== p(\"/\") && !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n        this.url.path.push(\"\");\n      }\n    } else if (isSingleDot(this.buffer) && c !== p(\"/\") &&\n               !(isSpecial(this.url) && c === p(\"\\\\\"))) {\n      this.url.path.push(\"\");\n    } else if (!isSingleDot(this.buffer)) {\n      if (this.url.scheme === \"file\" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {\n        this.buffer = `${this.buffer[0]}:`;\n      }\n      this.url.path.push(this.buffer);\n    }\n    this.buffer = \"\";\n    if (c === p(\"?\")) {\n      this.url.query = \"\";\n      this.state = \"query\";\n    }\n    if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.buffer += utf8PercentEncodeCodePoint(c, isPathPercentEncode);\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse opaque path\"] = function parseOpaquePath(c) {\n  if (c === p(\"?\")) {\n    this.url.query = \"\";\n    this.state = \"query\";\n  } else if (c === p(\"#\")) {\n    this.url.fragment = \"\";\n    this.state = \"fragment\";\n  } else {\n    // TODO: Add: not a URL code point\n    if (!isNaN(c) && c !== p(\"%\")) {\n      this.parseError = true;\n    }\n\n    if (c === p(\"%\") &&\n        (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n         !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    if (!isNaN(c)) {\n      this.url.path += utf8PercentEncodeCodePoint(c, isC0ControlPercentEncode);\n    }\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse query\"] = function parseQuery(c, cStr) {\n  if (!isSpecial(this.url) || this.url.scheme === \"ws\" || this.url.scheme === \"wss\") {\n    this.encodingOverride = \"utf-8\";\n  }\n\n  if ((!this.stateOverride && c === p(\"#\")) || isNaN(c)) {\n    const queryPercentEncodePredicate = isSpecial(this.url) ? isSpecialQueryPercentEncode : isQueryPercentEncode;\n    this.url.query += utf8PercentEncodeString(this.buffer, queryPercentEncodePredicate);\n\n    this.buffer = \"\";\n\n    if (c === p(\"#\")) {\n      this.url.fragment = \"\";\n      this.state = \"fragment\";\n    }\n  } else if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.buffer += cStr;\n  }\n\n  return true;\n};\n\nURLStateMachine.prototype[\"parse fragment\"] = function parseFragment(c) {\n  if (!isNaN(c)) {\n    // TODO: If c is not a URL code point and not \"%\", parse error.\n    if (c === p(\"%\") &&\n      (!infra.isASCIIHex(this.input[this.pointer + 1]) ||\n        !infra.isASCIIHex(this.input[this.pointer + 2]))) {\n      this.parseError = true;\n    }\n\n    this.url.fragment += utf8PercentEncodeCodePoint(c, isFragmentPercentEncode);\n  }\n\n  return true;\n};\n\nfunction serializeURL(url, excludeFragment) {\n  let output = `${url.scheme}:`;\n  if (url.host !== null) {\n    output += \"//\";\n\n    if (url.username !== \"\" || url.password !== \"\") {\n      output += url.username;\n      if (url.password !== \"\") {\n        output += `:${url.password}`;\n      }\n      output += \"@\";\n    }\n\n    output += serializeHost(url.host);\n\n    if (url.port !== null) {\n      output += `:${url.port}`;\n    }\n  }\n\n  if (url.host === null && !hasAnOpaquePath(url) && url.path.length > 1 && url.path[0] === \"\") {\n    output += \"/.\";\n  }\n  output += serializePath(url);\n\n  if (url.query !== null) {\n    output += `?${url.query}`;\n  }\n\n  if (!excludeFragment && url.fragment !== null) {\n    output += `#${url.fragment}`;\n  }\n\n  return output;\n}\n\nfunction serializeOrigin(tuple) {\n  let result = `${tuple.scheme}://`;\n  result += serializeHost(tuple.host);\n\n  if (tuple.port !== null) {\n    result += `:${tuple.port}`;\n  }\n\n  return result;\n}\n\nfunction serializePath(url) {\n  if (hasAnOpaquePath(url)) {\n    return url.path;\n  }\n\n  let output = \"\";\n  for (const segment of url.path) {\n    output += `/${segment}`;\n  }\n  return output;\n}\n\nmodule.exports.serializeURL = serializeURL;\n\nmodule.exports.serializePath = serializePath;\n\nmodule.exports.serializeURLOrigin = function (url) {\n  // https://url.spec.whatwg.org/#concept-url-origin\n  switch (url.scheme) {\n    case \"blob\": {\n      const pathURL = module.exports.parseURL(serializePath(url));\n      if (pathURL === null) {\n        return \"null\";\n      }\n      if (pathURL.scheme !== \"http\" && pathURL.scheme !== \"https\") {\n        return \"null\";\n      }\n      return module.exports.serializeURLOrigin(pathURL);\n    }\n    case \"ftp\":\n    case \"http\":\n    case \"https\":\n    case \"ws\":\n    case \"wss\":\n      return serializeOrigin({\n        scheme: url.scheme,\n        host: url.host,\n        port: url.port\n      });\n    case \"file\":\n      // The spec says:\n      // > Unfortunate as it is, this is left as an exercise to the reader. When in doubt, return a new opaque origin.\n      // Browsers tested so far:\n      // - Chrome says \"file://\", but treats file: URLs as cross-origin for most (all?) purposes; see e.g.\n      //   https://bugs.chromium.org/p/chromium/issues/detail?id=37586\n      // - Firefox says \"null\", but treats file: URLs as same-origin sometimes based on directory stuff; see\n      //   https://developer.mozilla.org/en-US/docs/Archive/Misc_top_level/Same-origin_policy_for_file:_URIs\n      return \"null\";\n    default:\n      // serializing an opaque origin returns \"null\"\n      return \"null\";\n  }\n};\n\nmodule.exports.basicURLParse = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);\n  if (usm.failure) {\n    return null;\n  }\n\n  return usm.url;\n};\n\nmodule.exports.setTheUsername = function (url, username) {\n  url.username = utf8PercentEncodeString(username, isUserinfoPercentEncode);\n};\n\nmodule.exports.setThePassword = function (url, password) {\n  url.password = utf8PercentEncodeString(password, isUserinfoPercentEncode);\n};\n\nmodule.exports.serializeHost = serializeHost;\n\nmodule.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;\n\nmodule.exports.hasAnOpaquePath = hasAnOpaquePath;\n\nmodule.exports.serializeInteger = function (integer) {\n  return String(integer);\n};\n\nmodule.exports.parseURL = function (input, options) {\n  if (options === undefined) {\n    options = {};\n  }\n\n  // We don't handle blobs, so this just delegates:\n  return module.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });\n};\n","\"use strict\";\nconst { utf8Encode, utf8DecodeWithoutBOM } = require(\"./encoding\");\nconst { percentDecodeBytes, utf8PercentEncodeString, isURLEncodedPercentEncode } = require(\"./percent-encoding\");\n\nfunction p(char) {\n  return char.codePointAt(0);\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-parser\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, p(\"&\"));\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name, value;\n    const indexOfEqual = bytes.indexOf(p(\"=\"));\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = new Uint8Array(0);\n    }\n\n    name = replaceByteInByteSequence(name, 0x2B, 0x20);\n    value = replaceByteInByteSequence(value, 0x2B, 0x20);\n\n    const nameString = utf8DecodeWithoutBOM(percentDecodeBytes(name));\n    const valueString = utf8DecodeWithoutBOM(percentDecodeBytes(value));\n\n    output.push([nameString, valueString]);\n  }\n  return output;\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-string-parser\nfunction parseUrlencodedString(input) {\n  return parseUrlencoded(utf8Encode(input));\n}\n\n// https://url.spec.whatwg.org/#concept-urlencoded-serializer\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    // TODO \"get the output encoding\", i.e. handle encoding labels vs. names.\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n\n    const name = utf8PercentEncodeString(tuple[0], isURLEncodedPercentEncode, true);\n\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n\n    value = utf8PercentEncodeString(value, isURLEncodedPercentEncode, true);\n\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nmodule.exports = {\n  parseUrlencodedString,\n  serializeUrlencoded\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (typeof value !== \"function\") {\n    throw new globalObject.TypeError(context + \" is not a function\");\n  }\n\n  function invokeTheCallbackFunction(...args) {\n    const thisArg = utils.tryWrapperForImpl(this);\n    let callResult;\n\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    callResult = Reflect.apply(value, thisArg, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = (...args) => {\n    for (let i = 0; i < args.length; i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    let callResult = Reflect.construct(value, args);\n\n    callResult = conversions[\"any\"](callResult, { context: context, globals: globalObject });\n\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n\n  return invokeTheCallbackFunction;\n};\n","\"use strict\";\nconst urlencoded = require(\"./urlencoded\");\n\nexports.implementation = class URLSearchParamsImpl {\n  constructor(globalObject, constructorArgs, { doNotStripQMark = false }) {\n    let init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      for (const pair of init) {\n        if (pair.length !== 2) {\n          throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" +\n                              \"contain exactly two elements.\");\n        }\n        this._list.push([pair[0], pair[1]]);\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (const name of Object.keys(init)) {\n        const value = init[name];\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n\n  _updateSteps() {\n    if (this._url !== null) {\n      let serializedQuery = urlencoded.serializeUrlencoded(this._list);\n      if (serializedQuery === \"\") {\n        serializedQuery = null;\n      }\n\n      this._url._url.query = serializedQuery;\n\n      if (serializedQuery === null) {\n        this._url._potentiallyStripTrailingSpacesFromAnOpaquePath();\n      }\n    }\n  }\n\n  get size() {\n    return this._list.length;\n  }\n\n  append(name, value) {\n    this._list.push([name, value]);\n    this._updateSteps();\n  }\n\n  delete(name, value) {\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name && (value === undefined || this._list[i][1] === value)) {\n        this._list.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n    this._updateSteps();\n  }\n\n  get(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return tuple[1];\n      }\n    }\n    return null;\n  }\n\n  getAll(name) {\n    const output = [];\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        output.push(tuple[1]);\n      }\n    }\n    return output;\n  }\n\n  has(name, value) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name && (value === undefined || tuple[1] === value)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  set(name, value) {\n    let found = false;\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        if (found) {\n          this._list.splice(i, 1);\n        } else {\n          found = true;\n          this._list[i][1] = value;\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n    if (!found) {\n      this._list.push([name, value]);\n    }\n    this._updateSteps();\n  }\n\n  sort() {\n    this._list.sort((a, b) => {\n      if (a[0] < b[0]) {\n        return -1;\n      }\n      if (a[0] > b[0]) {\n        return 1;\n      }\n      return 0;\n    });\n\n    this._updateSteps();\n  }\n\n  [Symbol.iterator]() {\n    return this._list[Symbol.iterator]();\n  }\n\n  toString() {\n    return urlencoded.serializeUrlencoded(this._list);\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst Function = require(\"./Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"URLSearchParams\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'URLSearchParams'.`);\n};\n\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"URLSearchParams Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: { target, kind, index: 0 },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"URLSearchParams\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class URLSearchParams {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'URLSearchParams': parameter 1\" + \" sequence\" + \" is not an iterable object.\"\n                );\n              } else {\n                const V = [];\n                const tmp = curArg;\n                for (let nextItem of tmp) {\n                  if (!utils.isObject(nextItem)) {\n                    throw new globalObject.TypeError(\n                      \"Failed to construct 'URLSearchParams': parameter 1\" +\n                        \" sequence\" +\n                        \"'s element\" +\n                        \" is not an iterable object.\"\n                    );\n                  } else {\n                    const V = [];\n                    const tmp = nextItem;\n                    for (let nextItem of tmp) {\n                      nextItem = conversions[\"USVString\"](nextItem, {\n                        context:\n                          \"Failed to construct 'URLSearchParams': parameter 1\" +\n                          \" sequence\" +\n                          \"'s element\" +\n                          \"'s element\",\n                        globals: globalObject\n                      });\n\n                      V.push(nextItem);\n                    }\n                    nextItem = V;\n                  }\n\n                  V.push(nextItem);\n                }\n                curArg = V;\n              }\n            } else {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \" is not an object.\"\n                );\n              } else {\n                const result = Object.create(null);\n                for (const key of Reflect.ownKeys(curArg)) {\n                  const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                  if (desc && desc.enumerable) {\n                    let typedKey = key;\n\n                    typedKey = conversions[\"USVString\"](typedKey, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s key\",\n                      globals: globalObject\n                    });\n\n                    let typedValue = curArg[key];\n\n                    typedValue = conversions[\"USVString\"](typedValue, {\n                      context: \"Failed to construct 'URLSearchParams': parameter 1\" + \" record\" + \"'s value\",\n                      globals: globalObject\n                    });\n\n                    result[typedKey] = typedValue;\n                  }\n                }\n                curArg = result;\n              }\n            }\n          } else {\n            curArg = conversions[\"USVString\"](curArg, {\n              context: \"Failed to construct 'URLSearchParams': parameter 1\",\n              globals: globalObject\n            });\n          }\n        } else {\n          curArg = \"\";\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'append' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'append' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'append' on 'URLSearchParams': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].append(...args));\n    }\n\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'delete' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'delete' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'delete' on 'URLSearchParams': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].delete(...args));\n    }\n\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'get' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'get' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].get(...args);\n    }\n\n    getAll(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'getAll' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'getAll' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'getAll' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].getAll(...args));\n    }\n\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'has' on 'URLSearchParams': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'has' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'has' on 'URLSearchParams': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'set' on 'URLSearchParams': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'set' on 'URLSearchParams': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(esValue[implSymbol].set(...args));\n    }\n\n    sort() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'sort' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n\n      return utils.tryWrapperForImpl(esValue[implSymbol].sort());\n    }\n\n    toString() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'toString' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      return esValue[implSymbol].toString();\n    }\n\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of URLSearchParams.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'values' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'entries' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\n          \"'forEach' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          \"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\"\n        );\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n\n    get size() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get size' called on an object that is not a valid instance of URLSearchParams.\"\n        );\n      }\n\n      return esValue[implSymbol][\"size\"];\n    }\n  }\n  Object.defineProperties(URLSearchParams.prototype, {\n    append: { enumerable: true },\n    delete: { enumerable: true },\n    get: { enumerable: true },\n    getAll: { enumerable: true },\n    has: { enumerable: true },\n    set: { enumerable: true },\n    sort: { enumerable: true },\n    toString: { enumerable: true },\n    keys: { enumerable: true },\n    values: { enumerable: true },\n    entries: { enumerable: true },\n    forEach: { enumerable: true },\n    size: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"URLSearchParams\", configurable: true },\n    [Symbol.iterator]: { value: URLSearchParams.prototype.entries, configurable: true, writable: true }\n  });\n  ctorRegistry[interfaceName] = URLSearchParams;\n\n  ctorRegistry[\"URLSearchParams Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"URLSearchParams Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"URLSearchParams Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a URLSearchParams iterator object\");\n      }\n\n      const { target, kind, index } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, { value: undefined, done: true });\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: URLSearchParams\n  });\n};\n\nconst Impl = require(\"./URLSearchParams-impl.js\");\n","\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  // Unlike the spec, we duplicate some code between the constructor and canParse, because we want to give useful error\n  // messages in the constructor that distinguish between the different causes of failure.\n  constructor(globalObject, [url, base]) {\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(`Invalid base URL: ${base}`);\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${url}`);\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl(globalObject, [query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  static parse(globalObject, input, base) {\n    try {\n      return new URLImpl(globalObject, [input, base]);\n    } catch {\n      return null;\n    }\n  }\n\n  static canParse(url, base) {\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        return false;\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      return false;\n    }\n\n    return true;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(`Invalid URL: ${v}`);\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencodedString(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return `${this._url.scheme}:`;\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(`${v}:`, { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return `${usm.serializeHost(url.host)}:${usm.serializeInteger(url.port)}`;\n  }\n\n  set host(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    return usm.serializePath(this._url);\n  }\n\n  set pathname(v) {\n    if (usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return `?${this._url.query}`;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      this._potentiallyStripTrailingSpacesFromAnOpaquePath();\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencodedString(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return `#${this._url.fragment}`;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      this._potentiallyStripTrailingSpacesFromAnOpaquePath();\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n\n  _potentiallyStripTrailingSpacesFromAnOpaquePath() {\n    if (!usm.hasAnOpaquePath(this._url)) {\n      return;\n    }\n\n    if (this._url.fragment !== null) {\n      return;\n    }\n\n    if (this._url.query !== null) {\n      return;\n    }\n\n    this._url.path = this._url.path.replace(/\\u0020+$/u, \"\");\n  }\n};\n","\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"URL\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'URL'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"URL\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class URL {\n    constructor(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to construct 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to construct 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to construct 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    toJSON() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toJSON' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol].toJSON();\n    }\n\n    get href() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get href' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"href\"];\n    }\n\n    set href(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set href' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'href' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"href\"] = V;\n    }\n\n    toString() {\n      const esValue = this;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toString' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"href\"];\n    }\n\n    get origin() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get origin' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"origin\"];\n    }\n\n    get protocol() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get protocol' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"protocol\"];\n    }\n\n    set protocol(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set protocol' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'protocol' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"protocol\"] = V;\n    }\n\n    get username() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get username' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"username\"];\n    }\n\n    set username(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set username' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'username' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"username\"] = V;\n    }\n\n    get password() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get password' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"password\"];\n    }\n\n    set password(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set password' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'password' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"password\"] = V;\n    }\n\n    get host() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get host' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"host\"];\n    }\n\n    set host(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set host' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'host' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"host\"] = V;\n    }\n\n    get hostname() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get hostname' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"hostname\"];\n    }\n\n    set hostname(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set hostname' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'hostname' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"hostname\"] = V;\n    }\n\n    get port() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get port' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"port\"];\n    }\n\n    set port(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set port' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'port' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"port\"] = V;\n    }\n\n    get pathname() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get pathname' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"pathname\"];\n    }\n\n    set pathname(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set pathname' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'pathname' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"pathname\"] = V;\n    }\n\n    get search() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get search' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"search\"];\n    }\n\n    set search(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set search' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'search' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"search\"] = V;\n    }\n\n    get searchParams() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get searchParams' called on an object that is not a valid instance of URL.\");\n      }\n\n      return utils.getSameObject(this, \"searchParams\", () => {\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"searchParams\"]);\n      });\n    }\n\n    get hash() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get hash' called on an object that is not a valid instance of URL.\");\n      }\n\n      return esValue[implSymbol][\"hash\"];\n    }\n\n    set hash(V) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set hash' called on an object that is not a valid instance of URL.\");\n      }\n\n      V = conversions[\"USVString\"](V, {\n        context: \"Failed to set the 'hash' property on 'URL': The provided value\",\n        globals: globalObject\n      });\n\n      esValue[implSymbol][\"hash\"] = V;\n    }\n\n    static parse(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'parse' on 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'parse' on 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'parse' on 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(Impl.implementation.parse(globalObject, ...args));\n    }\n\n    static canParse(url) {\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'canParse' on 'URL': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"USVString\"](curArg, {\n          context: \"Failed to execute 'canParse' on 'URL': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"USVString\"](curArg, {\n            context: \"Failed to execute 'canParse' on 'URL': parameter 2\",\n            globals: globalObject\n          });\n        }\n        args.push(curArg);\n      }\n      return Impl.implementation.canParse(...args);\n    }\n  }\n  Object.defineProperties(URL.prototype, {\n    toJSON: { enumerable: true },\n    href: { enumerable: true },\n    toString: { enumerable: true },\n    origin: { enumerable: true },\n    protocol: { enumerable: true },\n    username: { enumerable: true },\n    password: { enumerable: true },\n    host: { enumerable: true },\n    hostname: { enumerable: true },\n    port: { enumerable: true },\n    pathname: { enumerable: true },\n    search: { enumerable: true },\n    searchParams: { enumerable: true },\n    hash: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"URL\", configurable: true }\n  });\n  Object.defineProperties(URL, { parse: { enumerable: true }, canParse: { enumerable: true } });\n  ctorRegistry[interfaceName] = URL;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: URL\n  });\n\n  if (globalNames.includes(\"Window\")) {\n    Object.defineProperty(globalObject, \"webkitURL\", {\n      configurable: true,\n      writable: true,\n      value: URL\n    });\n  }\n};\n\nconst Impl = require(\"./URL-impl.js\");\n","\"use strict\";\n\nconst URL = require(\"./lib/URL\");\nconst URLSearchParams = require(\"./lib/URLSearchParams\");\n\nexports.URL = URL;\nexports.URLSearchParams = URLSearchParams;\n","\"use strict\";\n\nconst { URL, URLSearchParams } = require(\"./webidl2js-wrapper\");\nconst urlStateMachine = require(\"./lib/url-state-machine\");\nconst percentEncoding = require(\"./lib/percent-encoding\");\n\nconst sharedGlobalObject = { Array, Object, Promise, String, TypeError };\nURL.install(sharedGlobalObject, [\"Window\"]);\nURLSearchParams.install(sharedGlobalObject, [\"Window\"]);\n\nexports.URL = sharedGlobalObject.URL;\nexports.URLSearchParams = sharedGlobalObject.URLSearchParams;\n\nexports.parseURL = urlStateMachine.parseURL;\nexports.basicURLParse = urlStateMachine.basicURLParse;\nexports.serializeURL = urlStateMachine.serializeURL;\nexports.serializePath = urlStateMachine.serializePath;\nexports.serializeHost = urlStateMachine.serializeHost;\nexports.serializeInteger = urlStateMachine.serializeInteger;\nexports.serializeURLOrigin = urlStateMachine.serializeURLOrigin;\nexports.setTheUsername = urlStateMachine.setTheUsername;\nexports.setThePassword = urlStateMachine.setThePassword;\nexports.cannotHaveAUsernamePasswordPort = urlStateMachine.cannotHaveAUsernamePasswordPort;\nexports.hasAnOpaquePath = urlStateMachine.hasAnOpaquePath;\n\nexports.percentDecodeString = percentEncoding.percentDecodeString;\nexports.percentDecodeBytes = percentEncoding.percentDecodeBytes;\n","import Stream from 'stream';\nimport http from 'http';\nimport Url from 'url';\nimport whatwgUrl from 'whatwg-url';\nimport https from 'https';\nimport zlib from 'zlib';\n\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\n\n// fix for \"Readable\" isn't a named export issue\nconst Readable = Stream.Readable;\n\nconst BUFFER = Symbol('buffer');\nconst TYPE = Symbol('type');\n\nclass Blob {\n\tconstructor() {\n\t\tthis[TYPE] = '';\n\n\t\tconst blobParts = arguments[0];\n\t\tconst options = arguments[1];\n\n\t\tconst buffers = [];\n\t\tlet size = 0;\n\n\t\tif (blobParts) {\n\t\t\tconst a = blobParts;\n\t\t\tconst length = Number(a.length);\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst element = a[i];\n\t\t\t\tlet buffer;\n\t\t\t\tif (element instanceof Buffer) {\n\t\t\t\t\tbuffer = element;\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\n\t\t\t\t\tbuffer = Buffer.from(element);\n\t\t\t\t} else if (element instanceof Blob) {\n\t\t\t\t\tbuffer = element[BUFFER];\n\t\t\t\t} else {\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\n\t\t\t\t}\n\t\t\t\tsize += buffer.length;\n\t\t\t\tbuffers.push(buffer);\n\t\t\t}\n\t\t}\n\n\t\tthis[BUFFER] = Buffer.concat(buffers);\n\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\n\t\t\tthis[TYPE] = type;\n\t\t}\n\t}\n\tget size() {\n\t\treturn this[BUFFER].length;\n\t}\n\tget type() {\n\t\treturn this[TYPE];\n\t}\n\ttext() {\n\t\treturn Promise.resolve(this[BUFFER].toString());\n\t}\n\tarrayBuffer() {\n\t\tconst buf = this[BUFFER];\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\treturn Promise.resolve(ab);\n\t}\n\tstream() {\n\t\tconst readable = new Readable();\n\t\treadable._read = function () {};\n\t\treadable.push(this[BUFFER]);\n\t\treadable.push(null);\n\t\treturn readable;\n\t}\n\ttoString() {\n\t\treturn '[object Blob]';\n\t}\n\tslice() {\n\t\tconst size = this.size;\n\n\t\tconst start = arguments[0];\n\t\tconst end = arguments[1];\n\t\tlet relativeStart, relativeEnd;\n\t\tif (start === undefined) {\n\t\t\trelativeStart = 0;\n\t\t} else if (start < 0) {\n\t\t\trelativeStart = Math.max(size + start, 0);\n\t\t} else {\n\t\t\trelativeStart = Math.min(start, size);\n\t\t}\n\t\tif (end === undefined) {\n\t\t\trelativeEnd = size;\n\t\t} else if (end < 0) {\n\t\t\trelativeEnd = Math.max(size + end, 0);\n\t\t} else {\n\t\t\trelativeEnd = Math.min(end, size);\n\t\t}\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\n\n\t\tconst buffer = this[BUFFER];\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n\t\tconst blob = new Blob([], { type: arguments[2] });\n\t\tblob[BUFFER] = slicedBuffer;\n\t\treturn blob;\n\t}\n}\n\nObject.defineProperties(Blob.prototype, {\n\tsize: { enumerable: true },\n\ttype: { enumerable: true },\n\tslice: { enumerable: true }\n});\n\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\n\tvalue: 'Blob',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n\n  this.message = message;\n  this.type = type;\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';\n\nlet convert;\ntry {\n\tconvert = require('encoding').convert;\n} catch (e) {}\n\nconst INTERNALS = Symbol('Body internals');\n\n// fix an issue where \"PassThrough\" isn't a named export for node <10\nconst PassThrough = Stream.PassThrough;\n\n/**\n * Body mixin\n *\n * Ref: https://fetch.spec.whatwg.org/#body\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nfunction Body(body) {\n\tvar _this = this;\n\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t    _ref$size = _ref.size;\n\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\n\tvar _ref$timeout = _ref.timeout;\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\n\n\tif (body == null) {\n\t\t// body is undefined or null\n\t\tbody = null;\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\tbody = Buffer.from(body.toString());\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\tbody = Buffer.from(body);\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\n\t} else if (body instanceof Stream) ; else {\n\t\t// none of the above\n\t\t// coerce to string then buffer\n\t\tbody = Buffer.from(String(body));\n\t}\n\tthis[INTERNALS] = {\n\t\tbody,\n\t\tdisturbed: false,\n\t\terror: null\n\t};\n\tthis.size = size;\n\tthis.timeout = timeout;\n\n\tif (body instanceof Stream) {\n\t\tbody.on('error', function (err) {\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\n\t\t\t_this[INTERNALS].error = error;\n\t\t});\n\t}\n}\n\nBody.prototype = {\n\tget body() {\n\t\treturn this[INTERNALS].body;\n\t},\n\n\tget bodyUsed() {\n\t\treturn this[INTERNALS].disturbed;\n\t},\n\n\t/**\n  * Decode response as ArrayBuffer\n  *\n  * @return  Promise\n  */\n\tarrayBuffer() {\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n\t\t});\n\t},\n\n\t/**\n  * Return raw response as Blob\n  *\n  * @return Promise\n  */\n\tblob() {\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\n\t\treturn consumeBody.call(this).then(function (buf) {\n\t\t\treturn Object.assign(\n\t\t\t// Prevent copying\n\t\t\tnew Blob([], {\n\t\t\t\ttype: ct.toLowerCase()\n\t\t\t}), {\n\t\t\t\t[BUFFER]: buf\n\t\t\t});\n\t\t});\n\t},\n\n\t/**\n  * Decode response as json\n  *\n  * @return  Promise\n  */\n\tjson() {\n\t\tvar _this2 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(buffer.toString());\n\t\t\t} catch (err) {\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n  * Decode response as text\n  *\n  * @return  Promise\n  */\n\ttext() {\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn buffer.toString();\n\t\t});\n\t},\n\n\t/**\n  * Decode response as buffer (non-spec api)\n  *\n  * @return  Promise\n  */\n\tbuffer() {\n\t\treturn consumeBody.call(this);\n\t},\n\n\t/**\n  * Decode response as text, while automatically detecting the encoding and\n  * trying to decode to UTF-8 (non-spec api)\n  *\n  * @return  Promise\n  */\n\ttextConverted() {\n\t\tvar _this3 = this;\n\n\t\treturn consumeBody.call(this).then(function (buffer) {\n\t\t\treturn convertBody(buffer, _this3.headers);\n\t\t});\n\t}\n};\n\n// In browsers, all properties are enumerable.\nObject.defineProperties(Body.prototype, {\n\tbody: { enumerable: true },\n\tbodyUsed: { enumerable: true },\n\tarrayBuffer: { enumerable: true },\n\tblob: { enumerable: true },\n\tjson: { enumerable: true },\n\ttext: { enumerable: true }\n});\n\nBody.mixIn = function (proto) {\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\n\t\t// istanbul ignore else: future proof\n\t\tif (!(name in proto)) {\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\n\t\t\tObject.defineProperty(proto, name, desc);\n\t\t}\n\t}\n};\n\n/**\n * Consume and convert an entire Body to a Buffer.\n *\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\n *\n * @return  Promise\n */\nfunction consumeBody() {\n\tvar _this4 = this;\n\n\tif (this[INTERNALS].disturbed) {\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\n\t}\n\n\tthis[INTERNALS].disturbed = true;\n\n\tif (this[INTERNALS].error) {\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\n\t}\n\n\tlet body = this.body;\n\n\t// body is null\n\tif (body === null) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is blob\n\tif (isBlob(body)) {\n\t\tbody = body.stream();\n\t}\n\n\t// body is buffer\n\tif (Buffer.isBuffer(body)) {\n\t\treturn Body.Promise.resolve(body);\n\t}\n\n\t// istanbul ignore if: should never happen\n\tif (!(body instanceof Stream)) {\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\n\t}\n\n\t// body is stream\n\t// get ready to actually consume the body\n\tlet accum = [];\n\tlet accumBytes = 0;\n\tlet abort = false;\n\n\treturn new Body.Promise(function (resolve, reject) {\n\t\tlet resTimeout;\n\n\t\t// allow timeout on slow response body\n\t\tif (_this4.timeout) {\n\t\t\tresTimeout = setTimeout(function () {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\n\t\t\t}, _this4.timeout);\n\t\t}\n\n\t\t// handle stream errors\n\t\tbody.on('error', function (err) {\n\t\t\tif (err.name === 'AbortError') {\n\t\t\t\t// if the request was aborted, reject with this Error\n\t\t\t\tabort = true;\n\t\t\t\treject(err);\n\t\t\t} else {\n\t\t\t\t// other errors, such as incorrect content-encoding\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\n\t\tbody.on('data', function (chunk) {\n\t\t\tif (abort || chunk === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\n\t\t\t\tabort = true;\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\taccumBytes += chunk.length;\n\t\t\taccum.push(chunk);\n\t\t});\n\n\t\tbody.on('end', function () {\n\t\t\tif (abort) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tclearTimeout(resTimeout);\n\n\t\t\ttry {\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\n\t\t\t} catch (err) {\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Detect buffer encoding and convert to target encoding\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\n *\n * @param   Buffer  buffer    Incoming buffer\n * @param   String  encoding  Target encoding\n * @return  String\n */\nfunction convertBody(buffer, headers) {\n\tif (typeof convert !== 'function') {\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\n\t}\n\n\tconst ct = headers.get('content-type');\n\tlet charset = 'utf-8';\n\tlet res, str;\n\n\t// header\n\tif (ct) {\n\t\tres = /charset=([^;]*)/i.exec(ct);\n\t}\n\n\t// no charset in content type, peek at response body for at most 1024 bytes\n\tstr = buffer.slice(0, 1024).toString();\n\n\t// html5\n\tif (!res && str) {\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// html4\n\tif (!res && str) {\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\n\t\tif (!res) {\n\t\t\tres = /<meta[\\s]+?content=(['\"])(.+?)\\1[\\s]+?http-equiv=(['\"])content-type\\3/i.exec(str);\n\t\t\tif (res) {\n\t\t\t\tres.pop(); // drop last quote\n\t\t\t}\n\t\t}\n\n\t\tif (res) {\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\n\t\t}\n\t}\n\n\t// xml\n\tif (!res && str) {\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\n\t}\n\n\t// found charset\n\tif (res) {\n\t\tcharset = res.pop();\n\n\t\t// prevent decode issues when sites use incorrect encoding\n\t\t// ref: https://hsivonen.fi/encoding-menu/\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\n\t\t\tcharset = 'gb18030';\n\t\t}\n\t}\n\n\t// turn raw buffers into a single utf-8 buffer\n\treturn convert(buffer, 'UTF-8', charset).toString();\n}\n\n/**\n * Detect a URLSearchParams object\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\n *\n * @param   Object  obj     Object to detect by type or brand\n * @return  String\n */\nfunction isURLSearchParams(obj) {\n\t// Duck-typing as a necessary condition.\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\n\t\treturn false;\n\t}\n\n\t// Brand-checking and more duck-typing as optional condition.\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\n}\n\n/**\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\n * @param  {*} obj\n * @return {boolean}\n */\nfunction isBlob(obj) {\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\n}\n\n/**\n * Clone body given Res/Req instance\n *\n * @param   Mixed  instance  Response or Request instance\n * @return  Mixed\n */\nfunction clone(instance) {\n\tlet p1, p2;\n\tlet body = instance.body;\n\n\t// don't allow cloning a used body\n\tif (instance.bodyUsed) {\n\t\tthrow new Error('cannot clone body after it is used');\n\t}\n\n\t// check that body is a stream and not form-data object\n\t// note: we can't clone the form-data object without having it as a dependency\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\n\t\t// tee instance body\n\t\tp1 = new PassThrough();\n\t\tp2 = new PassThrough();\n\t\tbody.pipe(p1);\n\t\tbody.pipe(p2);\n\t\t// set instance body to teed body and return the other teed body\n\t\tinstance[INTERNALS].body = p1;\n\t\tbody = p2;\n\t}\n\n\treturn body;\n}\n\n/**\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\n * specified in the specification:\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n *\n * This function assumes that instance.body is present.\n *\n * @param   Mixed  instance  Any options.body input\n */\nfunction extractContentType(body) {\n\tif (body === null) {\n\t\t// body is null\n\t\treturn null;\n\t} else if (typeof body === 'string') {\n\t\t// body is string\n\t\treturn 'text/plain;charset=UTF-8';\n\t} else if (isURLSearchParams(body)) {\n\t\t// body is a URLSearchParams\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\n\t} else if (isBlob(body)) {\n\t\t// body is blob\n\t\treturn body.type || null;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn null;\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\n\t\t// body is ArrayBuffer\n\t\treturn null;\n\t} else if (ArrayBuffer.isView(body)) {\n\t\t// body is ArrayBufferView\n\t\treturn null;\n\t} else if (typeof body.getBoundary === 'function') {\n\t\t// detect form data input from form-data module\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\n\t} else if (body instanceof Stream) {\n\t\t// body is stream\n\t\t// can't really do much about this\n\t\treturn null;\n\t} else {\n\t\t// Body constructor defaults other things to string\n\t\treturn 'text/plain;charset=UTF-8';\n\t}\n}\n\n/**\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\n * For us, we have to explicitly get it with a function.\n *\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\n *\n * @param   Body    instance   Instance of Body\n * @return  Number?            Number of bytes, or null if not possible\n */\nfunction getTotalBytes(instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\treturn 0;\n\t} else if (isBlob(body)) {\n\t\treturn body.size;\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\treturn body.length;\n\t} else if (body && typeof body.getLengthSync === 'function') {\n\t\t// detect form data input from form-data module\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\n\t\t\t// 2.x\n\t\t\treturn body.getLengthSync();\n\t\t}\n\t\treturn null;\n\t} else {\n\t\t// body is stream\n\t\treturn null;\n\t}\n}\n\n/**\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\n *\n * @param   Body    instance   Instance of Body\n * @return  Void\n */\nfunction writeToStream(dest, instance) {\n\tconst body = instance.body;\n\n\n\tif (body === null) {\n\t\t// body is null\n\t\tdest.end();\n\t} else if (isBlob(body)) {\n\t\tbody.stream().pipe(dest);\n\t} else if (Buffer.isBuffer(body)) {\n\t\t// body is buffer\n\t\tdest.write(body);\n\t\tdest.end();\n\t} else {\n\t\t// body is stream\n\t\tbody.pipe(dest);\n\t}\n}\n\n// expose Promise\nBody.Promise = global.Promise;\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\n\nfunction validateName(name) {\n\tname = `${name}`;\n\tif (invalidTokenRegex.test(name) || name === '') {\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\n\t}\n}\n\nfunction validateValue(value) {\n\tvalue = `${value}`;\n\tif (invalidHeaderCharRegex.test(value)) {\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\n\t}\n}\n\n/**\n * Find the key in the map object given a header name.\n *\n * Returns undefined if not found.\n *\n * @param   String  name  Header name\n * @return  String|Undefined\n */\nfunction find(map, name) {\n\tname = name.toLowerCase();\n\tfor (const key in map) {\n\t\tif (key.toLowerCase() === name) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nconst MAP = Symbol('map');\nclass Headers {\n\t/**\n  * Headers class\n  *\n  * @param   Object  headers  Response headers\n  * @return  Void\n  */\n\tconstructor() {\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n\n\t\tthis[MAP] = Object.create(null);\n\n\t\tif (init instanceof Headers) {\n\t\t\tconst rawHeaders = init.raw();\n\t\t\tconst headerNames = Object.keys(rawHeaders);\n\n\t\t\tfor (const headerName of headerNames) {\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\n\t\t\t\t\tthis.append(headerName, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t// We don't worry about converting prop to ByteString here as append()\n\t\t// will handle it.\n\t\tif (init == null) ; else if (typeof init === 'object') {\n\t\t\tconst method = init[Symbol.iterator];\n\t\t\tif (method != null) {\n\t\t\t\tif (typeof method !== 'function') {\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\n\t\t\t\t}\n\n\t\t\t\t// sequence<sequence<ByteString>>\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\n\t\t\t\tconst pairs = [];\n\t\t\t\tfor (const pair of init) {\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\n\t\t\t\t\t}\n\t\t\t\t\tpairs.push(Array.from(pair));\n\t\t\t\t}\n\n\t\t\t\tfor (const pair of pairs) {\n\t\t\t\t\tif (pair.length !== 2) {\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\n\t\t\t\t\t}\n\t\t\t\t\tthis.append(pair[0], pair[1]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// record<ByteString, ByteString>\n\t\t\t\tfor (const key of Object.keys(init)) {\n\t\t\t\t\tconst value = init[key];\n\t\t\t\t\tthis.append(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new TypeError('Provided initializer must be an object');\n\t\t}\n\t}\n\n\t/**\n  * Return combined header value given name\n  *\n  * @param   String  name  Header name\n  * @return  Mixed\n  */\n\tget(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this[MAP][key].join(', ');\n\t}\n\n\t/**\n  * Iterate over all headers\n  *\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n  * @param   Boolean   thisArg   `this` context for callback function\n  * @return  Void\n  */\n\tforEach(callback) {\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n\t\tlet pairs = getHeaders(this);\n\t\tlet i = 0;\n\t\twhile (i < pairs.length) {\n\t\t\tvar _pairs$i = pairs[i];\n\t\t\tconst name = _pairs$i[0],\n\t\t\t      value = _pairs$i[1];\n\n\t\t\tcallback.call(thisArg, value, name, this);\n\t\t\tpairs = getHeaders(this);\n\t\t\ti++;\n\t\t}\n\t}\n\n\t/**\n  * Overwrite header values given name\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tset(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\n\t}\n\n\t/**\n  * Append a value onto existing header\n  *\n  * @param   String  name   Header name\n  * @param   String  value  Header value\n  * @return  Void\n  */\n\tappend(name, value) {\n\t\tname = `${name}`;\n\t\tvalue = `${value}`;\n\t\tvalidateName(name);\n\t\tvalidateValue(value);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tthis[MAP][key].push(value);\n\t\t} else {\n\t\t\tthis[MAP][name] = [value];\n\t\t}\n\t}\n\n\t/**\n  * Check for header name existence\n  *\n  * @param   String   name  Header name\n  * @return  Boolean\n  */\n\thas(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\treturn find(this[MAP], name) !== undefined;\n\t}\n\n\t/**\n  * Delete all header values given name\n  *\n  * @param   String  name  Header name\n  * @return  Void\n  */\n\tdelete(name) {\n\t\tname = `${name}`;\n\t\tvalidateName(name);\n\t\tconst key = find(this[MAP], name);\n\t\tif (key !== undefined) {\n\t\t\tdelete this[MAP][key];\n\t\t}\n\t}\n\n\t/**\n  * Return raw headers (non-spec api)\n  *\n  * @return  Object\n  */\n\traw() {\n\t\treturn this[MAP];\n\t}\n\n\t/**\n  * Get an iterator on keys.\n  *\n  * @return  Iterator\n  */\n\tkeys() {\n\t\treturn createHeadersIterator(this, 'key');\n\t}\n\n\t/**\n  * Get an iterator on values.\n  *\n  * @return  Iterator\n  */\n\tvalues() {\n\t\treturn createHeadersIterator(this, 'value');\n\t}\n\n\t/**\n  * Get an iterator on entries.\n  *\n  * This is the default iterator of the Headers object.\n  *\n  * @return  Iterator\n  */\n\t[Symbol.iterator]() {\n\t\treturn createHeadersIterator(this, 'key+value');\n\t}\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n\tvalue: 'Headers',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Headers.prototype, {\n\tget: { enumerable: true },\n\tforEach: { enumerable: true },\n\tset: { enumerable: true },\n\tappend: { enumerable: true },\n\thas: { enumerable: true },\n\tdelete: { enumerable: true },\n\tkeys: { enumerable: true },\n\tvalues: { enumerable: true },\n\tentries: { enumerable: true }\n});\n\nfunction getHeaders(headers) {\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\n\n\tconst keys = Object.keys(headers[MAP]).sort();\n\treturn keys.map(kind === 'key' ? function (k) {\n\t\treturn k.toLowerCase();\n\t} : kind === 'value' ? function (k) {\n\t\treturn headers[MAP][k].join(', ');\n\t} : function (k) {\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\n\t});\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n\tconst iterator = Object.create(HeadersIteratorPrototype);\n\titerator[INTERNAL] = {\n\t\ttarget,\n\t\tkind,\n\t\tindex: 0\n\t};\n\treturn iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n\tnext() {\n\t\t// istanbul ignore if\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\n\t\t}\n\n\t\tvar _INTERNAL = this[INTERNAL];\n\t\tconst target = _INTERNAL.target,\n\t\t      kind = _INTERNAL.kind,\n\t\t      index = _INTERNAL.index;\n\n\t\tconst values = getHeaders(target, kind);\n\t\tconst len = values.length;\n\t\tif (index >= len) {\n\t\t\treturn {\n\t\t\t\tvalue: undefined,\n\t\t\t\tdone: true\n\t\t\t};\n\t\t}\n\n\t\tthis[INTERNAL].index = index + 1;\n\n\t\treturn {\n\t\t\tvalue: values[index],\n\t\t\tdone: false\n\t\t};\n\t}\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n\tvalue: 'HeadersIterator',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\n/**\n * Export the Headers object in a form that Node.js can consume.\n *\n * @param   Headers  headers\n * @return  Object\n */\nfunction exportNodeCompatibleHeaders(headers) {\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\n\n\t// http.request() only supports string as Host header. This hack makes\n\t// specifying custom Host header possible.\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\n\tif (hostHeaderKey !== undefined) {\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\n\t}\n\n\treturn obj;\n}\n\n/**\n * Create a Headers object from an object of headers, ignoring those that do\n * not conform to HTTP grammar productions.\n *\n * @param   Object  obj  Object of headers\n * @return  Headers\n */\nfunction createHeadersLenient(obj) {\n\tconst headers = new Headers();\n\tfor (const name of Object.keys(obj)) {\n\t\tif (invalidTokenRegex.test(name)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (Array.isArray(obj[name])) {\n\t\t\tfor (const val of obj[name]) {\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (headers[MAP][name] === undefined) {\n\t\t\t\t\theaders[MAP][name] = [val];\n\t\t\t\t} else {\n\t\t\t\t\theaders[MAP][name].push(val);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\n\t\t\theaders[MAP][name] = [obj[name]];\n\t\t}\n\t}\n\treturn headers;\n}\n\nconst INTERNALS$1 = Symbol('Response internals');\n\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\nconst STATUS_CODES = http.STATUS_CODES;\n\n/**\n * Response class\n *\n * @param   Stream  body  Readable stream\n * @param   Object  opts  Response options\n * @return  Void\n */\nclass Response {\n\tconstructor() {\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tBody.call(this, body, opts);\n\n\t\tconst status = opts.status || 200;\n\t\tconst headers = new Headers(opts.headers);\n\n\t\tif (body != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(body);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tthis[INTERNALS$1] = {\n\t\t\turl: opts.url,\n\t\t\tstatus,\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\n\t\t\theaders,\n\t\t\tcounter: opts.counter\n\t\t};\n\t}\n\n\tget url() {\n\t\treturn this[INTERNALS$1].url || '';\n\t}\n\n\tget status() {\n\t\treturn this[INTERNALS$1].status;\n\t}\n\n\t/**\n  * Convenience property representing if the request ended normally\n  */\n\tget ok() {\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\n\t}\n\n\tget redirected() {\n\t\treturn this[INTERNALS$1].counter > 0;\n\t}\n\n\tget statusText() {\n\t\treturn this[INTERNALS$1].statusText;\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$1].headers;\n\t}\n\n\t/**\n  * Clone this response\n  *\n  * @return  Response\n  */\n\tclone() {\n\t\treturn new Response(clone(this), {\n\t\t\turl: this.url,\n\t\t\tstatus: this.status,\n\t\t\tstatusText: this.statusText,\n\t\t\theaders: this.headers,\n\t\t\tok: this.ok,\n\t\t\tredirected: this.redirected\n\t\t});\n\t}\n}\n\nBody.mixIn(Response.prototype);\n\nObject.defineProperties(Response.prototype, {\n\turl: { enumerable: true },\n\tstatus: { enumerable: true },\n\tok: { enumerable: true },\n\tredirected: { enumerable: true },\n\tstatusText: { enumerable: true },\n\theaders: { enumerable: true },\n\tclone: { enumerable: true }\n});\n\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\n\tvalue: 'Response',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nconst INTERNALS$2 = Symbol('Request internals');\nconst URL = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\nconst parse_url = Url.parse;\nconst format_url = Url.format;\n\n/**\n * Wrapper around `new URL` to handle arbitrary URLs\n *\n * @param  {string} urlStr\n * @return {void}\n */\nfunction parseURL(urlStr) {\n\t/*\n \tCheck whether the URL is absolute or not\n \t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\n \tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\n */\n\tif (/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.exec(urlStr)) {\n\t\turlStr = new URL(urlStr).toString();\n\t}\n\n\t// Fallback to old implementation for arbitrary URLs\n\treturn parse_url(urlStr);\n}\n\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\n\n/**\n * Check if a value is an instance of Request.\n *\n * @param   Mixed   input\n * @return  Boolean\n */\nfunction isRequest(input) {\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\n}\n\nfunction isAbortSignal(signal) {\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\n}\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n\tconstructor(input) {\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\t\tlet parsedURL;\n\n\t\t// normalize input\n\t\tif (!isRequest(input)) {\n\t\t\tif (input && input.href) {\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\n\t\t\t\t// `href` property anyway)\n\t\t\t\tparsedURL = parseURL(input.href);\n\t\t\t} else {\n\t\t\t\t// coerce input to a string before attempting to parse\n\t\t\t\tparsedURL = parseURL(`${input}`);\n\t\t\t}\n\t\t\tinput = {};\n\t\t} else {\n\t\t\tparsedURL = parseURL(input.url);\n\t\t}\n\n\t\tlet method = init.method || input.method || 'GET';\n\t\tmethod = method.toUpperCase();\n\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\n\t\t}\n\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\n\n\t\tBody.call(this, inputBody, {\n\t\t\ttimeout: init.timeout || input.timeout || 0,\n\t\t\tsize: init.size || input.size || 0\n\t\t});\n\n\t\tconst headers = new Headers(init.headers || input.headers || {});\n\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\n\t\t\tconst contentType = extractContentType(inputBody);\n\t\t\tif (contentType) {\n\t\t\t\theaders.append('Content-Type', contentType);\n\t\t\t}\n\t\t}\n\n\t\tlet signal = isRequest(input) ? input.signal : null;\n\t\tif ('signal' in init) signal = init.signal;\n\n\t\tif (signal != null && !isAbortSignal(signal)) {\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\n\t\t}\n\n\t\tthis[INTERNALS$2] = {\n\t\t\tmethod,\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\n\t\t\theaders,\n\t\t\tparsedURL,\n\t\t\tsignal\n\t\t};\n\n\t\t// node-fetch-only options\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n\t\tthis.counter = init.counter || input.counter || 0;\n\t\tthis.agent = init.agent || input.agent;\n\t}\n\n\tget method() {\n\t\treturn this[INTERNALS$2].method;\n\t}\n\n\tget url() {\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\n\t}\n\n\tget headers() {\n\t\treturn this[INTERNALS$2].headers;\n\t}\n\n\tget redirect() {\n\t\treturn this[INTERNALS$2].redirect;\n\t}\n\n\tget signal() {\n\t\treturn this[INTERNALS$2].signal;\n\t}\n\n\t/**\n  * Clone this request\n  *\n  * @return  Request\n  */\n\tclone() {\n\t\treturn new Request(this);\n\t}\n}\n\nBody.mixIn(Request.prototype);\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n\tvalue: 'Request',\n\twritable: false,\n\tenumerable: false,\n\tconfigurable: true\n});\n\nObject.defineProperties(Request.prototype, {\n\tmethod: { enumerable: true },\n\turl: { enumerable: true },\n\theaders: { enumerable: true },\n\tredirect: { enumerable: true },\n\tclone: { enumerable: true },\n\tsignal: { enumerable: true }\n});\n\n/**\n * Convert a Request to Node.js http request options.\n *\n * @param   Request  A Request instance\n * @return  Object   The options object to be passed to http.request\n */\nfunction getNodeRequestOptions(request) {\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\n\tconst headers = new Headers(request[INTERNALS$2].headers);\n\n\t// fetch step 1.3\n\tif (!headers.has('Accept')) {\n\t\theaders.set('Accept', '*/*');\n\t}\n\n\t// Basic fetch\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\n\t\tthrow new TypeError('Only absolute URLs are supported');\n\t}\n\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\n\t}\n\n\tif (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\n\t}\n\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\n\tlet contentLengthValue = null;\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n\t\tcontentLengthValue = '0';\n\t}\n\tif (request.body != null) {\n\t\tconst totalBytes = getTotalBytes(request);\n\t\tif (typeof totalBytes === 'number') {\n\t\t\tcontentLengthValue = String(totalBytes);\n\t\t}\n\t}\n\tif (contentLengthValue) {\n\t\theaders.set('Content-Length', contentLengthValue);\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.11\n\tif (!headers.has('User-Agent')) {\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n\t}\n\n\t// HTTP-network-or-cache fetch step 2.15\n\tif (request.compress && !headers.has('Accept-Encoding')) {\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\n\t}\n\n\tlet agent = request.agent;\n\tif (typeof agent === 'function') {\n\t\tagent = agent(parsedURL);\n\t}\n\n\t// HTTP-network fetch step 4.2\n\t// chunked encoding is handled by Node.js\n\n\treturn Object.assign({}, parsedURL, {\n\t\tmethod: request.method,\n\t\theaders: exportNodeCompatibleHeaders(headers),\n\t\tagent\n\t});\n}\n\n/**\n * abort-error.js\n *\n * AbortError interface for cancelled requests\n */\n\n/**\n * Create AbortError instance\n *\n * @param   String      message      Error message for human\n * @return  AbortError\n */\nfunction AbortError(message) {\n  Error.call(this, message);\n\n  this.type = 'aborted';\n  this.message = message;\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor);\n}\n\nAbortError.prototype = Object.create(Error.prototype);\nAbortError.prototype.constructor = AbortError;\nAbortError.prototype.name = 'AbortError';\n\nconst URL$1 = Url.URL || whatwgUrl.URL;\n\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\nconst PassThrough$1 = Stream.PassThrough;\n\nconst isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {\n\tconst orig = new URL$1(original).hostname;\n\tconst dest = new URL$1(destination).hostname;\n\n\treturn orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);\n};\n\n/**\n * isSameProtocol reports whether the two provided URLs use the same protocol.\n *\n * Both domains must already be in canonical form.\n * @param {string|URL} original\n * @param {string|URL} destination\n */\nconst isSameProtocol = function isSameProtocol(destination, original) {\n\tconst orig = new URL$1(original).protocol;\n\tconst dest = new URL$1(destination).protocol;\n\n\treturn orig === dest;\n};\n\n/**\n * Fetch function\n *\n * @param   Mixed    url   Absolute url or Request instance\n * @param   Object   opts  Fetch options\n * @return  Promise\n */\nfunction fetch(url, opts) {\n\n\t// allow custom promise\n\tif (!fetch.Promise) {\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\n\t}\n\n\tBody.Promise = fetch.Promise;\n\n\t// wrap http.request into fetch\n\treturn new fetch.Promise(function (resolve, reject) {\n\t\t// build request object\n\t\tconst request = new Request(url, opts);\n\t\tconst options = getNodeRequestOptions(request);\n\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst signal = request.signal;\n\n\t\tlet response = null;\n\n\t\tconst abort = function abort() {\n\t\t\tlet error = new AbortError('The user aborted a request.');\n\t\t\treject(error);\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\n\t\t\t\tdestroyStream(request.body, error);\n\t\t\t}\n\t\t\tif (!response || !response.body) return;\n\t\t\tresponse.body.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = function abortAndFinalize() {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// send request\n\t\tconst req = send(options);\n\t\tlet reqTimeout;\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tfunction finalize() {\n\t\t\treq.abort();\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\tclearTimeout(reqTimeout);\n\t\t}\n\n\t\tif (request.timeout) {\n\t\t\treq.once('socket', function (socket) {\n\t\t\t\treqTimeout = setTimeout(function () {\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\n\t\t\t\t\tfinalize();\n\t\t\t\t}, request.timeout);\n\t\t\t});\n\t\t}\n\n\t\treq.on('error', function (err) {\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(req, function (err) {\n\t\t\tif (signal && signal.aborted) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (response && response.body) {\n\t\t\t\tdestroyStream(response.body, err);\n\t\t\t}\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (parseInt(process.version.substring(1)) < 14) {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\treq.on('socket', function (s) {\n\t\t\t\ts.addListener('close', function (hadError) {\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0;\n\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n\t\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\t\tresponse.body.emit('error', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treq.on('response', function (res) {\n\t\t\tclearTimeout(reqTimeout);\n\n\t\t\tconst headers = createHeadersLenient(res.headers);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tlet locationURL = null;\n\t\t\t\ttry {\n\t\t\t\t\tlocationURL = location === null ? null : new URL$1(location, request.url).toString();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// error here can only be invalid URL in Location: header\n\t\t\t\t\t// do not throw when options.redirect == manual\n\t\t\t\t\t// let the user extract the errorneous redirect URL\n\t\t\t\t\tif (request.redirect !== 'manual') {\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\t// handle corrupted header\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\n\t\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow':\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOpts = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\tbody: request.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\ttimeout: request.timeout,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\n\t\t\t\t\t\t\t\trequestOpts.headers.delete(name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\n\t\t\t\t\t\t\trequestOpts.body = undefined;\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prepare response\n\t\t\tres.once('end', function () {\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\n\t\t\t});\n\t\t\tlet body = res.pipe(new PassThrough$1());\n\n\t\t\tconst response_options = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: res.statusCode,\n\t\t\t\tstatusText: res.statusMessage,\n\t\t\t\theaders: headers,\n\t\t\t\tsize: request.size,\n\t\t\t\ttimeout: request.timeout,\n\t\t\t\tcounter: request.counter\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// for gzip\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for deflate\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\n\t\t\t\t// handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\n\t\t\t\traw.once('data', function (chunk) {\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\n\t\t\t\t\t}\n\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\traw.on('end', function () {\n\t\t\t\t\t// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.\n\t\t\t\t\tif (!response) {\n\t\t\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// for br\n\t\t\tif (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {\n\t\t\t\tbody = body.pipe(zlib.createBrotliDecompress());\n\t\t\t\tresponse = new Response(body, response_options);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// otherwise, use response as-is\n\t\t\tresponse = new Response(body, response_options);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(req, request);\n\t});\n}\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\tlet socket;\n\n\trequest.on('socket', function (s) {\n\t\tsocket = s;\n\t});\n\n\trequest.on('response', function (response) {\n\t\tconst headers = response.headers;\n\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n\t\t\tresponse.once('close', function (hadError) {\n\t\t\t\t// tests for socket presence, as in some situations the\n\t\t\t\t// the 'socket' event is not triggered for the request\n\t\t\t\t// (happens in deno), avoids `TypeError`\n\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\tconst hasDataListener = socket && socket.listenerCount('data') > 0;\n\n\t\t\t\tif (hasDataListener && !hadError) {\n\t\t\t\t\tconst err = new Error('Premature close');\n\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction destroyStream(stream, err) {\n\tif (stream.destroy) {\n\t\tstream.destroy(err);\n\t} else {\n\t\t// node < 8\n\t\tstream.emit('error', err);\n\t\tstream.end();\n\t}\n}\n\n/**\n * Redirect code matching\n *\n * @param   Number   code  Status code\n * @return  Boolean\n */\nfetch.isRedirect = function (code) {\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\n};\n\n// expose Promise\nfetch.Promise = global.Promise;\n\nexport default fetch;\nexport { Headers, Request, Response, FetchError, AbortError };\n","const nodeFetch = require('node-fetch')\nconst realFetch = nodeFetch.default || nodeFetch\n\nconst fetch = function (url, options) {\n  // Support schemaless URIs on the server for parity with the browser.\n  // Ex: //github.com/ -> https://github.com/\n  if (/^\\/\\//.test(url)) {\n    url = 'https:' + url\n  }\n  return realFetch.call(this, url, options)\n}\n\nfetch.ponyfill = true\n\nmodule.exports = exports = fetch\nexports.fetch = fetch\nexports.Headers = nodeFetch.Headers\nexports.Request = nodeFetch.Request\nexports.Response = nodeFetch.Response\n\n// Needed for TypeScript consumers without esModuleInterop.\nexports.default = fetch\n","'use strict';\n\nlet wasm$1;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm$1.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {GMArgs} args\n* @returns {Instruction}\n*/\nfunction gm_args(ra, args) {\n    const ret = wasm$1.gm_args(ra, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {GTFArgs} args\n* @returns {Instruction}\n*/\nfunction gtf_args(ra, rb, args) {\n    const ret = wasm$1.gtf_args(ra, rb, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wdcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wqcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wdop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wqop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wdml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wqml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wddv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wddv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wqdv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqdv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Adds two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction add(dst, lhs, rhs) {\n    const ret = wasm$1.add(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction and(dst, lhs, rhs) {\n    const ret = wasm$1.and(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction div(dst, lhs, rhs) {\n    const ret = wasm$1.div(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for equality.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction eq(dst, lhs, rhs) {\n    const ret = wasm$1.eq(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of another.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction exp(dst, lhs, rhs) {\n    const ret = wasm$1.exp(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for greater-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction gt(dst, lhs, rhs) {\n    const ret = wasm$1.gt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for less-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction lt(dst, lhs, rhs) {\n    const ret = wasm$1.lt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer logarithm of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mlog(dst, lhs, rhs) {\n    const ret = wasm$1.mlog(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer root of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mroo(dst, lhs, rhs) {\n    const ret = wasm$1.mroo(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mod_(dst, lhs, rhs) {\n    const ret = wasm$1.mod_(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy from one register to another.\n* @param {number} dst\n* @param {number} src\n* @returns {Instruction}\n*/\nfunction move_(dst, src) {\n    const ret = wasm$1.move_(dst, src);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mul(dst, lhs, rhs) {\n    const ret = wasm$1.mul(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise NOT a register.\n* @param {number} dst\n* @param {number} arg\n* @returns {Instruction}\n*/\nfunction not(dst, arg) {\n    const ret = wasm$1.not(dst, arg);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction or(dst, lhs, rhs) {\n    const ret = wasm$1.or(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sll(dst, lhs, rhs) {\n    const ret = wasm$1.sll(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srl(dst, lhs, rhs) {\n    const ret = wasm$1.srl(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sub(dst, lhs, rhs) {\n    const ret = wasm$1.sub(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xor(dst, lhs, rhs) {\n    const ret = wasm$1.xor(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction mldv(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction ret(value) {\n    const ret = wasm$1.ret(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context with data.\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction retd(addr, len) {\n    const ret = wasm$1.retd(addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Allocate a number of bytes from the heap.\n* @param {number} bytes\n* @returns {Instruction}\n*/\nfunction aloc(bytes) {\n    const ret = wasm$1.aloc(bytes);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcl(dst_addr, len) {\n    const ret = wasm$1.mcl(dst_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcp(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcp(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare bytes in memory.\n* @param {number} result\n* @param {number} lhs_addr\n* @param {number} rhs_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction meq(result, lhs_addr, rhs_addr, len) {\n    const ret = wasm$1.meq(result, lhs_addr, rhs_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get block header hash for height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction bhsh(dst, heigth) {\n    const ret = wasm$1.bhsh(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block height.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction bhei(dst) {\n    const ret = wasm$1.bhei(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n* @param {number} amount\n* @param {number} sub_id_addr\n* @returns {Instruction}\n*/\nfunction burn(amount, sub_id_addr) {\n    const ret = wasm$1.burn(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Call a contract.\n* @param {number} target_struct\n* @param {number} fwd_coins\n* @param {number} asset_id_addr\n* @param {number} fwd_gas\n* @returns {Instruction}\n*/\nfunction call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n    const ret = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy contract code for a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction ccp(dst_addr, contract_id_addr, offset, len) {\n    const ret = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code root of a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction croo(dst_addr, contract_id_addr) {\n    const ret = wasm$1.croo(dst_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code size of a contract.\n* @param {number} dst\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction csiz(dst, contract_id_addr) {\n    const ret = wasm$1.csiz(dst, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block proposer's address.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction cb(dst) {\n    const ret = wasm$1.cb(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load code as executable either from contract, blob, or memory.\n* @param {number} src_addr\n* @param {number} offset\n* @param {number} len\n* @param {number} mode\n* @returns {Instruction}\n*/\nfunction ldc(src_addr, offset, len, mode) {\n    const ret = wasm$1.ldc(src_addr, offset, len, mode);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log an event.\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n* @returns {Instruction}\n*/\nfunction log(a, b, c, d) {\n    const ret = wasm$1.log(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log data.\n* @param {number} a\n* @param {number} b\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction logd(a, b, addr, len) {\n    const ret = wasm$1.logd(a, b, addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n* @param {number} amount\n* @param {number} sub_id_addr\n* @returns {Instruction}\n*/\nfunction mint(amount, sub_id_addr) {\n    const ret = wasm$1.mint(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Halt execution, reverting state changes and returning a value.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction rvrt(value) {\n    const ret = wasm$1.rvrt(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a series of slots from contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction scwq(key_addr, status, lenq) {\n    const ret = wasm$1.scwq(key_addr, status, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a word from contract storage.\n* @param {number} dst\n* @param {number} status\n* @param {number} key_addr\n* @returns {Instruction}\n*/\nfunction srw(dst, status, key_addr) {\n    const ret = wasm$1.srw(dst, status, key_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a series of 32 byte slots from contract storage.\n* @param {number} dst_addr\n* @param {number} status\n* @param {number} key_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction srwq(dst_addr, status, key_addr, lenq) {\n    const ret = wasm$1.srwq(dst_addr, status, key_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a word in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction sww(key_addr, status, value) {\n    const ret = wasm$1.sww(key_addr, status, value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a series of 32 byte slots in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} src_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction swwq(key_addr, status, src_addr, lenq) {\n    const ret = wasm$1.swwq(key_addr, status, src_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a contract unconditionally.\n* @param {number} contract_id_addr\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tr(contract_id_addr, amount, asset_id_addr) {\n    const ret = wasm$1.tr(contract_id_addr, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a variable output.\n* @param {number} contract_id_addr\n* @param {number} output_index\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tro(contract_id_addr, output_index, amount, asset_id_addr) {\n    const ret = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction eck1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction ecr1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Verify ED25519 public key and signature match a message.\n* @param {number} pub_key_addr\n* @param {number} sig_addr\n* @param {number} msg_addr\n* @param {number} msg_len\n* @returns {Instruction}\n*/\nfunction ed19(pub_key_addr, sig_addr, msg_addr, msg_len) {\n    const ret = wasm$1.ed19(pub_key_addr, sig_addr, msg_addr, msg_len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The keccak-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction k256(dst_addr, src_addr, len) {\n    const ret = wasm$1.k256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The SHA-2-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction s256(dst_addr, src_addr, len) {\n    const ret = wasm$1.s256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get timestamp of block at given height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction time(dst, heigth) {\n    const ret = wasm$1.time(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Performs no operation.\n* @returns {Instruction}\n*/\nfunction noop() {\n    const ret = wasm$1.noop();\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Set flag register to a register.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction flag(value) {\n    const ret = wasm$1.flag(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get the balance of contract of an asset ID.\n* @param {number} dst\n* @param {number} asset_id_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction bal(dst, asset_id_addr, contract_id_addr) {\n    const ret = wasm$1.bal(dst, asset_id_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jmp(abs_target) {\n    const ret = wasm$1.jmp(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional dynamic jump.\n* @param {number} abs_target\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction jne(abs_target, lhs, rhs) {\n    const ret = wasm$1.jne(abs_target, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Send a message to recipient address with call abi, coins, and output.\n* @param {number} recipient_addr\n* @param {number} data_addr\n* @param {number} data_len\n* @param {number} coins\n* @returns {Instruction}\n*/\nfunction smo(recipient_addr, data_addr, data_len, coins) {\n    const ret = wasm$1.smo(recipient_addr, data_addr, data_len, coins);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Adds a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction addi(dst, lhs, rhs) {\n    const ret = wasm$1.addi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction andi(dst, lhs, rhs) {\n    const ret = wasm$1.andi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction divi(dst, lhs, rhs) {\n    const ret = wasm$1.divi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction expi(dst, lhs, rhs) {\n    const ret = wasm$1.expi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction modi(dst, lhs, rhs) {\n    const ret = wasm$1.modi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction muli(dst, lhs, rhs) {\n    const ret = wasm$1.muli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction ori(dst, lhs, rhs) {\n    const ret = wasm$1.ori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction slli(dst, lhs, rhs) {\n    const ret = wasm$1.slli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srli(dst, lhs, rhs) {\n    const ret = wasm$1.srli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction subi(dst, lhs, rhs) {\n    const ret = wasm$1.subi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xori(dst, lhs, rhs) {\n    const ret = wasm$1.xori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnei(cond_lhs, cond_rhs, abs_target) {\n    const ret = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lb(dst, addr, offset) {\n    const ret = wasm$1.lb(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A word is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lw(dst, addr, offset) {\n    const ret = wasm$1.lw(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write the least significant byte of a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sb(addr, value, offset) {\n    const ret = wasm$1.sb(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sw(addr, value, offset) {\n    const ret = wasm$1.sw(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy an immediate number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcpi(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcpi(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get transaction fields.\n* @param {number} dst\n* @param {number} arg\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gtf(dst, arg, selector) {\n    const ret = wasm$1.gtf(dst, arg, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear an immediate number of bytes in memory.\n* @param {number} addr\n* @param {number} count\n* @returns {Instruction}\n*/\nfunction mcli(addr, count) {\n    const ret = wasm$1.mcli(addr, count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get metadata from memory.\n* @param {number} dst\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gm(dst, selector) {\n    const ret = wasm$1.gm(dst, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy immediate value into a register\n* @param {number} dst\n* @param {number} val\n* @returns {Instruction}\n*/\nfunction movi(dst, val) {\n    const ret = wasm$1.movi(dst, val);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump against zero.\n* @param {number} cond_nz\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnzi(cond_nz, abs_target) {\n    const ret = wasm$1.jnzi(cond_nz, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpf(dynamic, fixed) {\n    const ret = wasm$1.jmpf(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpb(dynamic, fixed) {\n    const ret = wasm$1.jmpb(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzf(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzf(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzb(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzb(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnef(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jneb(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction ji(abs_target) {\n    const ret = wasm$1.ji(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfei(amount) {\n    const ret = wasm$1.cfei(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfsi(amount) {\n    const ret = wasm$1.cfsi(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfe(amount) {\n    const ret = wasm$1.cfe(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfs(amount) {\n    const ret = wasm$1.cfs(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Push a bitmask-selected set of registers in range 16..40 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction pshl(bitmask) {\n    const ret = wasm$1.pshl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Push a bitmask-selected set of registers in range 40..64 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction pshh(bitmask) {\n    const ret = wasm$1.pshh(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Pop a bitmask-selected set of registers in range 16..40 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction popl(bitmask) {\n    const ret = wasm$1.popl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Pop a bitmask-selected set of registers in range 40..64 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction poph(bitmask) {\n    const ret = wasm$1.poph(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 128bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 256bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 128bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 256bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wddv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wddv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqdv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqdv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wdmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wqmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 128bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 256bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Call external function\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n* @returns {Instruction}\n*/\nfunction ecal(a, b, c, d) {\n    const ret = wasm$1.ecal(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get blob size\n* @param {number} dst\n* @param {number} blob_id_ptr\n* @returns {Instruction}\n*/\nfunction bsiz(dst, blob_id_ptr) {\n    const ret = wasm$1.bsiz(dst, blob_id_ptr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load blob as data\n* @param {number} dst_ptr\n* @param {number} blob_id_ptr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction bldd(dst_ptr, blob_id_ptr, offset, len) {\n    const ret = wasm$1.bldd(dst_ptr, blob_id_ptr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm$1.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm$1.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8ArrayMemory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*r\" Argument list for GTF (get tx fields) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GTFArgs = Object.freeze({\n/**\n*r\" Set `$rA` to `tx.type`\n*/\nType:1,\"1\":\"Type\",\n/**\n*r\" Set `$rA` to `tx.scriptGasLimit`\n*/\nScriptGasLimit:2,\"2\":\"ScriptGasLimit\",\n/**\n*r\" Set `$rA` to `tx.scriptLength`\n*/\nScriptLength:3,\"3\":\"ScriptLength\",\n/**\n*r\" Set `$rA` to `tx.scriptDataLength`\n*/\nScriptDataLength:4,\"4\":\"ScriptDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nScriptInputsCount:5,\"5\":\"ScriptInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nScriptOutputsCount:6,\"6\":\"ScriptOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nScriptWitnessesCount:7,\"7\":\"ScriptWitnessesCount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.script`\n*/\nScript:9,\"9\":\"Script\",\n/**\n*r\" Set `$rA` to `Memory address of tx.scriptData`\n*/\nScriptData:10,\"10\":\"ScriptData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nScriptInputAtIndex:11,\"11\":\"ScriptInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nScriptOutputAtIndex:12,\"12\":\"ScriptOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nScriptWitnessAtIndex:13,\"13\":\"ScriptWitnessAtIndex\",\n/**\n*r\" Set `$rA` to size of the transaction in memory, in bytes\n*/\nTxLength:14,\"14\":\"TxLength\",\n/**\n*r\" Set `$rA` to `tx.bytecodeWitnessIndex`\n*/\nCreateBytecodeWitnessIndex:257,\"257\":\"CreateBytecodeWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.storageSlotsCount`\n*/\nCreateStorageSlotsCount:258,\"258\":\"CreateStorageSlotsCount\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nCreateInputsCount:259,\"259\":\"CreateInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nCreateOutputsCount:260,\"260\":\"CreateOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nCreateWitnessesCount:261,\"261\":\"CreateWitnessesCount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.salt`\n*/\nCreateSalt:262,\"262\":\"CreateSalt\",\n/**\n*r\" Set `$rA` to `Memory address of tx.storageSlots[$rB]`\n*/\nCreateStorageSlotAtIndex:263,\"263\":\"CreateStorageSlotAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nCreateInputAtIndex:264,\"264\":\"CreateInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nCreateOutputAtIndex:265,\"265\":\"CreateOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nCreateWitnessAtIndex:266,\"266\":\"CreateWitnessAtIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].type`\n*/\nInputType:512,\"512\":\"InputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputCoinTxId:513,\"513\":\"InputCoinTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputCoinOutputIndex:514,\"514\":\"InputCoinOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].owner`\n*/\nInputCoinOwner:515,\"515\":\"InputCoinOwner\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputCoinAmount:516,\"516\":\"InputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`\n*/\nInputCoinAssetId:517,\"517\":\"InputCoinAssetId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n*/\nInputCoinTxPointer:518,\"518\":\"InputCoinTxPointer\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputCoinWitnessIndex:519,\"519\":\"InputCoinWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputCoinPredicateLength:521,\"521\":\"InputCoinPredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputCoinPredicateDataLength:522,\"522\":\"InputCoinPredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputCoinPredicate:523,\"523\":\"InputCoinPredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputCoinPredicateData:524,\"524\":\"InputCoinPredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputCoinPredicateGasUsed:525,\"525\":\"InputCoinPredicateGasUsed\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputContractTxId:544,\"544\":\"InputContractTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputContractOutputIndex:545,\"545\":\"InputContractOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`\n*/\nInputContractId:549,\"549\":\"InputContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].sender`\n*/\nInputMessageSender:576,\"576\":\"InputMessageSender\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`\n*/\nInputMessageRecipient:577,\"577\":\"InputMessageRecipient\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputMessageAmount:578,\"578\":\"InputMessageAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`\n*/\nInputMessageNonce:579,\"579\":\"InputMessageNonce\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputMessageWitnessIndex:580,\"580\":\"InputMessageWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].dataLength`\n*/\nInputMessageDataLength:581,\"581\":\"InputMessageDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputMessagePredicateLength:582,\"582\":\"InputMessagePredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputMessagePredicateDataLength:583,\"583\":\"InputMessagePredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].data`\n*/\nInputMessageData:584,\"584\":\"InputMessageData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputMessagePredicate:585,\"585\":\"InputMessagePredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputMessagePredicateData:586,\"586\":\"InputMessagePredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputMessagePredicateGasUsed:587,\"587\":\"InputMessagePredicateGasUsed\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].type`\n*/\nOutputType:768,\"768\":\"OutputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].to`\n*/\nOutputCoinTo:769,\"769\":\"OutputCoinTo\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].amount`\n*/\nOutputCoinAmount:770,\"770\":\"OutputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`\n*/\nOutputCoinAssetId:771,\"771\":\"OutputCoinAssetId\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].inputIndex`\n*/\nOutputContractInputIndex:772,\"772\":\"OutputContractInputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`\n*/\nOutputContractCreatedContractId:775,\"775\":\"OutputContractCreatedContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n*/\nOutputContractCreatedStateRoot:776,\"776\":\"OutputContractCreatedStateRoot\",\n/**\n*r\" Set `$rA` to `tx.witnesses[$rB].dataLength`\n*/\nWitnessDataLength:1024,\"1024\":\"WitnessDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB].data`\n*/\nWitnessData:1025,\"1025\":\"WitnessData\",\n/**\n*r\" Set `$rA` to `tx.policyTypes`\n*/\nPolicyTypes:1280,\"1280\":\"PolicyTypes\",\n/**\n*r\" Set `$rA` to `tx.policies[0x00].gasPrice`\n*/\nPolicyTip:1281,\"1281\":\"PolicyTip\",\n/**\n*r\" Set `$rA` to `tx.policies[count_ones(0b11 & tx.policyTypes) - 1].witnessLimit`\n*/\nPolicyWitnessLimit:1282,\"1282\":\"PolicyWitnessLimit\",\n/**\n*r\" Set `$rA` to `tx.policies[count_ones(0b111 & tx.policyTypes) - 1].maturity`\n*/\nPolicyMaturity:1283,\"1283\":\"PolicyMaturity\",\n/**\n*r\" Set `$rA` to `tx.policies[count_ones(0b1111 & tx.policyTypes) - 1].maxFee`\n*/\nPolicyMaxFee:1284,\"1284\":\"PolicyMaxFee\", });\n/**\n* Comparison mode used by WDCM and WQCM instructions.\n*/\nconst CompareMode = Object.freeze({\n/**\n* Equality (`==`)\n*/\nEQ:0,\"0\":\"EQ\",\n/**\n* Inequality (`!=`)\n*/\nNE:1,\"1\":\"NE\",\n/**\n* Less than (`<`)\n*/\nLT:2,\"2\":\"LT\",\n/**\n* Greater than (`>`)\n*/\nGT:3,\"3\":\"GT\",\n/**\n* Less than or equals (`>=`)\n*/\nLTE:4,\"4\":\"LTE\",\n/**\n* Greater than or equals (`>=`)\n*/\nGTE:5,\"5\":\"GTE\",\n/**\n* Number of leading zeroes in lhs (`lzcnt`) (discards rhs)\n*/\nLZC:6,\"6\":\"LZC\", });\n/**\n*r\" Panic reason representation for the interpreter.\n*/\nconst PanicReason = Object.freeze({\n/**\n*r\" The byte can't be mapped to any known `PanicReason`.\n*/\nUnknownPanicReason:0,\"0\":\"UnknownPanicReason\",\n/**\n*r\" Found `RVRT` instruction.\n*/\nRevert:1,\"1\":\"Revert\",\n/**\n*r\" Execution ran out of gas.\n*/\nOutOfGas:2,\"2\":\"OutOfGas\",\n/**\n*r\" The transaction validity is violated.\n*/\nTransactionValidity:3,\"3\":\"TransactionValidity\",\n/**\n*r\" Attempt to write outside interpreter memory boundaries.\n*/\nMemoryOverflow:4,\"4\":\"MemoryOverflow\",\n/**\n*r\" Overflow while executing arithmetic operation.\n*r\" These errors are ignored using the WRAPPING flag.\n*/\nArithmeticOverflow:5,\"5\":\"ArithmeticOverflow\",\n/**\n*r\" Designed contract was not found in the storage.\n*/\nContractNotFound:6,\"6\":\"ContractNotFound\",\n/**\n*r\" Memory ownership rules are violated.\n*/\nMemoryOwnership:7,\"7\":\"MemoryOwnership\",\n/**\n*r\" The asset ID balance isn't enough for the instruction.\n*/\nNotEnoughBalance:8,\"8\":\"NotEnoughBalance\",\n/**\n*r\" The interpreter is expected to be in internal context.\n*/\nExpectedInternalContext:9,\"9\":\"ExpectedInternalContext\",\n/**\n*r\" The queried asset ID was not found in the state.\n*/\nAssetIdNotFound:10,\"10\":\"AssetIdNotFound\",\n/**\n*r\" The provided input is not found in the transaction.\n*/\nInputNotFound:11,\"11\":\"InputNotFound\",\n/**\n*r\" The provided output is not found in the transaction.\n*/\nOutputNotFound:12,\"12\":\"OutputNotFound\",\n/**\n*r\" The provided witness is not found in the transaction.\n*/\nWitnessNotFound:13,\"13\":\"WitnessNotFound\",\n/**\n*r\" The transaction maturity is not valid for this request.\n*/\nTransactionMaturity:14,\"14\":\"TransactionMaturity\",\n/**\n*r\" The metadata identifier is invalid.\n*/\nInvalidMetadataIdentifier:15,\"15\":\"InvalidMetadataIdentifier\",\n/**\n*r\" The call structure is not valid.\n*/\nMalformedCallStructure:16,\"16\":\"MalformedCallStructure\",\n/**\n*r\" The provided register does not allow write operations.\n*/\nReservedRegisterNotWritable:17,\"17\":\"ReservedRegisterNotWritable\",\n/**\n*r\" The execution resulted in an erroneous state of the interpreter.\n*/\nInvalidFlags:18,\"18\":\"InvalidFlags\",\n/**\n*r\" The provided immediate value is not valid for this instruction.\n*/\nInvalidImmediateValue:19,\"19\":\"InvalidImmediateValue\",\n/**\n*r\" The provided transaction input is not of type `Coin`.\n*/\nExpectedCoinInput:20,\"20\":\"ExpectedCoinInput\",\n/**\n*r\" `ECAL` instruction failed.\n*/\nEcalError:21,\"21\":\"EcalError\",\n/**\n*r\" Two segments of the interpreter memory should not intersect for write operations.\n*/\nMemoryWriteOverlap:22,\"22\":\"MemoryWriteOverlap\",\n/**\n*r\" The requested contract is not listed in the transaction inputs.\n*/\nContractNotInInputs:23,\"23\":\"ContractNotInInputs\",\n/**\n*r\" The internal asset ID balance overflowed with the provided instruction.\n*/\nInternalBalanceOverflow:24,\"24\":\"InternalBalanceOverflow\",\n/**\n*r\" The maximum allowed contract size is violated.\n*/\nContractMaxSize:25,\"25\":\"ContractMaxSize\",\n/**\n*r\" This instruction expects the stack area to be unallocated for this call.\n*/\nExpectedUnallocatedStack:26,\"26\":\"ExpectedUnallocatedStack\",\n/**\n*r\" The maximum allowed number of static contracts was reached for this transaction.\n*/\nMaxStaticContractsReached:27,\"27\":\"MaxStaticContractsReached\",\n/**\n*r\" The requested transfer amount cannot be zero.\n*/\nTransferAmountCannotBeZero:28,\"28\":\"TransferAmountCannotBeZero\",\n/**\n*r\" The provided transaction output should be of type `Variable`.\n*/\nExpectedOutputVariable:29,\"29\":\"ExpectedOutputVariable\",\n/**\n*r\" The expected context of the stack parent is internal.\n*/\nExpectedParentInternalContext:30,\"30\":\"ExpectedParentInternalContext\",\n/**\n*r\" The predicate returned non `1`. The `1` means successful verification\n*r\" of the predicate, all other values means unsuccessful.\n*/\nPredicateReturnedNonOne:31,\"31\":\"PredicateReturnedNonOne\",\n/**\n*r\" The contract ID is already deployed and can't be overwritten.\n*/\nContractIdAlreadyDeployed:32,\"32\":\"ContractIdAlreadyDeployed\",\n/**\n*r\" The loaded contract mismatch expectations.\n*/\nContractMismatch:33,\"33\":\"ContractMismatch\",\n/**\n*r\" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`\n*/\nMessageDataTooLong:34,\"34\":\"MessageDataTooLong\",\n/**\n*r\" Mathematically invalid arguments where given to an arithmetic instruction.\n*r\" For instance, division by zero produces this.\n*r\" These errors are ignored using the UNSAFEMATH flag.\n*/\nArithmeticError:35,\"35\":\"ArithmeticError\",\n/**\n*r\" The contract instruction is not allowed in predicates.\n*/\nContractInstructionNotAllowed:36,\"36\":\"ContractInstructionNotAllowed\",\n/**\n*r\" Transfer of zero coins is not allowed.\n*/\nTransferZeroCoins:37,\"37\":\"TransferZeroCoins\",\n/**\n*r\" Attempted to execute an invalid instruction\n*/\nInvalidInstruction:38,\"38\":\"InvalidInstruction\",\n/**\n*r\" Memory outside $is..$ssp range is not executable\n*/\nMemoryNotExecutable:39,\"39\":\"MemoryNotExecutable\",\n/**\n*r\" The policy is not set.\n*/\nPolicyIsNotSet:40,\"40\":\"PolicyIsNotSet\",\n/**\n*r\" The policy is not found across policies.\n*/\nPolicyNotFound:41,\"41\":\"PolicyNotFound\",\n/**\n*r\" Receipt context is full\n*/\nTooManyReceipts:42,\"42\":\"TooManyReceipts\",\n/**\n*r\" Balance of a contract overflowed\n*/\nBalanceOverflow:43,\"43\":\"BalanceOverflow\",\n/**\n*r\" Block height value is invalid, typically because it is too large\n*/\nInvalidBlockHeight:44,\"44\":\"InvalidBlockHeight\",\n/**\n*r\" Attempt to use sequential memory instructions with too large slot count,\n*r\" typically because it cannot fit into usize\n*/\nTooManySlots:45,\"45\":\"TooManySlots\",\n/**\n*r\" Caller of this internal context is also expected to be internal,\n*r\" i.e. $fp->$fp must be non-zero.\n*/\nExpectedNestedCaller:46,\"46\":\"ExpectedNestedCaller\",\n/**\n*r\" During memory growth, the stack overlapped with the heap\n*/\nMemoryGrowthOverlap:47,\"47\":\"MemoryGrowthOverlap\",\n/**\n*r\" Attempting to read or write uninitialized memory.\n*r\" Also occurs when boundary crosses from stack to heap.\n*/\nUninitalizedMemoryAccess:48,\"48\":\"UninitalizedMemoryAccess\",\n/**\n*r\" Overriding consensus parameters is not allowed.\n*/\nOverridingConsensusParameters:49,\"49\":\"OverridingConsensusParameters\",\n/**\n*r\" The storage doesn't know about the hash of the state transition bytecode.\n*/\nUnknownStateTransactionBytecodeRoot:50,\"50\":\"UnknownStateTransactionBytecodeRoot\",\n/**\n*r\" Overriding the state transition bytecode is not allowed.\n*/\nOverridingStateTransactionBytecode:51,\"51\":\"OverridingStateTransactionBytecode\",\n/**\n*r\" The bytecode is already uploaded and cannot be uploaded again.\n*/\nBytecodeAlreadyUploaded:52,\"52\":\"BytecodeAlreadyUploaded\",\n/**\n*r\" The part of the bytecode is not sequentially connected to the previous parts.\n*/\nThePartIsNotSequentiallyConnected:53,\"53\":\"ThePartIsNotSequentiallyConnected\",\n/**\n*r\" The requested blob is not found.\n*/\nBlobNotFound:54,\"54\":\"BlobNotFound\",\n/**\n*r\" The blob was already\n*/\nBlobIdAlreadyUploaded:55,\"55\":\"BlobIdAlreadyUploaded\",\n/**\n*r\" Active gas costs do not define the cost for this instruction.\n*/\nGasCostNotDefined:56,\"56\":\"GasCostNotDefined\", });\n/**\n* The operation performed by WDOP and WQOP instructions, determined as\n*/\nconst MathOp = Object.freeze({\n/**\n* Add\n*/\nADD:0,\"0\":\"ADD\",\n/**\n* Subtract\n*/\nSUB:1,\"1\":\"SUB\",\n/**\n* Invert bits (discards rhs)\n*/\nNOT:2,\"2\":\"NOT\",\n/**\n* Bitwise or\n*/\nOR:3,\"3\":\"OR\",\n/**\n* Bitwise exclusive or\n*/\nXOR:4,\"4\":\"XOR\",\n/**\n* Bitwise and\n*/\nAND:5,\"5\":\"AND\",\n/**\n* Shift left\n*/\nSHL:6,\"6\":\"SHL\",\n/**\n* Shift right\n*/\nSHR:7,\"7\":\"SHR\", });\n/**\n*r\" Argument list for GM (get metadata) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GMArgs = Object.freeze({\n/**\n*r\" Get if caller is external.\n*/\nIsCallerExternal:1,\"1\":\"IsCallerExternal\",\n/**\n*r\" Get caller's contract ID.\n*/\nGetCaller:2,\"2\":\"GetCaller\",\n/**\n*r\" Get index of current predicate.\n*/\nGetVerifyingPredicate:3,\"3\":\"GetVerifyingPredicate\",\n/**\n*r\" Get the Chain ID this VM is operating within\n*/\nGetChainId:4,\"4\":\"GetChainId\",\n/**\n*r\" Get memory address where the transaction is located\n*/\nTxStart:5,\"5\":\"TxStart\",\n/**\n*r\" Get memory address of base asset ID\n*/\nBaseAssetId:6,\"6\":\"BaseAssetId\", });\n\nconst ADDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_add_free(ptr >>> 0, 1));\n/**\n*Adds two registers.\n*/\nclass ADD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_add_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ADDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_addi_free(ptr >>> 0, 1));\n/**\n*Adds a register and an immediate value.\n*/\nclass ADDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ADDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_addi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ADDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst ALOCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_aloc_free(ptr >>> 0, 1));\n/**\n*Allocate a number of bytes from the heap.\n*/\nclass ALOC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ALOCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_aloc_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} bytes\n    */\n    constructor(bytes) {\n        _assertClass(bytes, RegId);\n        var ptr0 = bytes.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        ALOCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_and_free(ptr >>> 0, 1));\n/**\n*Bitwise ANDs two registers.\n*/\nclass AND {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_and_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ANDIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_andi_free(ptr >>> 0, 1));\n/**\n*Bitwise ANDs a register and an immediate value.\n*/\nclass ANDI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ANDIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_andi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ANDIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst BALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bal_free(ptr >>> 0, 1));\n/**\n*Get the balance of contract of an asset ID.\n*/\nclass BAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bal_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} asset_id_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, asset_id_addr, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr1 = asset_id_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr2 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        BALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhei_free(ptr >>> 0, 1));\n/**\n*Get current block height.\n*/\nclass BHEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhei_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        BHEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BHSHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bhsh_free(ptr >>> 0, 1));\n/**\n*Get block header hash for height.\n*/\nclass BHSH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BHSHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhsh_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BHSHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BLDDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bldd_free(ptr >>> 0, 1));\n/**\n*Load blob as data\n*/\nclass BLDD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BLDDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bldd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_ptr\n    * @param {RegId} blob_id_ptr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(dst_ptr, blob_id_ptr, offset, len) {\n        _assertClass(dst_ptr, RegId);\n        var ptr0 = dst_ptr.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        BLDDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_bsiz_free(ptr >>> 0, 1));\n/**\n*Get blob size\n*/\nclass BSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bsiz_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} blob_id_ptr\n    */\n    constructor(dst, blob_id_ptr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(blob_id_ptr, RegId);\n        var ptr1 = blob_id_ptr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst BURNFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_burn_free(ptr >>> 0, 1));\n/**\n*Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n*/\nclass BURN {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        BURNFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_burn_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    * @param {RegId} sub_id_addr\n    */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        BURNFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CALLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_call_free(ptr >>> 0, 1));\n/**\n*Call a contract.\n*/\nclass CALL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CALLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_call_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} target_struct\n    * @param {RegId} fwd_coins\n    * @param {RegId} asset_id_addr\n    * @param {RegId} fwd_gas\n    */\n    constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n        _assertClass(target_struct, RegId);\n        var ptr0 = target_struct.__destroy_into_raw();\n        _assertClass(fwd_coins, RegId);\n        var ptr1 = fwd_coins.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        _assertClass(fwd_gas, RegId);\n        var ptr3 = fwd_gas.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CALLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cb_free(ptr >>> 0, 1));\n/**\n*Get current block proposer's address.\n*/\nclass CB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ccp_free(ptr >>> 0, 1));\n/**\n*Copy contract code for a contract.\n*/\nclass CCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ccp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(dst_addr, contract_id_addr, offset, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        CCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfe_free(ptr >>> 0, 1));\n/**\n*Extend the current call frame's stack\n*/\nclass CFE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfe_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfei_free(ptr >>> 0, 1));\n/**\n*Extend the current call frame's stack by an immediate value.\n*/\nclass CFEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfei_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CFSFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfs_free(ptr >>> 0, 1));\n/**\n*Shrink the current call frame's stack\n*/\nclass CFS {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfs_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CFSIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_cfsi_free(ptr >>> 0, 1));\n/**\n*Shrink the current call frame's stack by an immediate value.\n*/\nclass CFSI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CFSIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfsi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        CFSIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst CROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_croo_free(ptr >>> 0, 1));\n/**\n*Get code root of a contract.\n*/\nclass CROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_croo_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst_addr, contract_id_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CSIZFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_csiz_free(ptr >>> 0, 1));\n/**\n*Get code size of a contract.\n*/\nclass CSIZ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CSIZFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_csiz_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        CSIZFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst CompareArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_compareargs_free(ptr >>> 0, 1));\n/**\n* Arguments for WDCM and WQCM instructions.\n*/\nclass CompareArgs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CompareArgs.prototype);\n        obj.__wbg_ptr = ptr;\n        CompareArgsFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        CompareArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_compareargs_free(ptr, 0);\n    }\n    /**\n    * Comparison mode\n    * @returns {CompareMode}\n    */\n    get mode() {\n        const ret = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Comparison mode\n    * @param {CompareMode} arg0\n    */\n    set mode(arg0) {\n        wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Convert to immediate value.\n    * @returns {Imm06}\n    */\n    to_imm() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.compareargs_to_imm(ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct from `Imm06`. Returns `None` if the value has reserved flags set.\n    * @param {Imm06} bits\n    * @returns {CompareArgs | undefined}\n    */\n    static from_imm(bits) {\n        _assertClass(bits, Imm06);\n        var ptr0 = bits.__destroy_into_raw();\n        const ret = wasm$1.compareargs_from_imm(ptr0);\n        return ret === 0 ? undefined : CompareArgs.__wrap(ret);\n    }\n}\n\nconst DIVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_div_free(ptr >>> 0, 1));\n/**\n*Divides two registers.\n*/\nclass DIV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_div_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst DIVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divi_free(ptr >>> 0, 1));\n/**\n*Divides a register and an immediate value.\n*/\nclass DIVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DIVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        DIVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst DivArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_divargs_free(ptr >>> 0, 1));\n/**\n* Additional arguments for WMDV and WDDV instructions.\n*/\nclass DivArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        DivArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divargs_free(ptr, 0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst ECALFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecal_free(ptr >>> 0, 1));\n/**\n*Call external function\n*/\nclass ECAL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECALFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecal_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} c\n    * @param {RegId} d\n    */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ECALFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECK1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eck1_free(ptr >>> 0, 1));\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n*/\nclass ECK1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECK1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eck1_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECK1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ECR1Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ecr1_free(ptr >>> 0, 1));\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message hash.\n*/\nclass ECR1 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ECR1Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecr1_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ECR1Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ED19Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ed19_free(ptr >>> 0, 1));\n/**\n*Verify ED25519 public key and signature match a message.\n*/\nclass ED19 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ED19Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ed19_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} pub_key_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_addr\n    * @param {RegId} msg_len\n    */\n    constructor(pub_key_addr, sig_addr, msg_addr, msg_len) {\n        _assertClass(pub_key_addr, RegId);\n        var ptr0 = pub_key_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_addr, RegId);\n        var ptr2 = msg_addr.__destroy_into_raw();\n        _assertClass(msg_len, RegId);\n        var ptr3 = msg_len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        ED19Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_eq_free(ptr >>> 0, 1));\n/**\n*Compares two registers for equality.\n*/\nclass EQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_exp_free(ptr >>> 0, 1));\n/**\n*Raises one register to the power of another.\n*/\nclass EXP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_exp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst EXPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_expi_free(ptr >>> 0, 1));\n/**\n*Raises one register to the power of an immediate value.\n*/\nclass EXPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EXPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_expi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        EXPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst FLAGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_flag_free(ptr >>> 0, 1));\n/**\n*Set flag register to a register.\n*/\nclass FLAG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        FLAGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_flag_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        FLAGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gm_free(ptr >>> 0, 1));\n/**\n*Get metadata from memory.\n*/\nclass GM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GM.prototype);\n        obj.__wbg_ptr = ptr;\n        GMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gm_free(ptr, 0);\n    }\n    /**\n    * Construct a `GM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {GMArgs} args\n    * @returns {GM}\n    */\n    static from_args(ra, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        const ret = wasm$1.gm_from_args(ptr0, args);\n        return GM.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} selector\n    */\n    constructor(dst, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(selector, Imm18);\n        var ptr1 = selector.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        GMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst GTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gt_free(ptr >>> 0, 1));\n/**\n*Compares two registers for greater-than.\n*/\nclass GT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gt_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst GTFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_gtf_free(ptr >>> 0, 1));\n/**\n*Get transaction fields.\n*/\nclass GTF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GTF.prototype);\n        obj.__wbg_ptr = ptr;\n        GTFFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        GTFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gtf_free(ptr, 0);\n    }\n    /**\n    * Construct a `GTF` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {GTFArgs} args\n    * @returns {GTF}\n    */\n    static from_args(ra, rb, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        const ret = wasm$1.gtf_from_args(ptr0, ptr1, args);\n        return GTF.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    * @param {Imm12} selector\n    */\n    constructor(dst, arg, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        _assertClass(selector, Imm12);\n        var ptr2 = selector.__destroy_into_raw();\n        const ret = wasm$1.gtf_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        GTFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst Imm06Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm06_free(ptr >>> 0, 1));\n/**\n* Represents a 6-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm06 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm06.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm06Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm06Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm06_free(ptr, 0);\n    }\n}\n\nconst Imm12Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm12_free(ptr >>> 0, 1));\n/**\n* Represents a 12-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm12 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm12.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm12Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm12Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm12_free(ptr, 0);\n    }\n}\n\nconst Imm18Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm18_free(ptr >>> 0, 1));\n/**\n* Represents a 18-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm18 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm18.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm18Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm18Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm18_free(ptr, 0);\n    }\n}\n\nconst Imm24Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_imm24_free(ptr >>> 0, 1));\n/**\n* Represents a 24-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm24 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm24.prototype);\n        obj.__wbg_ptr = ptr;\n        Imm24Finalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        Imm24Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm24_free(ptr, 0);\n    }\n}\n\nconst InstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_instruction_free(ptr >>> 0, 1));\n/**\n* Representation of a single instruction for the interpreter.\n*\n* The opcode is represented in the tag (variant), or may be retrieved in the\n* form of an `Opcode` byte using the `opcode` method.\n*\n* The register and immediate data associated with the instruction is represented\n* within an inner unit type wrapper around the 3 remaining bytes.\n*/\nclass Instruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Instruction.prototype);\n        obj.__wbg_ptr = ptr;\n        InstructionFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        InstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_instruction_free(ptr, 0);\n    }\n    /**\n    * Convenience method for converting to bytes\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);\n            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm$1.__wbindgen_export_0(r0, r1 * 1, 1);\n            return v1;\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Size of an instruction in bytes\n    * @returns {number}\n    */\n    static size() {\n        const ret = wasm$1.instruction_size();\n        return ret >>> 0;\n    }\n}\n\nconst JIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ji_free(ptr >>> 0, 1));\n/**\n*Jump.\n*/\nclass JI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ji_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, Imm24);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst JMPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmp_free(ptr >>> 0, 1));\n/**\n*Dynamic jump.\n*/\nclass JMP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JMPBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpb_free(ptr >>> 0, 1));\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n*/\nclass JMPB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JMPFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jmpf_free(ptr >>> 0, 1));\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n*/\nclass JMPF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JMPFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpf_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JMPFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst JNEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jne_free(ptr >>> 0, 1));\n/**\n*Conditional dynamic jump.\n*/\nclass JNE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jne_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(abs_target, lhs, rhs) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst JNEBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jneb_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jneb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnef_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnef_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        JNEFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst JNEIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnei_free(ptr >>> 0, 1));\n/**\n*Conditional jump.\n*/\nclass JNEI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNEIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnei_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {Imm12} abs_target\n    */\n    constructor(cond_lhs, cond_rhs, abs_target) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(abs_target, Imm12);\n        var ptr2 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNEIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzb_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n*/\nclass JNZB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZFFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzf_free(ptr >>> 0, 1));\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n*/\nclass JNZF {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZFFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzf_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        JNZFFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst JNZIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_jnzi_free(ptr >>> 0, 1));\n/**\n*Conditional jump against zero.\n*/\nclass JNZI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        JNZIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {Imm18} abs_target\n    */\n    constructor(cond_nz, abs_target) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(abs_target, Imm18);\n        var ptr1 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        JNZIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst K256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_k256_free(ptr >>> 0, 1));\n/**\n*The keccak-256 hash of a slice.\n*/\nclass K256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        K256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_k256_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        K256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lb_free(ptr >>> 0, 1));\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n*/\nclass LB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst LDCFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ldc_free(ptr >>> 0, 1));\n/**\n*Load code as executable either from contract, blob, or memory.\n*/\nclass LDC {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LDCFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ldc_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} src_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    * @param {Imm06} mode\n    */\n    constructor(src_addr, offset, len, mode) {\n        _assertClass(src_addr, RegId);\n        var ptr0 = src_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr1 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        _assertClass(mode, Imm06);\n        var ptr3 = mode.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LDCFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst LOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_log_free(ptr >>> 0, 1));\n/**\n*Log an event.\n*/\nclass LOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_log_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} c\n    * @param {RegId} d\n    */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LOGDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_logd_free(ptr >>> 0, 1));\n/**\n*Log data.\n*/\nclass LOGD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LOGDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_logd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(a, b, addr, len) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr2 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        LOGDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lt_free(ptr >>> 0, 1));\n/**\n*Compares two registers for less-than.\n*/\nclass LT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lt_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst LWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_lw_free(ptr >>> 0, 1));\n/**\n*A word is loaded from the specified address offset by an immediate value.\n*/\nclass LW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        LWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lw_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        LWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MCLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcl_free(ptr >>> 0, 1));\n/**\n*Clear a variable number of bytes in memory.\n*/\nclass MCL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcli_free(ptr >>> 0, 1));\n/**\n*Clear an immediate number of bytes in memory.\n*/\nclass MCLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {Imm18} count\n    */\n    constructor(addr, count) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(count, Imm18);\n        var ptr1 = count.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MCLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MCPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcp_free(ptr >>> 0, 1));\n/**\n*Copy a variable number of bytes in memory.\n*/\nclass MCP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcp_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MCPIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mcpi_free(ptr >>> 0, 1));\n/**\n*Copy an immediate number of bytes in memory.\n*/\nclass MCPI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MCPIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcpi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {Imm12} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, Imm12);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MCPIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MEQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_meq_free(ptr >>> 0, 1));\n/**\n*Compare bytes in memory.\n*/\nclass MEQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MEQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_meq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} result\n    * @param {RegId} lhs_addr\n    * @param {RegId} rhs_addr\n    * @param {RegId} len\n    */\n    constructor(result, lhs_addr, rhs_addr, len) {\n        _assertClass(result, RegId);\n        var ptr0 = result.__destroy_into_raw();\n        _assertClass(lhs_addr, RegId);\n        var ptr1 = lhs_addr.__destroy_into_raw();\n        _assertClass(rhs_addr, RegId);\n        var ptr2 = rhs_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MEQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MINTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mint_free(ptr >>> 0, 1));\n/**\n*Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n*/\nclass MINT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MINTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mint_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    * @param {RegId} sub_id_addr\n    */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MINTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mldv_free(ptr >>> 0, 1));\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n*/\nclass MLDV {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mldv_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        MLDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MLOGFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mlog_free(ptr >>> 0, 1));\n/**\n*The integer logarithm of a register.\n*/\nclass MLOG {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MLOGFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mlog_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MLOGFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mod_free(ptr >>> 0, 1));\n/**\n*Modulo remainder of two registers.\n*/\nclass MOD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mod_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MODIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_modi_free(ptr >>> 0, 1));\n/**\n*Modulo remainder of a register and an immediate value.\n*/\nclass MODI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MODIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_modi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MODIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MOVEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_move_free(ptr >>> 0, 1));\n/**\n*Copy from one register to another.\n*/\nclass MOVE {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_move_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} src\n    */\n    constructor(dst, src) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(src, RegId);\n        var ptr1 = src.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MOVIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_movi_free(ptr >>> 0, 1));\n/**\n*Copy immediate value into a register\n*/\nclass MOVI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MOVIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_movi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} val\n    */\n    constructor(dst, val) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(val, Imm18);\n        var ptr1 = val.__destroy_into_raw();\n        const ret = wasm$1.jmpb_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        MOVIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n\nconst MROOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mroo_free(ptr >>> 0, 1));\n/**\n*The integer root of a register.\n*/\nclass MROO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MROOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mroo_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MROOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mul_free(ptr >>> 0, 1));\n/**\n*Multiplies two registers.\n*/\nclass MUL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mul_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst MULIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_muli_free(ptr >>> 0, 1));\n/**\n*Multiplies a register and an immediate value.\n*/\nclass MULI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MULIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_muli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        MULIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst MathArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mathargs_free(ptr >>> 0, 1));\n/**\n* Additional arguments for WDOP and WQOP instructions.\n*/\nclass MathArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MathArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mathargs_free(ptr, 0);\n    }\n    /**\n    * The operation to perform\n    * @returns {MathOp}\n    */\n    get op() {\n        const ret = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * The operation to perform\n    * @param {MathOp} arg0\n    */\n    set op(arg0) {\n        wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst MulArgsFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_mulargs_free(ptr >>> 0, 1));\n/**\n* Additional arguments for WDML and WQML instructions.\n*/\nclass MulArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        MulArgsFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mulargs_free(ptr, 0);\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_lhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_lhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_mulargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_mulargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n\nconst NOOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_noop_free(ptr >>> 0, 1));\n/**\n*Performs no operation.\n*/\nclass NOOP {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_noop_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction.\n    */\n    constructor() {\n        const ret = wasm$1.noop_new_typescript();\n        this.__wbg_ptr = ret >>> 0;\n        NOOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n}\n\nconst NOTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_not_free(ptr >>> 0, 1));\n/**\n*Bitwise NOT a register.\n*/\nclass NOT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        NOTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_not_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    */\n    constructor(dst, arg) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        NOTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_or_free(ptr >>> 0, 1));\n/**\n*Bitwise ORs two registers.\n*/\nclass OR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_or_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst ORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ori_free(ptr >>> 0, 1));\n/**\n*Bitwise ORs a register and an immediate value.\n*/\nclass ORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        ORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ori_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        ORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst POPHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_poph_free(ptr >>> 0, 1));\n/**\n*Pop a bitmask-selected set of registers in range 40..64 to the stack.\n*/\nclass POPH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_poph_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst POPLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_popl_free(ptr >>> 0, 1));\n/**\n*Pop a bitmask-selected set of registers in range 16..40 to the stack.\n*/\nclass POPL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        POPLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_popl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        POPLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHHFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshh_free(ptr >>> 0, 1));\n/**\n*Push a bitmask-selected set of registers in range 40..64 to the stack.\n*/\nclass PSHH {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHHFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshh_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHHFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PSHLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_pshl_free(ptr >>> 0, 1));\n/**\n*Push a bitmask-selected set of registers in range 16..40 to the stack.\n*/\nclass PSHL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PSHLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        PSHLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n\nconst PanicInstructionFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_panicinstruction_free(ptr >>> 0, 1));\n/**\n* Describe a panic reason with the instruction that generated it\n*/\nclass PanicInstruction {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        PanicInstructionFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_panicinstruction_free(ptr, 0);\n    }\n    /**\n    * Represents an error described by a reason and an instruction.\n    * @param {PanicReason} reason\n    * @param {number} instruction\n    */\n    constructor(reason, instruction) {\n        const ret = wasm$1.panicinstruction_error_typescript(reason, instruction);\n        this.__wbg_ptr = ret >>> 0;\n        PanicInstructionFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Underlying panic reason\n    * @returns {PanicReason}\n    */\n    reason() {\n        const ret = wasm$1.panicinstruction_reason(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * Underlying instruction\n    * @returns {number}\n    */\n    instruction() {\n        const ret = wasm$1.panicinstruction_instruction(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n\nconst RETFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_ret_free(ptr >>> 0, 1));\n/**\n*Return from context.\n*/\nclass RET {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ret_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RETFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RETDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_retd_free(ptr >>> 0, 1));\n/**\n*Return from context with data.\n*/\nclass RETD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RETDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_retd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(addr, len) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        RETDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RVRTFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_rvrt_free(ptr >>> 0, 1));\n/**\n*Halt execution, reverting state changes and returning a value.\n*/\nclass RVRT {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RVRTFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_rvrt_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        this.__wbg_ptr = ret >>> 0;\n        RVRTFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.aloc_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst RegIdFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_regid_free(ptr >>> 0, 1));\n/**\n* Represents a 6-bit register ID, guaranteed to be masked by construction.\n*/\nclass RegId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegId.prototype);\n        obj.__wbg_ptr = ptr;\n        RegIdFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        RegIdFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_regid_free(ptr, 0);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * Returns `None` if the value is outside the 6-bit value range.\n    * @param {number} u\n    * @returns {RegId | undefined}\n    */\n    static new_checked(u) {\n        const ret = wasm$1.regid_new_checked(u);\n        return ret === 0 ? undefined : RegId.__wrap(ret);\n    }\n    /**\n    * Received balance for this context.\n    * @returns {RegId}\n    */\n    static bal() {\n        const ret = wasm$1.regid_bal();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas in the context.\n    * @returns {RegId}\n    */\n    static cgas() {\n        const ret = wasm$1.regid_cgas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Error codes for particular operations.\n    * @returns {RegId}\n    */\n    static err() {\n        const ret = wasm$1.regid_err();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Flags register.\n    * @returns {RegId}\n    */\n    static flag() {\n        const ret = wasm$1.regid_flag();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Frame pointer. Memory address of beginning of current call frame.\n    * @returns {RegId}\n    */\n    static fp() {\n        const ret = wasm$1.regid_fp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas globally.\n    * @returns {RegId}\n    */\n    static ggas() {\n        const ret = wasm$1.regid_ggas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Heap pointer. Memory address below the current bottom of the heap (points to free\n    * memory).\n    * @returns {RegId}\n    */\n    static hp() {\n        const ret = wasm$1.regid_hp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Instructions start. Pointer to the start of the currently-executing code.\n    * @returns {RegId}\n    */\n    static is() {\n        const ret = wasm$1.regid_is();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains overflow/underflow of addition, subtraction, and multiplication.\n    * @returns {RegId}\n    */\n    static of() {\n        const ret = wasm$1.regid_of();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains one (1), for convenience.\n    * @returns {RegId}\n    */\n    static one() {\n        const ret = wasm$1.regid_one();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * The program counter. Memory address of the current instruction.\n    * @returns {RegId}\n    */\n    static pc() {\n        const ret = wasm$1.regid_pc();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value or pointer.\n    * @returns {RegId}\n    */\n    static ret() {\n        const ret = wasm$1.regid_ret();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value length in bytes.\n    * @returns {RegId}\n    */\n    static retl() {\n        const ret = wasm$1.regid_retl();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack pointer. Memory address on top of current writable stack area (points to\n    * free memory).\n    * @returns {RegId}\n    */\n    static sp() {\n        const ret = wasm$1.regid_sp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack start pointer. Memory address of bottom of current writable stack area.\n    * @returns {RegId}\n    */\n    static spp() {\n        const ret = wasm$1.regid_spp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Smallest writable register.\n    * @returns {RegId}\n    */\n    static writable() {\n        const ret = wasm$1.regid_writable();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains zero (0), for convenience.\n    * @returns {RegId}\n    */\n    static zero() {\n        const ret = wasm$1.regid_zero();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * The given value will be masked to 6 bits.\n    * @param {number} u\n    */\n    constructor(u) {\n        const ret = wasm$1.regid_new_typescript(u);\n        this.__wbg_ptr = ret >>> 0;\n        RegIdFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * A const alternative to the `Into<u8>` implementation.\n    * @returns {number}\n    */\n    to_u8() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.regid_to_u8(ptr);\n        return ret;\n    }\n}\n\nconst S256Finalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_s256_free(ptr >>> 0, 1));\n/**\n*The SHA-2-256 hash of a slice.\n*/\nclass S256 {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        S256Finalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_s256_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        S256Finalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sb_free(ptr >>> 0, 1));\n/**\n*Write the least significant byte of a register to memory.\n*/\nclass SB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sb_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SCWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_scwq_free(ptr >>> 0, 1));\n/**\n*Clear a series of slots from contract storage.\n*/\nclass SCWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SCWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_scwq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr2 = lenq.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SCWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sll_free(ptr >>> 0, 1));\n/**\n*Left shifts a register by a register.\n*/\nclass SLL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sll_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SLLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_slli_free(ptr >>> 0, 1));\n/**\n*Left shifts a register by an immediate value.\n*/\nclass SLLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SLLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_slli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SLLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SMOFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_smo_free(ptr >>> 0, 1));\n/**\n*Send a message to recipient address with call abi, coins, and output.\n*/\nclass SMO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SMOFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_smo_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} recipient_addr\n    * @param {RegId} data_addr\n    * @param {RegId} data_len\n    * @param {RegId} coins\n    */\n    constructor(recipient_addr, data_addr, data_len, coins) {\n        _assertClass(recipient_addr, RegId);\n        var ptr0 = recipient_addr.__destroy_into_raw();\n        _assertClass(data_addr, RegId);\n        var ptr1 = data_addr.__destroy_into_raw();\n        _assertClass(data_len, RegId);\n        var ptr2 = data_len.__destroy_into_raw();\n        _assertClass(coins, RegId);\n        var ptr3 = coins.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SMOFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srl_free(ptr >>> 0, 1));\n/**\n*Right shifts a register by a register.\n*/\nclass SRL {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srl_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRLIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srli_free(ptr >>> 0, 1));\n/**\n*Right shifts a register by an immediate value.\n*/\nclass SRLI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRLIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srli_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRLIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SRWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srw_free(ptr >>> 0, 1));\n/**\n*Load a word from contract storage.\n*/\nclass SRW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srw_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    */\n    constructor(dst, status, key_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SRWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SRWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_srwq_free(ptr >>> 0, 1));\n/**\n*Load a series of 32 byte slots from contract storage.\n*/\nclass SRWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SRWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srwq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    * @param {RegId} lenq\n    */\n    constructor(dst_addr, status, key_addr, lenq) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SRWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sub_free(ptr >>> 0, 1));\n/**\n*Subtracts two registers.\n*/\nclass SUB {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sub_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SUBIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_subi_free(ptr >>> 0, 1));\n/**\n*Subtracts a register and an immediate value.\n*/\nclass SUBI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SUBIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_subi_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SUBIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sw_free(ptr >>> 0, 1));\n/**\n*Write a register to memory.\n*/\nclass SW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sw_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nconst SWWFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_sww_free(ptr >>> 0, 1));\n/**\n*Store a word in contract storage.\n*/\nclass SWW {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sww_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} value\n    */\n    constructor(key_addr, status, value) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr2 = value.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        SWWFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst SWWQFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_swwq_free(ptr >>> 0, 1));\n/**\n*Store a series of 32 byte slots in contract storage.\n*/\nclass SWWQ {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        SWWQFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_swwq_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} src_addr\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, src_addr, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr2 = src_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        SWWQFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TIMEFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_time_free(ptr >>> 0, 1));\n/**\n*Get timestamp of block at given height.\n*/\nclass TIME {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TIMEFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_time_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        this.__wbg_ptr = ret >>> 0;\n        TIMEFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TRFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tr_free(ptr >>> 0, 1));\n/**\n*Transfer coins to a contract unconditionally.\n*/\nclass TR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TRFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tr_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr1 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        TRFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst TROFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_tro_free(ptr >>> 0, 1));\n/**\n*Transfer coins to a variable output.\n*/\nclass TRO {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        TROFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tro_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} output_index\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, output_index, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(output_index, RegId);\n        var ptr1 = output_index.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr2 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr3 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        TROFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdam_free(ptr >>> 0, 1));\n/**\n*AddMod 128bit\n*/\nclass WDAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdam_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdcm_free(ptr >>> 0, 1));\n/**\n*Compare 128bit integers\n*/\nclass WDCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WDCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdcm_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WDCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wddv_free(ptr >>> 0, 1));\n/**\n*Divide 128bit\n*/\nclass WDDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WDDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wddv_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WDDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmd_free(ptr >>> 0, 1));\n/**\n*Fused multiply-divide 128bit\n*/\nclass WDMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdml_free(ptr >>> 0, 1));\n/**\n*Multiply 128bit\n*/\nclass WDML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDML.prototype);\n        obj.__wbg_ptr = ptr;\n        WDMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdml_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WDML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WDMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdmm_free(ptr >>> 0, 1));\n/**\n*MulMod 128bit\n*/\nclass WDMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmm_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WDOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wdop_free(ptr >>> 0, 1));\n/**\n*Simple 128bit operations\n*/\nclass WDOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WDOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WDOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdop_free(ptr, 0);\n    }\n    /**\n    * Construct a `WDOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WDOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WDOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQAMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqam_free(ptr >>> 0, 1));\n/**\n*AddMod 256bit\n*/\nclass WQAM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQAMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqam_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQAMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQCMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqcm_free(ptr >>> 0, 1));\n/**\n*Compare 256bit integers\n*/\nclass WQCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQCM.prototype);\n        obj.__wbg_ptr = ptr;\n        WQCMFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQCMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqcm_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WQCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQCMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQDVFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqdv_free(ptr >>> 0, 1));\n/**\n*Divide 256bit\n*/\nclass WQDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQDV.prototype);\n        obj.__wbg_ptr = ptr;\n        WQDVFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQDVFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqdv_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WQDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQDVFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMDFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmd_free(ptr >>> 0, 1));\n/**\n*Fused multiply-divide 256bit\n*/\nclass WQMD {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMDFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmd_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMDFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQMLFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqml_free(ptr >>> 0, 1));\n/**\n*Multiply 256bit\n*/\nclass WQML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQML.prototype);\n        obj.__wbg_ptr = ptr;\n        WQMLFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMLFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqml_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WQML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMLFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst WQMMFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqmm_free(ptr >>> 0, 1));\n/**\n*MulMod 256bit\n*/\nclass WQMM {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQMMFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmm_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.bldd_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQMMFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.bldd_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst WQOPFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_wqop_free(ptr >>> 0, 1));\n/**\n*Simple 256bit operations\n*/\nclass WQOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQOP.prototype);\n        obj.__wbg_ptr = ptr;\n        WQOPFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        WQOPFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqop_free(ptr, 0);\n    }\n    /**\n    * Construct a `WQOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WQOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.wdcm_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        this.__wbg_ptr = ret >>> 0;\n        WQOPFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.jneb_imm06(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n\nconst XORFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xor_free(ptr >>> 0, 1));\n/**\n*Bitwise XORs two registers.\n*/\nclass XOR {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xor_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n\nconst XORIFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm$1.__wbg_xori_free(ptr >>> 0, 1));\n/**\n*Bitwise XORs a register and an immediate value.\n*/\nclass XORI {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        XORIFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xori_free(ptr, 0);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        this.__wbg_ptr = ret >>> 0;\n        XORIFinalization.register(this, this.__wbg_ptr, this);\n        return this;\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm$1 = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedDataViewMemory0 = null;\n    cachedUint8ArrayMemory0 = null;\n\n\n\n    return wasm$1;\n}\n\nfunction initSync(module) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module !== 'undefined' && Object.getPrototypeOf(module) === Object.prototype)\n    ({module} = module);\n    else\n    console.warn('using deprecated parameters for `initSync()`; pass a single object instead');\n\n    const imports = __wbg_get_imports();\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(module_or_path) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n\n    if (typeof module_or_path !== 'undefined' && Object.getPrototypeOf(module_or_path) === Object.prototype)\n    ({module_or_path} = module_or_path);\n    else\n    console.warn('using deprecated parameters for the initialization function; pass a single object instead');\n    const imports = __wbg_get_imports();\n\n    const { instance, module } = await __wbg_load(await module_or_path, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  \nvar buf = null;\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nif (isNode) {\n  \nbuf = Buffer.from(src, 'base64');\n\n} else {\n  \nvar raw = globalThis.atob(src);\nvar rawLength = raw.length;\nbuf = new Uint8Array(new ArrayBuffer(rawLength));\nfor(var i = 0; i < rawLength; i++) {\n   buf[i] = raw.charCodeAt(i);\n}\n\n}\n\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf);\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\n\nfunction wasm(imports){return _loadWasmModule(1, null, 'AGFzbQEAAAABOgpgA39/fwF/YAF/AX9gBH9/f38Bf2ACf38AYAJ/fwF/YAABf2AFf39/f38Bf2ABfwBgA39/fwBgAAACGAEDd2JnEF9fd2JpbmRnZW5fdGhyb3cAAwP/Af0BAQEDAwMDAwMBAQMDAQEBAwMBAQEEAQMDAwEBAwEBAQQCAQMCAgICAgIDAwMEBAQEBAQEBAEBAQMDAAICBAQEBAQEBAQEBAABAQgDAwQBAQEBAQEBAgcDAQAAAQEDBwcBAwEDAgIBAQEAAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQEBAQUBAQEBBAAEAQYCAgMDAAIABwEIBAEEAQkDAQEHAQUFBQUFBQUFBQUFBQUFBQUFBQUDBgYCAgQCBgYAAAgABAUDAQARBgkBfwFBgIDAAAsHjUzPBQZtZW1vcnkCABZfX3diZ19jb21wYXJlYXJnc19mcmVlABAaX193YmdfZ2V0X2NvbXBhcmVhcmdzX21vZGUASBpfX3diZ19zZXRfY29tcGFyZWFyZ3NfbW9kZQA4Il9fd2JnX2dldF9jb21wYXJlYXJnc19pbmRpcmVjdF9yaHMASSJfX3diZ19zZXRfY29tcGFyZWFyZ3NfaW5kaXJlY3RfcmhzAEsSY29tcGFyZWFyZ3NfdG9faW1tAFgUY29tcGFyZWFyZ3NfZnJvbV9pbW0AHxVfX3diZ19nZXRfbWF0aGFyZ3Nfb3AASBVfX3diZ19zZXRfbWF0aGFyZ3Nfb3AAORJfX3diZ19tdWxhcmdzX2ZyZWUAER5fX3diZ19nZXRfbXVsYXJnc19pbmRpcmVjdF9yaHMASB5fX3diZ19zZXRfbXVsYXJnc19pbmRpcmVjdF9yaHMATBJfX3diZ19kaXZhcmdzX2ZyZWUAIx5fX3diZ19nZXRfZGl2YXJnc19pbmRpcmVjdF9yaHMAuQEeX193Ymdfc2V0X2RpdmFyZ3NfaW5kaXJlY3RfcmhzAGMbX193YmdfcGFuaWNpbnN0cnVjdGlvbl9mcmVlABchcGFuaWNpbnN0cnVjdGlvbl9lcnJvcl90eXBlc2NyaXB0AE0XcGFuaWNpbnN0cnVjdGlvbl9yZWFzb24AWxxwYW5pY2luc3RydWN0aW9uX2luc3RydWN0aW9uAFwMZ21fZnJvbV9hcmdzANUBDWd0Zl9mcm9tX2FyZ3MAzQEHZ21fYXJncwCIAQhndGZfYXJncwBpDndkY21fZnJvbV9hcmdzADsOd2RvcF9mcm9tX2FyZ3MAOw53ZG1sX2Zyb21fYXJncwA8DndkZHZfZnJvbV9hcmdzAMkBCXdkY21fYXJncwAkCXdxY21fYXJncwAlCXdkb3BfYXJncwAmCXdxb3BfYXJncwAnCXdkbWxfYXJncwAoCXdxbWxfYXJncwApCXdkZHZfYXJncwBkCXdxZHZfYXJncwBlEF9fd2JnX2ltbTA2X2ZyZWUAKhBfX3diZ19pbW0xMl9mcmVlACsQX193YmdfaW1tMThfZnJlZQAsDl9fd2JnX2FkZF9mcmVlABgPX193Ymdfbm9vcF9mcmVlAAcSYWRkX25ld190eXBlc2NyaXB0AFkGYWRkX3JhADUGYWRkX3JiABIGYWRkX3JjABoDYWRkAMUBA2FuZACKAQNkaXYAiwECZXEAjAEDZXhwAI0BAmd0AI4BAmx0AI8BBG1sb2cAkAEEbXJvbwCRAQRtb2RfAJIBBW1vdmVfAD0DbXVsAJMBA25vdAA+Am9yAJQBA3NsbACVAQNzcmwAlgEDc3ViAJcBA3hvcgCYAQRtbGR2AGoDcmV0ALoBBHJldGQAPxNhbG9jX25ld190eXBlc2NyaXB0AGAHYWxvY19yYQAiBGFsb2MAuwEDbWNsAEADbWNwAJkBA21lcQBrE2Joc2hfbmV3X3R5cGVzY3JpcHQAIARiaHNoAC0EYmhlaQC8AQRidXJuAEEEY2FsbABsA2NjcABtBGNyb28AQgRjc2l6AEMCY2IAvQEDbGRjAG4DbG9nAG8EbG9nZABwBG1pbnQARARydnJ0AL4BBHNjd3EAmgEDc3J3AJsBBHNyd3EAcQNzd3cAnAEEc3d3cQByAnRyAJ0BA3RybwBzBGVjazEAngEEZWNyMQCfAQRlZDE5AHQEazI1NgCgAQRzMjU2AKEBBHRpbWUARRNub29wX25ld190eXBlc2NyaXB0AL8BBG5vb3AA3QEEZmxhZwDAAQNiYWwAogEDam1wAMEBA2puZQCjAQNzbW8AdRNhZGRpX25ld190eXBlc2NyaXB0AFoKYWRkaV9pbW0xMgAJBGFkZGkApAEEYW5kaQClAQRkaXZpAKYBBGV4cGkApwEEbW9kaQCoAQRtdWxpAKkBA29yaQCqAQRzbGxpAKsBBHNybGkArAEEc3ViaQCtAQR4b3JpAK4BBGpuZWkArwECbGIAsAECbHcAsQECc2IAsgECc3cAswEEbWNwaQC0ARJndGZfbmV3X3R5cGVzY3JpcHQAzwEDZ3RmALUBBG1jbGkALhFnbV9uZXdfdHlwZXNjcmlwdABGCGdtX2ltbTE4AA0CZ20ALwRtb3ZpADAEam56aQAxBGptcGYAMhNqbXBiX25ld190eXBlc2NyaXB0ABUEam1wYgAzBGpuemYAtgEEam56YgC3AQRqbmVmAHYKam5lYl9pbW0wNgA2BGpuZWIAdwJqaQBOE2NmZWlfbmV3X3R5cGVzY3JpcHQANwpjZmVpX2ltbTI0AAoEY2ZlaQBPBGNmc2kAUANjZmUAwgEDY2ZzAMMBBHBzaGwAUQRwc2hoAFIEcG9wbABTBHBvcGgAVBN3ZGNtX25ld190eXBlc2NyaXB0AMoBBHdkY20AeAR3cWNtAHkEd2RvcAB6BHdxb3AAewR3ZG1sAHwEd3FtbAB9BHdkZHYAfgR3cWR2AH8Ed2RtZACAAQR3cW1kAIEBBHdkYW0AggEEd3FhbQCDAQR3ZG1tAIQBBHdxbW0AhQEEZWNhbACGAQRic2l6ADQTYmxkZF9uZXdfdHlwZXNjcmlwdABVB2JsZGRfcmQANgRibGRkAIcBFl9fd2JnX2luc3RydWN0aW9uX2ZyZWUADBRpbnN0cnVjdGlvbl90b19ieXRlcwAGEGluc3RydWN0aW9uX3NpemUA7wERcmVnaWRfbmV3X2NoZWNrZWQAuAEJcmVnaWRfYmFsAN4BCnJlZ2lkX2NnYXMA3wEJcmVnaWRfZXJyAOABCnJlZ2lkX2ZsYWcA4QEIcmVnaWRfZnAA4gEKcmVnaWRfZ2dhcwDjAQhyZWdpZF9ocADkAQhyZWdpZF9pcwDlAQhyZWdpZF9vZgDmAQlyZWdpZF9vbmUA5wEIcmVnaWRfcGMA6AEJcmVnaWRfcmV0AOkBCnJlZ2lkX3JldGwA6gEIcmVnaWRfc3AA6wEJcmVnaWRfc3BwAOwBDnJlZ2lkX3dyaXRhYmxlAO0BCnJlZ2lkX3plcm8A7gEUcmVnaWRfbmV3X3R5cGVzY3JpcHQA2QELcmVnaWRfdG9fdTgA2gESYW5kX25ld190eXBlc2NyaXB0AFkSZGl2X25ld190eXBlc2NyaXB0AFkRZXFfbmV3X3R5cGVzY3JpcHQAWRJleHBfbmV3X3R5cGVzY3JpcHQAWRFndF9uZXdfdHlwZXNjcmlwdABZEWx0X25ld190eXBlc2NyaXB0AFkTbWxvZ19uZXdfdHlwZXNjcmlwdABZE21yb29fbmV3X3R5cGVzY3JpcHQAWRJtb2RfbmV3X3R5cGVzY3JpcHQAWRJtdWxfbmV3X3R5cGVzY3JpcHQAWRFvcl9uZXdfdHlwZXNjcmlwdABZEnNsbF9uZXdfdHlwZXNjcmlwdABZEnNybF9uZXdfdHlwZXNjcmlwdABZEnN1Yl9uZXdfdHlwZXNjcmlwdABZEnhvcl9uZXdfdHlwZXNjcmlwdABZEm1jcF9uZXdfdHlwZXNjcmlwdABZE3Njd3FfbmV3X3R5cGVzY3JpcHQAWRJzcndfbmV3X3R5cGVzY3JpcHQAWRJzd3dfbmV3X3R5cGVzY3JpcHQAWRF0cl9uZXdfdHlwZXNjcmlwdABZE2VjazFfbmV3X3R5cGVzY3JpcHQAWRNlY3IxX25ld190eXBlc2NyaXB0AFkTazI1Nl9uZXdfdHlwZXNjcmlwdABZE3MyNTZfbmV3X3R5cGVzY3JpcHQAWRJiYWxfbmV3X3R5cGVzY3JpcHQAWRJqbmVfbmV3X3R5cGVzY3JpcHQAWRNhbmRpX25ld190eXBlc2NyaXB0AFoTZGl2aV9uZXdfdHlwZXNjcmlwdABaE2V4cGlfbmV3X3R5cGVzY3JpcHQAWhNtb2RpX25ld190eXBlc2NyaXB0AFoTbXVsaV9uZXdfdHlwZXNjcmlwdABaEm9yaV9uZXdfdHlwZXNjcmlwdABaE3NsbGlfbmV3X3R5cGVzY3JpcHQAWhNzcmxpX25ld190eXBlc2NyaXB0AFoTc3ViaV9uZXdfdHlwZXNjcmlwdABaE3hvcmlfbmV3X3R5cGVzY3JpcHQAWhNqbmVpX25ld190eXBlc2NyaXB0AFoRbGJfbmV3X3R5cGVzY3JpcHQAWhFsd19uZXdfdHlwZXNjcmlwdABaEXNiX25ld190eXBlc2NyaXB0AFoRc3dfbmV3X3R5cGVzY3JpcHQAWhNtY3BpX25ld190eXBlc2NyaXB0AFoTam56Zl9uZXdfdHlwZXNjcmlwdABaE2puemJfbmV3X3R5cGVzY3JpcHQAWhFqaV9uZXdfdHlwZXNjcmlwdAA3E2Nmc2lfbmV3X3R5cGVzY3JpcHQANxNwc2hsX25ld190eXBlc2NyaXB0ADcTcHNoaF9uZXdfdHlwZXNjcmlwdAA3E3BvcGxfbmV3X3R5cGVzY3JpcHQANxNwb3BoX25ld190eXBlc2NyaXB0ADcTbW92aV9uZXdfdHlwZXNjcmlwdAAVE21jbGlfbmV3X3R5cGVzY3JpcHQAFRNqbnppX25ld190eXBlc2NyaXB0ABUTam1wZl9uZXdfdHlwZXNjcmlwdAAVEm5vdF9uZXdfdHlwZXNjcmlwdAAgE3JldGRfbmV3X3R5cGVzY3JpcHQAIBNtb3ZlX25ld190eXBlc2NyaXB0ACASbWNsX25ld190eXBlc2NyaXB0ACATYnVybl9uZXdfdHlwZXNjcmlwdAAgE2Nyb29fbmV3X3R5cGVzY3JpcHQAIBNjc2l6X25ld190eXBlc2NyaXB0ACATbWludF9uZXdfdHlwZXNjcmlwdAAgE3RpbWVfbmV3X3R5cGVzY3JpcHQAIBNic2l6X25ld190eXBlc2NyaXB0ACAGcmV0X3JhACIHYmhlaV9yYQAiBWNiX3JhACIHcnZydF9yYQAiB2ZsYWdfcmEAIgZqbXBfcmEAIghqaV9pbW0yNAAKCmNmc2lfaW1tMjQACgZjZmVfcmEAIgZjZnNfcmEAIgpwc2hsX2ltbTI0AAoKcHNoaF9pbW0yNAAKCnBvcGxfaW1tMjQACgpwb3BoX2ltbTI0AAoTbWxkdl9uZXdfdHlwZXNjcmlwdABVEm1lcV9uZXdfdHlwZXNjcmlwdABVEmNjcF9uZXdfdHlwZXNjcmlwdABVEmxvZ19uZXdfdHlwZXNjcmlwdABVE2xvZ2RfbmV3X3R5cGVzY3JpcHQAVRNzcndxX25ld190eXBlc2NyaXB0AFUTc3d3cV9uZXdfdHlwZXNjcmlwdABVEnRyb19uZXdfdHlwZXNjcmlwdABVE2VkMTlfbmV3X3R5cGVzY3JpcHQAVRJzbW9fbmV3X3R5cGVzY3JpcHQAVRJsZGNfbmV3X3R5cGVzY3JpcHQAVRNqbmVmX25ld190eXBlc2NyaXB0AFUTd2RtZF9uZXdfdHlwZXNjcmlwdABVE3dxbWRfbmV3X3R5cGVzY3JpcHQAVRN3ZGFtX25ld190eXBlc2NyaXB0AFUTd3FhbV9uZXdfdHlwZXNjcmlwdABVE3dkbW1fbmV3X3R5cGVzY3JpcHQAVRN3cW1tX25ld190eXBlc2NyaXB0AFUTZWNhbF9uZXdfdHlwZXNjcmlwdABVE2NhbGxfbmV3X3R5cGVzY3JpcHQAVRNfX3diZ19tYXRoYXJnc19mcmVlABAfX193Ymdfc2V0X21hdGhhcmdzX2luZGlyZWN0X3JocwBLHl9fd2JnX3NldF9tdWxhcmdzX2luZGlyZWN0X2xocwBLH19fd2JnX2dldF9tYXRoYXJnc19pbmRpcmVjdF9yaHMASR5fX3diZ19nZXRfbXVsYXJnc19pbmRpcmVjdF9saHMASRJyZXRfbmV3X3R5cGVzY3JpcHQAYBNiaGVpX25ld190eXBlc2NyaXB0AGARY2JfbmV3X3R5cGVzY3JpcHQAYBNydnJ0X25ld190eXBlc2NyaXB0AGATZmxhZ19uZXdfdHlwZXNjcmlwdABgEmptcF9uZXdfdHlwZXNjcmlwdABgEmNmZV9uZXdfdHlwZXNjcmlwdABgEmNmc19uZXdfdHlwZXNjcmlwdABgD19fd2JnX3dkb3BfZnJlZQAYDl9fd2JnX21vZF9mcmVlABgPX193Ymdfd3Fkdl9mcmVlABgNX193Ymdfc2JfZnJlZQAYDl9fd2JnX3Ntb19mcmVlABgPX193YmdfcHNobF9mcmVlABgOX193YmdfbG9nX2ZyZWUAGA9fX3diZ193cWFtX2ZyZWUAGA9fX3diZ193cW1sX2ZyZWUAGA5fX3diZ19ub3RfZnJlZQAYD19fd2JnX2puemlfZnJlZQAYD19fd2JnX2puZWlfZnJlZQAYD19fd2JnX3N1YmlfZnJlZQAYD19fd2JnX2ZsYWdfZnJlZQAYD19fd2JnX2NzaXpfZnJlZQAYD19fd2JnX3Nyd3FfZnJlZQAYD19fd2JnX3NsbGlfZnJlZQAYD19fd2JnX2ptcGJfZnJlZQAYD19fd2JnX3dkbWxfZnJlZQAYD19fd2JnX3MyNTZfZnJlZQAYDl9fd2JnX3hvcl9mcmVlABgOX193YmdfY2ZlX2ZyZWUAGA1fX3diZ19ndF9mcmVlABgPX193YmdfcHNoaF9mcmVlABgPX193YmdfbWNsaV9mcmVlABgNX193YmdfbHRfZnJlZQAYD19fd2JnX2puZWZfZnJlZQAYDV9fd2JnX3N3X2ZyZWUAGA9fX3diZ19zcmxpX2ZyZWUAGA9fX3diZ19idXJuX2ZyZWUAGA9fX3diZ19ic2l6X2ZyZWUAGA9fX3diZ19ydnJ0X2ZyZWUAGA9fX3diZ194b3JpX2ZyZWUAGA9fX3diZ19tdWxpX2ZyZWUAGA1fX3diZ19sYl9mcmVlABgNX193YmdfZ21fZnJlZQAYD19fd2JnX2Joc2hfZnJlZQAYDV9fd2JnX2VxX2ZyZWUAGA5fX3diZ19zbGxfZnJlZQAYDl9fd2JnX29yaV9mcmVlABgPX193YmdfZWQxOV9mcmVlABgPX193YmdfY2ZlaV9mcmVlABgPX193YmdfY2ZzaV9mcmVlABgPX193Ymdfam56Yl9mcmVlABgPX193YmdfYWxvY19mcmVlABgOX193Ymdfc3JsX2ZyZWUAGA9fX3diZ19tcm9vX2ZyZWUAGA5fX3diZ19jZnNfZnJlZQAYDl9fd2JnX2ptcF9mcmVlABgPX193YmdfYmhlaV9mcmVlABgPX193YmdfbG9nZF9mcmVlABgPX193Ymdfam5lYl9mcmVlABgPX193Ymdfd3FtbV9mcmVlABgPX193YmdfcG9waF9mcmVlABgPX193Ymdfd2RjbV9mcmVlABgPX193YmdfZXhwaV9mcmVlABgPX193YmdfYWRkaV9mcmVlABgPX193YmdfYmxkZF9mcmVlABgOX193YmdfbGRjX2ZyZWUAGA5fX3diZ19kaXZfZnJlZQAYD19fd2JnX3dkZHZfZnJlZQAYD19fd2JnX21sZHZfZnJlZQAYDl9fd2JnX21jbF9mcmVlABgOX193YmdfbXVsX2ZyZWUAGA9fX3diZ193ZGFtX2ZyZWUAGA9fX3diZ19jYWxsX2ZyZWUAGA1fX3diZ19sd19mcmVlABgPX193YmdfZWNhbF9mcmVlABgPX193YmdfbWxvZ19mcmVlABgPX193YmdfcmV0ZF9mcmVlABgPX193YmdfdGltZV9mcmVlABgOX193YmdfZ3RmX2ZyZWUAGA5fX3diZ19qbmVfZnJlZQAYDV9fd2JnX29yX2ZyZWUAGA9fX3diZ19kaXZpX2ZyZWUAGA9fX3diZ19qbnpmX2ZyZWUAGA5fX3diZ190cm9fZnJlZQAYDl9fd2JnX21jcF9mcmVlABgPX193YmdfbWludF9mcmVlABgOX193Ymdfc3ViX2ZyZWUAGA1fX3diZ19jYl9mcmVlABgPX193Ymdfd3FvcF9mcmVlABgOX193Ymdfc3J3X2ZyZWUAGA9fX3diZ19lY3IxX2ZyZWUAGA9fX3diZ19qbXBmX2ZyZWUAGA9fX3diZ19rMjU2X2ZyZWUAGA5fX3diZ19yZXRfZnJlZQAYD19fd2JnX3Njd3FfZnJlZQAYDl9fd2JnX21lcV9mcmVlABgPX193Ymdfc3d3cV9mcmVlABgOX193YmdfYmFsX2ZyZWUAGA9fX3diZ19tb3ZpX2ZyZWUAGA9fX3diZ193ZG1kX2ZyZWUAGA9fX3diZ19wb3BsX2ZyZWUAGA9fX3diZ193ZG1tX2ZyZWUAGA5fX3diZ19leHBfZnJlZQAYDV9fd2JnX2ppX2ZyZWUAGA9fX3diZ193cWNtX2ZyZWUAGA9fX3diZ19tY3BpX2ZyZWUAGA9fX3diZ19tb2RpX2ZyZWUAGA1fX3diZ190cl9mcmVlABgPX193YmdfYW5kaV9mcmVlABgOX193YmdfY2NwX2ZyZWUAGA5fX3diZ19zd3dfZnJlZQAYD19fd2JnX2Nyb29fZnJlZQAYD19fd2JnX3dxbWRfZnJlZQAYD19fd2JnX21vdmVfZnJlZQAYD19fd2JnX2VjazFfZnJlZQAYDl9fd2JnX2FuZF9mcmVlABgTd3Fkdl9uZXdfdHlwZXNjcmlwdADKARN3cW1sX25ld190eXBlc2NyaXB0AMoBE3dkbWxfbmV3X3R5cGVzY3JpcHQAygETd3FvcF9uZXdfdHlwZXNjcmlwdADKARN3ZG9wX25ld190eXBlc2NyaXB0AMoBE3dxY21fbmV3X3R5cGVzY3JpcHQAygETd2Rkdl9uZXdfdHlwZXNjcmlwdADKAQ53cWNtX2Zyb21fYXJncwA7CndxZHZfaW1tMDYANgp3cW1sX2ltbTA2ADYKd2RtbF9pbW0wNgA2Cndxb3BfaW1tMDYANgp3ZG9wX2ltbTA2ADYKd3FjbV9pbW0wNgA2CndkZHZfaW1tMDYANgp3ZGNtX2ltbTA2ADYKam5lZl9pbW0wNgA2CWxkY19pbW0wNgA2DndxbWxfZnJvbV9hcmdzADwOd3FvcF9mcm9tX2FyZ3MAOwVnbV9yYQA1BWd0X3JjABoFZ3RfcmIAEgVndF9yYQA1BWxiX3JiABIFbGJfcmEANQVsdF9yYwAaBWx0X3JiABIFbHRfcmEANQhsd19pbW0xMgAJBWx3X3JiABIFbHdfcmEANQVvcl9yYwAaBW9yX3JiABIFb3JfcmEANQhzYl9pbW0xMgAJBXNiX3JiABIFc2JfcmEANQhzd19pbW0xMgAJBXN3X3JiABIFc3dfcmEANQV0cl9yYwAaBXRyX3JiABIFdHJfcmEANQVlcV9yYwAaBWVxX3JiABIFZXFfcmEANQZhbmRfcmMAGgZhbmRfcmIAEgZhbmRfcmEANQZiYWxfcmMAGgZiYWxfcmIAEgZiYWxfcmEANQZjY3BfcmMAGgZjY3BfcmIAEgZjY3BfcmEANQZkaXZfcmMAGgZkaXZfcmIAEgZkaXZfcmEANQZleHBfcmMAGgZleHBfcmIAEgZleHBfcmEANQhsYl9pbW0xMgAJBmd0Zl9yYgASBmd0Zl9yYQA1BmpuZV9yYwAaBmpuZV9yYgASBmpuZV9yYQA1BmxkY19yYwAaBmxkY19yYgASBmxkY19yYQA1BmxvZ19yZAA2BmxvZ19yYwAaBmxvZ19yYgASBmxvZ19yYQA1Bm1jbF9yYgASBm1jbF9yYQA1Bm1jcF9yYwAaBm1jcF9yYgASBm1jcF9yYQA1Bm1lcV9yZAA2Bm1lcV9yYwAaBm1lcV9yYgASBm1lcV9yYQA1Bm1vZF9yYwAaBm1vZF9yYgASBm1vZF9yYQA1Bm11bF9yYwAaBm11bF9yYgASBm11bF9yYQA1Bm5vdF9yYgASBm5vdF9yYQA1CW9yaV9pbW0xMgAJBm9yaV9yYgASBm9yaV9yYQA1BnNsbF9yYwAaBnNsbF9yYgASBnNsbF9yYQA1BnNtb19yZAA2BnNtb19yYwAaBnNtb19yYgASBnNtb19yYQA1BnNybF9yYwAaBnNybF9yYgASBnNybF9yYQA1BnNyd19yYwAaBnNyd19yYgASBnNyd19yYQA1BnN1Yl9yYwAaBnN1Yl9yYgASBnN1Yl9yYQA1BnN3d19yYwAaBnN3d19yYgASBnN3d19yYQA1BnRyb19yZAA2BnRyb19yYwAaBnRyb19yYgASBnRyb19yYQA1Bnhvcl9yYwAaBnhvcl9yYgASBnhvcl9yYQA1CWd0Zl9pbW0xMgAJB2FkZGlfcmIAEgdhZGRpX3JhADUKYW5kaV9pbW0xMgAJB2FuZGlfcmIAEgdhbmRpX3JhADUHYmhzaF9yYgASB2Joc2hfcmEANQZjY3BfcmQANgdibGRkX3JjABoHYmxkZF9yYgASB2JsZGRfcmEANQdic2l6X3JiABIHYnNpel9yYQA1B2J1cm5fcmIAEgdidXJuX3JhADUHY2FsbF9yZAA2B2NhbGxfcmMAGgdjYWxsX3JiABIHY2FsbF9yYQA1B2Nyb29fcmIAEgdjcm9vX3JhADUHY3Npel9yYgASB2NzaXpfcmEANQpkaXZpX2ltbTEyAAkHZGl2aV9yYgASB2RpdmlfcmEANQdlY2FsX3JkADYHZWNhbF9yYwAaB2VjYWxfcmIAEgdlY2FsX3JhADUHZWNrMV9yYwAaB2VjazFfcmIAEgdlY2sxX3JhADUHZWNyMV9yYwAaB2VjcjFfcmIAEgdlY3IxX3JhADUHZWQxOV9yZAA2B2VkMTlfcmMAGgdlZDE5X3JiABIHZWQxOV9yYQA1CmV4cGlfaW1tMTIACQdleHBpX3JiABIHZXhwaV9yYQA1CmptcGJfaW1tMTgADQdqbXBiX3JhADUKam1wZl9pbW0xOAANB2ptcGZfcmEANQdqbmViX3JjABoHam5lYl9yYgASB2puZWJfcmEANQdqbmVmX3JjABoHam5lZl9yYgASB2puZWZfcmEANQpqbmVpX2ltbTEyAAkHam5laV9yYgASB2puZWlfcmEANQpqbnpiX2ltbTEyAAkHam56Yl9yYgASB2puemJfcmEANQpqbnpmX2ltbTEyAAkHam56Zl9yYgASB2puemZfcmEANQpqbnppX2ltbTE4AA0Ham56aV9yYQA1B2syNTZfcmMAGgdrMjU2X3JiABIHazI1Nl9yYQA1B2xvZ2RfcmQANgdsb2dkX3JjABoHbG9nZF9yYgASB2xvZ2RfcmEANQptY2xpX2ltbTE4AA0HbWNsaV9yYQA1Cm1jcGlfaW1tMTIACQdtY3BpX3JiABIHbWNwaV9yYQA1B21pbnRfcmIAEgdtaW50X3JhADUHbWxkdl9yZAA2B21sZHZfcmMAGgdtbGR2X3JiABIHbWxkdl9yYQA1B21sb2dfcmMAGgdtbG9nX3JiABIHbWxvZ19yYQA1Cm1vZGlfaW1tMTIACQdtb2RpX3JiABIHbW9kaV9yYQA1B21vdmVfcmIAEgdtb3ZlX3JhADUKbW92aV9pbW0xOAANB21vdmlfcmEANQdtcm9vX3JjABoHbXJvb19yYgASB21yb29fcmEANQptdWxpX2ltbTEyAAkHbXVsaV9yYgASB211bGlfcmEANQdyZXRkX3JiABIHcmV0ZF9yYQA1B3MyNTZfcmMAGgdzMjU2X3JiABIHczI1Nl9yYQA1B3Njd3FfcmMAGgdzY3dxX3JiABIHc2N3cV9yYQA1CnNsbGlfaW1tMTIACQdzbGxpX3JiABIHc2xsaV9yYQA1CnNybGlfaW1tMTIACQdzcmxpX3JiABIHc3JsaV9yYQA1B3Nyd3FfcmQANgdzcndxX3JjABoHc3J3cV9yYgASB3Nyd3FfcmEANQpzdWJpX2ltbTEyAAkHc3ViaV9yYgASB3N1YmlfcmEANQdzd3dxX3JkADYHc3d3cV9yYwAaB3N3d3FfcmIAEgdzd3dxX3JhADUHdGltZV9yYgASB3RpbWVfcmEANQd3ZGFtX3JkADYHd2RhbV9yYwAaB3dkYW1fcmIAEgd3ZGFtX3JhADUHd2RjbV9yYwAaB3dkY21fcmIAEgd3ZGNtX3JhADUHd2Rkdl9yYwAaB3dkZHZfcmIAEgd3ZGR2X3JhADUHd2RtZF9yZAA2B3dkbWRfcmMAGgd3ZG1kX3JiABIHd2RtZF9yYQA1B3dkbWxfcmMAGgd3ZG1sX3JiABIHd2RtbF9yYQA1B3dkbW1fcmQANgd3ZG1tX3JjABoHd2RtbV9yYgASB3dkbW1fcmEANQd3ZG9wX3JjABoHd2RvcF9yYgASB3dkb3BfcmEANQd3cWFtX3JkADYHd3FhbV9yYwAaB3dxYW1fcmIAEgd3cWFtX3JhADUHd3FjbV9yYwAaB3dxY21fcmIAEgd3cWNtX3JhADUHd3Fkdl9yYwAaB3dxZHZfcmIAEgd3cWR2X3JhADUHd3FtZF9yZAA2B3dxbWRfcmMAGgd3cW1kX3JiABIHd3FtZF9yYQA1B3dxbWxfcmMAGgd3cW1sX3JiABIHd3FtbF9yYQA1B3dxbW1fcmQANgd3cW1tX3JjABoHd3FtbV9y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C0HggsAAQRkQ2AEACykBAX9BEEEEEMYBIgEgADoADCABQQA2AgggAUKBgICAEDcCACABQQhqCykBAX9BEEEEEMYBIgEgADYCDCABQQA2AgggAUKBgICAEDcCACABQQhqCyIAIAIQAiECIAAQxwEgARDHASACEEdBCHRBygByENEBEGgLDwAgACABIAIgA0ESEPEBCw8AIAAgASACIANBGBDxAQsPACAAIAEgAiADQRwQ8QELDwAgACABIAIgA0EdEPEBCw8AIAAgASACIANBIRDyAQsPACAAIAEgAiADQSIQ8QELDwAgACABIAIgA0EjEPEBCw8AIAAgASACIANBKBDxAQsPACAAIAEgAiADQSoQ8QELDwAgACABIAIgA0EsEPEBCw8AIAAgASACIANBLxDxAQsPACAAIAEgAiADQTgQ8QELEAAgACABIAIgA0HTABDyAQsQACAAIAEgAiADQdQAEPIBCxAAIAAgASACIANB3gAQ8gELEAAgACABIAIgA0HfABDyAQsQACAAIAEgAiADQeAAEPIBCxAAIAAgASACIANB4QAQ8gELEAAgACABIAIgA0HiABDyAQsQACAAIAEgAiADQeMAEPIBCxAAIAAgASACIANB5AAQ8gELEAAgACABIAIgA0HlABDyAQsQACAAIAEgAiADQeYAEPEBCxAAIAAgASACIANB5wAQ8QELEAAgACABIAIgA0HoABDxAQsQACAAIAEgAiADQekAEPEBCxAAIAAgASACIANB6gAQ8QELEAAgACABIAIgA0HrABDxAQsQACAAIAEgAiADQewAEPEBCxAAIAAgASACIANB7gAQ8QELHgAgARBmIQEgABDHASABEMQBQQh0QcwAchDRARBoCxkAIAAgASACQSBBACAEG0EQQQAgAxtyECELDQAgACABIAJBARDzAQsNACAAIAEgAkECEPMBCw0AIAAgASACQQMQ8wELDQAgACABIAJBBBDzAQsNACAAIAEgAkEFEPMBCw0AIAAgASACQQYQ8wELDQAgACABIAJBBxDzAQsNACAAIAEgAkEIEPMBCw0AIAAgASACQQkQ8wELDQAgACABIAJBCxDzAQsNACAAIAEgAkENEPMBCw0AIAAgASACQQ4Q8wELDQAgACABIAJBDxDzAQsNACAAIAEgAkEQEPMBCw0AIAAgASACQREQ8wELDQAg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bmdlIGZvciAxOC1iaXQgaW1tZWRpYXRlAEgAEAAHAAAA2AAQACMAAAAiABAAEwAAALoDAAAcAAAAYCBvdXQgb2YgcmFuZ2UgZm9yIDI0LWJpdCBpbW1lZGlhdGUASAAQAAcAAAAcARAAIwAAACIAEAATAAAAvwMAABwAAABpbnZhbGlkIGVudW0gdmFsdWUgcGFzc2VkYXR0ZW1wdGVkIHRvIHRha2Ugb3duZXJzaGlwIG9mIFJ1c3QgdmFsdWUgd2hpbGUgaXQgd2FzIGJvcnJvd2VkEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACQAAAAlAAAAJgAAACcAAAAoAAAAKQAAACoAAAArAAAALAAAAC0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAANQAAADYAAAA3AAAAOAAAADkAAAA6AAAAOwAAADwAAAA9AAAAPgAAAD8AAABAAAAAQQAAAEIAAABDAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAABhAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAJAAAACRAAAAkgAAAJMAAACUAAAAlQAAAJYAAACXAAAAmAAAAKAAAAChAAAAogAAAKMAAACkAAAApQAAAKYAAACnAAAAqAAAAKkAAACqAAAAqwAAAKwAAACtAAAAsAAAALoAAAC7AAAAAQAAAAAAAABjYWxsZWQgYE9wdGlvbjo6dW53cmFwKClgIG9uIGEgYE5vbmVgIHZhbHVlAAUAAAAAAAAAAQAAAAYAAAAwMDAxMDIwMzA0MDUwNjA3MDgwOTEwMTExMjEzMTQxNTE2MTcxODE5MjAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ0NTQ2NDc0ODQ5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OS9ydXN0L2RlcHMvZGxtYWxsb2MtMC4yLjYvc3JjL2RsbWFsbG9jLnJzYXNzZXJ0aW9uIGZhaWxlZDogcHNpemUgPj0gc2l6ZSArIG1pbl9vdmVyaGVhZACABBAAKQAAAKgEAAAJAAAAYXNzZXJ0aW9uIGZhaWxlZDogcHNpemUgPD0gc2l6ZSArIG1heF9vdmVyaGVhZAAAgAQQACkAAACuBAAADQAAAGxpYnJhcnkvc3RkL3NyYy9wYW5pY2tpbmcucnMoBRAAHAAAAIsCAAAeAAAAbnVsbCBwb2ludGVyIHBhc3NlZCB0byBydXN0cmVjdXJzaXZlIHVzZSBvZiBhbiBvYmplY3QgZGV0ZWN0ZWQgd2hpY2ggd291bGQgbGVhZCB0byB1bnNhZmUgYWxpYXNpbmcgaW4gcnVzdAA7CXByb2R1Y2VycwEMcHJvY2Vzc2VkLWJ5AgZ3YWxydXMGMC4yMS4zDHdhc20tYmluZGdlbgYwLjIuOTM=', imports)}\n\nasync function initWasm () {\n  return await __wbg_init(wasm());\n}\n\n/**\n * calling it right away for pre-caching\n * the wasm async initialization at startup\n */\ninitWasm();\n\nexports.ADD = ADD;\nexports.ADDI = ADDI;\nexports.ALOC = ALOC;\nexports.AND = AND;\nexports.ANDI = ANDI;\nexports.BAL = BAL;\nexports.BHEI = BHEI;\nexports.BHSH = BHSH;\nexports.BLDD = BLDD;\nexports.BSIZ = BSIZ;\nexports.BURN = BURN;\nexports.CALL = CALL;\nexports.CB = CB;\nexports.CCP = CCP;\nexports.CFE = CFE;\nexports.CFEI = CFEI;\nexports.CFS = CFS;\nexports.CFSI = CFSI;\nexports.CROO = CROO;\nexports.CSIZ = CSIZ;\nexports.CompareArgs = CompareArgs;\nexports.CompareMode = CompareMode;\nexports.DIV = DIV;\nexports.DIVI = DIVI;\nexports.DivArgs = DivArgs;\nexports.ECAL = ECAL;\nexports.ECK1 = ECK1;\nexports.ECR1 = ECR1;\nexports.ED19 = ED19;\nexports.EQ = EQ;\nexports.EXP = EXP;\nexports.EXPI = EXPI;\nexports.FLAG = FLAG;\nexports.GM = GM;\nexports.GMArgs = GMArgs;\nexports.GT = GT;\nexports.GTF = GTF;\nexports.GTFArgs = GTFArgs;\nexports.Imm06 = Imm06;\nexports.Imm12 = Imm12;\nexports.Imm18 = Imm18;\nexports.Imm24 = Imm24;\nexports.Instruction = Instruction;\nexports.JI = JI;\nexports.JMP = JMP;\nexports.JMPB = JMPB;\nexports.JMPF = JMPF;\nexports.JNE = JNE;\nexports.JNEB = JNEB;\nexports.JNEF = JNEF;\nexports.JNEI = JNEI;\nexports.JNZB = JNZB;\nexports.JNZF = JNZF;\nexports.JNZI = JNZI;\nexports.K256 = K256;\nexports.LB = LB;\nexports.LDC = LDC;\nexports.LOG = LOG;\nexports.LOGD = LOGD;\nexports.LT = LT;\nexports.LW = LW;\nexports.MCL = MCL;\nexports.MCLI = MCLI;\nexports.MCP = MCP;\nexports.MCPI = MCPI;\nexports.MEQ = MEQ;\nexports.MINT = MINT;\nexports.MLDV = MLDV;\nexports.MLOG = MLOG;\nexports.MOD = MOD;\nexports.MODI = MODI;\nexports.MOVE = MOVE;\nexports.MOVI = MOVI;\nexports.MROO = MROO;\nexports.MUL = MUL;\nexports.MULI = MULI;\nexports.MathArgs = MathArgs;\nexports.MathOp = MathOp;\nexports.MulArgs = MulArgs;\nexports.NOOP = NOOP;\nexports.NOT = NOT;\nexports.OR = OR;\nexports.ORI = ORI;\nexports.POPH = POPH;\nexports.POPL = POPL;\nexports.PSHH = PSHH;\nexports.PSHL = PSHL;\nexports.PanicInstruction = PanicInstruction;\nexports.PanicReason = PanicReason;\nexports.RET = RET;\nexports.RETD = RETD;\nexports.RVRT = RVRT;\nexports.RegId = RegId;\nexports.S256 = S256;\nexports.SB = SB;\nexports.SCWQ = SCWQ;\nexports.SLL = SLL;\nexports.SLLI = SLLI;\nexports.SMO = SMO;\nexports.SRL = SRL;\nexports.SRLI = SRLI;\nexports.SRW = SRW;\nexports.SRWQ = SRWQ;\nexports.SUB = SUB;\nexports.SUBI = SUBI;\nexports.SW = SW;\nexports.SWW = SWW;\nexports.SWWQ = SWWQ;\nexports.TIME = TIME;\nexports.TR = TR;\nexports.TRO = TRO;\nexports.WDAM = WDAM;\nexports.WDCM = WDCM;\nexports.WDDV = WDDV;\nexports.WDMD = WDMD;\nexports.WDML = WDML;\nexports.WDMM = WDMM;\nexports.WDOP = WDOP;\nexports.WQAM = WQAM;\nexports.WQCM = WQCM;\nexports.WQDV = WQDV;\nexports.WQMD = WQMD;\nexports.WQML = WQML;\nexports.WQMM = WQMM;\nexports.WQOP = WQOP;\nexports.XOR = XOR;\nexports.XORI = XORI;\nexports.add = add;\nexports.addi = addi;\nexports.aloc = aloc;\nexports.and = and;\nexports.andi = andi;\nexports.bal = bal;\nexports.bhei = bhei;\nexports.bhsh = bhsh;\nexports.bldd = bldd;\nexports.bsiz = bsiz;\nexports.burn = burn;\nexports.call = call;\nexports.cb = cb;\nexports.ccp = ccp;\nexports.cfe = cfe;\nexports.cfei = cfei;\nexports.cfs = cfs;\nexports.cfsi = cfsi;\nexports.croo = croo;\nexports.csiz = csiz;\nexports.div = div;\nexports.divi = divi;\nexports.ecal = ecal;\nexports.eck1 = eck1;\nexports.ecr1 = ecr1;\nexports.ed19 = ed19;\nexports.eq = eq;\nexports.exp = exp;\nexports.expi = expi;\nexports.flag = flag;\nexports.gm = gm;\nexports.gm_args = gm_args;\nexports.gt = gt;\nexports.gtf = gtf;\nexports.gtf_args = gtf_args;\nexports.initSync = initSync;\nexports.initWasm = initWasm;\nexports.ji = ji;\nexports.jmp = jmp;\nexports.jmpb = jmpb;\nexports.jmpf = jmpf;\nexports.jne = jne;\nexports.jneb = jneb;\nexports.jnef = jnef;\nexports.jnei = jnei;\nexports.jnzb = jnzb;\nexports.jnzf = jnzf;\nexports.jnzi = jnzi;\nexports.k256 = k256;\nexports.lb = lb;\nexports.ldc = ldc;\nexports.log = log;\nexports.logd = logd;\nexports.lt = lt;\nexports.lw = lw;\nexports.mcl = mcl;\nexports.mcli = mcli;\nexports.mcp = mcp;\nexports.mcpi = mcpi;\nexports.meq = meq;\nexports.mint = mint;\nexports.mldv = mldv;\nexports.mlog = mlog;\nexports.mod_ = mod_;\nexports.modi = modi;\nexports.move_ = move_;\nexports.movi = movi;\nexports.mroo = mroo;\nexports.mul = mul;\nexports.muli = muli;\nexports.noop = noop;\nexports.not = not;\nexports.or = or;\nexports.ori = ori;\nexports.poph = poph;\nexports.popl = popl;\nexports.pshh = pshh;\nexports.pshl = pshl;\nexports.ret = ret;\nexports.retd = retd;\nexports.rvrt = rvrt;\nexports.s256 = s256;\nexports.sb = sb;\nexports.scwq = scwq;\nexports.sll = sll;\nexports.slli = slli;\nexports.smo = smo;\nexports.srl = srl;\nexports.srli = srli;\nexports.srw = srw;\nexports.srwq = srwq;\nexports.sub = sub;\nexports.subi = subi;\nexports.sw = sw;\nexports.sww = sww;\nexports.swwq = swwq;\nexports.time = time;\nexports.tr = tr;\nexports.tro = tro;\nexports.wdam = wdam;\nexports.wdcm = wdcm;\nexports.wdcm_args = wdcm_args;\nexports.wddv = wddv;\nexports.wddv_args = wddv_args;\nexports.wdmd = wdmd;\nexports.wdml = wdml;\nexports.wdml_args = wdml_args;\nexports.wdmm = wdmm;\nexports.wdop = wdop;\nexports.wdop_args = wdop_args;\nexports.wqam = wqam;\nexports.wqcm = wqcm;\nexports.wqcm_args = wqcm_args;\nexports.wqdv = wqdv;\nexports.wqdv_args = wqdv_args;\nexports.wqmd = wqmd;\nexports.wqml = wqml;\nexports.wqml_args = wqml_args;\nexports.wqmm = wqmm;\nexports.wqop = wqop;\nexports.wqop_args = wqop_args;\nexports.xor = xor;\nexports.xori = xori;\n","import type { Versions } from './types';\n\nexport function getBuiltinVersions(): Versions {\n  return {\n    FORC: '0.66.5',\n    FUEL_CORE: '0.40.2',\n    FUELS: '0.98.0',\n  };\n}\n","function parseVersion(version: string): { major: number; minor: number; patch: number } {\n  const [major, minor, patch] = version.split('.').map((v) => parseInt(v, 10));\n  return { major, minor, patch };\n}\n\nfunction versionDiffs(\n  version1: string,\n  version2: string\n): { major: number; minor: number; patch: number; fullVersionDiff: number } {\n  const semver1 = parseVersion(version1);\n  const semver2 = parseVersion(version2);\n  const major = semver1.major - semver2.major;\n  const minor = semver1.minor - semver2.minor;\n  const patch = semver1.patch - semver2.patch;\n  return {\n    major,\n    minor,\n    patch,\n    fullVersionDiff: major || minor || patch,\n  };\n}\n\nexport function gt(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff > 0;\n}\n\nexport function eq(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff === 0;\n}\n\nexport function majorEq(version1: string, version2: string): boolean {\n  const { major } = versionDiffs(version1, version2);\n  return major === 0;\n}\n\nexport function minorEq(version1: string, version2: string): boolean {\n  const { minor } = versionDiffs(version1, version2);\n  return minor === 0;\n}\n\nexport function patchEq(version1: string, version2: string): boolean {\n  const { patch } = versionDiffs(version1, version2);\n  return patch === 0;\n}\n","import { getBuiltinVersions } from './getBuiltinVersions';\nimport { majorEq, minorEq, patchEq } from './semver';\n\nexport function checkFuelCoreVersionCompatibility(networkVersion: string) {\n  const { FUEL_CORE: supportedVersion } = getBuiltinVersions();\n\n  if (/^\\d+\\.\\d+\\.\\d+\\D+/m.test(networkVersion)) {\n    // eslint-disable-next-line no-console\n    console.warn(`You're running against an unreleased fuel-core version: ${networkVersion}. Things may work as expected, but it's not guaranteed. Please use a released version.      \nThis unreleased fuel-core build may include features and updates not yet supported by this version of the TS-SDK.`);\n  }\n\n  return {\n    supportedVersion,\n    isMajorSupported: majorEq(networkVersion, supportedVersion),\n    isMinorSupported: minorEq(networkVersion, supportedVersion),\n    isPatchSupported: patchEq(networkVersion, supportedVersion),\n  };\n}\n","/*\n  1) Variables\n  ------------\n    `FUELS` — comes from `/packages/fuels/package.json`\n    `FUEL_CORE` — comes from `/internal/fuel-core/VERSION`\n    `FORC` — comes from `/internal/forc/VERSION`\n\n  3) Pre Build\n  ------------\n    There's a `prebuild` script in:\n     - packages/versions/package.json\n\n    Before build, it will call this file:\n      - packages/versions/scripts/replaceVersions.ts\n\n    Which will replace static versions at:\n      - packages/versions/src/lib/getBuiltinVersions.ts\n\n    If no env variables are set, it uses the current versions\n    from the original locations mentioned in the 1st step.\n\n  3)  CI\n  ------------\n    As part of the CI release (1) routine, the changes made\n    to the versions package by the `prebuild` routine will\n    be committed by the same script (2) that handles the\n    docs versioning.\n\n      - (1) <repoRoot>/.github/workflows/release.yaml\n      - (2) <repoRoot>/changeset-version-with-docs.ts\n\n  4) Build\n  ------------\n    By the time we get to the `build` step, everything is in\n    place already and ready to be built and released.\n*/\n\nimport { getBuiltinVersions } from './lib/getBuiltinVersions';\n\nexport const versions = getBuiltinVersions();\n\nexport * from './lib/types';\nexport * from './lib/checkFuelCoreVersionCompatibility';\nexport * from './lib/semver';\n","/**\n * Represents the different error codes thrown by the SDK\n */\nexport enum ErrorCode {\n  // abi\n  NO_ABIS_FOUND = 'no-abis-found',\n  ABI_TYPES_AND_VALUES_MISMATCH = 'abi-types-and-values-mismatch',\n  ABI_MAIN_METHOD_MISSING = 'abi-main-method-missing',\n  INVALID_COMPONENT = 'invalid-component',\n  CONFIGURABLE_NOT_FOUND = 'configurable-not-found',\n  TYPE_NOT_FOUND = 'type-not-found',\n  LOG_TYPE_NOT_FOUND = 'log-type-not-found',\n  TYPE_NOT_SUPPORTED = 'type-not-supported',\n  INVALID_DECODE_VALUE = 'invalid-decode-value',\n  JSON_ABI_ERROR = 'json-abi-error',\n  TYPE_ID_NOT_FOUND = 'type-id-not-found',\n  BIN_FILE_NOT_FOUND = 'bin-file-not-found',\n  CODER_NOT_FOUND = 'coder-not-found',\n  INVALID_DATA = 'invalid-data',\n  FUNCTION_NOT_FOUND = 'function-not-found',\n  UNSUPPORTED_ENCODING_VERSION = 'unsupported-encoding-version',\n  TIMEOUT_EXCEEDED = 'timeout-exceeded',\n  CONFIG_FILE_NOT_FOUND = 'config-file-not-found',\n  CONFIG_FILE_ALREADY_EXISTS = 'config-file-already-exists',\n  WORKSPACE_NOT_DETECTED = 'workspace-not-detected',\n\n  // address\n  INVALID_ADDRESS = 'invalid-address',\n  INVALID_EVM_ADDRESS = 'invalid-evm-address',\n  INVALID_B256_ADDRESS = 'invalid-b256-address',\n\n  // provider\n  CHAIN_INFO_CACHE_EMPTY = 'chain-info-cache-empty',\n  NODE_INFO_CACHE_EMPTY = 'node-info-cache-empty',\n  MISSING_PROVIDER = 'missing-provider',\n  INVALID_PROVIDER = 'invalid-provider',\n  CONNECTION_REFUSED = 'connection-refused',\n  INVALID_URL = 'invalid-url',\n\n  // wallet\n  INVALID_PUBLIC_KEY = 'invalid-public-key',\n  WALLET_MANAGER_ERROR = 'wallet-manager-error',\n  HD_WALLET_ERROR = 'hd-wallet-error',\n  MISSING_CONNECTOR = 'missing-connector',\n\n  // errors\n  PARSE_FAILED = 'parse-failed',\n  ENCODE_ERROR = 'encode-error',\n  DECODE_ERROR = 'decode-error',\n  ENV_DEPENDENCY_MISSING = 'env-dependency-missing',\n  INVALID_TTL = 'invalid-ttl',\n  INVALID_INPUT_PARAMETERS = 'invalid-input-parameters',\n  NOT_IMPLEMENTED = 'not-implemented',\n  NOT_SUPPORTED = 'not-supported',\n  CONVERTING_FAILED = 'converting-error',\n  ELEMENT_NOT_FOUND = 'element-not-found',\n  MISSING_REQUIRED_PARAMETER = 'missing-required-parameter',\n  INVALID_REQUEST = 'invalid-request',\n  INVALID_TRANSFER_AMOUNT = 'invalid-transfer-amount',\n  NOT_ENOUGH_FUNDS = 'not-enough-funds',\n\n  // crypto\n  INVALID_CREDENTIALS = 'invalid-credentials',\n\n  /** @deprecated This error code is no longer used */\n  HASHER_LOCKED = 'hasher-locked',\n\n  // transaction\n  GAS_PRICE_TOO_LOW = 'gas-price-too-low',\n  GAS_LIMIT_TOO_LOW = 'gas-limit-too-low',\n  MAX_FEE_TOO_LOW = 'max-fee-too-low',\n  TRANSACTION_NOT_FOUND = 'transaction-not-found',\n  TRANSACTION_FAILED = 'transaction-failed',\n  INVALID_CONFIGURABLE_CONSTANTS = 'invalid-configurable-constants',\n  INVALID_TRANSACTION_INPUT = 'invalid-transaction-input',\n  INVALID_TRANSACTION_OUTPUT = 'invalid-transaction-output',\n  INVALID_TRANSACTION_STATUS = 'invalid-transaction-status',\n  UNSUPPORTED_TRANSACTION_TYPE = 'unsupported-transaction-type',\n  TRANSACTION_ERROR = 'transaction-error',\n  INVALID_POLICY_TYPE = 'invalid-policy-type',\n  DUPLICATED_POLICY = 'duplicated-policy',\n  TRANSACTION_SQUEEZED_OUT = 'transaction-squeezed-out',\n  CONTRACT_SIZE_EXCEEDS_LIMIT = 'contract-size-exceeds-limit',\n  INVALID_CHUNK_SIZE_MULTIPLIER = 'invalid-chunk-size-multiplier',\n  MAX_INPUTS_EXCEEDED = 'max-inputs-exceeded',\n  FUNDS_TOO_LOW = 'funds-too-low',\n  MAX_OUTPUTS_EXCEEDED = 'max-outputs-exceeded',\n  MAX_COINS_REACHED = 'max-coins-reached',\n  ASSET_BURN_DETECTED = 'asset-burn-detected',\n\n  // receipt\n  INVALID_RECEIPT_TYPE = 'invalid-receipt-type',\n\n  // mnemonic\n  INVALID_WORD_LIST = 'invalid-word-list',\n  INVALID_MNEMONIC = 'invalid-mnemonic',\n  INVALID_ENTROPY = 'invalid-entropy',\n  INVALID_SEED = 'invalid-seed',\n  INVALID_CHECKSUM = 'invalid-checksum',\n\n  // wallet / account\n  INVALID_PASSWORD = 'invalid-password',\n  ACCOUNT_REQUIRED = 'account-required',\n  UNLOCKED_WALLET_REQUIRED = 'unlocked-wallet-required',\n\n  // chain\n  ERROR_BUILDING_BLOCK_EXPLORER_URL = 'error-building-block-explorer-url',\n\n  // docs\n  VITEPRESS_PLUGIN_ERROR = 'vitepress-plugin-error',\n\n  // script\n  SCRIPT_REVERTED = 'script-reverted',\n  SCRIPT_RETURN_INVALID_TYPE = 'script-return-invalid-type',\n\n  // graphql\n  STREAM_PARSING_ERROR = 'stream-parsing-error',\n\n  // launchNode\n  NODE_LAUNCH_FAILED = 'node-launch-failed',\n\n  // Unknown\n  UNKNOWN = 'unknown',\n}\n","import { versions } from '@fuel-ts/versions';\n\nimport { ErrorCode } from './error-codes';\n\nexport class FuelError extends Error {\n  static readonly CODES = ErrorCode;\n  readonly VERSIONS = versions;\n  readonly metadata: Record<string, unknown>;\n  readonly rawError: unknown;\n\n  static parse(e: unknown) {\n    const error = e as FuelError;\n\n    if (error.code === undefined) {\n      throw new FuelError(\n        ErrorCode.PARSE_FAILED,\n        \"Failed to parse the error object. The required 'code' property is missing.\"\n      );\n    }\n\n    const enumValues = Object.values(ErrorCode);\n    const codeIsKnown = enumValues.includes(error.code);\n\n    if (!codeIsKnown) {\n      throw new FuelError(\n        ErrorCode.PARSE_FAILED,\n        `Unknown error code: ${error.code}. Accepted codes: ${enumValues.join(', ')}.`\n      );\n    }\n\n    return new FuelError(error.code, error.message);\n  }\n\n  code: ErrorCode;\n\n  constructor(\n    code: ErrorCode,\n    message: string,\n    metadata: Record<string, unknown> = {},\n    rawError: unknown = null\n  ) {\n    super(message);\n    this.code = code;\n    this.name = 'FuelError';\n    this.metadata = metadata;\n    this.rawError = rawError;\n  }\n\n  toObject() {\n    const { code, name, message, metadata, VERSIONS, rawError } = this;\n    return { code, name, message, metadata, VERSIONS, rawError };\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport BnJs from 'bn.js';\n\nimport { DEFAULT_DECIMAL_UNITS, DEFAULT_MIN_PRECISION, DEFAULT_PRECISION } from './configs';\nimport type { FormatConfig } from './types';\n\ntype CompareResult = -1 | 0 | 1;\nexport type BNInput = number | string | number[] | Uint8Array | Buffer | BnJs;\n\ninterface BNHelper {\n  caller(v: BNInput, methodName: string): BN | boolean | CompareResult;\n  toHex: (bytesPadding?: number) => string;\n  toBytes: (bytesPadding?: number) => Uint8Array;\n  toJSON: () => string;\n}\ninterface BNInputOverrides {\n  add: (v: BNInput) => BN;\n  pow: (v: BNInput) => BN;\n  sub: (v: BNInput) => BN;\n  div: (v: BNInput) => BN;\n  mul: (v: BNInput) => BN;\n  mod: (v: BNInput) => BN;\n  divRound: (v: BNInput) => BN;\n  lt: (v: BNInput) => boolean;\n  lte: (v: BNInput) => boolean;\n  gt: (v: BNInput) => boolean;\n  gte: (v: BNInput) => boolean;\n  eq: (v: BNInput) => boolean;\n  cmp: (v: BNInput) => CompareResult;\n}\ninterface BNOverrides {\n  sqr: () => BN;\n  neg: () => BN;\n  abs: () => BN;\n  toTwos: (width: number) => BN;\n  fromTwos: (width: number) => BN;\n}\ninterface BNHiddenTypes {\n  mulTo: (num: BN, out: BN) => BN;\n  divmod: (num: BNInput, mode?: string, positive?: boolean) => { mod: BN; div: BN };\n}\ntype BNInputOverridesKeys = keyof BNInputOverrides;\n\nexport class BN extends BnJs implements BNInputOverrides, BNHiddenTypes, BNHelper, BNOverrides {\n  MAX_U64 = '0xFFFFFFFFFFFFFFFF';\n\n  constructor(value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) {\n    let bnValue = value;\n    let bnBase = base;\n\n    if (BN.isBN(value)) {\n      bnValue = value.toArray();\n    }\n    // trim '0x' from hex strings as BN doesn't support it - https://github.com/ChainSafe/web3.js/issues/3847\n    else if (typeof value === 'string' && value.slice(0, 2) === '0x') {\n      bnValue = value.substring(2);\n      bnBase = base || 'hex';\n    }\n\n    super(bnValue == null ? 0 : bnValue, bnBase, endian);\n  }\n\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  override toString(base?: number | 'hex', length?: number) {\n    const output = super.toString(base, length);\n\n    if (base === 16 || base === 'hex') {\n      return `0x${output}`;\n    }\n\n    return output;\n  }\n\n  toHex(bytesPadding?: number): string {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, 'Cannot convert negative value to hex.');\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new FuelError(\n        ErrorCode.CONVERTING_FAILED,\n        `Provided value ${this} is too large. It should fit within ${bytesPadding} bytes.`\n      );\n    }\n\n    return this.toString(16, bytesLength);\n  }\n\n  toBytes(bytesPadding?: number): Uint8Array {\n    if (this.isNeg()) {\n      throw new FuelError(ErrorCode.CONVERTING_FAILED, 'Cannot convert negative value to bytes.');\n    }\n\n    return Uint8Array.from(this.toArray(undefined, bytesPadding));\n  }\n\n  override toJSON(): string {\n    return this.toString(16);\n  }\n\n  override valueOf(): string {\n    return this.toString();\n  }\n\n  format(options?: FormatConfig): string {\n    const {\n      units = DEFAULT_DECIMAL_UNITS,\n      precision: initialPrecision = DEFAULT_PRECISION,\n      minPrecision: initialMinPrecision = DEFAULT_MIN_PRECISION,\n    } = options || {};\n\n    // If units is 0, return the whole number formatted with commas\n    if (units === 0) {\n      return this.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    }\n\n    // Adjust precision and minPrecision\n    // TODO: This really should throw an error because you can't have a precision less than the minPrecision but this would be a breaking change\n    const minPrecision =\n      initialMinPrecision > initialPrecision ? initialPrecision : initialMinPrecision;\n    const precision =\n      initialPrecision > initialMinPrecision ? initialPrecision : initialMinPrecision;\n\n    const formattedUnits = this.formatUnits(units);\n    const [integerPart, fractionalPart = ''] = formattedUnits.split('.');\n\n    const formattedInteger = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n\n    // If precision is 0, return only the integer part\n    if (precision === 0) {\n      return formattedInteger;\n    }\n\n    // Remove trailing zeros and apply precision\n    let formattedFractional = fractionalPart.replace(/0+$/, '');\n\n    // Always return the first non-zero number if it exceeds the precision and the integer part is zero\n    if (formattedFractional.length > precision) {\n      if (integerPart === '0') {\n        const firstNonZeroIndex = formattedFractional.search(/[1-9]/);\n        if (firstNonZeroIndex >= 0 && firstNonZeroIndex < precision) {\n          formattedFractional = formattedFractional.slice(0, precision);\n        } else {\n          formattedFractional = formattedFractional.slice(0, firstNonZeroIndex + 1);\n        }\n      } else {\n        formattedFractional = formattedFractional.slice(0, precision);\n      }\n    } else {\n      formattedFractional = formattedFractional.slice(0, precision);\n    }\n\n    // Ensure we meet the minimum precision\n    if (formattedFractional.length < minPrecision) {\n      formattedFractional = formattedFractional.padEnd(minPrecision, '0');\n    }\n\n    // If after removing trailing zeros, the fractional part is empty and minPrecision is 0, return only the integer part\n    if (formattedFractional === '' && minPrecision === 0) {\n      return formattedInteger;\n    }\n\n    // Only add the decimal point and fractional part if there's a fractional part\n    return formattedFractional ? `${formattedInteger}.${formattedFractional}` : formattedInteger;\n  }\n\n  formatUnits(units: number = DEFAULT_DECIMAL_UNITS): string {\n    const valueString = this.toString();\n    const valueLength = valueString.length;\n\n    if (valueLength <= units) {\n      const paddedZeros = '0'.repeat(units - valueLength);\n      return `0.${paddedZeros}${valueString}`;\n    }\n\n    const integerPart = valueString.slice(0, valueLength - units);\n    const fractionalPart = valueString.slice(valueLength - units);\n\n    return `${integerPart}.${fractionalPart}`;\n  }\n  // END ANCHOR: HELPERS\n\n  // ANCHOR: OVERRIDES to accept better inputs\n  override add(v: BNInput): BN {\n    return this.caller(v, 'add') as BN;\n  }\n\n  override pow(v: BNInput): BN {\n    return this.caller(v, 'pow') as BN;\n  }\n\n  override sub(v: BNInput): BN {\n    return this.caller(v, 'sub') as BN;\n  }\n\n  override div(v: BNInput): BN {\n    return this.caller(v, 'div') as BN;\n  }\n\n  override mul(v: BNInput): BN {\n    return this.caller(v, 'mul') as BN;\n  }\n\n  override mod(v: BNInput): BN {\n    return this.caller(v, 'mod') as BN;\n  }\n\n  override divRound(v: BNInput): BN {\n    return this.caller(v, 'divRound') as BN;\n  }\n\n  override lt(v: BNInput): boolean {\n    return this.caller(v, 'lt') as boolean;\n  }\n\n  override lte(v: BNInput): boolean {\n    return this.caller(v, 'lte') as boolean;\n  }\n\n  override gt(v: BNInput): boolean {\n    return this.caller(v, 'gt') as boolean;\n  }\n\n  override gte(v: BNInput): boolean {\n    return this.caller(v, 'gte') as boolean;\n  }\n\n  override eq(v: BNInput): boolean {\n    return this.caller(v, 'eq') as boolean;\n  }\n\n  override cmp(v: BNInput): CompareResult {\n    return this.caller(v, 'cmp') as CompareResult;\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n\n  // ANCHOR: OVERRIDES to output our BN type\n  override sqr(): BN {\n    return new BN(super.sqr().toArray());\n  }\n\n  override neg(): BN {\n    return new BN(super.neg().toArray());\n  }\n\n  override abs(): BN {\n    return new BN(super.abs().toArray());\n  }\n\n  override toTwos(width: number): BN {\n    return new BN(super.toTwos(width).toArray());\n  }\n\n  override fromTwos(width: number): BN {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v: BNInput, methodName: BNInputOverridesKeys): BN | boolean | CompareResult {\n    const output = super[methodName](new BN(v));\n\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n\n    if (typeof output === 'boolean') {\n      return output as boolean;\n    }\n\n    return output as CompareResult;\n  }\n\n  override clone() {\n    return new BN(this.toArray());\n  }\n\n  mulTo(num: BN, out: BN) {\n    const output: BnJs = (new BnJs(this.toArray()) as BN).mulTo(num, out);\n\n    return new BN(output.toArray());\n  }\n\n  override egcd(p: BnJs) {\n    const { a, b, gcd } = new BnJs(this.toArray()).egcd(p);\n\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray()),\n    };\n  }\n\n  override divmod(num: BNInput, mode?: string, positive?: boolean): { mod: BN; div: BN } {\n    const { div, mod } = (new BnJs(this.toArray()) as BN).divmod(new BN(num), mode, positive);\n\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray()),\n    };\n  }\n\n  maxU64(): BN {\n    return this.gte(this.MAX_U64) ? new BN(this.MAX_U64) : this;\n  }\n\n  max(num: BNInput): BN {\n    return this.gte(num) ? new BN(num) : this;\n  }\n\n  normalizeZeroToOne(): BN {\n    return this.isZero() ? new BN(1) : this;\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n}\n\n// functional shortcut to create BN\nexport const bn = (value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) =>\n  new BN(value, base, endian);\n\nbn.parseUnits = (value: string, units: number = DEFAULT_DECIMAL_UNITS): BN => {\n  const valueToParse = value === '.' ? '0.' : value;\n  const [valueUnits = '0', valueDecimals = '0'] = valueToParse.split('.');\n  const length = valueDecimals.length;\n\n  if (units === 0) {\n    const valueWithoutDecimals = valueToParse.replace(',', '').split('.')[0];\n    return bn(valueWithoutDecimals);\n  }\n\n  if (length > units) {\n    throw new FuelError(\n      ErrorCode.CONVERTING_FAILED,\n      `Decimal can't have more than ${units} digits.`\n    );\n  }\n\n  const decimals = Array.from({ length: units }).fill('0');\n  decimals.splice(0, length, valueDecimals);\n  const amount = `${valueUnits.replaceAll(',', '')}${decimals.join('')}`;\n  return bn(amount);\n};\n","export const DEFAULT_PRECISION = 9;\nexport const DEFAULT_MIN_PRECISION = 3;\nexport const DEFAULT_DECIMAL_UNITS = 9;\n\n// Decimal units on the Fuel Network\nexport const DECIMAL_FUEL = 9;\n\n// Decimal units on the Ethereum network\nexport const DECIMAL_WEI = 18;\nexport const DECIMAL_KWEI = 15;\nexport const DECIMAL_MWEI = 12;\nexport const DECIMAL_GWEI = 9;\n","import { DEFAULT_PRECISION, DEFAULT_MIN_PRECISION } from './configs';\nimport type { ToFixedConfig } from './types';\n\nexport function toFixed(value?: string | number, options?: ToFixedConfig) {\n  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};\n\n  const [valueUnits = '0', valueDecimals = '0'] = String(value || '0.0').split('.');\n  const groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\n  const units = valueUnits.replace(groupRegex, '$1,');\n  let decimals = valueDecimals.slice(0, precision);\n\n  // strip traling zeros limited by minPrecision\n  if (minPrecision < precision) {\n    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);\n    const lastNonZeroIndex = trimmedDecimal?.[0].length || 0;\n    const keepChars = Math.max(minPrecision, lastNonZeroIndex);\n    decimals = decimals.slice(0, keepChars);\n  }\n\n  const decimalPortion = decimals ? `.${decimals}` : '';\n  return `${units}${decimalPortion}`;\n}\n","import type { BNInput } from './bn';\nimport { bn } from './bn';\nimport type { FormatConfig } from './types';\n\n/**\n * Functional shortcuts\n */\n\n// Shortcut to bn(value).toNumber\nexport function toNumber(value: BNInput): number {\n  return bn(value).toNumber();\n}\n\n// Shortcut to bn(value).toHex\nexport function toHex(value: BNInput, bytesPadding?: number): string {\n  return bn(value).toHex(bytesPadding);\n}\n\n// Shortcut to bn(value).toBytes\nexport function toBytes(value: BNInput, bytesPadding?: number): Uint8Array {\n  return bn(value).toBytes(bytesPadding);\n}\n\n// Shortcut to bn.(value).formatUnits\nexport function formatUnits(value: BNInput, units?: number): string {\n  return bn(value).formatUnits(units);\n}\n\n// Shortcut to bn.(value).format\nexport function format(value: BNInput, options?: FormatConfig): string {\n  return bn(value).format(options);\n}\n","import type { BN } from './bn';\nimport { bn } from './bn';\nimport type { BigNumberish } from './types';\n\nexport function max(...numbers: Array<BigNumberish>): BN {\n  return numbers.reduce<BN>((prev, cur) => (bn(cur).gt(prev) ? bn(cur) : prev), bn(0));\n}\n\nexport function multiply(...numbers: Array<BigNumberish>): BN {\n  return bn(Math.ceil(numbers.reduce<BN>((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\n","export const capitalizeString = (str: string) => {\n  if (!str.length) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n};\n","/**\n * Function to take a byte array and split into chunks of a given size\n *\n * @param bytes - The byte array to chunk\n * @param chunkSize - The size of each chunk\n * @returns An array of byte arrays of a specified size\n */\nexport const chunkAndPadBytes = (bytes: Uint8Array, chunkSize: number): Uint8Array[] => {\n  const chunks: Uint8Array[] = [];\n\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + ((8 - (remainingBytes % 8)) % 8);\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n\n  return chunks;\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nexport type BytesLike = Uint8Array | string;\n\n/**\n * Get a typed Uint8Array from a BytesLike object.\n *\n * @param value - the BytesLike data.\n * @param name - a display name for the error result.\n * @param copy - create a copy of the original data (if applicable).\n * @returns - a typed Uint8Array.\n */\nexport const arrayify = (value: BytesLike, name?: string, copy: boolean = true): Uint8Array => {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n\n  if (typeof value === 'string' && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n\n  const nameMessage = name ? ` ${name} -` : '';\n  const message = `invalid data:${nameMessage} ${value}\\nIf you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;\n  throw new FuelError(ErrorCode.INVALID_DATA, message);\n};\n","import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\n/**\n * Concatenates multiple Uint8Arrays into a single Uint8Array.\n *\n * @param arrays - The arrays to concatenate.\n * @returns - The concatenated array.\n */\nexport const concatBytes = (\n  arrays: ReadonlyArray<Uint8Array> | ReadonlyArray<number[]>\n): Uint8Array => {\n  const byteArrays = arrays.map((array) => {\n    if (array instanceof Uint8Array) {\n      return array;\n    }\n    return Uint8Array.from(array);\n  });\n\n  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);\n  const concatenated = new Uint8Array(totalSize);\n\n  byteArrays.reduce((offset, object) => {\n    concatenated.set(object, offset);\n    return offset + object.length;\n  }, 0);\n\n  return concatenated;\n};\n\n/**\n * Concatenates multiple BytesLike into a single Uint8Array.\n *\n * @param arrays - The arrays to concatenate.\n * @returns - The concatenated array.\n */\nexport const concat = (arrays: ReadonlyArray<BytesLike>): Uint8Array => {\n  const bytes = arrays.map((v) => arrayify(v));\n\n  return concatBytes(bytes);\n};\n","import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nconst HexCharacters: string = '0123456789abcdef';\n\n/**\n *  Returns a hex representation of the inputted bytes.\n */\nexport function hexlify(data: BytesLike): string {\n  const bytes = arrayify(data);\n\n  let result = '0x';\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n  }\n  return result;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\n/**\n * Converts `some.string-value` into `SomeStringValue`.\n *\n * Examples:\n *  my-simple.test —— MySimpleTest\n *  myFile.ts —— MyFileTs\n *  my-abi.json —— MyAbiJson\n */\nexport const normalizeString = (str: string): string => {\n  const transformations: ((s: string) => string)[] = [\n    (s) => s.replace(/\\s+/g, '-'), // spaces to -\n    (s) => s.replace(/\\./g, '-'), // dots to -\n    (s) => s.replace(/_/g, '-'), // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()), // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, ''), // delete any '-' left\n    (s) => s.replace(/^\\d+/, ''), // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1), // capitalize first letter\n  ];\n\n  const output = transformations.reduce((s, t) => t(s), str);\n\n  if (output === '') {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);\n  }\n\n  return output;\n};\n","/**\n * Tai64 timestamp.\n */\ntype Tai64Timestamp = string;\n\n/**\n * This constant is used to calculate the offset between the Unix epoch and the TAI64 epoch.\n * It allows for a **rough** conversion between the two time formats.\n *\n * // Value expires on:  28 June 2024\n * {@link https://data.iana.org/time-zones/data/leap-seconds.list}\n * {@link https://github.com/hl2/tai64/blob/master/src/leapSeconds.ts}\n */\nconst TAI64_LEAP_SECONDS: number = 37;\n\n/**\n * Tai64 (Temps Atomique International) is a time format\n *\n * The offset between the Unix epoch and the TAI64 epoch.\n * The TAI64 epoch is 2^62 nanoseconds after the Unix epoch (+ the offset of \"leap seconds\" relevant to the date).\n *\n * {@link https://cr.yp.to/libtai/tai64.html}\n * {@link https://cr.yp.to/proto/tai64.txt}\n */\nconst TAI64_UNIX_OFFSET: bigint = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);\n\n/**\n * Converts milliseconds to seconds and vice versa.\n *\n * @param ms - milliseconds to convert\n * @returns seconds\n */\nconst msToSeconds = (ms: number): number => Math.floor(ms / 1000);\n\n/**\n * Converts seconds to milliseconds and vice versa.\n *\n * @param seconds - seconds to convert\n * @returns milliseconds\n */\nconst secondsToMs = (seconds: number): number => seconds * 1000;\n\n/**\n * Converts Tai64 (seconds) time units to UNIX (seconds) time units.\n *\n * @param tai64 - Tai64 timestamp\n * @returns Unix seconds timestamp\n */\nconst tai64ToUnixSeconds = (tai64: Tai64Timestamp): number =>\n  Number(BigInt(tai64) - TAI64_UNIX_OFFSET);\n\n/**\n * Converts Unix (seconds) to Tai64 (seconds).\n *\n * @param unixSeconds - unix seconds timestamp\n * @returns Tai64 timestamp\n */\nconst unixSecondsToTai64 = (unixSeconds: number): string =>\n  String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET);\n\n/**\n * Helper to convert Tai64 (seconds) time units to UNIX (milliseconds) time units and vice.\n *\n * @param tai64 - Tai64 timestamp\n * @returns Unix milliseconds timestamp\n */\nconst tai64ToUnixMilliseconds = (tai64: Tai64Timestamp): number =>\n  secondsToMs(tai64ToUnixSeconds(tai64));\n\n/**\n * This class is used to represent a date and time in the Tai64 format.\n *\n * ```typescript\n * import { DateTime } from 'fuels';\n *\n * // Constants\n * const tai64 = '4611686020108779340';\n * const unixMilliseconds = 1681391398000;\n * const seconds = 1681391398;\n *\n * // Instantiation\n * let date: DateTime = DateTime.now();\n * date = DateTime.fromTai64(tai64);\n * date = DateTime.fromUnixMilliseconds(unixMilliseconds);\n * date = DateTime.fromUnixSeconds(seconds);\n *\n * // Utility functions\n * tai64.toTai64() // '4611686020108779340'\n * milliseconds.toUnixMilliseconds() // 1681391398000\n * seconds.toUnixSeconds() // 1681391398\n *\n * // All date methods are available\n * const now: Date = DateTime.now();\n * now.toISOString(); // '2023-04-13T13:09:58.000Z'\n * now.getTime(); // 1681391398000\n * ```\n */\nexport class DateTime extends Date implements Date {\n  static TAI64_NULL: Tai64Timestamp = '';\n\n  /**\n   * Generates a new DateTime instance from a Tai64 timestamp.\n   *\n   * @param tai64 - Tai64 timestamp\n   * @returns a new DateTime instance\n   */\n  static fromTai64(tai64: Tai64Timestamp): DateTime {\n    return new DateTime(tai64ToUnixMilliseconds(tai64));\n  }\n\n  /**\n   * @param unixMilliseconds - unix milliseconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixMilliseconds(unixMilliseconds: number): DateTime {\n    return new DateTime(unixMilliseconds);\n  }\n\n  /**\n   * @param unixSeconds - unix seconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixSeconds(unixSeconds: number): DateTime {\n    return new DateTime(secondsToMs(unixSeconds));\n  }\n\n  /**\n   * Hide the constructor to prevent direct instantiation.\n   */\n  private constructor(date: Date | number | string) {\n    super(date);\n  }\n\n  /**\n   * Returns the Tai64 timestamp.\n   *\n   * @returns the Tai64 timestamp\n   */\n  toTai64(): Tai64Timestamp {\n    return unixSecondsToTai64(this.toUnixSeconds());\n  }\n\n  /**\n   * @returns the unix milliseconds timestamp\n   */\n  toUnixMilliseconds(): number {\n    return this.getTime();\n  }\n\n  /**\n   * @returns the unix seconds timestamp\n   */\n  toUnixSeconds(): number {\n    return msToSeconds(this.getTime());\n  }\n}\n","export function sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n","{\n  \"chain_name\": \"local_testnet\",\n  \"consensus_parameters\": {\n    \"V2\": {\n      \"tx_params\": {\n        \"V1\": {\n          \"max_inputs\": 255,\n          \"max_outputs\": 255,\n          \"max_witnesses\": 255,\n          \"max_gas_per_tx\": 30000000,\n          \"max_size\": 112640,\n          \"max_bytecode_subsections\": 256\n        }\n      },\n      \"predicate_params\": {\n        \"V1\": {\n          \"max_predicate_length\": 24576,\n          \"max_predicate_data_length\": 24576,\n          \"max_message_data_length\": 102400,\n          \"max_gas_per_predicate\": 1000000\n        }\n      },\n      \"script_params\": {\n        \"V1\": {\n          \"max_script_length\": 102400,\n          \"max_script_data_length\": 102400\n        }\n      },\n      \"contract_params\": {\n        \"V1\": {\n          \"contract_max_size\": 112640,\n          \"max_storage_slots\": 1760\n        }\n      },\n      \"fee_params\": {\n        \"V1\": {\n          \"gas_price_factor\": 1150000,\n          \"gas_per_byte\": 63\n        }\n      },\n      \"chain_id\": 0,\n      \"gas_costs\": {\n        \"V4\": {\n          \"add\": 2,\n          \"addi\": 2,\n          \"and\": 2,\n          \"andi\": 2,\n          \"bal\": 274,\n          \"bhei\": 2,\n          \"bhsh\": 2,\n          \"burn\": 7566,\n          \"cb\": 2,\n          \"cfsi\": 2,\n          \"div\": 2,\n          \"divi\": 2,\n          \"eck1\": 1489,\n          \"ecr1\": 20513,\n          \"eq\": 2,\n          \"exp\": 2,\n          \"expi\": 2,\n          \"flag\": 2,\n          \"gm\": 2,\n          \"gt\": 2,\n          \"gtf\": 3,\n          \"ji\": 2,\n          \"jmp\": 2,\n          \"jne\": 2,\n          \"jnei\": 2,\n          \"jnzi\": 2,\n          \"jmpf\": 2,\n          \"jmpb\": 2,\n          \"jnzf\": 2,\n          \"jnzb\": 2,\n          \"jnef\": 2,\n          \"jneb\": 2,\n          \"lb\": 2,\n          \"log\": 80,\n          \"lt\": 2,\n          \"lw\": 2,\n          \"mint\": 6566,\n          \"mlog\": 2,\n          \"mod\": 2,\n          \"modi\": 2,\n          \"move\": 2,\n          \"movi\": 1,\n          \"mroo\": 3,\n          \"mul\": 2,\n          \"muli\": 2,\n          \"mldv\": 3,\n          \"noop\": 1,\n          \"not\": 2,\n          \"or\": 1,\n          \"ori\": 2,\n          \"poph\": 2,\n          \"popl\": 2,\n          \"pshh\": 5,\n          \"pshl\": 5,\n          \"ret_contract\": 43,\n          \"rvrt_contract\": 39,\n          \"sb\": 2,\n          \"sll\": 2,\n          \"slli\": 2,\n          \"srl\": 2,\n          \"srli\": 2,\n          \"srw\": 237,\n          \"sub\": 2,\n          \"subi\": 2,\n          \"sw\": 2,\n          \"sww\": 5708,\n          \"time\": 106,\n          \"tr\": 9253,\n          \"tro\": 7199,\n          \"wdcm\": 2,\n          \"wqcm\": 2,\n          \"wdop\": 2,\n          \"wqop\": 3,\n          \"wdml\": 3,\n          \"wqml\": 3,\n          \"wddv\": 3,\n          \"wqdv\": 4,\n          \"wdmd\": 6,\n          \"wqmd\": 9,\n          \"wdam\": 6,\n          \"wqam\": 6,\n          \"wdmm\": 6,\n          \"wqmm\": 6,\n          \"xor\": 2,\n          \"xori\": 2,\n          \"aloc\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 35\n            }\n          },\n          \"bsiz\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 564\n            }\n          },\n          \"bldd\": {\n            \"LightOperation\": {\n              \"base\": 33,\n              \"units_per_gas\": 130\n            }\n          },\n          \"cfe\": {\n            \"LightOperation\": {\n              \"base\": 10,\n              \"units_per_gas\": 62\n            }\n          },\n          \"cfei\": {\n            \"LightOperation\": {\n              \"base\": 10,\n              \"units_per_gas\": 66\n            }\n          },\n          \"call\": {\n            \"LightOperation\": {\n              \"base\": 6934,\n              \"units_per_gas\": 14\n            }\n          },\n          \"ccp\": {\n            \"LightOperation\": {\n              \"base\": 21,\n              \"units_per_gas\": 155\n            }\n          },\n          \"croo\": {\n            \"LightOperation\": {\n              \"base\": 69,\n              \"units_per_gas\": 4\n            }\n          },\n          \"csiz\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 580\n            }\n          },\n          \"ed19\": {\n            \"LightOperation\": {\n              \"base\": 3232,\n              \"units_per_gas\": 7\n            }\n          },\n          \"k256\": {\n            \"LightOperation\": {\n              \"base\": 21,\n              \"units_per_gas\": 6\n            }\n          },\n          \"ldc\": {\n            \"LightOperation\": {\n              \"base\": 84,\n              \"units_per_gas\": 113\n            }\n          },\n          \"logd\": {\n            \"LightOperation\": {\n              \"base\": 278,\n              \"units_per_gas\": 5\n            }\n          },\n          \"mcl\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1282\n            }\n          },\n          \"mcli\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1250\n            }\n          },\n          \"mcp\": {\n            \"LightOperation\": {\n              \"base\": 3,\n              \"units_per_gas\": 385\n            }\n          },\n          \"mcpi\": {\n            \"LightOperation\": {\n              \"base\": 7,\n              \"units_per_gas\": 585\n            }\n          },\n          \"meq\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1234\n            }\n          },\n          \"retd_contract\": {\n            \"LightOperation\": {\n              \"base\": 227,\n              \"units_per_gas\": 5\n            }\n          },\n          \"s256\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 5\n            }\n          },\n          \"scwq\": {\n            \"HeavyOperation\": {\n              \"base\": 5666,\n              \"gas_per_unit\": 6628\n            }\n          },\n          \"smo\": {\n            \"LightOperation\": {\n              \"base\": 14635,\n              \"units_per_gas\": 3\n            }\n          },\n          \"srwq\": {\n            \"HeavyOperation\": {\n              \"base\": 245,\n              \"gas_per_unit\": 243\n            }\n          },\n          \"swwq\": {\n            \"HeavyOperation\": {\n              \"base\": 5661,\n              \"gas_per_unit\": 5776\n            }\n          },\n          \"contract_root\": {\n            \"LightOperation\": {\n              \"base\": 24,\n              \"units_per_gas\": 3\n            }\n          },\n          \"state_root\": {\n            \"HeavyOperation\": {\n              \"base\": 189,\n              \"gas_per_unit\": 96\n            }\n          },\n          \"new_storage_per_byte\": 63,\n          \"vm_initialization\": {\n            \"LightOperation\": {\n              \"base\": 3127,\n              \"units_per_gas\": 61\n            }\n          }\n        }\n      },\n      \"base_asset_id\": \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\",\n      \"block_gas_limit\": 30000000,\n      \"block_transaction_size_limit\": 260096,\n      \"privileged_address\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  \"consensus\": {\n    \"PoA\": {\n      \"signing_key\": \"0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d\"\n    }\n  }\n}\n","{\n  \"chain_config\": \"chainConfig.json\",\n  \"table_encoding\": {\n    \"Json\": {\n      \"filepath\": \"stateConfig.json\"\n    }\n  }\n}\n","{\n  \"coins\": [],\n  \"messages\": [],\n  \"contracts\": [],\n  \"blobs\": [],\n  \"block_height\": 0,\n  \"da_block_height\": 0\n}\n","import chainConfigJson from './defaultSnapshots/chainConfig.json';\nimport metadataJson from './defaultSnapshots/metadata.json';\nimport stateConfigJson from './defaultSnapshots/stateConfig.json';\nimport type { SnapshotConfigs } from './types';\n\nexport const defaultSnapshotConfigs: SnapshotConfigs = {\n  chainConfig: chainConfigJson,\n  metadata: metadataJson,\n  stateConfig: stateConfigJson,\n};\n\nexport const defaultConsensusKey =\n  '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298';\n","export function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nconst BN_0 = bn(0);\nconst BN_58 = bn(58);\nconst Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nlet Lookup: null | Record<string, BN> = null;\n\nfunction getAlpha(letter: string): BN {\n  if (Lookup == null) {\n    Lookup = {};\n    for (let i = 0; i < Alphabet.length; i++) {\n      Lookup[Alphabet[i]] = bn(i);\n    }\n  }\n  const result = Lookup[letter];\n  if (result == null) {\n    throw new FuelError(ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);\n  }\n  return bn(result);\n}\n\n/**\n *  Encode value as a Base58-encoded string.\n */\nexport function encodeBase58(_value: BytesLike): string {\n  const bytes = arrayify(_value);\n\n  let value = bn(bytes);\n  let result = '';\n  while (value.gt(BN_0)) {\n    result = Alphabet[Number(value.mod(BN_58))] + result;\n    value = value.div(BN_58);\n  }\n\n  // Account for leading padding zeros\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i]) {\n      break;\n    }\n    result = Alphabet[0] + result;\n  }\n\n  return result;\n}\n\nexport function decodeBase58(value: string): BN {\n  let result = BN_0;\n  for (let i = 0; i < value.length; i++) {\n    result = result.mul(BN_58);\n    result = result.add(getAlpha(value[i].toString()));\n  }\n  return result;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\nimport { hexlify } from './hexlify';\n\n/**\n *  Returns a hex string by slicing data from the start offset to the end offset.\n *\n * @param data - the data to be sliced.\n * @param start - the start offset (default: 0).\n * @param end - the end offset (default: length of data).\n * @returns - a sliced hex string from start to end.\n */\nexport function dataSlice(data: BytesLike, start?: number, end?: number): string {\n  const bytes = arrayify(data);\n  if (end != null && end > bytes.length) {\n    throw new FuelError(ErrorCode.INVALID_DATA, 'cannot slice beyond data bounds');\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\n/**\n *  Returns the UTF-8 byte representation of str.\n *\n *  If form is disabled, the string is not normalized.\n * @param stri - the string to convert to UTF-8 bytes.\n * @param form - whether to normalize the string.\n * @returns - the UTF-8 byte representation of str.\n */\nexport function toUtf8Bytes(stri: string, form = true): Uint8Array {\n  let str = stri;\n\n  if (form) {\n    str = stri.normalize('NFC');\n  }\n\n  const result: Array<number> = [];\n\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push((c >> 6) | 0xc0);\n      result.push((c & 0x3f) | 0x80);\n    } else if ((c & 0xfc00) === 0xd800) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new FuelError(\n          ErrorCode.INVALID_INPUT_PARAMETERS,\n          'Invalid UTF-8 in the input string.'\n        );\n      }\n\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push((pair >> 18) | 0xf0);\n      result.push(((pair >> 12) & 0x3f) | 0x80);\n      result.push(((pair >> 6) & 0x3f) | 0x80);\n      result.push((pair & 0x3f) | 0x80);\n    } else {\n      result.push((c >> 12) | 0xe0);\n      result.push(((c >> 6) & 0x3f) | 0x80);\n      result.push((c & 0x3f) | 0x80);\n    }\n  }\n\n  return new Uint8Array(result);\n}\n","import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\n/**\n *  These errors are logged when decoding a UTF-8 string fails.\n *\n *  `\"UNEXPECTED_CONTINUE\"` - a continuation byte was present where there\n *  was nothing to continue.\n *\n *  `\"BAD_PREFIX\"` - an invalid (non-continuation) byte to start a\n *  UTF-8 codepoint was found.\n *\n *  `\"OVERRUN\"` - the string is too short to process the expected\n *  codepoint length.\n *\n *  `\"MISSING_CONTINUE\"` - a missing continuation byte was expected but\n *  not found. The offset indicates the index the continuation byte\n *  was expected at.\n *\n *  `\"OUT_OF_RANGE\"` - the computed code point is outside the range\n *  for UTF-8. The badCodepoint indicates the computed codepoint, which was\n *  outside the valid UTF-8 range.\n *\n *  `\"UTF16_SURROGATE\"` - the UTF-8 strings contained a UTF-16 surrogate\n *  pair. The badCodepoint is the computed codepoint, which was inside the\n *  UTF-16 surrogate range.\n *\n *  `\"OVERLONG\"` - the string is an overlong representation. The\n *   badCodepoint indicates the computed codepoint, which has already\n *  been bounds checked.\n *\n *\n *  @returns string\n */\ntype Utf8ErrorReason =\n  | 'UNEXPECTED_CONTINUE'\n  | 'BAD_PREFIX'\n  | 'OVERRUN'\n  | 'MISSING_CONTINUE'\n  | 'OUT_OF_RANGE'\n  | 'UTF16_SURROGATE'\n  | 'OVERLONG';\n\nfunction onError(\n  reason: Utf8ErrorReason,\n  offset: number,\n  bytes: Uint8Array,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  output: Array<number>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  badCodepoint?: number\n): number {\n  // #TODO: Log these as warnings after https://github.com/FuelLabs/fuels-ts/issues/2298 is implemented.\n  // eslint-disable-next-line no-console\n  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);\n  return offset;\n}\n\nfunction helper(codePoints: Array<number>): string {\n  return codePoints\n    .map((codePoint) => {\n      if (codePoint <= 0xffff) {\n        return String.fromCharCode(codePoint);\n      }\n      // eslint-disable-next-line no-param-reassign\n      codePoint -= 0x10000;\n      return String.fromCharCode(\n        ((codePoint >> 10) & 0x3ff) + 0xd800,\n        (codePoint & 0x3ff) + 0xdc00\n      );\n    })\n    .join('');\n}\n\nfunction getUtf8CodePoints(_bytes: BytesLike): Array<number> {\n  const bytes = arrayify(_bytes, 'bytes');\n\n  const result: Array<number> = [];\n  let i = 0;\n\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    const c = bytes[i++];\n\n    // 0xxx xxxx\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n\n    // Multibyte; how many bytes left for this character?\n    let extraLength: null | number = null;\n    let overlongMask: null | number = null;\n\n    // 110x xxxx 10xx xxxx\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f;\n\n      // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff;\n\n      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError('UNEXPECTED_CONTINUE', i - 1, bytes, result);\n      } else {\n        i += onError('BAD_PREFIX', i - 1, bytes, result);\n      }\n      continue;\n    }\n\n    // Do we have enough bytes in our data?\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError('OVERRUN', i - 1, bytes, result);\n      continue;\n    }\n\n    // Remove the length prefix from the char\n    let res: null | number = c & ((1 << (8 - extraLength - 1)) - 1);\n\n    for (let j = 0; j < extraLength; j++) {\n      const nextChar = bytes[i];\n\n      // Invalid continuation byte\n      if ((nextChar & 0xc0) !== 0x80) {\n        i += onError('MISSING_CONTINUE', i, bytes, result);\n        res = null;\n        break;\n      }\n\n      res = (res << 6) | (nextChar & 0x3f);\n      i++;\n    }\n\n    // See above loop for invalid continuation byte\n    if (res === null) {\n      continue;\n    }\n\n    // Maximum code point\n    if (res > 0x10ffff) {\n      i += onError('OUT_OF_RANGE', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    // Reserved for UTF-16 surrogate halves\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError('UTF16_SURROGATE', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    // Check for overlong sequences (more bytes than needed)\n    if (res <= overlongMask) {\n      i += onError('OVERLONG', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n}\n\n/**\n *  Returns the string represented by the UTF-8 data bytes.\n *\n * @param bytes - the UTF-8 data bytes\n * @returns the string represented by the UTF-8 data bytes\n */\n\nexport function toUtf8String(bytes: BytesLike): string {\n  return helper(getUtf8CodePoints(bytes));\n}\n","import { gzipSync, gunzipSync } from 'fflate';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nexport const compressBytecode = (bytecodeAsBinary?: BytesLike) => {\n  if (!bytecodeAsBinary) {\n    return '';\n  }\n\n  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);\n  const bytecodeCompressGzipped = gzipSync(bytecodeCompressBytes, { mtime: 0 });\n  const bytecodeCompressBinary = String.fromCharCode.apply(\n    null,\n    new Uint8Array(bytecodeCompressGzipped) as unknown as number[]\n  );\n  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);\n\n  return bytecodeCompressEncoded;\n};\n\nexport const decompressBytecode = (bytecodeAsBase64: string) => {\n  const bytecodeDecompressBinary = atob(bytecodeAsBase64);\n  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map((_, i) =>\n    bytecodeDecompressBinary.charCodeAt(i)\n  );\n  const bytecodeDecompressBytes = gunzipSync(bytecodeDecompressDecoded);\n\n  return bytecodeDecompressBytes;\n};\n","export * from './utils/capitalizeString';\nexport * from './utils/chunkAndPadBytes';\nexport * from './utils/concat';\nexport * from './utils/arrayify';\nexport * from './utils/hexlify';\nexport * from './utils/normalizeString';\nexport * from './utils/date-time';\nexport * from './utils/types';\nexport * from './utils/sleep';\nexport * from './utils/defaultSnapshotConfigs';\nexport * from './utils/isDefined';\nexport * from './utils/base58';\nexport * from './utils/dataSlice';\nexport * from './utils/toUtf8Bytes';\nexport * from './utils/toUtf8String';\nexport * from './utils/bytecode';\n\n/**\n * Used to verify that a switch statement exhausts all variants.\n */\nexport function assertUnreachable(_x: never): never {\n  throw new Error(\"Didn't expect to get here\");\n}\n","function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`positive integer expected, not ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`boolean expected, not ${b}`);\n}\n\n// copied from utils\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!isBytes(b)) throw new Error('Uint8Array expected');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(h: Hash) {\n  if (typeof h !== 'function' || typeof h.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(h.outputLen);\n  number(h.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We prefer WebCrypto aka globalThis.crypto, which exists in node.js 16+.\n// Falls back to Node.js built-in crypto for Node.js <=v14\n// See utils.ts for details.\n// @ts-ignore\nimport * as nc from 'node:crypto';\nexport const crypto =\n  nc && typeof nc === 'object' && 'webcrypto' in nc\n    ? (nc.webcrypto as any)\n    : nc && typeof nc === 'object' && 'randomBytes' in nc\n      ? nc\n      : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\nimport { bytes as abytes } from './_assert.js';\n// export { isBytes } from './_assert.js';\n// We can't reuse isBytes from _assert, because somehow this causes huge perf issues\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n// The rotate left (circular left shift) operation for uint32\nexport const rotl = (word: number, shift: number) =>\n  (word << shift) | ((word >>> (32 - shift)) >>> 0);\n\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// The byte swap operation for uint32\nexport const byteSwap = (word: number) =>\n  ((word << 24) & 0xff000000) |\n  ((word << 8) & 0xff0000) |\n  ((word >>> 8) & 0xff00) |\n  ((word >>> 24) & 0xff);\n// Conditionally byte swap if on a big-endian platform\nexport const byteSwapIfBE = isLE ? (n: number) => n : (n: number) => byteSwap(n);\n\n// In place byte swap for Uint32Array\nexport function byteSwap32(arr: Uint32Array) {\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = byteSwap(arr[i]);\n  }\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  abytes(data);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  // Legacy Node.js compatibility\n  if (crypto && typeof crypto.randomBytes === 'function') {\n    return crypto.randomBytes(bytesLength);\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n/**\n * Polyfill for Safari 14\n */\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n/**\n * Choice: a ? b : c\n */\nexport const Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n\n/**\n * Majority function, true if any two inputs is true\n */\nexport const Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport abstract class HashMD<T extends HashMD<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in\n    // current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { HashMD, Chi, Maj } from './_md.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state:\n// first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19\n// prettier-ignore\nconst SHA256_IV = /* @__PURE__ */ new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = SHA256_IV[0] | 0;\n  B = SHA256_IV[1] | 0;\n  C = SHA256_IV[2] | 0;\n  D = SHA256_IV[3] | 0;\n  E = SHA256_IV[4] | 0;\n  F = SHA256_IV[5] | 0;\n  G = SHA256_IV[6] | 0;\n  H = SHA256_IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\n/**\n * SHA2-224 hash function\n */\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","import { hash as assertHash, number as assertNumber } from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assertHash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assertNumber(c);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, () => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n","import { number as assertNumber } from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { rotl, asyncLoop, checkOpts, Input, u32, isLE, byteSwap32 } from './utils.js';\n\n// RFC 7914 Scrypt KDF\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: Input, salt: Input, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  assertNumber(N);\n  assertNumber(r);\n  assertNumber(p);\n  assertNumber(dkLen);\n  assertNumber(asyncTick);\n  assertNumber(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n\n  // Max N is 2^32 (Integrify is 32-bit). Real limit is 2^22: JS engines Uint8Array limit is 4GB in 2024.\n  // Spec check `N >= 2 ** (blockSize / 8)` is not done for compat with popular libs,\n  // which used incorrect r: 1, p: 8. Also, the check seems to be a spec error:\n  // https://www.rfc-editor.org/errata_search.php?rfc=7914\n  if (N <= 1 || (N & (N - 1)) !== 0 || N > 2 ** 32) {\n    throw new Error('Scrypt: N must be larger than 1, a power of 2, and less than 2^32');\n  }\n  if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      `Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: Input,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  if (!isLE) byteSwap32(B32);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  if (!isLE) byteSwap32(B32);\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  if (!isLE) byteSwap32(B32);\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, () => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, () => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  if (!isLE) byteSwap32(B32);\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n","const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nfunction split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nconst toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, _l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h: number, l: number) => l;\nconst rotr32L = (h: number, _l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nexport {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { bytes, exists, number, output } from './_assert.js';\nimport { rotlBH, rotlBL, rotlSH, rotlSL, split } from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n  isLE,\n  byteSwap32,\n} from './utils.js';\n\n// SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.\n// It's called a sponge function.\n\n// Various per round constants calculations\nconst SHA3_PI: number[] = [];\nconst SHA3_ROTL: number[] = [];\nconst _SHA3_IOTA: bigint[] = [];\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nconst _7n = /* @__PURE__ */ BigInt(7);\nconst _256n = /* @__PURE__ */ BigInt(256);\nconst _0x71n = /* @__PURE__ */ BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << /* @__PURE__ */ BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));\nconst rotlL = (h: number, l: number, s: number) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    if (!isLE) byteSwap32(this.state32);\n    keccakP(this.state32, this.rounds);\n    if (!isLE) byteSwap32(this.state32);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    exists(this, false);\n    bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = /* @__PURE__ */ gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = /* @__PURE__ */ gen(0x06, 136, 256 / 8);\nexport const sha3_384 = /* @__PURE__ */ gen(0x06, 104, 384 / 8);\nexport const sha3_512 = /* @__PURE__ */ gen(0x06, 72, 512 / 8);\nexport const keccak_224 = /* @__PURE__ */ gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);\nexport const keccak_384 = /* @__PURE__ */ gen(0x01, 104, 384 / 8);\nexport const keccak_512 = /* @__PURE__ */ gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = /* @__PURE__ */ genShake(0x1f, 168, 128 / 8);\nexport const shake256 = /* @__PURE__ */ genShake(0x1f, 136, 256 / 8);\n","import { HashMD } from './_md.js';\nimport { rotl, wrapConstructor } from './utils.js';\n\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160.html\n// https://homes.esat.kuleuven.be/~bosselae/ripemd160/pdf/AB-9601/AB-9601.pdf\nconst Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);\nconst Id = /* @__PURE__ */ new Uint8Array(new Array(16).fill(0).map((_, i) => i));\nconst Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);\nlet idxL = [Id];\nlet idxR = [Pi];\nfor (let i = 0; i < 4; i++) for (let j of [idxL, idxR]) j.push(j[i].map((k) => Rho[k]));\n\nconst shifts = /* @__PURE__ */ [\n  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],\n  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],\n  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],\n  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],\n  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5],\n].map((i) => new Uint8Array(i));\nconst shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));\nconst Kl = /* @__PURE__ */ new Uint32Array([\n  0x00000000, 0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xa953fd4e,\n]);\nconst Kr = /* @__PURE__ */ new Uint32Array([\n  0x50a28be6, 0x5c4dd124, 0x6d703ef3, 0x7a6d76e9, 0x00000000,\n]);\n// It's called f() in spec.\nfunction f(group: number, x: number, y: number, z: number): number {\n  if (group === 0) return x ^ y ^ z;\n  else if (group === 1) return (x & y) | (~x & z);\n  else if (group === 2) return (x | ~y) ^ z;\n  else if (group === 3) return (x & z) | (y & ~z);\n  else return x ^ (y | ~z);\n}\n// Temporary buffer, not used to store anything between runs\nconst R_BUF = /* @__PURE__ */ new Uint32Array(16);\nexport class RIPEMD160 extends HashMD<RIPEMD160> {\n  private h0 = 0x67452301 | 0;\n  private h1 = 0xefcdab89 | 0;\n  private h2 = 0x98badcfe | 0;\n  private h3 = 0x10325476 | 0;\n  private h4 = 0xc3d2e1f0 | 0;\n\n  constructor() {\n    super(64, 20, 8, true);\n  }\n  protected get(): [number, number, number, number, number] {\n    const { h0, h1, h2, h3, h4 } = this;\n    return [h0, h1, h2, h3, h4];\n  }\n  protected set(h0: number, h1: number, h2: number, h3: number, h4: number) {\n    this.h0 = h0 | 0;\n    this.h1 = h1 | 0;\n    this.h2 = h2 | 0;\n    this.h3 = h3 | 0;\n    this.h4 = h4 | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    for (let i = 0; i < 16; i++, offset += 4) R_BUF[i] = view.getUint32(offset, true);\n    // prettier-ignore\n    let al = this.h0 | 0, ar = al,\n        bl = this.h1 | 0, br = bl,\n        cl = this.h2 | 0, cr = cl,\n        dl = this.h3 | 0, dr = dl,\n        el = this.h4 | 0, er = el;\n\n    // Instead of iterating 0 to 80, we split it into 5 groups\n    // And use the groups in constants, functions, etc. Much simpler\n    for (let group = 0; group < 5; group++) {\n      const rGroup = 4 - group;\n      const hbl = Kl[group], hbr = Kr[group]; // prettier-ignore\n      const rl = idxL[group], rr = idxR[group]; // prettier-ignore\n      const sl = shiftsL[group], sr = shiftsR[group]; // prettier-ignore\n      for (let i = 0; i < 16; i++) {\n        const tl = (rotl(al + f(group, bl, cl, dl) + R_BUF[rl[i]] + hbl, sl[i]) + el) | 0;\n        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl; // prettier-ignore\n      }\n      // 2 loops are 10% faster\n      for (let i = 0; i < 16; i++) {\n        const tr = (rotl(ar + f(rGroup, br, cr, dr) + R_BUF[rr[i]] + hbr, sr[i]) + er) | 0;\n        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr; // prettier-ignore\n      }\n    }\n    // Add the compressed chunk to the current hash value\n    this.set(\n      (this.h1 + cl + dr) | 0,\n      (this.h2 + dl + er) | 0,\n      (this.h3 + el + ar) | 0,\n      (this.h4 + al + br) | 0,\n      (this.h0 + bl + cr) | 0\n    );\n  }\n  protected roundClean() {\n    R_BUF.fill(0);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.buffer.fill(0);\n    this.set(0, 0, 0, 0, 0);\n  }\n}\n\n/**\n * RIPEMD-160 - a hash function from 1990s.\n * @param message - msg that would be hashed\n */\nexport const ripemd160 = /* @__PURE__ */ wrapConstructor(() => new RIPEMD160());\n","import { scrypt as scryptNoble } from '@noble/hashes/scrypt';\n\nimport type { IScryptParams } from '../types';\n\nexport const scrypt = (params: IScryptParams): Uint8Array => {\n  const { password, salt, n, p, r, dklen } = params;\n  const derivedKey = scryptNoble(password, salt, { N: n, r, p, dkLen: dklen });\n\n  return derivedKey;\n};\n","import { keccak_256 } from '@noble/hashes/sha3';\n\nexport const keccak256 = (data: Uint8Array): Uint8Array => keccak_256(data);\n","import type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\nimport { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160';\n\nexport function ripemd160(_data: BytesLike): Uint8Array {\n  const data = arrayify(_data, 'data');\n  return noble_ripemd160(data);\n}\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { arrayify } from '@fuel-ts/utils';\nimport crypto from 'crypto';\n\nimport type { CryptoApi, Keystore } from '../types';\n\nimport { bufferFromString } from './bufferFromString';\nimport { pbkdf2 } from './pbkdf2';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst ALGORITHM = 'aes-256-ctr';\n\n/**\n * Generate a pbkdf2 key from a password and random salt\n */\nexport const keyFromPassword: CryptoApi['keyFromPassword'] = (\n  password: string,\n  saltBuffer: Uint8Array\n): Uint8Array => {\n  const passBuffer = bufferFromString(String(password).normalize('NFKC'), 'utf-8');\n  const key = pbkdf2(passBuffer, saltBuffer, 100000, 32, 'sha256');\n\n  return arrayify(key);\n};\n\n/**\n * Encrypts a data object that can be any serializable value using\n * a provided password.\n *\n * @returns Promise<Keystore> object\n */\nexport const encrypt: CryptoApi['encrypt'] = async <T>(\n  password: string,\n  data: T\n): Promise<Keystore> => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataBuffer = Uint8Array.from(Buffer.from(JSON.stringify(data), 'utf-8'));\n\n  const cipher = await crypto.createCipheriv(ALGORITHM, secret, iv);\n  let cipherData = cipher.update(dataBuffer);\n  cipherData = Buffer.concat([cipherData, cipher.final()]);\n\n  return {\n    data: stringFromBuffer(cipherData),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt),\n  };\n};\n\n/**\n * Given a password and a keystore object, decrypts the text and returns\n * the resulting value\n */\nexport const decrypt: CryptoApi['decrypt'] = async <T>(\n  password: string,\n  keystore: Keystore\n): Promise<T> => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n\n  const decipher = await crypto.createDecipheriv(ALGORITHM, secret, iv);\n  const decrypted = decipher.update(encryptedText);\n  const deBuff = Buffer.concat([decrypted, decipher.final()]);\n  const decryptedData = Buffer.from(deBuff).toString('utf-8');\n\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new FuelError(ErrorCode.INVALID_CREDENTIALS, 'Invalid credentials.');\n  }\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const bufferFromString: CryptoApi['bufferFromString'] = (\n  string: string,\n  encoding: Encoding = 'base64'\n): Uint8Array => Uint8Array.from(Buffer.from(string, encoding));\n","import type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { pbkdf2Sync } from 'crypto';\n\nexport function pbkdf2(\n  _password: BytesLike,\n  _salt: BytesLike,\n  iterations: number,\n  keylen: number,\n  algo: 'sha256' | 'sha512'\n): string {\n  const password = arrayify(_password, 'password');\n  const salt = arrayify(_salt, 'salt');\n  return hexlify(pbkdf2Sync(password, salt, iterations, keylen, algo));\n}\n","import crypto from 'crypto';\n\nimport type { CryptoApi } from '../types';\n\nexport const randomBytes: CryptoApi['randomBytes'] = (length: number): Uint8Array => {\n  const randomValues = Uint8Array.from(crypto.randomBytes(length));\n  return randomValues;\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const stringFromBuffer: CryptoApi['stringFromBuffer'] = (\n  buffer: Uint8Array,\n  encoding: Encoding = 'base64'\n): string => Buffer.from(buffer).toString(encoding);\n","import crypto from 'crypto';\n\nexport async function encryptJsonWalletData(data: Uint8Array, key: Uint8Array, iv: Uint8Array) {\n  const cipher = await crypto.createCipheriv('aes-128-ctr', key.subarray(0, 16), iv);\n\n  const encrypted = Buffer.concat([cipher.update(data), cipher.final()]);\n\n  return new Uint8Array(encrypted);\n}\n\nexport async function decryptJsonWalletData(data: Uint8Array, key: Uint8Array, iv: Uint8Array) {\n  const decipher = crypto.createDecipheriv('aes-128-ctr', key.subarray(0, 16), iv);\n\n  const decrypted = await Buffer.concat([decipher.update(data), decipher.final()]);\n\n  return new Uint8Array(decrypted);\n}\n","import { arrayify, hexlify } from '@fuel-ts/utils';\nimport { createHmac } from 'crypto';\n\nexport function computeHmac(\n  algorithm: 'sha256' | 'sha512',\n  _key: Uint8Array,\n  _data: Uint8Array\n): string {\n  const key = arrayify(_key, 'key');\n  const data = arrayify(_data, 'data');\n  return hexlify(createHmac(algorithm, key).update(data).digest());\n}\n","import { randomUUID as UUID } from 'crypto';\n\nimport type { CryptoApi } from '../types';\n\nexport const randomUUID: CryptoApi['randomUUID'] = () => UUID();\n","import { scrypt, keccak256, ripemd160 } from '../shared';\nimport type { CryptoApi } from '../types';\n\nimport { decrypt, encrypt, keyFromPassword } from './aes-ctr';\nimport { bufferFromString } from './bufferFromString';\nimport { decryptJsonWalletData, encryptJsonWalletData } from './encryptJsonWalletData';\nimport { computeHmac } from './hmac';\nimport { pbkdf2 } from './pbkdf2';\nimport { randomBytes } from './randomBytes';\nimport { randomUUID } from './randomUUID';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst api: CryptoApi = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n  randomUUID,\n};\n\nexport default api;\n","import cryptoApi from './node';\n\nexport * from './types';\n\nexport const {\n  bufferFromString,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  stringFromBuffer,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n  randomUUID,\n} = cryptoApi;\n","import { bufferFromString } from '@fuel-ts/crypto';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { sha256 as sha256AsBytes } from '@noble/hashes/sha256';\n\n/**\n * @param data - The data to be hashed\n * @returns A sha256 hash of the data in hex format\n */\nexport function sha256(data: BytesLike): string {\n  return hexlify(sha256AsBytes(arrayify(data)));\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n\n/**\n * Convert a uint64 number to a big-endian byte array\n */\nexport function uint64ToBytesBE(value: number): Uint8Array {\n  const bigIntValue = BigInt(value);\n  const buffer = new ArrayBuffer(8);\n  const dataView = new DataView(buffer);\n  dataView.setBigUint64(0, bigIntValue, false); // write the uint64 value in big-endian order\n  return new Uint8Array(dataView.buffer);\n}\n\n/**\n * hash string messages with sha256\n *\n * @param msg - The string message to be hashed\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(msg: string) {\n  return hash(bufferFromString(msg, 'utf-8'));\n}\n","import type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Option } from './OptionCoder';\n\ntype Primitive = string | number | boolean;\n\n/**\n * The type of value you can provide to `Coder.encode`\n */\nexport type InputValue<T = void> =\n  | Primitive\n  | BN\n  | Option<T>\n  | BytesLike\n  | InputValue[]\n  | { [key: string]: InputValue }\n  | Record<string, Primitive | BytesLike>;\n\n/**\n * The type of value you can get from `Coder.decode`\n */\nexport type DecodedValue =\n  | Primitive\n  | DecodedValue[]\n  | { [key: string]: DecodedValue }\n  | Record<string, Primitive>;\n\nexport type TypesOfCoder<TCoder> =\n  TCoder extends Coder<infer TInput, infer TDecoded> ? { Input: TInput; Decoded: TDecoded } : never;\n\nexport abstract class Coder<TInput = unknown, TDecoded = unknown> {\n  readonly name: string;\n  readonly type: string;\n  readonly encodedLength: number;\n\n  constructor(name: string, type: string, encodedLength: number) {\n    this.name = name;\n    this.type = type;\n    this.encodedLength = encodedLength;\n  }\n\n  abstract encode(value: TInput, length?: number): Uint8Array;\n\n  abstract decode(data: Uint8Array, offset: number, length?: number): [TDecoded, number];\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concat } from '@fuel-ts/utils';\n\nimport { MAX_BYTES } from '../../utils/constants';\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\n\ntype InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']>;\ntype DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;\n\nexport class ArrayCoder<TCoder extends Coder> extends Coder<\n  InputValueOf<TCoder>,\n  DecodedValueOf<TCoder>\n> {\n  coder: TCoder;\n  length: number;\n  #hasNestedOption: boolean;\n\n  constructor(coder: TCoder, length: number) {\n    super('array', `[${coder.type}; ${length}]`, length * coder.encodedLength);\n    this.coder = coder;\n    this.length = length;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n\n  encode(value: InputValueOf<TCoder>): Uint8Array {\n    if (!Array.isArray(value)) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n\n    if (this.length !== value.length) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n\n    return concat(Array.from(value).map((v) => this.coder.encode(v)));\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number] {\n    if ((!this.#hasNestedOption && data.length < this.encodedLength) || data.length > MAX_BYTES) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid array data size.`);\n    }\n\n    let newOffset = offset;\n    const decodedValue = Array(this.length)\n      .fill(0)\n      .map(() => {\n        let decoded;\n        [decoded, newOffset] = this.coder.decode(data, newOffset);\n        return decoded;\n      });\n\n    return [decodedValue as DecodedValueOf<TCoder>, newOffset];\n  }\n}\n","/**\n * Types and Type Regex\n */\nexport const U8_CODER_TYPE = 'u8';\nexport const U16_CODER_TYPE = 'u16';\nexport const U32_CODER_TYPE = 'u32';\nexport const U64_CODER_TYPE = 'u64';\nexport const U256_CODER_TYPE = 'u256';\nexport const RAW_PTR_CODER_TYPE = 'raw untyped ptr';\nexport const RAW_SLICE_CODER_TYPE = 'raw untyped slice';\nexport const BOOL_CODER_TYPE = 'bool';\nexport const B256_CODER_TYPE = 'b256';\nexport const B512_CODER_TYPE = 'struct std::b512::B512';\nexport const OPTION_CODER_TYPE = 'enum std::option::Option';\nexport const VEC_CODER_TYPE = 'struct std::vec::Vec';\nexport const BYTES_CODER_TYPE = 'struct std::bytes::Bytes';\nexport const STD_STRING_CODER_TYPE = 'struct std::string::String';\nexport const STR_SLICE_CODER_TYPE = 'str';\nexport const VOID_TYPE = '()';\n\nexport const optionRegEx: RegExp = /^enum (std::option::)?Option$/m;\nexport const stringRegEx = /^str\\[(?<length>[0-9]+)\\]/;\nexport const arrayRegEx = /^\\[(?<item>[\\w\\s\\\\[\\]]+);\\s*(?<length>[0-9]+)\\]/;\nexport const structRegEx = /^struct.+/;\nexport const enumRegEx = /^enum.+$/;\nexport const tupleRegEx = /^\\((?<items>.*)\\)$/;\nexport const genericRegEx = /^generic.+$/;\n\nexport const fullNameRegExMatch = /([^\\s]+)$/m;\n\n/**\n * Encoding versions\n */\nexport const ENCODING_V1 = '1';\nexport type EncodingVersion = typeof ENCODING_V1;\n\n/**\n * Property space and config constants\n */\nexport const WORD_SIZE = 8;\nexport const BYTES_32 = 32;\nexport const UTXO_ID_LEN = BYTES_32 + 2;\nexport const MAX_INPUTS = 255;\nexport const ASSET_ID_LEN = BYTES_32;\nexport const CONTRACT_ID_LEN = BYTES_32;\nexport const ADDRESS_LEN = BYTES_32;\nexport const NONCE_LEN = BYTES_32;\nexport const TX_LEN = WORD_SIZE * 4;\nexport const TX_POINTER_LEN = WORD_SIZE * 2;\nexport const MAX_BYTES = 2 ** 32 - 1; // Max u32\n\nexport const calculateVmTxMemory = ({ maxInputs }: { maxInputs: number }) =>\n  BYTES_32 + // Tx ID\n  ASSET_ID_LEN + // Base asset ID\n  // Asset ID/Balance coin input pairs\n  maxInputs * (ASSET_ID_LEN + WORD_SIZE) +\n  WORD_SIZE; // Tx size\n\n// SCRIPT_FIXED_SIZE = 104\nexport const SCRIPT_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  WORD_SIZE + // Gas limit\n  WORD_SIZE + // Script size\n  WORD_SIZE + // Script data size\n  WORD_SIZE + // Policies\n  WORD_SIZE + // Inputs size\n  WORD_SIZE + // Outputs size\n  WORD_SIZE + // Witnesses size\n  BYTES_32; // Receipts root\n\n// INPUT_COIN_FIXED_SIZE = 176\nexport const INPUT_COIN_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  TX_LEN + // Utxo Length\n  WORD_SIZE + // Output Index\n  ADDRESS_LEN + // Owner\n  WORD_SIZE + // Amount\n  ASSET_ID_LEN + // Asset id\n  TX_POINTER_LEN + // TxPointer\n  WORD_SIZE + // Witnesses index\n  WORD_SIZE + // Predicate size\n  WORD_SIZE + // Predicate data size\n  WORD_SIZE; // Predicate gas used\n\n// INPUT_MESSAGE_FIXED_SIZE = 168\nexport const INPUT_MESSAGE_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  ADDRESS_LEN + // Sender\n  ADDRESS_LEN + // Recipient\n  WORD_SIZE + // Amount\n  NONCE_LEN + // Nonce\n  WORD_SIZE + // witness_index\n  WORD_SIZE + // Data size\n  WORD_SIZE + // Predicate size\n  WORD_SIZE + // Predicate data size\n  WORD_SIZE; // Predicate gas used\n","import type { Coder } from '../encoding/coders/AbstractCoder';\n\nimport { OPTION_CODER_TYPE, WORD_SIZE } from './constants';\n\n/**\n * Turns:\n  Uint8Array(24) [\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 24\n  ]\n\n  Into:\n  Array [\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 1\n    ],\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 2\n    ],\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 24\n    ]\n  ]\n *\n */\nexport const chunkByLength = (data: Uint8Array, length = WORD_SIZE): Uint8Array[] => {\n  const chunks = [];\n  let offset = 0;\n  let chunk = data.slice(offset, offset + length);\n  while (chunk.length) {\n    chunks.push(chunk);\n    offset += length;\n    chunk = data.slice(offset, offset + length);\n  }\n\n  return chunks;\n};\n\nexport const isUint8Array = (value: unknown): value is Uint8Array => value instanceof Uint8Array;\n\nexport type TCoders = Record<string, Coder>;\n\n/**\n * Finds a deeply nested option in a coders object.\n *\n * @param coders - the coders object to search.\n * @returns - whether the coder has been found.\n */\nexport const hasNestedOption = (coders: Record<string, Coder> | Coder[]): boolean => {\n  const array = Array.isArray(coders) ? coders : Object.values(coders);\n\n  for (const node of array) {\n    if (node.type === OPTION_CODER_TYPE) {\n      return true;\n    }\n\n    if ('coder' in node && (node.coder as Coder).type === OPTION_CODER_TYPE) {\n      return true;\n    }\n\n    if ('coders' in node) {\n      const child = hasNestedOption(node.coders as TCoders);\n      if (child) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn, toHex } from '@fuel-ts/math';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class B256Coder extends Coder<string, string> {\n  constructor() {\n    super('b256', 'b256', WORD_SIZE * 4);\n  }\n\n  encode(value: string): Uint8Array {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 data size.`);\n    }\n\n    let bytes = data.slice(offset, offset + this.encodedLength);\n\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(32);\n    }\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b256 byte data size.`);\n    }\n\n    return [toHex(bytes, 32), offset + 32];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn, toHex } from '@fuel-ts/math';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class B512Coder extends Coder<string, string> {\n  constructor() {\n    super('b512', 'struct B512', WORD_SIZE * 8);\n  }\n\n  encode(value: string): Uint8Array {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    if (encodedValue.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n    return encodedValue;\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 data size.`);\n    }\n\n    let bytes = data.slice(offset, offset + this.encodedLength);\n\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(64);\n    }\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid b512 byte data size.`);\n    }\n\n    return [toHex(bytes, this.encodedLength), offset + this.encodedLength];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { type BNInput, type BN, toBytes, bn } from '@fuel-ts/math';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\ntype BigNumberCoderType = 'u64' | 'u256';\n\nconst encodedLengths: { [key in BigNumberCoderType]: number } = {\n  u64: WORD_SIZE,\n  u256: WORD_SIZE * 4,\n};\n\nexport class BigNumberCoder extends Coder<BNInput, BN> {\n  constructor(baseType: BigNumberCoderType) {\n    super('bigNumber', baseType, encodedLengths[baseType]);\n  }\n\n  encode(value: BNInput): Uint8Array {\n    let bytes;\n\n    // We throw an error if the value is a number and it's more than the max safe integer\n    // This is because we can experience some odd behavior with integers more than the max safe integer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER#description\n    if (typeof value === 'number' && value > Number.MAX_SAFE_INTEGER) {\n      throw new FuelError(\n        ErrorCode.ENCODE_ERROR,\n        `Invalid ${this.type} type - number value is too large. Number can only safely handle up to 53 bits.`\n      );\n    }\n\n    try {\n      bytes = toBytes(value, this.encodedLength);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.type}.`);\n    }\n\n    return bytes;\n  }\n\n  decode(data: Uint8Array, offset: number): [BN, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} data size.`);\n    }\n\n    let bytes = data.slice(offset, offset + this.encodedLength);\n    bytes = bytes.slice(0, this.encodedLength);\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid ${this.type} byte data size.`);\n    }\n\n    return [bn(bytes), offset + this.encodedLength];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn, toBytes } from '@fuel-ts/math';\n\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class BooleanCoder extends Coder<boolean, boolean> {\n  options: EncodingOptions;\n\n  constructor(\n    options: EncodingOptions = {\n      padToWordSize: false,\n    }\n  ) {\n    const encodedLength = options.padToWordSize ? WORD_SIZE : 1;\n    super('boolean', 'boolean', encodedLength);\n\n    this.options = options;\n  }\n\n  encode(value: boolean): Uint8Array {\n    const isTrueBool = value === true || value === false;\n\n    if (!isTrueBool) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid boolean value.`);\n    }\n\n    return toBytes(value ? 1 : 0, this.encodedLength);\n  }\n\n  decode(data: Uint8Array, offset: number): [boolean, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean data size.`);\n    }\n\n    const bytes = bn(data.slice(offset, offset + this.encodedLength));\n\n    if (bytes.isZero()) {\n      return [false, offset + this.encodedLength];\n    }\n\n    if (!bytes.eq(bn(1))) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid boolean value.`);\n    }\n\n    return [true, offset + this.encodedLength];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport class ByteCoder extends Coder<number[], Uint8Array> {\n  static memorySize = 1;\n  constructor() {\n    super('struct', 'struct Bytes', WORD_SIZE);\n  }\n\n  encode(value: number[] | Uint8Array): Uint8Array {\n    const bytes = value instanceof Uint8Array ? value : new Uint8Array(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(bytes.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [Uint8Array, number] {\n    if (data.length < WORD_SIZE) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid byte data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (dataBytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid bytes byte data size.`);\n    }\n\n    return [dataBytes, offsetAndLength + length];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { toNumber } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\nimport type { RequireExactlyOne } from 'type-fest';\n\nimport { OPTION_CODER_TYPE, optionRegEx, VOID_TYPE } from '../../utils/constants';\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport type InputValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n}>;\nexport type DecodedValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n}>;\n\nexport class EnumCoder<TCoders extends Record<string, Coder>> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  override name: string;\n  coders: TCoders;\n  #caseIndexCoder: BigNumberCoder;\n  #encodedValueSize: number;\n  #shouldValidateLength: boolean;\n\n  constructor(name: string, coders: TCoders) {\n    const caseIndexCoder = new BigNumberCoder('u64');\n    const encodedValueSize = Object.values(coders).reduce(\n      (min, coder) => Math.min(min, coder.encodedLength),\n      0\n    );\n    super(`enum ${name}`, `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);\n    this.name = name;\n    this.coders = coders;\n    this.#caseIndexCoder = caseIndexCoder;\n    this.#encodedValueSize = encodedValueSize;\n    this.#shouldValidateLength = !(optionRegEx.test(this.type) || hasNestedOption(coders));\n  }\n\n  // Checks that we're handling a native enum that is of type void.\n  #isNativeEnum(coder: Coder): boolean {\n    return this.type !== OPTION_CODER_TYPE && coder.type === VOID_TYPE;\n  }\n\n  #encodeNativeEnum(value: string): Uint8Array {\n    const valueCoder = this.coders[value];\n    const encodedValue = valueCoder.encode([]);\n    const caseIndex = Object.keys(this.coders).indexOf(value);\n\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return concat([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    if (typeof value === 'string' && this.coders[value]) {\n      return this.#encodeNativeEnum(value);\n    }\n\n    const [caseKey, ...empty] = Object.keys(value);\n    if (!caseKey) {\n      throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, 'A field for the case must be provided.');\n    }\n    if (empty.length !== 0) {\n      throw new FuelError(ErrorCode.INVALID_DECODE_VALUE, 'Only one field must be provided.');\n    }\n    const valueCoder = this.coders[caseKey];\n    const caseIndex = Object.keys(this.coders).indexOf(caseKey);\n    if (caseIndex === -1) {\n      const validCases = Object.keys(this.coders)\n        .map((v) => `'${v}'`)\n        .join(', ');\n      throw new FuelError(\n        ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid case '${caseKey}'. Valid cases: ${validCases}.`\n      );\n    }\n\n    const encodedValue = valueCoder.encode(value[caseKey]);\n\n    return new Uint8Array([...this.#caseIndexCoder.encode(caseIndex), ...encodedValue]);\n  }\n\n  #decodeNativeEnum(caseKey: string, newOffset: number): [DecodedValueOf<TCoders>, number] {\n    return [caseKey as unknown as DecodedValueOf<TCoders>, newOffset];\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    if (this.#shouldValidateLength && data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n\n    const caseBytes = new BigNumberCoder('u64').decode(data, offset)[0];\n    const caseIndex = toNumber(caseBytes);\n    const caseKey = Object.keys(this.coders)[caseIndex];\n    if (!caseKey) {\n      throw new FuelError(\n        ErrorCode.INVALID_DECODE_VALUE,\n        `Invalid caseIndex \"${caseIndex}\". Valid cases: ${Object.keys(this.coders)}.`\n      );\n    }\n    const valueCoder = this.coders[caseKey];\n    const offsetAndCase = offset + this.#caseIndexCoder.encodedLength;\n\n    if (this.#shouldValidateLength && data.length < offsetAndCase + valueCoder.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid enum data size.`);\n    }\n\n    const [decoded, newOffset] = valueCoder.decode(data, offsetAndCase);\n\n    if (this.#isNativeEnum(this.coders[caseKey])) {\n      return this.#decodeNativeEnum(caseKey, newOffset);\n    }\n\n    return [{ [caseKey]: decoded } as DecodedValueOf<TCoders>, newOffset];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { toNumber, toBytes } from '@fuel-ts/math';\n\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\ntype NumberCoderType = 'u8' | 'u16' | 'u32';\n\nconst getLength = (baseType: NumberCoderType): number => {\n  switch (baseType) {\n    case 'u8':\n      return 1;\n    case 'u16':\n      return 2;\n    case 'u32':\n      return 4;\n    default:\n      throw new FuelError(ErrorCode.TYPE_NOT_SUPPORTED, `Invalid number type: ${baseType}`);\n  }\n};\n\nexport class NumberCoder extends Coder<number, number> {\n  baseType: NumberCoderType;\n  options: EncodingOptions;\n\n  constructor(\n    baseType: NumberCoderType,\n    options: EncodingOptions = {\n      padToWordSize: false,\n    }\n  ) {\n    const length = options.padToWordSize ? WORD_SIZE : getLength(baseType);\n    super('number', baseType, length);\n    this.baseType = baseType;\n    this.options = options;\n  }\n\n  encode(value: number | string): Uint8Array {\n    let bytes;\n\n    try {\n      bytes = toBytes(value);\n    } catch (error) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}.`);\n    }\n\n    if (bytes.length > this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Invalid ${this.baseType}, too many bytes.`);\n    }\n\n    return toBytes(bytes, this.encodedLength);\n  }\n\n  decode(data: Uint8Array, offset: number): [number, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number data size.`);\n    }\n\n    const bytes = data.slice(offset, offset + this.encodedLength);\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid number byte data size.`);\n    }\n\n    return [toNumber(bytes), offset + this.encodedLength];\n  }\n}\n","import type { Coder } from './AbstractCoder';\nimport type { InputValueOf, DecodedValueOf } from './EnumCoder';\nimport { EnumCoder } from './EnumCoder';\n\ntype SwayOption<T> = { None: [] } | { Some: T };\nexport type Option<T> = T | undefined;\n\nexport class OptionCoder<TCoders extends Record<string, Coder>> extends EnumCoder<TCoders> {\n  override encode(value?: Option<unknown>): Uint8Array {\n    const result = super.encode(this.toSwayOption(value) as unknown as InputValueOf<TCoders>);\n    return result;\n  }\n\n  private toSwayOption(input?: Option<unknown>): SwayOption<unknown> {\n    if (input !== undefined) {\n      return { Some: input };\n    }\n\n    return { None: [] };\n  }\n\n  override decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    const [decoded, newOffset] = super.decode(data, offset);\n    return [this.toOption(decoded) as DecodedValueOf<TCoders>, newOffset];\n  }\n\n  private toOption(output?: DecodedValueOf<TCoders>): Option<unknown> {\n    if (output && 'Some' in output) {\n      return output.Some;\n    }\n\n    return undefined;\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { ArrayCoder } from './ArrayCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\nimport { NumberCoder } from './NumberCoder';\n\nexport class RawSliceCoder extends Coder<number[], number[]> {\n  constructor() {\n    super('raw untyped slice', 'raw untyped slice', WORD_SIZE);\n  }\n\n  encode(value: number[]): Uint8Array {\n    if (!Array.isArray(value)) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Expected array value.`);\n    }\n\n    const internalCoder = new ArrayCoder(new NumberCoder('u8'), value.length);\n    const bytes = internalCoder.encode(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(bytes.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [number[], number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (dataBytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid raw slice byte data size.`);\n    }\n\n    const internalCoder = new ArrayCoder(new NumberCoder('u8'), length);\n    const [decodedValue] = internalCoder.decode(dataBytes, 0);\n\n    return [decodedValue, offsetAndLength + length];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { toUtf8Bytes, toUtf8String } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport class StdStringCoder extends Coder<string, string> {\n  static memorySize = 1;\n  constructor() {\n    super('struct', 'struct String', WORD_SIZE);\n  }\n\n  encode(value: string): Uint8Array {\n    const bytes = toUtf8Bytes(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(value.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (dataBytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid std string byte data size.`);\n    }\n\n    return [toUtf8String(dataBytes), offsetAndLength + length];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { toUtf8Bytes, toUtf8String } from '@fuel-ts/utils';\n\nimport { WORD_SIZE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\nexport class StrSliceCoder extends Coder<string, string> {\n  static memorySize = 1;\n  constructor() {\n    super('strSlice', 'str', WORD_SIZE);\n  }\n\n  encode(value: string): Uint8Array {\n    const bytes = toUtf8Bytes(value);\n    const lengthBytes = new BigNumberCoder('u64').encode(value.length);\n\n    return new Uint8Array([...lengthBytes, ...bytes]);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const bytes = data.slice(offsetAndLength, offsetAndLength + length);\n\n    if (bytes.length !== length) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string slice byte data size.`);\n    }\n\n    return [toUtf8String(bytes), offsetAndLength + length];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { toUtf8Bytes, toUtf8String } from '@fuel-ts/utils';\n\nimport { Coder } from './AbstractCoder';\n\nexport class StringCoder<TLength extends number = number> extends Coder<string, string> {\n  constructor(length: TLength) {\n    super('string', `str[${length}]`, length);\n  }\n\n  encode(value: string): Uint8Array {\n    if (value.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Value length mismatch during encode.`);\n    }\n\n    return toUtf8Bytes(value);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    if (data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string data size.`);\n    }\n\n    const bytes = data.slice(offset, offset + this.encodedLength);\n\n    if (bytes.length !== this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid string byte data size.`);\n    }\n\n    return [toUtf8String(bytes), offset + this.encodedLength];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concatBytes } from '@fuel-ts/utils';\n\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\nimport { OptionCoder } from './OptionCoder';\n\ntype InputValueOf<TCoders extends Record<string, Coder>> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n};\ntype DecodedValueOf<TCoders extends Record<string, Coder>> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n};\n\nexport class StructCoder<TCoders extends Record<string, Coder>> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  override name: string;\n  coders: TCoders;\n  #hasNestedOption: boolean;\n\n  constructor(name: string, coders: TCoders) {\n    const encodedLength = Object.values(coders).reduce(\n      (acc, coder) => acc + coder.encodedLength,\n      0\n    );\n    super('struct', `struct ${name}`, encodedLength);\n    this.name = name;\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    return concatBytes(\n      Object.keys(this.coders).map((fieldName) => {\n        const fieldCoder = this.coders[fieldName];\n        const fieldValue = value[fieldName];\n\n        if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {\n          throw new FuelError(\n            ErrorCode.ENCODE_ERROR,\n            `Invalid ${this.type}. Field \"${fieldName}\" not present.`\n          );\n        }\n\n        return fieldCoder.encode(fieldValue);\n      })\n    );\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid struct data size.`);\n    }\n\n    let newOffset = offset;\n    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      let decoded;\n      [decoded, newOffset] = fieldCoder.decode(data, newOffset);\n\n      // eslint-disable-next-line no-param-reassign\n      obj[fieldName as keyof DecodedValueOf<TCoders>] = decoded;\n      return obj;\n    }, {} as DecodedValueOf<TCoders>);\n\n    return [decodedValue, newOffset];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concatBytes } from '@fuel-ts/utils';\n\nimport { hasNestedOption } from '../../utils/utilities';\n\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { Coder } from './AbstractCoder';\n\ntype InputValueOf<TCoders extends Coder[]> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n};\ntype DecodedValueOf<TCoders extends Coder[]> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n};\n\nexport class TupleCoder<TCoders extends Coder[]> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  coders: TCoders;\n  #hasNestedOption: boolean;\n\n  constructor(coders: TCoders) {\n    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);\n    super('tuple', `(${coders.map((coder) => coder.type).join(', ')})`, encodedLength);\n    this.coders = coders;\n    this.#hasNestedOption = hasNestedOption(coders);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    if (this.coders.length !== value.length) {\n      throw new FuelError(ErrorCode.ENCODE_ERROR, `Types/values length mismatch.`);\n    }\n\n    return concatBytes(this.coders.map((coder, i) => coder.encode(value[i])));\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    if (!this.#hasNestedOption && data.length < this.encodedLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid tuple data size.`);\n    }\n\n    let newOffset = offset;\n    const decodedValue = this.coders.map((coder) => {\n      let decoded;\n      [decoded, newOffset] = coder.decode(data, newOffset);\n\n      return decoded;\n    });\n\n    return [decodedValue as DecodedValueOf<TCoders>, newOffset];\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { concatBytes } from '@fuel-ts/utils';\n\nimport { MAX_BYTES, WORD_SIZE } from '../../utils/constants';\nimport { hasNestedOption, isUint8Array } from '../../utils/utilities';\n\nimport { Coder } from './AbstractCoder';\nimport type { TypesOfCoder } from './AbstractCoder';\nimport { BigNumberCoder } from './BigNumberCoder';\n\ntype InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']> | Uint8Array;\ntype DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;\n\nexport class VecCoder<TCoder extends Coder> extends Coder<\n  InputValueOf<TCoder>,\n  DecodedValueOf<TCoder>\n> {\n  coder: TCoder;\n  #hasNestedOption: boolean;\n\n  constructor(coder: TCoder) {\n    super('struct', `struct Vec`, WORD_SIZE);\n    this.coder = coder;\n    this.#hasNestedOption = hasNestedOption([coder]);\n  }\n\n  encode(value: InputValueOf<TCoder>): Uint8Array {\n    if (!Array.isArray(value) && !isUint8Array(value)) {\n      throw new FuelError(\n        ErrorCode.ENCODE_ERROR,\n        `Expected array value, or a Uint8Array. You can use arrayify to convert a value to a Uint8Array.`\n      );\n    }\n\n    const lengthCoder = new BigNumberCoder('u64');\n\n    if (isUint8Array(value)) {\n      return new Uint8Array([...lengthCoder.encode(value.length), ...value]);\n    }\n\n    const bytes = value.map((v) => this.coder.encode(v));\n    const lengthBytes = lengthCoder.encode(value.length);\n\n    return new Uint8Array([...lengthBytes, ...concatBytes(bytes)]);\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number] {\n    if ((!this.#hasNestedOption && data.length < this.encodedLength) || data.length > MAX_BYTES) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec data size.`);\n    }\n\n    const offsetAndLength = offset + WORD_SIZE;\n    const lengthBytes = data.slice(offset, offsetAndLength);\n    const length = bn(new BigNumberCoder('u64').decode(lengthBytes, 0)[0]).toNumber();\n    const dataLength = length * this.coder.encodedLength;\n    const dataBytes = data.slice(offsetAndLength, offsetAndLength + dataLength);\n\n    if (!this.#hasNestedOption && dataBytes.length !== dataLength) {\n      throw new FuelError(ErrorCode.DECODE_ERROR, `Invalid vec byte data size.`);\n    }\n\n    let newOffset = offsetAndLength;\n    const chunks = [];\n    for (let i = 0; i < length; i++) {\n      const [decoded, optionOffset] = this.coder.decode(data, newOffset);\n      chunks.push(decoded);\n      newOffset = optionOffset;\n    }\n\n    return [chunks, newOffset];\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { AbiCoder } from './AbiCoder';\nimport { FunctionFragment } from './FunctionFragment';\nimport type { DecodedValue, InputValue } from './encoding/coders/AbstractCoder';\nimport type { JsonAbiArgument, JsonAbiOld } from './types/JsonAbi';\nimport type { Configurable, JsonAbi } from './types/JsonAbiNew';\nimport { type EncodingVersion } from './utils/constants';\nimport { getEncodingVersion } from './utils/json-abi';\nimport { parseConcreteType, transpileAbi } from './utils/transpile-abi';\n\nexport class Interface {\n  readonly functions!: Record<string, FunctionFragment>;\n  readonly configurables: Record<string, Configurable>;\n  readonly jsonAbi: JsonAbi;\n  readonly encoding: EncodingVersion;\n  private readonly jsonAbiOld: JsonAbiOld;\n\n  constructor(jsonAbi: JsonAbi) {\n    this.jsonAbi = jsonAbi;\n    this.encoding = getEncodingVersion(jsonAbi.encodingVersion);\n    this.jsonAbiOld = transpileAbi(jsonAbi) as JsonAbiOld;\n    this.functions = Object.fromEntries(\n      this.jsonAbi.functions.map((fn) => [fn.name, new FunctionFragment(this.jsonAbiOld, fn)])\n    );\n\n    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));\n  }\n\n  /**\n   * Returns function fragment for a dynamic input.\n   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment\n   */\n  getFunction(nameOrSignatureOrSelector: string): FunctionFragment {\n    const fn = Object.values<FunctionFragment>(this.functions).find(\n      (f) =>\n        f.name === nameOrSignatureOrSelector ||\n        f.signature === nameOrSignatureOrSelector ||\n        f.selector === nameOrSignatureOrSelector\n    );\n\n    if (fn !== undefined) {\n      return fn;\n    }\n\n    throw new FuelError(\n      ErrorCode.FUNCTION_NOT_FOUND,\n      `function ${nameOrSignatureOrSelector} not found: ${JSON.stringify(fn)}.`\n    );\n  }\n\n  // Decode the result of a function call\n  decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): any {\n    const fragment =\n      typeof functionFragment === 'string' ? this.getFunction(functionFragment) : functionFragment;\n\n    return fragment.decodeOutput(data);\n  }\n\n  decodeLog(data: BytesLike, logId: string): any {\n    const loggedType = this.jsonAbiOld.loggedTypes.find((type) => type.logId === logId);\n    if (!loggedType) {\n      throw new FuelError(\n        ErrorCode.LOG_TYPE_NOT_FOUND,\n        `Log type with logId '${logId}' doesn't exist in the ABI.`\n      );\n    }\n\n    return AbiCoder.decode(this.jsonAbiOld, loggedType.loggedType, arrayify(data), 0, {\n      encoding: this.encoding,\n    });\n  }\n\n  encodeConfigurable(name: string, value: InputValue) {\n    const configurable = this.jsonAbiOld.configurables.find((c) => c.name === name);\n    if (!configurable) {\n      throw new FuelError(\n        ErrorCode.CONFIGURABLE_NOT_FOUND,\n        `A configurable with the '${name}' was not found in the ABI.`\n      );\n    }\n\n    return AbiCoder.encode(this.jsonAbiOld, configurable.configurableType, value, {\n      encoding: this.encoding,\n    });\n  }\n\n  encodeType(concreteTypeId: string, value: InputValue): Uint8Array {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      ''\n    ) as JsonAbiArgument;\n    return AbiCoder.encode(this.jsonAbiOld, typeArg, value, {\n      encoding: this.encoding,\n    });\n  }\n\n  decodeType(concreteTypeId: string, data: Uint8Array): [DecodedValue | undefined, number] {\n    const typeArg = parseConcreteType(\n      this.jsonAbi,\n      this.jsonAbiOld.types,\n      concreteTypeId,\n      ''\n    ) as JsonAbiArgument;\n\n    return AbiCoder.decode(this.jsonAbiOld, typeArg, data, 0, { encoding: this.encoding });\n  }\n}\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nimport type { JsonAbiOld, JsonAbiArgument } from './types/JsonAbi';\nimport { arrayRegEx, enumRegEx, genericRegEx, stringRegEx, structRegEx } from './utils/constants';\nimport { findTypeById } from './utils/json-abi';\n\nexport class ResolvedAbiType {\n  readonly abi: JsonAbiOld;\n  name: string;\n  readonly type: string;\n  readonly originalTypeArguments: readonly JsonAbiArgument[] | null;\n  readonly components: readonly ResolvedAbiType[] | null;\n\n  constructor(abi: JsonAbiOld, argument: JsonAbiArgument) {\n    this.abi = abi;\n\n    this.name = argument.name;\n\n    const jsonABIType = findTypeById(abi, argument.type);\n\n    if (jsonABIType.type.length > 256) {\n      throw new FuelError(\n        ErrorCode.INVALID_COMPONENT,\n        `The provided ABI type is too long: ${jsonABIType.type}.`\n      );\n    }\n\n    this.type = jsonABIType.type;\n    this.originalTypeArguments = argument.typeArguments;\n    this.components = ResolvedAbiType.getResolvedGenericComponents(\n      abi,\n      argument,\n      jsonABIType.components,\n      jsonABIType.typeParameters ??\n        ResolvedAbiType.getImplicitGenericTypeParameters(abi, jsonABIType.components)\n    );\n  }\n\n  private static getResolvedGenericComponents(\n    abi: JsonAbiOld,\n    arg: JsonAbiArgument,\n    components: readonly JsonAbiArgument[] | null,\n    typeParameters: readonly number[] | null\n  ) {\n    if (components === null) {\n      return null;\n    }\n    if (typeParameters === null || typeParameters.length === 0) {\n      return components.map((c) => new ResolvedAbiType(abi, c));\n    }\n\n    const typeParametersAndArgsMap = typeParameters.reduce(\n      (obj, typeParameter, typeParameterIndex) => {\n        const o: Record<number, JsonAbiArgument> = { ...obj };\n        o[typeParameter] = structuredClone(\n          arg.typeArguments?.[typeParameterIndex]\n        ) as JsonAbiArgument;\n        return o;\n      },\n      {} as Record<number, JsonAbiArgument>\n    );\n\n    const resolvedComponents = this.resolveGenericArgTypes(\n      abi,\n      components,\n      typeParametersAndArgsMap\n    );\n\n    return resolvedComponents.map((c) => new ResolvedAbiType(abi, c));\n  }\n\n  private static resolveGenericArgTypes(\n    abi: JsonAbiOld,\n    args: readonly JsonAbiArgument[],\n    typeParametersAndArgsMap: Record<number, JsonAbiArgument>\n  ): readonly JsonAbiArgument[] {\n    return args.map((arg) => {\n      if (typeParametersAndArgsMap[arg.type] !== undefined) {\n        return {\n          ...typeParametersAndArgsMap[arg.type],\n          name: arg.name,\n        };\n      }\n\n      if (arg.typeArguments) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: this.resolveGenericArgTypes(\n            abi,\n            arg.typeArguments,\n            typeParametersAndArgsMap\n          ),\n        };\n      }\n\n      const argType = findTypeById(abi, arg.type);\n      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);\n\n      if (implicitTypeParameters && implicitTypeParameters.length > 0) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp]),\n        };\n      }\n\n      return arg;\n    });\n  }\n\n  private static getImplicitGenericTypeParameters(\n    abi: JsonAbiOld,\n    args: readonly JsonAbiArgument[] | null,\n    implicitGenericParametersParam?: number[]\n  ) {\n    if (!Array.isArray(args)) {\n      return null;\n    }\n\n    const implicitGenericParameters: number[] = implicitGenericParametersParam ?? [];\n\n    args.forEach((a) => {\n      const argType = findTypeById(abi, a.type);\n\n      if (genericRegEx.test(argType.type)) {\n        implicitGenericParameters.push(argType.typeId);\n        return;\n      }\n\n      if (!Array.isArray(a.typeArguments)) {\n        return;\n      }\n      this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);\n    });\n\n    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;\n  }\n\n  getSignature(): string {\n    const prefix = this.getArgSignaturePrefix();\n    const content = this.getArgSignatureContent();\n\n    return `${prefix}${content}`;\n  }\n\n  private getArgSignaturePrefix(): string {\n    const structMatch = structRegEx.test(this.type);\n    if (structMatch) {\n      return 's';\n    }\n\n    const arrayMatch = arrayRegEx.test(this.type);\n    if (arrayMatch) {\n      return 'a';\n    }\n\n    const enumMatch = enumRegEx.test(this.type);\n    if (enumMatch) {\n      return 'e';\n    }\n\n    return '';\n  }\n\n  private getArgSignatureContent(): string {\n    if (this.type === 'raw untyped ptr') {\n      return 'rawptr';\n    }\n\n    if (this.type === 'raw untyped slice') {\n      return 'rawslice';\n    }\n\n    const strMatch = stringRegEx.exec(this.type)?.groups;\n    if (strMatch) {\n      return `str[${strMatch.length}]`;\n    }\n\n    if (this.components === null) {\n      return this.type;\n    }\n\n    const arrayMatch = arrayRegEx.exec(this.type)?.groups;\n\n    if (arrayMatch) {\n      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;\n    }\n\n    const typeArgumentsSignature =\n      this.originalTypeArguments !== null\n        ? `<${this.originalTypeArguments\n            .map((a) => new ResolvedAbiType(this.abi, a).getSignature())\n            .join(',')}>`\n        : '';\n\n    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(',')})`;\n\n    return `${typeArgumentsSignature}${componentsSignature}`;\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { ResolvedAbiType } from '../ResolvedAbiType';\nimport type { JsonAbiOld, JsonAbiArgument, JsonAbiType } from '../types/JsonAbi';\nimport type { AbiFunction, JsonAbi } from '../types/JsonAbiNew';\n\nimport { ENCODING_V1, VOID_TYPE, type EncodingVersion } from './constants';\n\n/**\n * Asserts that the encoding version is supported by the ABI coder.\n *\n * @param encoding - the encoding version to check\n * @returns the encoding version\n * @throws FuelError if the encoding version is not supported\n */\nexport const getEncodingVersion = (encoding?: string): EncodingVersion => {\n  switch (encoding) {\n    case undefined:\n    case ENCODING_V1:\n      return ENCODING_V1;\n\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version '${encoding}' is unsupported.`\n      );\n  }\n};\n\n/**\n * Find a function by name in the ABI.\n *\n * @param abi - the JsonAbi object\n * @param name - the name of the function to find\n * @returns the JsonAbi function object\n */\nexport const findFunctionByName = (abi: JsonAbi, name: string): AbiFunction => {\n  const fn = abi.functions.find((f) => f.name === name);\n  if (!fn) {\n    throw new FuelError(\n      ErrorCode.FUNCTION_NOT_FOUND,\n      `Function with name '${name}' doesn't exist in the ABI`\n    );\n  }\n  return fn;\n};\n\n/**\n * Find a type by its typeId in the ABI.\n *\n * @param abi - the JsonAbi object\n * @param typeId - the typeId of the type to find\n * @returns the JsonAbi type object\n */\nexport const findTypeById = (abi: JsonAbiOld, typeId: number): JsonAbiType => {\n  const type = abi.types.find((t) => t.typeId === typeId);\n  if (!type) {\n    throw new FuelError(\n      ErrorCode.TYPE_NOT_FOUND,\n      `Type with typeId '${typeId}' doesn't exist in the ABI.`\n    );\n  }\n  return type;\n};\n\n/**\n * Find all non-void inputs in a list of inputs.\n * i.e. all inputs that are not of the type '()'.\n *\n * @param abi - the JsonAbi object\n * @param inputs - the list of inputs to filter\n * @returns the list of non-void inputs\n */\nexport const findNonVoidInputs = (\n  abi: JsonAbiOld,\n  inputs: readonly JsonAbiArgument[]\n): JsonAbiArgument[] => inputs.filter((input) => findTypeById(abi, input.type).type !== VOID_TYPE);\n\n/**\n * Find the vector buffer argument in a list of components.\n *\n * @param components - the list of components to search\n * @returns the vector buffer argument\n */\nexport const findVectorBufferArgument = (\n  components: readonly ResolvedAbiType[]\n): JsonAbiArgument => {\n  const bufferComponent = components.find((c) => c.name === 'buf');\n  const bufferTypeArgument = bufferComponent?.originalTypeArguments?.[0];\n  if (!bufferComponent || !bufferTypeArgument) {\n    throw new FuelError(\n      ErrorCode.INVALID_COMPONENT,\n      `The Vec type provided is missing or has a malformed 'buf' component.`\n    );\n  }\n  return bufferTypeArgument;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { GetCoderFn } from '../../types/GetCoder';\nimport type { EncodingVersion } from '../../utils/constants';\nimport { ENCODING_V1 } from '../../utils/constants';\n\nimport { getCoder as getCoderV1 } from './getCoderV1';\n\n/**\n * Retrieves the appropriate encoding function for a given encoding version.\n *\n * @param encoding - the version to provide a strategy for.\n * @throws for an unsupported encoding version.\n * @returns the appropriate encoding strategy.\n */\nexport function getCoderForEncoding(encoding: EncodingVersion = ENCODING_V1): GetCoderFn {\n  switch (encoding) {\n    case ENCODING_V1:\n      return getCoderV1;\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_ENCODING_VERSION,\n        `Encoding version ${encoding} is unsupported.`\n      );\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { ResolvedAbiType } from '../../ResolvedAbiType';\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport type { GetCoderFn } from '../../types/GetCoder';\nimport {\n  B256_CODER_TYPE,\n  B512_CODER_TYPE,\n  BOOL_CODER_TYPE,\n  BYTES_CODER_TYPE,\n  ENCODING_V1,\n  OPTION_CODER_TYPE,\n  RAW_PTR_CODER_TYPE,\n  RAW_SLICE_CODER_TYPE,\n  STD_STRING_CODER_TYPE,\n  STR_SLICE_CODER_TYPE,\n  U16_CODER_TYPE,\n  U256_CODER_TYPE,\n  U32_CODER_TYPE,\n  U64_CODER_TYPE,\n  U8_CODER_TYPE,\n  VEC_CODER_TYPE,\n  VOID_TYPE,\n  arrayRegEx,\n  enumRegEx,\n  fullNameRegExMatch,\n  stringRegEx,\n  structRegEx,\n  tupleRegEx,\n} from '../../utils/constants';\nimport { findVectorBufferArgument } from '../../utils/json-abi';\nimport type { Coder } from '../coders/AbstractCoder';\nimport { ArrayCoder } from '../coders/ArrayCoder';\nimport { B256Coder } from '../coders/B256Coder';\nimport { B512Coder } from '../coders/B512Coder';\nimport { BigNumberCoder } from '../coders/BigNumberCoder';\nimport { BooleanCoder } from '../coders/BooleanCoder';\nimport { ByteCoder } from '../coders/ByteCoder';\nimport { EnumCoder } from '../coders/EnumCoder';\nimport { NumberCoder } from '../coders/NumberCoder';\nimport { OptionCoder } from '../coders/OptionCoder';\nimport { RawSliceCoder } from '../coders/RawSliceCoder';\nimport { StdStringCoder } from '../coders/StdStringCoder';\nimport { StrSliceCoder } from '../coders/StrSliceCoder';\nimport { StringCoder } from '../coders/StringCoder';\nimport { StructCoder } from '../coders/StructCoder';\nimport { TupleCoder } from '../coders/TupleCoder';\nimport { VecCoder } from '../coders/VecCoder';\nimport { VoidCoder } from '../coders/VoidCoder';\n\nimport { getCoders } from './getCoders';\n\n/**\n * Retrieves coders that adhere to the v0 spec.\n *\n * @param resolvedAbiType - the resolved type to return a coder for.\n * @param options - options to be utilized during the encoding process.\n * @returns the coder for a given type.\n */\nexport const getCoder: GetCoderFn = (\n  resolvedAbiType: ResolvedAbiType,\n  _options?: EncodingOptions\n): Coder => {\n  switch (resolvedAbiType.type) {\n    case U8_CODER_TYPE:\n    case U16_CODER_TYPE:\n    case U32_CODER_TYPE:\n      return new NumberCoder(resolvedAbiType.type);\n    case U64_CODER_TYPE:\n    case RAW_PTR_CODER_TYPE:\n      return new BigNumberCoder('u64');\n    case U256_CODER_TYPE:\n      return new BigNumberCoder('u256');\n    case RAW_SLICE_CODER_TYPE:\n      return new RawSliceCoder();\n    case BOOL_CODER_TYPE:\n      return new BooleanCoder();\n    case B256_CODER_TYPE:\n      return new B256Coder();\n    case B512_CODER_TYPE:\n      return new B512Coder();\n    case BYTES_CODER_TYPE:\n      return new ByteCoder();\n    case STD_STRING_CODER_TYPE:\n      return new StdStringCoder();\n    case STR_SLICE_CODER_TYPE:\n      return new StrSliceCoder();\n    case VOID_TYPE:\n      return new VoidCoder();\n    default:\n      break;\n  }\n\n  const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;\n  if (stringMatch) {\n    const length = parseInt(stringMatch.length, 10);\n\n    return new StringCoder(length);\n  }\n\n  // ABI types underneath MUST have components by definition\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const components = resolvedAbiType.components!;\n\n  const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;\n\n  if (arrayMatch) {\n    const length = parseInt(arrayMatch.length, 10);\n    const arg = components[0];\n    if (!arg) {\n      throw new FuelError(\n        ErrorCode.INVALID_COMPONENT,\n        `The provided Array type is missing an item of 'component'.`\n      );\n    }\n\n    const arrayElementCoder = getCoder(arg);\n    return new ArrayCoder(arrayElementCoder as Coder, length);\n  }\n\n  if (resolvedAbiType.type === VEC_CODER_TYPE) {\n    const arg = findVectorBufferArgument(components);\n    const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);\n\n    const itemCoder = getCoder(argType, { encoding: ENCODING_V1 });\n    return new VecCoder(itemCoder as Coder);\n  }\n\n  // component name\n  const coderName = resolvedAbiType.type.match(fullNameRegExMatch)?.[0];\n\n  const structMatch = structRegEx.test(resolvedAbiType.type);\n  if (structMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    return new StructCoder(coderName, coders);\n  }\n\n  const enumMatch = enumRegEx.test(resolvedAbiType.type);\n  if (enumMatch && coderName) {\n    const coders = getCoders(components, { getCoder });\n    const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;\n    if (isOptionEnum) {\n      return new OptionCoder(coderName, coders);\n    }\n    return new EnumCoder(coderName, coders);\n  }\n\n  const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;\n  if (tupleMatch) {\n    const coders = components.map((component) => getCoder(component, { encoding: ENCODING_V1 }));\n    return new TupleCoder(coders as Coder[]);\n  }\n\n  throw new FuelError(\n    ErrorCode.CODER_NOT_FOUND,\n    `Coder not found: ${JSON.stringify(resolvedAbiType)}.`\n  );\n};\n","import { VOID_TYPE } from '../../utils/constants';\n\nimport { Coder } from './AbstractCoder';\n\nexport class VoidCoder extends Coder<undefined, undefined> {\n  constructor() {\n    super('void', VOID_TYPE, 0);\n  }\n\n  encode(_value: undefined): Uint8Array {\n    return new Uint8Array([]);\n  }\n\n  decode(_data: Uint8Array, offset: number): [undefined, number] {\n    return [undefined, offset];\n  }\n}\n","import type { ResolvedAbiType } from '../../ResolvedAbiType';\nimport type { EncodingOptions } from '../../types/EncodingOptions';\nimport type { GetCoderFn } from '../../types/GetCoder';\nimport type { Coder } from '../coders/AbstractCoder';\n\n/**\n * @param components - types array to create coders for.\n * @param options - options - options to be utilized during the encoding process.\n * @returns an object containing types and an appropriate coder.\n */\nexport function getCoders(\n  components: readonly ResolvedAbiType[],\n  options: EncodingOptions & { getCoder: GetCoderFn }\n) {\n  const { getCoder } = options;\n  return components.reduce((obj, component) => {\n    const o: Record<string, Coder> = obj;\n\n    o[component.name] = getCoder(component, options);\n    return o;\n  }, {});\n}\n","import { ResolvedAbiType } from './ResolvedAbiType';\nimport type { DecodedValue, InputValue, Coder } from './encoding/coders/AbstractCoder';\nimport { getCoderForEncoding } from './encoding/strategies/getCoderForEncoding';\nimport type { EncodingOptions } from './types/EncodingOptions';\nimport type { JsonAbiOld, JsonAbiArgument } from './types/JsonAbi';\n\nexport abstract class AbiCoder {\n  static getCoder(\n    abi: JsonAbiOld,\n    argument: JsonAbiArgument,\n    options: EncodingOptions = {\n      padToWordSize: false,\n    }\n  ): Coder {\n    const resolvedAbiType = new ResolvedAbiType(abi, argument);\n    return getCoderForEncoding(options.encoding)(resolvedAbiType, options);\n  }\n\n  static encode(\n    abi: JsonAbiOld,\n    argument: JsonAbiArgument,\n    value: InputValue,\n    options?: EncodingOptions\n  ) {\n    return this.getCoder(abi, argument, options).encode(value);\n  }\n\n  static decode(\n    abi: JsonAbiOld,\n    argument: JsonAbiArgument,\n    data: Uint8Array,\n    offset: number,\n    options?: EncodingOptions\n  ): [DecodedValue | undefined, number] {\n    return this.getCoder(abi, argument, options).decode(data, offset) as [\n      DecodedValue | undefined,\n      number,\n    ];\n  }\n}\n","import { bufferFromString } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport { AbiCoder } from './AbiCoder';\nimport { ResolvedAbiType } from './ResolvedAbiType';\nimport type { DecodedValue, InputValue } from './encoding/coders/AbstractCoder';\nimport { StdStringCoder } from './encoding/coders/StdStringCoder';\nimport { TupleCoder } from './encoding/coders/TupleCoder';\nimport type { JsonAbiOld, JsonAbiFunction } from './types/JsonAbi';\nimport type { AbiFunction, AbiFunctionAttribute } from './types/JsonAbiNew';\nimport type { EncodingVersion } from './utils/constants';\nimport { getFunctionInputs } from './utils/getFunctionInputs';\nimport { findNonVoidInputs, getEncodingVersion } from './utils/json-abi';\nimport { padValuesWithUndefined } from './utils/padValuesWithUndefined';\n\nexport class FunctionFragment {\n  readonly signature: string;\n  readonly selector: string;\n  readonly selectorBytes: Uint8Array;\n  readonly encoding: EncodingVersion;\n  readonly name: string;\n  readonly jsonFn: AbiFunction;\n  readonly attributes: readonly AbiFunctionAttribute[];\n\n  private readonly jsonAbiOld: JsonAbiOld;\n  private readonly jsonFnOld: JsonAbiFunction;\n\n  constructor(jsonAbi: JsonAbiOld, fn: AbiFunction) {\n    this.jsonFn = fn;\n    this.jsonAbiOld = jsonAbi;\n    this.jsonFnOld = jsonAbi.functions.find((f) => f.name === fn.name) as JsonAbiFunction;\n    this.name = fn.name;\n    this.signature = FunctionFragment.getSignature(this.jsonAbiOld, this.jsonFnOld);\n    this.selector = FunctionFragment.getFunctionSelector(this.signature);\n    this.selectorBytes = new StdStringCoder().encode(this.name);\n    this.encoding = getEncodingVersion(jsonAbi.encoding);\n\n    this.attributes = this.jsonFn.attributes ?? [];\n  }\n\n  private static getSignature(abi: JsonAbiOld, fn: JsonAbiFunction): string {\n    const inputsSignatures = fn.inputs.map((input) =>\n      new ResolvedAbiType(abi, input).getSignature()\n    );\n    return `${fn.name}(${inputsSignatures.join(',')})`;\n  }\n\n  private static getFunctionSelector(functionSignature: string) {\n    const hashedFunctionSignature = sha256(bufferFromString(functionSignature, 'utf-8'));\n    // get first 4 bytes of signature + 0x prefix. then left-pad it to 8 bytes using toHex(8)\n    return bn(hashedFunctionSignature.slice(0, 10)).toHex(8);\n  }\n\n  encodeArguments(values: InputValue[]): Uint8Array {\n    const inputs = getFunctionInputs({ jsonAbi: this.jsonAbiOld, inputs: this.jsonFnOld.inputs });\n    const mandatoryInputLength = inputs.filter((i) => !i.isOptional).length;\n    if (values.length < mandatoryInputLength) {\n      throw new FuelError(\n        ErrorCode.ABI_TYPES_AND_VALUES_MISMATCH,\n        `Invalid number of arguments. Expected a minimum of ${mandatoryInputLength} arguments, received ${values.length}`\n      );\n    }\n\n    const coders = this.jsonFnOld.inputs.map((t) =>\n      AbiCoder.getCoder(this.jsonAbiOld, t, {\n        encoding: this.encoding,\n      })\n    );\n\n    const argumentValues = padValuesWithUndefined(values, this.jsonFn.inputs);\n    return new TupleCoder(coders).encode(argumentValues);\n  }\n\n  decodeArguments(data: BytesLike) {\n    const bytes = arrayify(data);\n    const nonVoidInputs = findNonVoidInputs(this.jsonAbiOld, this.jsonFnOld.inputs);\n\n    if (nonVoidInputs.length === 0) {\n      // The VM is current return 0x0000000000000000, but we should treat it as undefined / void\n      if (bytes.length === 0) {\n        return undefined;\n      }\n\n      throw new FuelError(\n        ErrorCode.DECODE_ERROR,\n        `Types/values length mismatch during decode. ${JSON.stringify({\n          count: {\n            types: this.jsonFn.inputs.length,\n            nonVoidInputs: nonVoidInputs.length,\n            values: bytes.length,\n          },\n          value: {\n            args: this.jsonFn.inputs,\n            nonVoidInputs,\n            values: bytes,\n          },\n        })}`\n      );\n    }\n\n    const result = this.jsonFnOld.inputs.reduce(\n      (obj: { decoded: unknown[]; offset: number }, input) => {\n        const coder = AbiCoder.getCoder(this.jsonAbiOld, input, { encoding: this.encoding });\n        const [decodedValue, decodedValueByteSize] = coder.decode(bytes, obj.offset);\n\n        return {\n          decoded: [...obj.decoded, decodedValue],\n          offset: obj.offset + decodedValueByteSize,\n        };\n      },\n      { decoded: [], offset: 0 }\n    );\n\n    return result.decoded;\n  }\n\n  decodeOutput(data: BytesLike): [DecodedValue | undefined, number] {\n    const bytes = arrayify(data);\n    const coder = AbiCoder.getCoder(this.jsonAbiOld, this.jsonFnOld.output, {\n      encoding: this.encoding,\n    });\n\n    return coder.decode(bytes, 0) as [DecodedValue | undefined, number];\n  }\n\n  /**\n   * Checks if the function is read-only i.e. it only reads from storage, does not write to it.\n   *\n   * @returns True if the function is read-only or pure, false otherwise.\n   */\n  isReadOnly(): boolean {\n    const storageAttribute = this.attributes.find((attr) => attr.name === 'storage');\n    return !storageAttribute?.arguments?.includes('write');\n  }\n}\n","import type { JsonAbiOld, JsonAbiArgument } from '../types/JsonAbi';\n\nimport { optionRegEx, VOID_TYPE } from './constants';\nimport { findTypeById } from './json-abi';\n\nexport type FunctionInput<TArg extends JsonAbiArgument = JsonAbiArgument> = TArg & {\n  isOptional: boolean;\n};\n\nexport const getFunctionInputs = (params: {\n  jsonAbi: JsonAbiOld;\n  inputs: readonly JsonAbiArgument[];\n}): Array<FunctionInput> => {\n  const { jsonAbi, inputs } = params;\n  let isMandatory = false;\n\n  return inputs.reduceRight((result, input) => {\n    const type = findTypeById(jsonAbi, input.type);\n    isMandatory = isMandatory || (type.type !== VOID_TYPE && !optionRegEx.test(type.type));\n    return [{ ...input, isOptional: !isMandatory }, ...result];\n  }, [] as FunctionInput[]);\n};\n","import type { InputValue } from '../encoding/coders/AbstractCoder';\n\nexport const padValuesWithUndefined = (values: InputValue[], inputs: ArrayLike<unknown>) => {\n  if (values.length >= inputs.length) {\n    return values;\n  }\n\n  const paddedValues = values.slice();\n  paddedValues.length = inputs.length;\n  paddedValues.fill(undefined, values.length);\n  return paddedValues;\n};\n","/* eslint-disable no-restricted-globals */\n/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-nocheck\n\nconst findTypeByConcreteId = (types, id) => types.find((x) => x.concreteTypeId === id);\n\nconst findConcreteTypeById = (abi, id) => abi.concreteTypes.find((x) => x.concreteTypeId === id);\n\nfunction finsertTypeIdByConcreteTypeId(abi, types, id) {\n  const concreteType = findConcreteTypeById(abi, id);\n\n  if (concreteType.metadataTypeId !== undefined) {\n    return concreteType.metadataTypeId;\n  }\n\n  const type = findTypeByConcreteId(types, id);\n  if (type) {\n    return type.typeId;\n  }\n\n  types.push({\n    typeId: types.length,\n    type: concreteType.type,\n    components: parseComponents(concreteType.components),\n    concreteTypeId: id,\n    typeParameters: concreteType.typeParameters ?? null,\n    originalConcreteTypeId: concreteType?.concreteTypeId,\n  });\n\n  return types.length - 1;\n}\n\nfunction parseFunctionTypeArguments(abi, types, concreteType) {\n  return (\n    concreteType.typeArguments?.map((cTypeId) => {\n      const self = findConcreteTypeById(abi, cTypeId);\n      const type = !isNaN(cTypeId) ? cTypeId : finsertTypeIdByConcreteTypeId(abi, types, cTypeId);\n      return {\n        name: '',\n        type,\n        // originalTypeId: cTypeId,\n        typeArguments: parseFunctionTypeArguments(abi, types, self),\n      };\n    }) ?? null\n  );\n}\n\nexport function parseConcreteType(abi, types, concreteTypeId, name) {\n  const type = finsertTypeIdByConcreteTypeId(abi, types, concreteTypeId);\n  const concrete = findConcreteTypeById(abi, concreteTypeId);\n  return {\n    name: name ?? '',\n    type,\n    // concreteTypeId,\n    typeArguments: parseFunctionTypeArguments(abi, types, concrete),\n  };\n}\n\nfunction parseComponents(abi, types, components) {\n  return (\n    components?.map((component) => {\n      const { typeId, name, typeArguments } = component;\n      const type = !isNaN(typeId) ? typeId : finsertTypeIdByConcreteTypeId(abi, types, typeId);\n      return {\n        name,\n        type,\n        // originalTypeId: typeId,\n        typeArguments: parseComponents(abi, types, typeArguments),\n      };\n    }) ?? null\n  );\n}\n\n/**\n * This will transpile new ABIs (spec: \"1\") to the old format.\n *\n * The new format got these new props:\n *    - `specVersion`,\n *    - `concreteTypes`\n *    - `metadataTypes`\n *\n * The old format contains only:\n *    - `types`\n */\nexport function transpileAbi(abi) {\n  // do not transpile older versions\n  if (!abi.specVersion) {\n    return abi;\n  }\n\n  // 0. define empty types array\n  const types = [];\n\n  // 1. root level of metadata types\n  abi.metadataTypes.forEach((m) => {\n    const t = {\n      typeId: m.metadataTypeId,\n      type: m.type,\n      components: m.components ?? (m.type === '()' ? [] : null),\n      typeParameters: m.typeParameters ?? null,\n    };\n    types.push(t);\n  });\n\n  // 2. the metadata's components\n  types.forEach((t) => {\n    t.components = parseComponents(abi, types, t.components);\n  });\n\n  // 3. functions inputs/outputs\n  const functions = abi.functions.map((fn) => {\n    const inputs = fn.inputs.map(({ concreteTypeId, name }) =>\n      parseConcreteType(abi, types, concreteTypeId, name)\n    );\n    const output = parseConcreteType(abi, types, fn.output, '');\n    return { ...fn, inputs, output };\n  });\n\n  // 4. configurables\n  const configurables = abi.configurables.map((conf) => ({\n    name: conf.name,\n    configurableType: parseConcreteType(abi, types, conf.concreteTypeId),\n    offset: conf.offset,\n  }));\n\n  // 5. loggedTypes\n  const loggedTypes = abi.loggedTypes.map((log) => ({\n    logId: log.logId,\n    loggedType: parseConcreteType(abi, types, log.concreteTypeId),\n  }));\n\n  // transpiled ABI\n  const transpiled = {\n    encoding: abi.encodingVersion,\n    types,\n    functions,\n    loggedTypes,\n    messagesTypes: abi.messagesTypes,\n    configurables,\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return transpiled as any;\n}\n","import { FuelError } from '@fuel-ts/errors';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { sha256 } from '@noble/hashes/sha256';\n\nimport type { B256Address, EvmAddress, AssetId, ChecksumAddress } from './types';\nimport {\n  getRandomB256,\n  isPublicKey,\n  isB256,\n  isEvmAddress,\n  padFirst12BytesOfEvmAddress,\n  toB256AddressEvm,\n  normalizeB256,\n} from './utils';\n\n/**\n * `Address` provides a type safe wrapper for converting between different address formats\n * ands comparing them for equality.\n */\nexport class Address {\n  // #region address-2\n  readonly b256Address: B256Address;\n  // #endregion address-2\n\n  /**\n   * @param address - A B256 address\n   */\n  constructor(address: B256Address) {\n    if (!isB256(address)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${address}.`\n      );\n    }\n\n    this.b256Address = normalizeB256(address);\n  }\n\n  /**\n   * Takes an B256 Address and returns back an checksum address.\n   * The implementation follows the ERC-55 https://github.com/ethereum/ercs/blob/master/ERCS/erc-55.md.\n   *\n   * @returns A new `ChecksumAddress` instance\n   */\n  toChecksum(): ChecksumAddress {\n    return Address.toChecksum(this.b256Address);\n  }\n\n  /**\n   * Returns the `b256Address` property\n   */\n  toAddress(): B256Address {\n    return this.b256Address;\n  }\n\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toB256(): B256Address {\n    return this.b256Address;\n  }\n\n  /**\n   * Returns the B256 hash address as a Uint8Array\n   *\n   * @returns The B256 address as a Uint8Array\n   */\n  toBytes(): Uint8Array {\n    return arrayify(this.b256Address);\n  }\n\n  /**\n   * Returns the B256 hash address as a string\n   *\n   * @returns The B256 address\n   */\n  toHexString(): B256Address {\n    return this.toB256();\n  }\n\n  /**\n   * returns the address `checksum` as a string\n   *\n   * @returns The `b256Address` property as a string\n   */\n  toString(): string {\n    return this.toChecksum();\n  }\n\n  /**\n   * Converts and returns the `b256Address` property as a string\n   * @returns The `b256Address` property as a JSON string\n   */\n  toJSON(): string {\n    return this.b256Address;\n  }\n\n  /**\n   * Converts to an EVM address\n   *\n   * @returns an {@link EvmAddress | `EvmAddress`} representation of the address\n   */\n  toEvmAddress(): EvmAddress {\n    return {\n      bits: toB256AddressEvm(this.b256Address),\n    } as EvmAddress;\n  }\n\n  /**\n   * Wraps the B256 property and returns as an `AssetId`.\n   * @returns The B256 property as an {@link AssetId | `AssetId`}\n   */\n  toAssetId(): AssetId {\n    return {\n      bits: this.b256Address,\n    } as AssetId;\n  }\n\n  /**\n   * Wraps the B256 address `checksum` and returns it as a string\n   * @returns The B256 address `checksum` as a string\n   */\n  valueOf(): string {\n    return this.toChecksum();\n  }\n\n  /**\n   * Compares this the `b256Address` property to another for direct equality\n   * @param other - Another address to compare against\n   * @returns The equality of the comparison\n   */\n  equals(other: Address): boolean {\n    return this.toChecksum() === other.toChecksum();\n  }\n\n  /**\n   * Takes a Public Key, hashes it, and creates an `Address`\n   *\n   * @param publicKey - A wallets public key\n   * @returns A new `Address` instance\n   */\n  static fromPublicKey(publicKey: string): Address {\n    if (!isPublicKey(publicKey)) {\n      throw new FuelError(FuelError.CODES.INVALID_PUBLIC_KEY, `Invalid Public Key: ${publicKey}.`);\n    }\n\n    const b256Address = hexlify(sha256(arrayify(publicKey)));\n    return new Address(b256Address);\n  }\n\n  /**\n   * Takes a B256 Address and creates an `Address`\n   *\n   * @param b256Address - A b256 hash\n   * @returns A new `Address` instance\n   */\n  static fromB256(b256Address: string): Address {\n    if (!isB256(b256Address)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${b256Address}.`\n      );\n    }\n\n    return new Address(b256Address);\n  }\n\n  /**\n   * Creates an `Address` with a randomized `b256Address` property\n   *\n   * @returns A new `Address` instance\n   */\n  static fromRandom(): Address {\n    return this.fromB256(getRandomB256());\n  }\n\n  /**\n   * Takes an ambiguous string and attempts to create an `Address`\n   *\n   * @param address - An ambiguous string\n   * @returns A new `Address` instance\n   */\n  static fromString(address: string): Address {\n    return this.fromB256(address);\n  }\n\n  /**\n   * Takes an ambiguous string or address and creates an `Address`\n   *\n   * @returns a new `Address` instance\n   */\n  static fromAddressOrString(address: string | Address): Address {\n    return typeof address === 'string' ? this.fromString(address) : address;\n  }\n\n  /**\n   * Takes a dynamic string or `Address` and creates an `Address`\n   *\n   * @param addressId - A string containing B256, or Public Key\n   * @throws Error - Unknown address if the format is not recognised\n   * @returns A new `Address` instance\n   */\n  static fromDynamicInput(address: string | Address): Address {\n    // If address is a object than we assume it's a Address\n    // we don't check by instanceof because it's possible to\n    // the host app to have a different reference to this same class type\n    if (typeof address !== 'string' && 'toB256' in address) {\n      return Address.fromB256(address.toB256());\n    }\n    if (isPublicKey(address)) {\n      return Address.fromPublicKey(address);\n    }\n\n    if (isB256(address)) {\n      return Address.fromB256(address);\n    }\n\n    if (isEvmAddress(address)) {\n      return Address.fromEvmAddress(address);\n    }\n\n    throw new FuelError(\n      FuelError.CODES.PARSE_FAILED,\n      `Unknown address format: only 'B256', or 'Public Key (512)' are supported.`\n    );\n  }\n\n  /**\n   * Takes an Evm Address and returns back an `Address`\n   *\n   * @returns A new `Address` instance\n   */\n  static fromEvmAddress(evmAddress: string): Address {\n    if (!isEvmAddress(evmAddress)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_EVM_ADDRESS,\n        `Invalid Evm Address: ${evmAddress}.`\n      );\n    }\n\n    const paddedAddress = padFirst12BytesOfEvmAddress(evmAddress);\n    return new Address(paddedAddress);\n  }\n\n  /**\n   * Takes an ChecksumAddress and validates if it is a valid checksum address.\n   *\n   * @returns A `boolean` instance indicating if the address is valid.\n   */\n  static isChecksumValid(address: ChecksumAddress): boolean {\n    let addressParsed = address;\n\n    if (!address.startsWith('0x')) {\n      addressParsed = `0x${address}`;\n    }\n    if (addressParsed.trim().length !== 66) {\n      return false;\n    }\n\n    return Address.toChecksum(hexlify(addressParsed)) === addressParsed;\n  }\n\n  /** @hidden */\n  private static toChecksum(address: string) {\n    if (!isB256(address)) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_B256_ADDRESS,\n        `Invalid B256 Address: ${address}.`\n      );\n    }\n\n    const addressHex = hexlify(address).toLowerCase().slice(2);\n    const checksum = sha256(addressHex);\n\n    let ret = '0x';\n    for (let i = 0; i < 32; ++i) {\n      const byte = checksum[i];\n      const ha = addressHex.charAt(i * 2);\n      const hb = addressHex.charAt(i * 2 + 1);\n      ret += (byte & 0xf0) >= 0x80 ? ha.toUpperCase() : ha;\n      ret += (byte & 0x0f) >= 0x08 ? hb.toUpperCase() : hb;\n    }\n\n    return ret;\n  }\n}\n","import { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport { arrayify, concat, hexlify } from '@fuel-ts/utils';\n\nimport type { Address } from './address';\nimport type { AddressLike, ContractIdLike, B256Address, B256AddressEvm } from './types';\n\n/**\n * Determines if a given string is B256 format\n *\n * @hidden\n */\nexport function isB256(address: string): boolean {\n  return address.length === 66 && /(0x)[0-9a-f]{64}$/i.test(address);\n}\n\n/**\n * Determines if a given string is in Public Key format (512 bits)\n *\n * @hidden\n */\nexport function isPublicKey(address: string): boolean {\n  return address.length === 130 && /(0x)[0-9a-f]{128}$/i.test(address);\n}\n\n/**\n * Determines if a given string is in EVM Address format\n *\n * @hidden\n */\nexport function isEvmAddress(address: string): boolean {\n  return address.length === 42 && /(0x)[0-9a-f]{40}$/i.test(address);\n}\n\nexport function normalizeB256(address: B256Address): B256Address {\n  return address.toLowerCase();\n}\n\n/**\n * A simple type guard to check if an object is an Address\n *\n * @hidden\n */\nexport function isAddress(address: object): address is Address {\n  return 'b256Address' in address;\n}\n\n/**\n * Takes an indeterminate address type and returns an address\n *\n * @hidden\n */\nexport const addressify = (addressLike: AddressLike | ContractIdLike): Address => {\n  if (isAddress(addressLike)) {\n    return addressLike;\n  }\n\n  if ('address' in addressLike && isAddress(addressLike.address)) {\n    return addressLike.address;\n  }\n\n  if ('id' in addressLike && isAddress(addressLike.id)) {\n    return addressLike.id;\n  }\n\n  throw new FuelError(FuelError.CODES.INVALID_ADDRESS, 'Invalid address');\n};\n\n/**\n * @hidden\n */\nexport const getRandomB256 = () => hexlify(randomBytes(32));\n\n/**\n * Takes a B256 address and clears the first 12 bytes, this is required for an EVM Address\n *\n * @param b256 - the address to clear\n * @returns b256 with first 12 bytes cleared\n *\n * @hidden\n */\nexport const toB256AddressEvm = (b256: B256Address): B256AddressEvm => {\n  try {\n    if (!isB256(b256)) {\n      throw new FuelError(FuelError.CODES.INVALID_B256_ADDRESS, `Invalid B256 Address: ${b256}.`);\n    }\n\n    const evmBytes = arrayify(b256).slice(12);\n    const paddedBytes = new Uint8Array(12).fill(0);\n    return hexlify(concat([paddedBytes, evmBytes])) as B256AddressEvm;\n  } catch (error) {\n    throw new FuelError(\n      FuelError.CODES.PARSE_FAILED,\n      `Cannot generate EVM Address B256 from: ${b256}.`\n    );\n  }\n};\n\n/**\n * Pads the first 12 bytes of an Evm address. This is useful for padding addresses returned from\n * the EVM to interact with the Sway EVM Address Type.\n *\n * @param address - Evm address to be padded\n * @returns Evm address padded to a b256 address\n *\n * @hidden\n */\nexport const padFirst12BytesOfEvmAddress = (address: string): B256AddressEvm => {\n  if (!isEvmAddress(address)) {\n    throw new FuelError(FuelError.CODES.INVALID_EVM_ADDRESS, 'Invalid EVM address format.');\n  }\n\n  return address.replace('0x', '0x000000000000000000000000') as B256AddressEvm;\n};\n","/* eslint-disable max-classes-per-file */\nimport { Coder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, arrayify } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\n\nexport enum InputType {\n  Coin = 0,\n  Contract = 1,\n  Message = 2,\n}\n\nexport type InputCoin = {\n  type: InputType.Coin;\n\n  /** Hash of transaction (b256) */\n  txID: string;\n\n  /** Index of transaction output (u16) */\n  outputIndex: number;\n\n  /** Owning address or script hash (b256) */\n  owner: string;\n\n  /** Amount of coins (u64) */\n  amount: BN;\n\n  /** Asset ID of the coins (b256) */\n  assetId: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Index of witness that authorizes spending the coin (u16) */\n  witnessIndex: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of predicate, in instructions (u64) */\n  predicateLength: BN;\n\n  /** Length of predicate input data, in bytes (u64) */\n  predicateDataLength: BN;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputCoinCoder extends Coder<InputCoin, InputCoin> {\n  constructor() {\n    super('InputCoin', 'struct InputCoin', 0);\n  }\n\n  encode(value: InputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.owner));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateGasUsed));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateLength));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Coin,\n        txID,\n        outputIndex,\n        owner,\n        amount,\n        assetId,\n        txPointer,\n        witnessIndex,\n        predicateGasUsed,\n        predicateLength,\n        predicateDataLength,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputContract = {\n  type: InputType.Contract;\n\n  /** Hash of transaction (b256) */\n  txID: string;\n\n  /** Index of transaction output (u16) */\n  outputIndex: number;\n\n  /** Root of amount of coins owned by contract before transaction execution (b256) */\n  balanceRoot: string;\n\n  /** State root of contract before transaction execution (b256) */\n  stateRoot: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Contract ID (b256) */\n  contractID: string;\n};\n\nexport class InputContractCoder extends Coder<InputContract, InputContract> {\n  constructor() {\n    super('InputContract', 'struct InputContract', 0);\n  }\n\n  encode(value: InputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.txID));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new B256Coder().encode(value.contractID));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const txID = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractID = decoded;\n\n    return [\n      {\n        type: InputType.Contract,\n        txID,\n        outputIndex,\n        balanceRoot,\n        stateRoot,\n        txPointer,\n        contractID,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputMessage = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: string;\n\n  /** Address of recipient */\n  recipient: string;\n\n  /** Amount of coins */\n  amount: BN;\n\n  /** Unique nonce of message */\n  nonce: string;\n\n  /** Index of witness that authorizes message (u16) */\n  witnessIndex: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of data (u64) */\n  dataLength?: number;\n\n  /** Length of predicate, in instructions (u64) */\n  predicateLength: BN;\n\n  /** Length of predicate input data, in bytes (u64) */\n  predicateDataLength: BN;\n\n  /** data of message */\n  data?: string;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputMessageCoder extends Coder<InputMessage, InputMessage> {\n  constructor() {\n    super('InputMessage', 'struct InputMessage', 0);\n  }\n\n  static getMessageId(\n    value: Pick<InputMessage, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n  ): string {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(arrayify(value.data || '0x'));\n\n    return sha256(concat(parts));\n  }\n\n  static encodeData(messageData?: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData || '0x');\n    const dataLength = bytes.length;\n    return new ByteArrayCoder(dataLength).encode(bytes);\n  }\n\n  encode(value: InputMessage): Uint8Array {\n    const parts: Uint8Array[] = [];\n    const data = InputMessageCoder.encodeData(value.data);\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateGasUsed));\n    parts.push(new BigNumberCoder('u64').encode(data.length));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateLength));\n    parts.push(new BigNumberCoder('u64').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(data.length).encode(data));\n    parts.push(new ByteArrayCoder(value.predicateLength.toNumber()).encode(value.predicate));\n    parts.push(\n      new ByteArrayCoder(value.predicateDataLength.toNumber()).encode(value.predicateData)\n    );\n\n    return concat(parts);\n  }\n\n  static decodeData(messageData: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData);\n    const dataLength = bytes.length;\n    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);\n\n    return arrayify(data);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputMessage, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const messageData = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength.toNumber()).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength.toNumber()).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Message,\n        sender,\n        recipient,\n        amount,\n        witnessIndex,\n        nonce,\n        predicateGasUsed,\n        dataLength,\n        predicateLength,\n        predicateDataLength,\n        data: messageData,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Input = InputCoin | InputContract | InputMessage;\n\nexport class InputCoder extends Coder<Input, Input> {\n  constructor() {\n    super('Input', 'struct Input', 0);\n  }\n\n  encode(value: Input): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.type));\n\n    const { type } = value;\n\n    switch (type) {\n      case InputType.Coin: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case InputType.Contract: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      case InputType.Message: {\n        parts.push(new InputMessageCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Input, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as InputType;\n    switch (type) {\n      case InputType.Coin: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Contract: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Message: {\n        [decoded, o] = new InputMessageCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_INPUT,\n          `Invalid transaction input type: ${type}.`\n        );\n      }\n    }\n  }\n}\n","import { Coder } from '@fuel-ts/abi-coder';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, hexlify, arrayify } from '@fuel-ts/utils';\n\nexport class ByteArrayCoder extends Coder<BytesLike, string> {\n  length: number;\n  #paddingLength: number;\n\n  constructor(length: number) {\n    const paddingLength = (8 - (length % 8)) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      'ByteArray',\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n\n  encode(value: BytesLike): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    const data = arrayify(value);\n    parts.push(data);\n    // Write padding\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    // Read padding\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n\n    return [value, o];\n  }\n}\n","import { NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nexport type TxPointer = {\n  /** Block height (u32) */\n  blockHeight: number;\n\n  /** Transaction index (u16) */\n  txIndex: number;\n};\n\nexport class TxPointerCoder extends StructCoder<{\n  blockHeight: NumberCoder;\n  txIndex: NumberCoder;\n}> {\n  constructor() {\n    super('TxPointer', {\n      blockHeight: new NumberCoder('u32', { padToWordSize: true }),\n      txIndex: new NumberCoder('u16', { padToWordSize: true }),\n    });\n  }\n\n  public static decodeFromGqlScalar(value: string) {\n    // taken from https://github.com/FuelLabs/fuel-vm/blob/7366db6955589cb3444c9b2bb46e45c8539f19f5/fuel-tx/src/tx_pointer.rs#L87\n    if (value.length !== 12) {\n      throw new FuelError(\n        ErrorCode.DECODE_ERROR,\n        `Invalid TxPointer scalar string length ${value.length}. It must have length 12.`\n      );\n    }\n    const [blockHeight, txIndex] = [value.substring(0, 8), value.substring(8)];\n    return {\n      blockHeight: parseInt(blockHeight, 16),\n      txIndex: parseInt(txIndex, 16),\n    };\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { Coder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\nexport enum OutputType /* u8 */ {\n  Coin = 0,\n  Contract = 1,\n  Change = 2,\n  Variable = 3,\n  ContractCreated = 4,\n}\n\nexport type OutputCoin = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputCoinCoder extends Coder<OutputCoin, OutputCoin> {\n  constructor() {\n    super('OutputCoin', 'struct OutputCoin', 0);\n  }\n\n  encode(value: OutputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Coin,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContract = {\n  type: OutputType.Contract;\n  /** Index of input contract (u8) */\n  inputIndex: number;\n  /** Root of amount of coins owned by contract after transaction execution (b256) */\n  balanceRoot: string;\n  /** State root of contract after transaction execution (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCoder extends Coder<OutputContract, OutputContract> {\n  constructor() {\n    super('OutputContract', 'struct OutputContract', 0);\n  }\n\n  encode(value: OutputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.inputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.Contract,\n        inputIndex,\n        balanceRoot,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputChange = {\n  type: OutputType.Change;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputChangeCoder extends Coder<OutputChange, OutputChange> {\n  constructor() {\n    super('OutputChange', 'struct OutputChange', 0);\n  }\n\n  encode(value: OutputChange): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputChange, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Change,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputVariable = {\n  type: OutputType.Variable;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputVariableCoder extends Coder<OutputVariable, OutputVariable> {\n  constructor() {\n    super('OutputVariable', 'struct OutputVariable', 0);\n  }\n\n  encode(value: OutputVariable): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new BigNumberCoder('u64').encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputVariable, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Variable,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContractCreated = {\n  type: OutputType.ContractCreated;\n  /** Contract ID (b256) */\n  contractId: string;\n  /** State root of contract (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCreatedCoder extends Coder<\n  OutputContractCreated,\n  OutputContractCreated\n> {\n  constructor() {\n    super('OutputContractCreated', 'struct OutputContractCreated', 0);\n  }\n\n  encode(value: OutputContractCreated): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContractCreated, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.ContractCreated,\n        contractId,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Output =\n  | OutputCoin\n  | OutputContract\n  | OutputChange\n  | OutputVariable\n  | OutputContractCreated;\n\nexport class OutputCoder extends Coder<Output, Output> {\n  constructor() {\n    super('Output', ' struct Output', 0);\n  }\n\n  encode(value: Output): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.type));\n\n    const { type } = value;\n\n    switch (type) {\n      case OutputType.Coin: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case OutputType.Contract: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case OutputType.Change: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case OutputType.Variable: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case OutputType.ContractCreated: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Output, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as OutputType;\n    switch (type) {\n      case OutputType.Coin: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Contract: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Change: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Variable: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.ContractCreated: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSACTION_OUTPUT,\n          `Invalid transaction output type: ${type}.`\n        );\n      }\n    }\n  }\n}\n","import { BigNumberCoder, Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\n// Bitfield of used policy types.\nexport enum PolicyType {\n  Tip = 1,\n  WitnessLimit = 2,\n  Maturity = 4,\n  MaxFee = 8,\n}\n\nexport type Policy = PolicyTip | PolicyWitnessLimit | PolicyMaturity | PolicyMaxFee;\n\nexport type PolicyTip = {\n  type: PolicyType.Tip;\n  data: BN;\n};\n\nexport type PolicyWitnessLimit = {\n  type: PolicyType.WitnessLimit;\n  data: BN;\n};\n\nexport type PolicyMaturity = {\n  type: PolicyType.Maturity;\n  data: number;\n};\n\nexport type PolicyMaxFee = {\n  type: PolicyType.MaxFee;\n  data: BN;\n};\n\nexport const sortPolicies = (policies: Policy[]): Policy[] =>\n  policies.sort((a, b) => a.type - b.type);\n\nfunction validateDuplicatedPolicies(policies: Policy[]): void {\n  const seenTypes = new Set<PolicyType>();\n\n  policies.forEach((policy) => {\n    if (seenTypes.has(policy.type)) {\n      throw new FuelError(\n        ErrorCode.DUPLICATED_POLICY,\n        `Duplicate policy type found: ${PolicyType.MaxFee}`\n      );\n    }\n    seenTypes.add(policy.type);\n  });\n}\n\nexport class PoliciesCoder extends Coder<Policy[], Policy[]> {\n  constructor() {\n    super('Policies', 'array Policy', 0);\n  }\n\n  encode(policies: Policy[]): Uint8Array {\n    validateDuplicatedPolicies(policies);\n    const sortedPolicies = sortPolicies(policies);\n\n    const parts: Uint8Array[] = [];\n\n    sortedPolicies.forEach(({ data, type }) => {\n      switch (type) {\n        case PolicyType.MaxFee:\n        case PolicyType.Tip:\n        case PolicyType.WitnessLimit:\n          parts.push(new BigNumberCoder('u64').encode(data));\n          break;\n\n        case PolicyType.Maturity:\n          parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(data));\n          break;\n\n        default: {\n          throw new FuelError(ErrorCode.INVALID_POLICY_TYPE, `Invalid policy type: ${type}`);\n        }\n      }\n    });\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number, policyTypes: number): [Policy[], number] {\n    let o = offset;\n    const policies: Policy[] = [];\n\n    if (policyTypes & PolicyType.Tip) {\n      const [tip, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.Tip, data: tip });\n    }\n\n    if (policyTypes & PolicyType.WitnessLimit) {\n      const [witnessLimit, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.WitnessLimit, data: witnessLimit });\n    }\n\n    if (policyTypes & PolicyType.Maturity) {\n      const [maturity, nextOffset] = new NumberCoder('u32', { padToWordSize: true }).decode(\n        data,\n        o\n      );\n      o = nextOffset;\n      policies.push({ type: PolicyType.Maturity, data: maturity });\n    }\n\n    if (policyTypes & PolicyType.MaxFee) {\n      const [maxFee, nextOffset] = new BigNumberCoder('u64').decode(data, o);\n      o = nextOffset;\n      policies.push({ type: PolicyType.MaxFee, data: maxFee });\n    }\n\n    return [policies, o];\n  }\n}\n","import { BigNumberCoder } from '@fuel-ts/abi-coder';\nimport type { AssetId } from '@fuel-ts/address';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './coders/byte-array';\n\nexport enum ReceiptType /* u8 */ {\n  Call = 0,\n  Return = 1,\n  ReturnData = 2,\n  Panic = 3,\n  Revert = 4,\n  Log = 5,\n  LogData = 6,\n  Transfer = 7,\n  TransferOut = 8,\n  ScriptResult = 9,\n  MessageOut = 10,\n  Mint = 11,\n  Burn = 12,\n}\n\nexport type ReceiptCall = {\n  type: ReceiptType.Call;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Contract ID of called contract (b256) */\n  to: string;\n  /** Amount of coins to forward, i.e. $rB (u64) */\n  amount: BN;\n  /** Asset ID of coins to forward, i.e. MEM[$rC, 32] (b256) */\n  assetId: string;\n  /** Gas to forward, i.e. $rD (u64) */\n  gas: BN;\n  /** First parameter (u64) */\n  param1: BN;\n  /** Second parameter (u64) */\n  param2: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptReturn = {\n  type: ReceiptType.Return;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptReturnData = {\n  type: ReceiptType.ReturnData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ptr: BN;\n  /** Value of register $rB (u64) */\n  len: BN;\n  /** Hash of MEM[$rA, $rB] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of the memory range MEM[$rA, $rB]. */\n  data: string;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptPanic = {\n  type: ReceiptType.Panic;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Panic reason (u64) */\n  reason: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n  /** Value of optional contract ID */\n  contractId: string;\n};\n\nexport type ReceiptRevert = {\n  type: ReceiptType.Revert;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptLog = {\n  type: ReceiptType.Log;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ra: BN;\n  /** Value of register $rB (u64) */\n  rb: BN;\n  /** Value of register $rC (u64) */\n  rc: BN;\n  /** Value of register $rD (u64) */\n  rd: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptLogData = {\n  type: ReceiptType.LogData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ra: BN;\n  /** Value of register $rB (u64) */\n  rb: BN;\n  /** Value of register $rC (u64) */\n  ptr: BN;\n  /** Value of register $rD (u64) */\n  len: BN;\n  /** Hash of MEM[$rC, $rD] (b256) */\n  digest: string;\n  /** Value of the memory range MEM[$rC, $rD]. */\n  data: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptTransfer = {\n  type: ReceiptType.Transfer;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Contract ID of contract to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptTransferOut = {\n  type: ReceiptType.TransferOut;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Address to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptScriptResult = {\n  type: ReceiptType.ScriptResult;\n  /** Result variant with embedded `PanicReason` in first 8 bits and `instr` (u64) */\n  result: BN;\n  /** Gas consumed by the script (u64) */\n  gasUsed: BN;\n};\n\nexport type ReceiptMessageOut = {\n  type: ReceiptType.MessageOut;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message ID */\n  messageId: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message sender: MEM[$fp, 32] */\n  sender: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message recipient: MEM[$rA, 32] */\n  recipient: string;\n  /** Hexadecimal string representation of a 64-bit unsigned integer; value of register $rD */\n  amount: BN;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message nonce */\n  nonce: string;\n  /** Decimal string representation of a 16-bit unsigned integer; value of register $rC. */\n  len: number;\n  /** Hexadecimal string representation of 256-bit (32-byte), hash of MEM[$rA + 32, $rB] */\n  digest: string;\n  /** Hexadecimal string representation of the value of the memory range MEM[$rA + 32, $rB] */\n  data: Uint8Array;\n};\n\nexport type ReceiptMint = {\n  type: ReceiptType.Mint;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type ReceiptBurn = {\n  type: ReceiptType.Burn;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport type Receipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | ReceiptReturnData\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | ReceiptLogData\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | ReceiptMint\n  | ReceiptBurn;\n\nexport const getMintedAssetId = (contractId: string, subId: string): string => {\n  const contractIdBytes = arrayify(contractId);\n  const subIdBytes = arrayify(subId);\n\n  return sha256(concat([contractIdBytes, subIdBytes]));\n};\n\nexport const createAssetId = (contractId: string, subId: string): AssetId => ({\n  bits: getMintedAssetId(contractId, subId),\n});\n\nexport const getMessageId = (\n  value: Pick<ReceiptMessageOut, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n): string => {\n  const parts: Uint8Array[] = [];\n\n  parts.push(new ByteArrayCoder(32).encode(value.sender));\n  parts.push(new ByteArrayCoder(32).encode(value.recipient));\n  parts.push(new ByteArrayCoder(32).encode(value.nonce));\n  parts.push(new BigNumberCoder('u64').encode(value.amount));\n  parts.push(arrayify(value.data || '0x'));\n\n  return sha256(concat(parts));\n};\n","import { B256Coder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type StorageSlot = {\n  /** Key (b256) */\n  key: string;\n  /** Value (b256) */\n  value: string;\n};\n\nexport class StorageSlotCoder extends StructCoder<{\n  key: B256Coder;\n  value: B256Coder;\n}> {\n  constructor() {\n    super('StorageSlot', {\n      key: new B256Coder(),\n      value: new B256Coder(),\n    });\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { Coder, ArrayCoder, B256Coder, NumberCoder, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { type BN } from '@fuel-ts/math';\nimport { concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { Input, InputContract } from './input';\nimport { InputCoder, InputContractCoder } from './input';\nimport type { Output, OutputContract } from './output';\nimport { OutputCoder, OutputContractCoder } from './output';\nimport type { Policy } from './policy';\nimport { PoliciesCoder } from './policy';\nimport { StorageSlotCoder } from './storage-slot';\nimport type { StorageSlot } from './storage-slot';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\nimport { UpgradePurposeCoder, type UpgradePurpose } from './upgrade-purpose';\nimport type { Witness } from './witness';\nimport { WitnessCoder } from './witness';\n\nexport enum TransactionType /* u8 */ {\n  Script = 0,\n  Create = 1,\n  Mint = 2,\n  Upgrade = 3,\n  Upload = 4,\n  Blob = 5,\n}\n\n/** @hidden */\nexport type BaseTransactionType = {\n  /** The type of the transaction */\n  type: TransactionType;\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n\n  /** Number of witnesses (u16) */\n  witnessesCount: number;\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n\n  /** List of policies. */\n  policies: Policy[];\n\n  /** Bitfield of used policy types (u32) */\n  policyTypes: number;\n\n  /** Number of inputs (u16) */\n  inputsCount: number;\n\n  /** Number of outputs (u16) */\n  outputsCount: number;\n};\n\nexport type TransactionScript = BaseTransactionType & {\n  type: TransactionType.Script;\n\n  /** Gas limit for transaction (u64) */\n  scriptGasLimit: BN;\n\n  /** Merkle root of receipts (b256) */\n  receiptsRoot: string;\n\n  /** Script length, in instructions (u64) */\n  scriptLength: BN;\n\n  /** Length of script input data, in bytes (u64) */\n  scriptDataLength: BN;\n\n  /** Script to execute (byte[]) */\n  script: string;\n\n  /** Script input data (parameters) (byte[]) */\n  scriptData: string;\n};\n\nexport class TransactionScriptCoder extends Coder<TransactionScript, TransactionScript> {\n  constructor() {\n    super('TransactionScript', 'struct TransactionScript', 0);\n  }\n\n  encode(value: TransactionScript): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new BigNumberCoder('u64').encode(value.scriptGasLimit));\n    parts.push(new B256Coder().encode(value.receiptsRoot));\n    parts.push(new BigNumberCoder('u64').encode(value.scriptLength));\n    parts.push(new BigNumberCoder('u64').encode(value.scriptDataLength));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ByteArrayCoder(value.scriptLength.toNumber()).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength.toNumber()).encode(value.scriptData));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionScript, number] {\n    let decoded;\n    let o = offset;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptGasLimit = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptLength = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const scriptDataLength = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength.toNumber()).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength.toNumber()).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Script,\n        scriptGasLimit,\n        scriptLength,\n        scriptDataLength,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionCreate = BaseTransactionType & {\n  type: TransactionType.Create;\n\n  /** Witness index of contract bytecode to create (u8) */\n  bytecodeWitnessIndex: number;\n\n  /** Salt (b256) */\n  salt: string;\n\n  /** Number of storage slots to initialize (u16) */\n  storageSlotsCount: BN;\n\n  /** List of inputs (StorageSlot[]) */\n  storageSlots: StorageSlot[];\n};\n\nexport class TransactionCreateCoder extends Coder<TransactionCreate, TransactionCreate> {\n  constructor() {\n    super('TransactionCreate', 'struct TransactionCreate', 0);\n  }\n\n  encode(value: TransactionCreate): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.bytecodeWitnessIndex));\n    parts.push(new B256Coder().encode(value.salt));\n    parts.push(new BigNumberCoder('u64').encode(value.storageSlotsCount));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(\n      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount.toNumber()).encode(\n        value.storageSlots\n      )\n    );\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionCreate, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const bytecodeWitnessIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const storageSlotsCount = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount.toNumber()).decode(\n      data,\n      o\n    );\n    const storageSlots = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Create,\n        bytecodeWitnessIndex,\n        policyTypes,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        policies,\n        storageSlots,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionMint = {\n  type: TransactionType.Mint;\n\n  /** The location of the Mint transaction in the block. */\n  txPointer: TxPointer;\n\n  /** The contract utxo that assets are minted to. */\n  inputContract: InputContract;\n\n  /** The contract utxo that assets are being minted to. */\n  outputContract: OutputContract;\n\n  /** The amount of funds minted. */\n  mintAmount: BN;\n\n  /** The asset ID corresponding to the minted amount. */\n  mintAssetId: string;\n\n  gasPrice: BN;\n};\n\nexport class TransactionMintCoder extends Coder<TransactionMint, TransactionMint> {\n  constructor() {\n    super('TransactionMint', 'struct TransactionMint', 0);\n  }\n\n  encode(value: TransactionMint): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new InputContractCoder().encode(value.inputContract));\n    parts.push(new OutputContractCoder().encode(value.outputContract));\n    parts.push(new BigNumberCoder('u64').encode(value.mintAmount));\n    parts.push(new B256Coder().encode(value.mintAssetId));\n    parts.push(new BigNumberCoder('u64').encode(value.gasPrice));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionMint, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new InputContractCoder().decode(data, o);\n    const inputContract = decoded;\n    [decoded, o] = new OutputContractCoder().decode(data, o);\n    const outputContract = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const mintAmount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const mintAssetId = decoded;\n    [decoded, o] = new BigNumberCoder('u64').decode(data, o);\n    const gasPrice = decoded;\n\n    return [\n      {\n        type: TransactionType.Mint,\n        txPointer,\n        inputContract,\n        outputContract,\n        mintAmount,\n        mintAssetId,\n        gasPrice,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionUpgrade = BaseTransactionType & {\n  type: TransactionType.Upgrade;\n\n  /** The purpose of the upgrade. */\n  upgradePurpose: UpgradePurpose;\n};\n\nexport class TransactionUpgradeCoder extends Coder<TransactionUpgrade, TransactionUpgrade> {\n  constructor() {\n    super('TransactionUpgrade', 'struct TransactionUpgrade', 0);\n  }\n\n  encode(value: TransactionUpgrade): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new UpgradePurposeCoder().encode(value.upgradePurpose));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionUpgrade, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new UpgradePurposeCoder().decode(data, o);\n    const upgradePurpose = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Upgrade,\n        upgradePurpose,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionUpload = BaseTransactionType & {\n  type: TransactionType.Upload;\n\n  /** The root of the Merkle tree is created over the bytecode. (b256) */\n  root: string;\n\n  /** Index of witness that authorizes spending the coin (u16) */\n  witnessIndex: number;\n\n  /** The index of the subsection of the bytecode. (u16) */\n  subsectionIndex: number;\n\n  /** The total number of subsections on which bytecode was divided. (u16) */\n  subsectionsNumber: number;\n\n  /** Number of Merkle nodes in the proof. (u16) */\n  proofSetCount: number;\n\n  /** List of proof nodes (b256[]) */\n  proofSet: string[];\n};\n\nexport class TransactionUploadCoder extends Coder<TransactionUpload, TransactionUpload> {\n  constructor() {\n    super('TransactionUpload', 'struct TransactionUpload', 0);\n  }\n\n  encode(value: TransactionUpload): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.root));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.subsectionIndex));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.subsectionsNumber));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.proofSetCount));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new ArrayCoder(new B256Coder(), value.proofSetCount).encode(value.proofSet));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionUpload, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const root = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const subsectionIndex = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const subsectionsNumber = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const proofSetCount = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new ArrayCoder(new B256Coder(), proofSetCount).decode(data, o);\n    const proofSet = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Upload,\n        root,\n        witnessIndex,\n        subsectionIndex,\n        subsectionsNumber,\n        proofSetCount,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        proofSet,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionBlob = BaseTransactionType & {\n  type: TransactionType.Blob;\n\n  /** Hash of the bytecode. (b256) */\n  blobId: string;\n\n  /** Witness index of contract bytecode (u16) */\n  witnessIndex: number;\n};\n\nexport class TransactionBlobCoder extends Coder<TransactionBlob, TransactionBlob> {\n  constructor() {\n    super('TransactionBlob', 'struct TransactionBlob', 0);\n  }\n\n  encode(value: TransactionBlob): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.blobId));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessIndex));\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.policyTypes));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.inputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.outputsCount));\n    parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(value.witnessesCount));\n    parts.push(new PoliciesCoder().encode(value.policies));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionBlob, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const blobId = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessIndex = decoded;\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const policyTypes = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new PoliciesCoder().decode(data, o, policyTypes);\n    const policies = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Blob,\n        blobId,\n        witnessIndex,\n        policyTypes,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        policies,\n        inputs,\n        outputs,\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\ntype PossibleTransactions =\n  | TransactionScript\n  | TransactionCreate\n  | TransactionMint\n  | TransactionUpgrade\n  | TransactionUpload\n  | TransactionBlob;\n\nexport type Transaction<TTransactionType = void> = TTransactionType extends TransactionType\n  ? Extract<PossibleTransactions, { type: TTransactionType }>\n  : Partial<Omit<TransactionScript, 'type'>> &\n      Partial<Omit<TransactionCreate, 'type'>> &\n      Partial<Omit<TransactionMint, 'type'>> &\n      Partial<Omit<TransactionUpgrade, 'type'>> &\n      Partial<Omit<TransactionUpload, 'type'>> &\n      Partial<Omit<TransactionBlob, 'type'>> & {\n        type: TransactionType;\n      };\n\nexport class TransactionCoder extends Coder<Transaction, Transaction> {\n  constructor() {\n    super('Transaction', 'struct Transaction', 0);\n  }\n\n  encode(value: Transaction): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(value.type));\n\n    const { type } = value;\n\n    switch (value.type) {\n      case TransactionType.Script: {\n        parts.push(\n          new TransactionScriptCoder().encode(value as Transaction<TransactionType.Script>)\n        );\n        break;\n      }\n      case TransactionType.Create: {\n        parts.push(\n          new TransactionCreateCoder().encode(value as Transaction<TransactionType.Create>)\n        );\n        break;\n      }\n      case TransactionType.Mint: {\n        parts.push(new TransactionMintCoder().encode(value as Transaction<TransactionType.Mint>));\n        break;\n      }\n      case TransactionType.Upgrade: {\n        parts.push(\n          new TransactionUpgradeCoder().encode(value as Transaction<TransactionType.Upgrade>)\n        );\n        break;\n      }\n      case TransactionType.Upload: {\n        parts.push(\n          new TransactionUploadCoder().encode(value as Transaction<TransactionType.Upload>)\n        );\n        break;\n      }\n      case TransactionType.Blob: {\n        parts.push(new TransactionBlobCoder().encode(value as Transaction<TransactionType.Blob>));\n        break;\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Transaction, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as TransactionType;\n\n    switch (type) {\n      case TransactionType.Script: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Create: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Mint: {\n        [decoded, o] = new TransactionMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Upgrade: {\n        [decoded, o] = new TransactionUpgradeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Upload: {\n        [decoded, o] = new TransactionUploadCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Blob: {\n        [decoded, o] = new TransactionBlobCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n}\n","import { B256Coder, Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { concat } from '@fuel-ts/utils';\n\nexport enum UpgradePurposeTypeEnum {\n  ConsensusParameters = 0,\n  StateTransition = 1,\n}\n\nexport type UpgradePurpose =\n  | {\n      type: UpgradePurposeTypeEnum.ConsensusParameters;\n      data: ConsensusParameters;\n    }\n  | {\n      type: UpgradePurposeTypeEnum.StateTransition;\n      data: StateTransition;\n    };\n\nexport interface ConsensusParameters {\n  /** Index of witness that contains a serialized(with postcard) consensus parameters. (u16) */\n  witnessIndex: number;\n\n  /** The hash of the serialized consensus parameters. */\n  checksum: string;\n}\n\nexport interface StateTransition {\n  /** The root of the new bytecode of the state transition function. */\n  bytecodeRoot: string;\n}\n\nexport class UpgradePurposeCoder extends Coder<UpgradePurpose, UpgradePurpose> {\n  constructor() {\n    super('UpgradePurpose', 'UpgradePurpose', 0);\n  }\n\n  encode(upgradePurposeType: UpgradePurpose): Uint8Array {\n    const parts: Uint8Array[] = [];\n    const { type } = upgradePurposeType;\n\n    parts.push(new NumberCoder('u8', { padToWordSize: true }).encode(type));\n\n    switch (type) {\n      case UpgradePurposeTypeEnum.ConsensusParameters: {\n        const data = upgradePurposeType.data as ConsensusParameters;\n\n        parts.push(new NumberCoder('u16', { padToWordSize: true }).encode(data.witnessIndex));\n        parts.push(new B256Coder().encode(data.checksum));\n        break;\n      }\n\n      case UpgradePurposeTypeEnum.StateTransition: {\n        const data = upgradePurposeType.data as StateTransition;\n\n        parts.push(new B256Coder().encode(data.bytecodeRoot));\n        break;\n      }\n\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [UpgradePurpose, number] {\n    let o = offset;\n    let decoded;\n\n    [decoded, o] = new NumberCoder('u8', { padToWordSize: true }).decode(data, o);\n    const type = decoded as UpgradePurposeTypeEnum;\n\n    switch (type) {\n      case UpgradePurposeTypeEnum.ConsensusParameters: {\n        [decoded, o] = new NumberCoder('u16', { padToWordSize: true }).decode(data, o);\n        const witnessIndex = decoded;\n        [decoded, o] = new B256Coder().decode(data, o);\n        const checksum = decoded;\n\n        return [{ type, data: { witnessIndex, checksum } }, o];\n      }\n\n      case UpgradePurposeTypeEnum.StateTransition: {\n        [decoded, o] = new B256Coder().decode(data, o);\n        const bytecodeRoot = decoded;\n\n        return [{ type, data: { bytecodeRoot } }, o];\n      }\n\n      default: {\n        throw new FuelError(\n          ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n          `Unsupported transaction type: ${type}`\n        );\n      }\n    }\n  }\n}\n","import { Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport { concat } from '@fuel-ts/utils';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport type Witness = {\n  /** Length of witness data byte array */\n  dataLength: number;\n  /** Witness data (byte[]) */\n  data: string;\n};\n\nexport class WitnessCoder extends Coder<Witness, Witness> {\n  constructor() {\n    super(\n      'Witness',\n      // Types of dynamic length are not supported in the ABI\n      'unknown',\n      0\n    );\n  }\n\n  encode(value: Witness): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u32', { padToWordSize: true }).encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Witness, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u32', { padToWordSize: true }).decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n\n    return [\n      {\n        dataLength,\n        data: witnessData,\n      },\n      o,\n    ];\n  }\n}\n","import { B256Coder, NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type UtxoId = {\n  /** Transaction ID (b256) */\n  transactionId: string;\n  /** Output index (u8) */\n  outputIndex: number;\n};\n\nexport class UtxoIdCoder extends StructCoder<{\n  transactionId: B256Coder;\n  outputIndex: NumberCoder;\n}> {\n  constructor() {\n    super('UtxoId', {\n      transactionId: new B256Coder(),\n      outputIndex: new NumberCoder('u16', { padToWordSize: true }),\n    });\n  }\n}\n","export default function _isPlaceholder(a) {\n  return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n}","import _isPlaceholder from \"./_isPlaceholder.js\";\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nexport default function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n}","import _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig * -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n *      R.type(() => {}); //=> \"Function\"\n *      R.type(async () => {}); //=> \"AsyncFunction\"\n *      R.type(undefined); //=> \"Undefined\"\n *      R.type(BigInt(123)); //=> \"BigInt\"\n */\nvar type = /*#__PURE__*/_curry1(function type(val) {\n  return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n});\nexport default type;","export default function _cloneRegExp(pattern) {\n  return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : '') + (pattern.dotAll ? 's' : ''));\n}","import _cloneRegExp from \"./_cloneRegExp.js\";\nimport type from \"../type.js\";\n\n/**\n * Copies an object.\n *\n * @private\n * @param {*} value The value to be copied\n * @param {Boolean} deep Whether or not to perform deep cloning.\n * @return {*} The copied value.\n */\nexport default function _clone(value, deep, map) {\n  map || (map = new _ObjectMap());\n\n  // this avoids the slower switch with a quick if decision removing some milliseconds in each run.\n  if (_isPrimitive(value)) {\n    return value;\n  }\n  var copy = function copy(copiedValue) {\n    // Check for circular and same references on the object graph and return its corresponding clone.\n    var cachedCopy = map.get(value);\n    if (cachedCopy) {\n      return cachedCopy;\n    }\n    map.set(value, copiedValue);\n    for (var key in value) {\n      if (Object.prototype.hasOwnProperty.call(value, key)) {\n        copiedValue[key] = deep ? _clone(value[key], true, map) : value[key];\n      }\n    }\n    return copiedValue;\n  };\n  switch (type(value)) {\n    case 'Object':\n      return copy(Object.create(Object.getPrototypeOf(value)));\n    case 'Array':\n      return copy(Array(value.length));\n    case 'Date':\n      return new Date(value.valueOf());\n    case 'RegExp':\n      return _cloneRegExp(value);\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'BigInt64Array':\n    case 'BigUint64Array':\n      return value.slice();\n    default:\n      return value;\n  }\n}\nfunction _isPrimitive(param) {\n  var type = typeof param;\n  return param == null || type != 'object' && type != 'function';\n}\nvar _ObjectMap = /*#__PURE__*/function () {\n  function _ObjectMap() {\n    this.map = {};\n    this.length = 0;\n  }\n  _ObjectMap.prototype.set = function (key, value) {\n    var hashedKey = this.hash(key);\n    var bucket = this.map[hashedKey];\n    if (!bucket) {\n      this.map[hashedKey] = bucket = [];\n    }\n    bucket.push([key, value]);\n    this.length += 1;\n  };\n  _ObjectMap.prototype.hash = function (key) {\n    var hashedKey = [];\n    for (var value in key) {\n      hashedKey.push(Object.prototype.toString.call(key[value]));\n    }\n    return hashedKey.join();\n  };\n  _ObjectMap.prototype.get = function (key) {\n    /**\n     * depending on the number of objects to be cloned is faster to just iterate over the items in the map just because the hash function is so costly,\n     * on my tests this number is 180, anything above that using the hash function is faster.\n     */\n    if (this.length <= 180) {\n      for (var p in this.map) {\n        var bucket = this.map[p];\n        for (var i = 0; i < bucket.length; i += 1) {\n          var element = bucket[i];\n          if (element[0] === key) {\n            return element[1];\n          }\n        }\n      }\n      return;\n    }\n    var hashedKey = this.hash(key);\n    var bucket = this.map[hashedKey];\n    if (!bucket) {\n      return;\n    }\n    for (var i = 0; i < bucket.length; i += 1) {\n      var element = bucket[i];\n      if (element[0] === key) {\n        return element[1];\n      }\n    }\n  };\n  return _ObjectMap;\n}();","import _clone from \"./internal/_clone.js\";\nimport _curry1 from \"./internal/_curry1.js\";\n\n/**\n * Creates a deep copy of the source that can be used in place of the source\n * object without retaining any references to it.\n * The source object may contain (nested) `Array`s and `Object`s,\n * `Number`s, `String`s, `Boolean`s and `Date`s.\n * `Function`s are assigned by reference rather than copied.\n *\n * Dispatches to a `clone` method if present.\n *\n * Note that if the source object has multiple nodes that share a reference,\n * the returned object will have the same structure, but the references will\n * be pointed to the location within the cloned value.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {*} -> {*}\n * @param {*} value The object or array to clone\n * @return {*} A deeply cloned copy of `val`\n * @example\n *\n *      const objects = [{}, {}, {}];\n *      const objectsClone = R.clone(objects);\n *      objects === objectsClone; //=> false\n *      objects[0] === objectsClone[0]; //=> false\n */\nvar clone = /*#__PURE__*/_curry1(function clone(value) {\n  return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, true);\n});\nexport default clone;","import type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinQuantityLike =\n  | [amount: BigNumberish, assetId: BytesLike, max?: BigNumberish]\n  | { amount: BigNumberish; assetId: BytesLike; max?: BigNumberish };\nexport type CoinQuantity = { amount: BN; assetId: string; max?: BN };\n\n/** @hidden */\nexport const coinQuantityfy = (coinQuantityLike: CoinQuantityLike): CoinQuantity => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? undefined;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? undefined;\n  }\n\n  const bnAmount = bn(amount);\n  return {\n    assetId: hexlify(assetId),\n    amount: bnAmount.lt(1) ? bn(1) : bnAmount,\n    max: max ? bn(max) : undefined,\n  };\n};\n\nexport interface IAddAmountToAssetParams {\n  assetId: string;\n  amount: BN;\n  coinQuantities: CoinQuantity[];\n}\n\nexport const addAmountToCoinQuantities = (params: IAddAmountToAssetParams): CoinQuantity[] => {\n  const { amount, assetId } = params;\n\n  const coinQuantities = [...params.coinQuantities];\n\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n\n  return coinQuantities;\n};\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return (\n    a instanceof Uint8Array ||\n    (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')\n  );\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean')\n    throw new Error(`${title} must be valid boolean, got \"${value}\".`);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 } as const;\nfunction asciiToBase16(char: number): number | undefined {\n  if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;\n  if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);\n  if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array) {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint) {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint) {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error(`expected valid ${title}: ${min} <= n < ${max}, got ${typeof n} ${n}`);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean) {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = () => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(fn: (arg: T, ...args: O) => R) {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","import type { JsonSerializer } from './types.js'\n\nexport const defaultJsonSerializer: JsonSerializer = JSON\n","export type RemoveIndex<T> = {\n  [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K]\n}\n\nexport const uppercase = <S extends string>(str: S): Uppercase<S> => str.toUpperCase() as Uppercase<S>\n\n/**\n * Convert Headers instance into regular object\n */\nexport const HeadersInstanceToPlainObject = (headers: Response['headers']): Record<string, string> => {\n  const o: Record<string, string> = {}\n  headers.forEach((v, k) => {\n    o[k] = v\n  })\n  return o\n}\n","import type {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  GraphQLClientRequestHeaders,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestOptions,\n  Variables,\n  VariablesAndRequestHeadersArgs,\n} from './types.js'\n\nexport const parseRequestArgs = <V extends Variables = Variables>(\n  documentOrOptions: RequestDocument | RequestOptions<V>,\n  variables?: V,\n  requestHeaders?: GraphQLClientRequestHeaders\n): RequestOptions<V> => {\n  return (documentOrOptions as RequestOptions<V>).document\n    ? (documentOrOptions as RequestOptions<V>)\n    : ({\n        document: documentOrOptions as RequestDocument,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      } as unknown as RequestOptions<V>)\n}\n\nexport const parseRawRequestArgs = <V extends Variables = Variables>(\n  queryOrOptions: string | RawRequestOptions<V>,\n  variables?: V,\n  requestHeaders?: GraphQLClientRequestHeaders\n): RawRequestOptions<V> => {\n  return (queryOrOptions as RawRequestOptions<V>).query\n    ? (queryOrOptions as RawRequestOptions<V>)\n    : ({\n        query: queryOrOptions as string,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      } as unknown as RawRequestOptions<V>)\n}\n\nexport const parseBatchRequestArgs = <V extends Variables = Variables>(\n  documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n  requestHeaders?: GraphQLClientRequestHeaders\n): BatchRequestsOptions<V> => {\n  return (documentsOrOptions as BatchRequestsOptions<V>).documents\n    ? (documentsOrOptions as BatchRequestsOptions<V>)\n    : {\n        documents: documentsOrOptions as BatchRequestDocument<V>[],\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      }\n}\n\nexport const parseRequestExtendedArgs = <V extends Variables = Variables>(\n  urlOrOptions: string | RequestExtendedOptions<V>,\n  document?: RequestDocument,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n): RequestExtendedOptions<V> => {\n  const [variables, requestHeaders] = variablesAndRequestHeaders\n  return (urlOrOptions as RequestExtendedOptions<V>).document\n    ? (urlOrOptions as RequestExtendedOptions<V>)\n    : ({\n        url: urlOrOptions as string,\n        document: document as RequestDocument,\n        variables,\n        requestHeaders,\n        signal: undefined,\n      } as unknown as RequestExtendedOptions<V>)\n}\n\nexport const parseRawRequestExtendedArgs = <V extends Variables = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n): RawRequestExtendedOptions<V> => {\n  const [variables, requestHeaders] = variablesAndRequestHeaders\n  return (urlOrOptions as RawRequestExtendedOptions<V>).query\n    ? (urlOrOptions as RawRequestExtendedOptions<V>)\n    : ({\n        url: urlOrOptions as string,\n        query: query as string,\n        variables,\n        requestHeaders,\n        signal: undefined,\n      } as unknown as RawRequestExtendedOptions<V>)\n}\n","export function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n\nfunction toNormalizedOptions(args) {\n  const firstArg = args[0];\n\n  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {\n    return {\n      nodes: firstArg,\n      source: args[1],\n      positions: args[2],\n      path: args[3],\n      originalError: args[4],\n      extensions: args[5],\n    };\n  }\n\n  return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n\n  /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */\n  constructor(message, ...rawArgs) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    const { nodes, source, positions, path, originalError, extensions } =\n      toNormalizedOptions(rawArgs);\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, {\n    source,\n    positions: [position],\n  });\n}\n","/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Location';\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end,\n    };\n  }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n    this.value = value;\n    this.prev = null;\n    this.next = null;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Token';\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column,\n    };\n  }\n}\n/**\n * The list of all possible AST node types.\n */\n\n/**\n * @internal\n */\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: [\n    'name',\n    'variableDefinitions',\n    'directives',\n    'selectionSet',\n  ],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: [\n    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0\n    'variableDefinitions',\n    'typeCondition',\n    'directives',\n    'selectionSet',\n  ],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: [\n    'description',\n    'name',\n    'type',\n    'defaultValue',\n    'directives',\n  ],\n  InterfaceTypeDefinition: [\n    'description',\n    'name',\n    'interfaces',\n    'directives',\n    'fields',\n  ],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields'],\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  const maybeKind =\n    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n  return typeof maybeKind === 'string' && kindValues.has(maybeKind);\n}\n/** Name */\n\nvar OperationTypeNode;\n\n(function (OperationTypeNode) {\n  OperationTypeNode['QUERY'] = 'query';\n  OperationTypeNode['MUTATION'] = 'mutation';\n  OperationTypeNode['SUBSCRIPTION'] = 'subscription';\n})(OperationTypeNode || (OperationTypeNode = {}));\n\nexport { OperationTypeNode };\n","/**\n * The set of allowed directive location values.\n */\nvar DirectiveLocation;\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n\nexport { DirectiveLocation };\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n","/**\n * The set of allowed kind values for AST nodes.\n */\nvar Kind;\n\n(function (Kind) {\n  Kind['NAME'] = 'Name';\n  Kind['DOCUMENT'] = 'Document';\n  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';\n  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';\n  Kind['SELECTION_SET'] = 'SelectionSet';\n  Kind['FIELD'] = 'Field';\n  Kind['ARGUMENT'] = 'Argument';\n  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';\n  Kind['INLINE_FRAGMENT'] = 'InlineFragment';\n  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';\n  Kind['VARIABLE'] = 'Variable';\n  Kind['INT'] = 'IntValue';\n  Kind['FLOAT'] = 'FloatValue';\n  Kind['STRING'] = 'StringValue';\n  Kind['BOOLEAN'] = 'BooleanValue';\n  Kind['NULL'] = 'NullValue';\n  Kind['ENUM'] = 'EnumValue';\n  Kind['LIST'] = 'ListValue';\n  Kind['OBJECT'] = 'ObjectValue';\n  Kind['OBJECT_FIELD'] = 'ObjectField';\n  Kind['DIRECTIVE'] = 'Directive';\n  Kind['NAMED_TYPE'] = 'NamedType';\n  Kind['LIST_TYPE'] = 'ListType';\n  Kind['NON_NULL_TYPE'] = 'NonNullType';\n  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';\n  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';\n  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';\n  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';\n  Kind['FIELD_DEFINITION'] = 'FieldDefinition';\n  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';\n  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';\n  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';\n  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';\n  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';\n  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';\n  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';\n  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';\n  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';\n  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';\n  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';\n  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';\n  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';\n  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';\n})(Kind || (Kind = {}));\n\nexport { Kind };\n/**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */\n","/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */\nexport function isWhiteSpace(code) {\n  return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */\n\nexport function isDigit(code) {\n  return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */\n\nexport function isLetter(code) {\n  return (\n    (code >= 0x0061 && code <= 0x007a) || // A-Z\n    (code >= 0x0041 && code <= 0x005a) // a-z\n  );\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameStart(code) {\n  return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */\n\nexport function isNameContinue(code) {\n  return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n","import { isWhiteSpace } from './characterClasses.mjs';\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\n\nexport function dedentBlockStringLines(lines) {\n  var _firstNonEmptyLine2;\n\n  let commonIndent = Number.MAX_SAFE_INTEGER;\n  let firstNonEmptyLine = null;\n  let lastNonEmptyLine = -1;\n\n  for (let i = 0; i < lines.length; ++i) {\n    var _firstNonEmptyLine;\n\n    const line = lines[i];\n    const indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    firstNonEmptyLine =\n      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&\n      _firstNonEmptyLine !== void 0\n        ? _firstNonEmptyLine\n        : i;\n    lastNonEmptyLine = i;\n\n    if (i !== 0 && indent < commonIndent) {\n      commonIndent = indent;\n    }\n  }\n\n  return lines // Remove common indentation from all lines but first.\n    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.\n    .slice(\n      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&\n        _firstNonEmptyLine2 !== void 0\n        ? _firstNonEmptyLine2\n        : 0,\n      lastNonEmptyLine + 1,\n    );\n}\n\nfunction leadingWhitespace(str) {\n  let i = 0;\n\n  while (i < str.length && isWhiteSpace(str.charCodeAt(i))) {\n    ++i;\n  }\n\n  return i;\n}\n/**\n * @internal\n */\n\nexport function isPrintableAsBlockString(value) {\n  if (value === '') {\n    return true; // empty string is printable\n  }\n\n  let isEmptyLine = true;\n  let hasIndent = false;\n  let hasCommonIndent = true;\n  let seenNonEmptyLine = false;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.codePointAt(i)) {\n      case 0x0000:\n      case 0x0001:\n      case 0x0002:\n      case 0x0003:\n      case 0x0004:\n      case 0x0005:\n      case 0x0006:\n      case 0x0007:\n      case 0x0008:\n      case 0x000b:\n      case 0x000c:\n      case 0x000e:\n      case 0x000f:\n        return false;\n      // Has non-printable characters\n\n      case 0x000d:\n        //  \\r\n        return false;\n      // Has \\r or \\r\\n which will be replaced as \\n\n\n      case 10:\n        //  \\n\n        if (isEmptyLine && !seenNonEmptyLine) {\n          return false; // Has leading new line\n        }\n\n        seenNonEmptyLine = true;\n        isEmptyLine = true;\n        hasIndent = false;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        hasIndent || (hasIndent = isEmptyLine);\n        break;\n\n      default:\n        hasCommonIndent && (hasCommonIndent = hasIndent);\n        isEmptyLine = false;\n    }\n  }\n\n  if (isEmptyLine) {\n    return false; // Has trailing empty lines\n  }\n\n  if (hasCommonIndent && seenNonEmptyLine) {\n    return false; // Has internal indent\n  }\n\n  return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, options) {\n  const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n\n  const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n\n  const forceLeadingNewLine =\n    lines.length > 1 &&\n    lines\n      .slice(1)\n      .every((line) => line.length === 0 || isWhiteSpace(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n\n  const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n\n  const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n  const hasTrailingSlash = value.endsWith('\\\\');\n  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n  const printAsMultipleLines =\n    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine ||\n      value.length > 70 ||\n      forceTrailingNewline ||\n      forceLeadingNewLine ||\n      hasTrailingTripleQuotes);\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  const skipLeadingNewLine = isSingleLine && isWhiteSpace(value.charCodeAt(0));\n\n  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {\n    result += '\\n';\n  }\n\n  result += escapedValue;\n\n  if (printAsMultipleLines || forceTrailingNewline) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result + '\"\"\"';\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nvar TokenKind;\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n\nexport { TokenKind };\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameContinue, isNameStart } from './characterClasses.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","const MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (value === null) {\n    return 'null';\n  }\n\n  if (previouslySeenValues.includes(value)) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (isJSONable(value)) {\n    const jsonValue = value.toJSON(); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string'\n        ? jsonValue\n        : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction isJSONable(value) {\n  return typeof value.toJSON === 'function';\n}\n\nfunction formatObject(object, seenValues) {\n  const entries = Object.entries(object);\n\n  if (entries.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = entries.map(\n    ([key, value]) => key + ': ' + formatValue(value, seenValues),\n  );\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString\n    .call(object)\n    .replace(/^\\[object /, '')\n    .replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","import { inspect } from './inspect.mjs';\n/* c8 ignore next 3 */\n\nconst isProduction =\n  globalThis.process && // eslint-disable-next-line no-undef\n  process.env.NODE_ENV === 'production';\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */\n\nexport const instanceOf =\n  /* c8 ignore next 6 */\n  // FIXME: https://github.com/graphql/graphql-js/issues/2317\n  isProduction\n    ? function instanceOf(value, constructor) {\n        return value instanceof constructor;\n      }\n    : function instanceOf(value, constructor) {\n        if (value instanceof constructor) {\n          return true;\n        }\n\n        if (typeof value === 'object' && value !== null) {\n          var _value$constructor;\n\n          // Prefer Symbol.toStringTag since it is immune to minification.\n          const className = constructor.prototype[Symbol.toStringTag];\n          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.\n            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n              ? value[Symbol.toStringTag]\n              : (_value$constructor = value.constructor) === null ||\n                _value$constructor === void 0\n              ? void 0\n              : _value$constructor.name;\n\n          if (className === valueClassName) {\n            const stringifiedValue = inspect(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n          }\n        }\n\n        return false;\n      };\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(\n    body,\n    name = 'GraphQL request',\n    locationOffset = {\n      line: 1,\n      column: 1,\n    },\n  ) {\n    typeof body === 'string' ||\n      devAssert(false, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 ||\n      devAssert(\n        false,\n        'line in locationOffset is 1-indexed and must be positive.',\n      );\n    this.locationOffset.column > 0 ||\n      devAssert(\n        false,\n        'column in locationOffset is 1-indexed and must be positive.',\n      );\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Kind } from './kinds.mjs';\nimport { isPunctuatorTokenKind, Lexer } from './lexer.mjs';\nimport { isSource, Source } from './source.mjs';\nimport { TokenKind } from './tokenKind.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options = {}) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n    this._tokenCounter = 0;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.allowLegacyFragmentVariables === true) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this.advanceLexer();\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this.advanceLexer();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n    this.advanceLexer();\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    if (this._options.noLocation !== true) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this.advanceLexer();\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n  advanceLexer() {\n    const { maxTokens } = this._options;\n\n    const token = this._lexer.advance();\n\n    if (maxTokens !== undefined && token.kind !== TokenKind.EOF) {\n      ++this._tokenCounter;\n\n      if (this._tokenCounter > maxTokens) {\n        throw syntaxError(\n          this._lexer.source,\n          token.start,\n          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,\n        );\n      }\n    }\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","/**\n * Prints a string as a GraphQL StringValue literal. Replaces control characters\n * and excluded characters (\" U+0022 and \\\\ U+005C) with escape sequences.\n */\nexport function printString(str) {\n  return `\"${str.replace(escapedRegExp, escapedReplacer)}\"`;\n} // eslint-disable-next-line no-control-regex\n\nconst escapedRegExp = /[\\x00-\\x1f\\x22\\x5c\\x7f-\\x9f]/g;\n\nfunction escapedReplacer(str) {\n  return escapeSequences[str.charCodeAt(0)];\n} // prettier-ignore\n\nconst escapeSequences = [\n  '\\\\u0000',\n  '\\\\u0001',\n  '\\\\u0002',\n  '\\\\u0003',\n  '\\\\u0004',\n  '\\\\u0005',\n  '\\\\u0006',\n  '\\\\u0007',\n  '\\\\b',\n  '\\\\t',\n  '\\\\n',\n  '\\\\u000B',\n  '\\\\f',\n  '\\\\r',\n  '\\\\u000E',\n  '\\\\u000F',\n  '\\\\u0010',\n  '\\\\u0011',\n  '\\\\u0012',\n  '\\\\u0013',\n  '\\\\u0014',\n  '\\\\u0015',\n  '\\\\u0016',\n  '\\\\u0017',\n  '\\\\u0018',\n  '\\\\u0019',\n  '\\\\u001A',\n  '\\\\u001B',\n  '\\\\u001C',\n  '\\\\u001D',\n  '\\\\u001E',\n  '\\\\u001F',\n  '',\n  '',\n  '\\\\\"',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 2F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 3F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 4F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\\\\\',\n  '',\n  '',\n  '', // 5F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '', // 6F\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '\\\\u007F',\n  '\\\\u0080',\n  '\\\\u0081',\n  '\\\\u0082',\n  '\\\\u0083',\n  '\\\\u0084',\n  '\\\\u0085',\n  '\\\\u0086',\n  '\\\\u0087',\n  '\\\\u0088',\n  '\\\\u0089',\n  '\\\\u008A',\n  '\\\\u008B',\n  '\\\\u008C',\n  '\\\\u008D',\n  '\\\\u008E',\n  '\\\\u008F',\n  '\\\\u0090',\n  '\\\\u0091',\n  '\\\\u0092',\n  '\\\\u0093',\n  '\\\\u0094',\n  '\\\\u0095',\n  '\\\\u0096',\n  '\\\\u0097',\n  '\\\\u0098',\n  '\\\\u0099',\n  '\\\\u009A',\n  '\\\\u009B',\n  '\\\\u009C',\n  '\\\\u009D',\n  '\\\\u009E',\n  '\\\\u009F',\n];\n","import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isNode, QueryDocumentKeys } from './ast.mjs';\nimport { Kind } from './kinds.mjs';\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n * ```ts\n * const editedAST = visit(ast, {\n *   enter(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: skip visiting this node\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   },\n *   leave(node, key, parent, path, ancestors) {\n *     // @return\n *     //   undefined: no action\n *     //   false: no action\n *     //   visitor.BREAK: stop visiting altogether\n *     //   null: delete this node\n *     //   any value: replace this node with the returned value\n *   }\n * });\n * ```\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to three permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind(node) {\n *     // enter the \"Kind\" node\n *   }\n * })\n * ```\n *\n * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.\n *\n * ```ts\n * visit(ast, {\n *   Kind: {\n *     enter(node) {\n *       // enter the \"Kind\" node\n *     }\n *     leave(node) {\n *       // leave the \"Kind\" node\n *     }\n *   }\n * })\n * ```\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n * ```ts\n * visit(ast, {\n *   enter(node) {\n *     // enter any node\n *   },\n *   leave(node) {\n *     // leave any node\n *   }\n * })\n * ```\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  const enterLeaveMap = new Map();\n\n  for (const kind of Object.values(Kind)) {\n    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));\n  }\n  /* eslint-disable no-undef-init */\n\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = root;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n          let editOffset = 0;\n\n          for (const [editKey, editValue] of edits) {\n            const arrayKey = editKey - editOffset;\n\n            if (editValue === null) {\n              node.splice(arrayKey, 1);\n              editOffset++;\n            } else {\n              node[arrayKey] = editValue;\n            }\n          }\n        } else {\n          node = Object.defineProperties(\n            {},\n            Object.getOwnPropertyDescriptors(node),\n          );\n\n          for (const [editKey, editValue] of edits) {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else if (parent) {\n      key = inArray ? index : keys[index];\n      node = parent[key];\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      path.push(key);\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      var _enterLeaveMap$get, _enterLeaveMap$get2;\n\n      isNode(node) || devAssert(false, `Invalid AST Node: ${inspect(node)}.`);\n      const visitFn = isLeaving\n        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get === void 0\n          ? void 0\n          : _enterLeaveMap$get.leave\n        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||\n          _enterLeaveMap$get2 === void 0\n        ? void 0\n        : _enterLeaveMap$get2.enter;\n      result =\n        visitFn === null || visitFn === void 0\n          ? void 0\n          : visitFn.call(visitor, node, key, parent, path, ancestors);\n\n      if (result === BREAK) {\n        break;\n      }\n\n      if (result === false) {\n        if (!isLeaving) {\n          path.pop();\n          continue;\n        }\n      } else if (result !== undefined) {\n        edits.push([key, result]);\n\n        if (!isLeaving) {\n          if (isNode(result)) {\n            node = result;\n          } else {\n            path.pop();\n            continue;\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      var _node$kind;\n\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack,\n      };\n      inArray = Array.isArray(node);\n      keys = inArray\n        ? node\n        : (_node$kind = visitorKeys[node.kind]) !== null &&\n          _node$kind !== void 0\n        ? _node$kind\n        : [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    // New root\n    return edits[edits.length - 1][1];\n  }\n\n  return root;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length).fill(null);\n  const mergedVisitor = Object.create(null);\n\n  for (const kind of Object.values(Kind)) {\n    let hasVisitor = false;\n    const enterList = new Array(visitors.length).fill(undefined);\n    const leaveList = new Array(visitors.length).fill(undefined);\n\n    for (let i = 0; i < visitors.length; ++i) {\n      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);\n      hasVisitor || (hasVisitor = enter != null || leave != null);\n      enterList[i] = enter;\n      leaveList[i] = leave;\n    }\n\n    if (!hasVisitor) {\n      continue;\n    }\n\n    const mergedEnterLeave = {\n      enter(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _enterList$i;\n\n            const result =\n              (_enterList$i = enterList[i]) === null || _enterList$i === void 0\n                ? void 0\n                : _enterList$i.apply(visitors[i], args);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      },\n\n      leave(...args) {\n        const node = args[0];\n\n        for (let i = 0; i < visitors.length; i++) {\n          if (skipping[i] === null) {\n            var _leaveList$i;\n\n            const result =\n              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0\n                ? void 0\n                : _leaveList$i.apply(visitors[i], args);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          } else if (skipping[i] === node) {\n            skipping[i] = null;\n          }\n        }\n      },\n    };\n    mergedVisitor[kind] = mergedEnterLeave;\n  }\n\n  return mergedVisitor;\n}\n/**\n * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.\n */\n\nexport function getEnterLeaveForKind(visitor, kind) {\n  const kindVisitor = visitor[kind];\n\n  if (typeof kindVisitor === 'object') {\n    // { Kind: { enter() {}, leave() {} } }\n    return kindVisitor;\n  } else if (typeof kindVisitor === 'function') {\n    // { Kind() {} }\n    return {\n      enter: kindVisitor,\n      leave: undefined,\n    };\n  } // { enter() {}, leave() {} }\n\n  return {\n    enter: visitor.enter,\n    leave: visitor.leave,\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n *\n * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17\n */\n\n/* c8 ignore next 8 */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const { enter, leave } = getEnterLeaveForKind(visitor, kind);\n  return isLeaving ? leave : enter;\n}\n","import { printBlockString } from './blockString.mjs';\nimport { printString } from './printString.mjs';\nimport { visit } from './visitor.mjs';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, printDocASTReducer);\n}\nconst MAX_LINE_LENGTH = 80;\nconst printDocASTReducer = {\n  Name: {\n    leave: (node) => node.value,\n  },\n  Variable: {\n    leave: (node) => '$' + node.name,\n  },\n  // Document\n  Document: {\n    leave: (node) => join(node.definitions, '\\n\\n'),\n  },\n  OperationDefinition: {\n    leave(node) {\n      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n      const prefix = join(\n        [\n          node.operation,\n          join([node.name, varDefs]),\n          join(node.directives, ' '),\n        ],\n        ' ',\n      ); // Anonymous queries with no directives or variable definitions can use\n      // the query short form.\n\n      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;\n    },\n  },\n  VariableDefinition: {\n    leave: ({ variable, type, defaultValue, directives }) =>\n      variable +\n      ': ' +\n      type +\n      wrap(' = ', defaultValue) +\n      wrap(' ', join(directives, ' ')),\n  },\n  SelectionSet: {\n    leave: ({ selections }) => block(selections),\n  },\n  Field: {\n    leave({ alias, name, arguments: args, directives, selectionSet }) {\n      const prefix = wrap('', alias, ': ') + name;\n      let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n      if (argsLine.length > MAX_LINE_LENGTH) {\n        argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n      }\n\n      return join([argsLine, join(directives, ' '), selectionSet], ' ');\n    },\n  },\n  Argument: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Fragments\n  FragmentSpread: {\n    leave: ({ name, directives }) =>\n      '...' + name + wrap(' ', join(directives, ' ')),\n  },\n  InlineFragment: {\n    leave: ({ typeCondition, directives, selectionSet }) =>\n      join(\n        [\n          '...',\n          wrap('on ', typeCondition),\n          join(directives, ' '),\n          selectionSet,\n        ],\n        ' ',\n      ),\n  },\n  FragmentDefinition: {\n    leave: (\n      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed\n    ) =>\n      // or removed in the future.\n      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +\n      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +\n      selectionSet,\n  },\n  // Value\n  IntValue: {\n    leave: ({ value }) => value,\n  },\n  FloatValue: {\n    leave: ({ value }) => value,\n  },\n  StringValue: {\n    leave: ({ value, block: isBlockString }) =>\n      isBlockString ? printBlockString(value) : printString(value),\n  },\n  BooleanValue: {\n    leave: ({ value }) => (value ? 'true' : 'false'),\n  },\n  NullValue: {\n    leave: () => 'null',\n  },\n  EnumValue: {\n    leave: ({ value }) => value,\n  },\n  ListValue: {\n    leave: ({ values }) => '[' + join(values, ', ') + ']',\n  },\n  ObjectValue: {\n    leave: ({ fields }) => '{' + join(fields, ', ') + '}',\n  },\n  ObjectField: {\n    leave: ({ name, value }) => name + ': ' + value,\n  },\n  // Directive\n  Directive: {\n    leave: ({ name, arguments: args }) =>\n      '@' + name + wrap('(', join(args, ', '), ')'),\n  },\n  // Type\n  NamedType: {\n    leave: ({ name }) => name,\n  },\n  ListType: {\n    leave: ({ type }) => '[' + type + ']',\n  },\n  NonNullType: {\n    leave: ({ type }) => type + '!',\n  },\n  // Type System Definitions\n  SchemaDefinition: {\n    leave: ({ description, directives, operationTypes }) =>\n      wrap('', description, '\\n') +\n      join(['schema', join(directives, ' '), block(operationTypes)], ' '),\n  },\n  OperationTypeDefinition: {\n    leave: ({ operation, type }) => operation + ': ' + type,\n  },\n  ScalarTypeDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') +\n      join(['scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  FieldDefinition: {\n    leave: ({ description, name, arguments: args, type, directives }) =>\n      wrap('', description, '\\n') +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      ': ' +\n      type +\n      wrap(' ', join(directives, ' ')),\n  },\n  InputValueDefinition: {\n    leave: ({ description, name, type, defaultValue, directives }) =>\n      wrap('', description, '\\n') +\n      join(\n        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],\n        ' ',\n      ),\n  },\n  InterfaceTypeDefinition: {\n    leave: ({ description, name, interfaces, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(\n        [\n          'interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeDefinition: {\n    leave: ({ description, name, directives, types }) =>\n      wrap('', description, '\\n') +\n      join(\n        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],\n        ' ',\n      ),\n  },\n  EnumTypeDefinition: {\n    leave: ({ description, name, directives, values }) =>\n      wrap('', description, '\\n') +\n      join(['enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  EnumValueDefinition: {\n    leave: ({ description, name, directives }) =>\n      wrap('', description, '\\n') + join([name, join(directives, ' ')], ' '),\n  },\n  InputObjectTypeDefinition: {\n    leave: ({ description, name, directives, fields }) =>\n      wrap('', description, '\\n') +\n      join(['input', name, join(directives, ' '), block(fields)], ' '),\n  },\n  DirectiveDefinition: {\n    leave: ({ description, name, arguments: args, repeatable, locations }) =>\n      wrap('', description, '\\n') +\n      'directive @' +\n      name +\n      (hasMultilineItems(args)\n        ? wrap('(\\n', indent(join(args, '\\n')), '\\n)')\n        : wrap('(', join(args, ', '), ')')) +\n      (repeatable ? ' repeatable' : '') +\n      ' on ' +\n      join(locations, ' | '),\n  },\n  SchemaExtension: {\n    leave: ({ directives, operationTypes }) =>\n      join(\n        ['extend schema', join(directives, ' '), block(operationTypes)],\n        ' ',\n      ),\n  },\n  ScalarTypeExtension: {\n    leave: ({ name, directives }) =>\n      join(['extend scalar', name, join(directives, ' ')], ' '),\n  },\n  ObjectTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend type',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  InterfaceTypeExtension: {\n    leave: ({ name, interfaces, directives, fields }) =>\n      join(\n        [\n          'extend interface',\n          name,\n          wrap('implements ', join(interfaces, ' & ')),\n          join(directives, ' '),\n          block(fields),\n        ],\n        ' ',\n      ),\n  },\n  UnionTypeExtension: {\n    leave: ({ name, directives, types }) =>\n      join(\n        [\n          'extend union',\n          name,\n          join(directives, ' '),\n          wrap('= ', join(types, ' | ')),\n        ],\n        ' ',\n      ),\n  },\n  EnumTypeExtension: {\n    leave: ({ name, directives, values }) =>\n      join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  },\n  InputObjectTypeExtension: {\n    leave: ({ name, directives, fields }) =>\n      join(['extend input', name, join(directives, ' '), block(fields)], ' '),\n  },\n};\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\nfunction join(maybeArray, separator = '') {\n  var _maybeArray$filter$jo;\n\n  return (_maybeArray$filter$jo =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.filter((x) => x).join(separator)) !== null &&\n    _maybeArray$filter$jo !== void 0\n    ? _maybeArray$filter$jo\n    : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an indented `{ }` block.\n */\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== ''\n    ? start + maybeString + end\n    : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction hasMultilineItems(maybeArray) {\n  var _maybeArray$some;\n\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  /* c8 ignore next */\n  return (_maybeArray$some =\n    maybeArray === null || maybeArray === void 0\n      ? void 0\n      : maybeArray.some((str) => str.includes('\\n'))) !== null &&\n    _maybeArray$some !== void 0\n    ? _maybeArray$some\n    : false;\n}\n","import type { RequestDocument } from './types.js'\nimport type { DocumentNode, OperationDefinitionNode } from 'graphql'\nimport { parse, print } from 'graphql'\n\n/**\n * helpers\n */\n\nconst extractOperationName = (document: DocumentNode): string | undefined => {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === `OperationDefinition`\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0]?.name?.value\n  }\n\n  return operationName\n}\n\nexport const resolveRequestDocument = (\n  document: RequestDocument\n): { query: string; operationName?: string } => {\n  if (typeof document === `string`) {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n","import type { RemoveIndex } from './helpers.js'\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport type { fetch } from 'cross-fetch'\nimport type { GraphQLError } from 'graphql/error/GraphQLError.js'\nimport type { DocumentNode } from 'graphql/language/ast.js'\n\nexport type Fetch = typeof fetch\n\n/**\n * 'None' will throw whenever the response contains errors\n *\n * 'Ignore' will ignore incoming errors and resolve like no errors occurred\n *\n * 'All' will return both the errors and data\n */\nexport type ErrorPolicy = 'none' | 'ignore' | 'all'\n\nexport interface JsonSerializer {\n  stringify: (obj: any) => string\n  parse: (obj: string) => unknown\n}\n\nexport interface AdditionalRequestOptions {\n  jsonSerializer?: JsonSerializer\n  /**\n   * Decide how to handle GraphQLErrors in response\n   */\n  errorPolicy?: ErrorPolicy\n}\n\nexport interface FetchOptions extends RequestInit, AdditionalRequestOptions {}\n\nexport type { GraphQLError }\n\nexport type Variables = Record<string, unknown>\n\nexport type BatchVariables = (Record<string, unknown> | undefined)[]\n\nexport interface GraphQLResponse<T = unknown> {\n  data?: T\n  errors?: GraphQLError[]\n  extensions?: unknown\n  status: number\n  [key: string]: unknown\n}\n\nexport interface GraphQLRequestContext<V extends Variables = Variables> {\n  query: string | string[]\n  variables?: V\n}\n\nexport class ClientError extends Error {\n  response: GraphQLResponse\n  request: GraphQLRequestContext\n\n  constructor(response: GraphQLResponse, request: GraphQLRequestContext) {\n    const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n      response,\n      request,\n    })}`\n\n    super(message)\n\n    Object.setPrototypeOf(this, ClientError.prototype)\n\n    this.response = response\n    this.request = request\n\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === `function`) {\n      Error.captureStackTrace(this, ClientError)\n    }\n  }\n\n  private static extractMessage(response: GraphQLResponse): string {\n    return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`\n  }\n}\n\nexport type MaybeLazy<T> = T | (() => T)\n\nexport type RequestDocument = string | DocumentNode\n\nexport interface GraphQLClientResponse<Data> {\n  status: number\n  headers: Headers\n  data: Data\n  extensions?: unknown\n  errors?: GraphQLError[]\n}\n\nexport type HTTPMethodInput = 'GET' | 'POST' | 'get' | 'post'\n\nexport interface RequestConfig extends Omit<RequestInit, 'headers' | 'method'>, AdditionalRequestOptions {\n  fetch?: Fetch\n  method?: HTTPMethodInput\n  headers?: MaybeLazy<GraphQLClientRequestHeaders>\n  requestMiddleware?: RequestMiddleware\n  responseMiddleware?: ResponseMiddleware\n  jsonSerializer?: JsonSerializer\n}\n\nexport type BatchRequestDocument<V extends Variables = Variables> = {\n  document: RequestDocument\n  variables?: V\n}\n\nexport type RawRequestOptions<V extends Variables = Variables> = {\n  query: string\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport type RequestOptions<V extends Variables = Variables, T = unknown> = {\n  document: RequestDocument | TypedDocumentNode<T, V>\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport interface BatchRequestsOptions<V extends Variables = Variables> {\n  documents: BatchRequestDocument<V>[]\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n}\n\nexport type RequestExtendedOptions<V extends Variables = Variables, T = unknown> = {\n  url: string\n} & RequestOptions<V, T>\n\nexport type RawRequestExtendedOptions<V extends Variables = Variables> = {\n  url: string\n} & RawRequestOptions<V>\n\nexport interface BatchRequestsExtendedOptions<V extends Variables = Variables>\n  extends BatchRequestsOptions<V> {\n  url: string\n}\n\nexport type ResponseMiddleware = (response: GraphQLClientResponse<unknown> | Error) => void\n\n// prettier-ignore\nexport type RequestMiddleware<V extends Variables = Variables> = (request: RequestExtendedInit<V>) => RequestExtendedInit | Promise<RequestExtendedInit>\n\ntype RequestExtendedInit<V extends Variables = Variables> = RequestInit & {\n  url: string\n  operationName?: string\n  variables?: V\n}\n\nexport type GraphQLClientRequestHeaders = Headers | string[][] | Record<string, string>\n\n// prettier-ignore\nexport type VariablesAndRequestHeadersArgs<V extends Variables> =\n  V extends Record<any, never> // do we have explicitly no variables allowed?\n    ? [variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n  : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n    ? [variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n    : [variables: V, requestHeaders?: GraphQLClientRequestHeaders]\n","import { defaultJsonSerializer } from './defaultJsonSerializer.js'\nimport { HeadersInstanceToPlainObject, uppercase } from './helpers.js'\nimport {\n  parseBatchRequestArgs,\n  parseRawRequestArgs,\n  parseRawRequestExtendedArgs,\n  parseRequestArgs,\n  parseRequestExtendedArgs,\n} from './parseArgs.js'\nimport { resolveRequestDocument } from './resolveRequestDocument.js'\nimport type {\n  BatchRequestDocument,\n  FetchOptions,\n  GraphQLClientRequestHeaders,\n  GraphQLClientResponse,\n  HTTPMethodInput,\n  JsonSerializer,\n  MaybeLazy,\n  RequestConfig,\n  RequestMiddleware,\n  ResponseMiddleware,\n  VariablesAndRequestHeadersArgs,\n} from './types.js'\nimport {\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestOptions,\n  Variables,\n} from './types.js'\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport crossFetch, * as CrossFetch from 'cross-fetch'\n\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers?: GraphQLClientRequestHeaders): Record<string, string> => {\n  let oHeaders: Record<string, string> = {}\n  if (headers) {\n    if (\n      (typeof Headers !== `undefined` && headers instanceof Headers) ||\n      (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)\n    ) {\n      oHeaders = HeadersInstanceToPlainObject(headers)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(([name, value]) => {\n        if (name && value !== undefined) {\n          oHeaders[name] = value\n        }\n      })\n    } else {\n      oHeaders = headers as Record<string, string>\n    }\n  }\n\n  return oHeaders\n}\n\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim()\n\ntype BuildRequestConfigParamsBatch<V> = {\n  query: string[]\n  variables: V[] | undefined\n  operationName: undefined\n  jsonSerializer: JsonSerializer\n}\n\ntype BuildRequestConfigParamsSingle<V> = {\n  query: string\n  variables: V | undefined\n  operationName: string | undefined\n  jsonSerializer: JsonSerializer\n}\n\ntype BuildRequestConfigParams<V> = BuildRequestConfigParamsSingle<V> | BuildRequestConfigParamsBatch<V>\n\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = <V extends Variables>(params: BuildRequestConfigParams<V>): string => {\n  if (!Array.isArray(params.query)) {\n    const params_ = params as BuildRequestConfigParamsSingle<V>\n    const search: string[] = [`query=${encodeURIComponent(cleanQuery(params_.query))}`]\n\n    if (params.variables) {\n      search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`)\n    }\n\n    if (params_.operationName) {\n      search.push(`operationName=${encodeURIComponent(params_.operationName)}`)\n    }\n\n    return search.join(`&`)\n  }\n\n  if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n    throw new Error(`Cannot create query with given variable type, array expected`)\n  }\n\n  // Batch support\n  const params_ = params as BuildRequestConfigParamsBatch<V>\n  const payload = params.query.reduce<{ query: string; variables: string | undefined }[]>(\n    (acc, currentQuery, index) => {\n      acc.push({\n        query: cleanQuery(currentQuery),\n        variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n      })\n      return acc\n    },\n    []\n  )\n\n  return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`\n}\n\ntype Fetch = (url: string, config: RequestInit) => Promise<Response>\n\ninterface RequestVerbParams<V extends Variables = Variables> {\n  url: string\n  query: string | string[]\n  fetch: Fetch\n  fetchOptions: FetchOptions\n  variables?: V\n  headers?: GraphQLClientRequestHeaders\n  operationName?: string\n  middleware?: RequestMiddleware<V>\n}\n\nconst createHttpMethodFetcher =\n  (method: 'GET' | 'POST') =>\n  async <V extends Variables>(params: RequestVerbParams<V>) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params\n\n    const headers = { ...params.headers }\n    let queryParams = ``\n    let body = undefined\n\n    if (method === `POST`) {\n      body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\n      if (typeof body === `string`) {\n        // @ts-expect-error todo\n        headers[`Content-Type`] = `application/json`\n      }\n    } else {\n      // @ts-expect-error todo needs ADT for TS to understand the different states\n      queryParams = buildRequestConfig<V>({\n        query,\n        variables,\n        operationName,\n        jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer,\n      })\n    }\n\n    const init: RequestInit = {\n      method,\n      headers,\n      body,\n      ...fetchOptions,\n    }\n\n    let urlResolved = url\n    let initResolved = init\n    if (middleware) {\n      const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }))\n      const { url: urlNew, ...initNew } = result\n      urlResolved = urlNew\n      initResolved = initNew\n    }\n    if (queryParams) {\n      urlResolved = `${urlResolved}?${queryParams}`\n    }\n    return await fetch(urlResolved, initResolved)\n  }\n\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n  constructor(private url: string, public readonly requestConfig: RequestConfig = {}) {}\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  rawRequest: RawRequestMethod = async <T, V extends Variables = Variables>(\n    ...args: RawRequestMethodArgs<V>\n  ): Promise<GraphQLClientResponse<T>> => {\n    const [queryOrOptions, variables, requestHeaders] = args\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\n\n    const {\n      headers,\n      fetch = crossFetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\n\n    return makeRequest<T, V>({\n      url,\n      query: rawRequestOptions.query,\n      variables: rawRequestOptions.variables as V,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  async request<T, V extends Variables = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T>\n  async request<T, V extends Variables = Variables>(options: RequestOptions<V, T>): Promise<T>\n  async request<T, V extends Variables = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T> {\n    const [variables, requestHeaders] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders)\n\n    const {\n      headers,\n      fetch = crossFetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    return makeRequest<T>({\n      url,\n      query,\n      variables: requestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(requestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(documents: BatchRequestDocument<V>[], requestHeaders?: GraphQLClientRequestHeaders): Promise<T>\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsOptions<V>): Promise<T>\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>, requestHeaders?: GraphQLClientRequestHeaders): Promise<T> {\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\n    const { headers, ...fetchOptions } = this.requestConfig\n\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const queries = batchRequestOptions.documents.map(\n      ({ document }) => resolveRequestDocument(document).query\n    )\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\n\n    return makeRequest<T>({\n      url: this.url,\n      query: queries,\n      // @ts-expect-error TODO reconcile batch variables into system.\n      variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\n      },\n      operationName: undefined,\n      fetch: this.requestConfig.fetch ?? crossFetch,\n      method: this.requestConfig.method || `POST`,\n      fetchOptions,\n      middleware: this.requestConfig.requestMiddleware,\n    })\n      .then((response) => {\n        if (this.requestConfig.responseMiddleware) {\n          this.requestConfig.responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (this.requestConfig.responseMiddleware) {\n          this.requestConfig.responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  setHeaders(headers: GraphQLClientRequestHeaders): GraphQLClient {\n    this.requestConfig.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): GraphQLClient {\n    const { headers } = this.requestConfig\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-expect-error todo\n      headers[key] = value\n    } else {\n      this.requestConfig.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): GraphQLClient {\n    this.url = value\n    return this\n  }\n}\n\nconst makeRequest = async <T = unknown, V extends Variables = Variables>(params: {\n  url: string\n  query: string | string[]\n  variables?: V\n  headers?: GraphQLClientRequestHeaders\n  operationName?: string\n  fetch: Fetch\n  method?: HTTPMethodInput\n  fetchOptions: FetchOptions\n  middleware?: RequestMiddleware<V>\n}): Promise<GraphQLClientResponse<T>> => {\n  const { query, variables, fetchOptions } = params\n  const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`))\n  const isBatchingQuery = Array.isArray(params.query)\n  const response = await fetcher(params)\n  const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer)\n\n  const successfullyReceivedData = Array.isArray(result)\n    ? !result.some(({ data }) => !data)\n    : Boolean(result.data)\n\n  const successfullyPassedErrorPolicy =\n    Array.isArray(result) ||\n    !result.errors ||\n    (Array.isArray(result.errors) && !result.errors.length) ||\n    fetchOptions.errorPolicy === `all` ||\n    fetchOptions.errorPolicy === `ignore`\n\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n    // @ts-expect-error TODO fixme\n    const { errors: _, ...rest } = Array.isArray(result) ? result : result\n    const data = fetchOptions.errorPolicy === `ignore` ? rest : result\n    const dataEnvelope = isBatchingQuery ? { data } : data\n\n    // @ts-expect-error TODO\n    return {\n      ...dataEnvelope,\n      headers: response.headers,\n      status: response.status,\n    }\n  } else {\n    const errorResult =\n      typeof result === `string`\n        ? {\n            error: result,\n          }\n        : result\n    throw new ClientError(\n      // @ts-expect-error TODO\n      { ...errorResult, status: response.status, headers: response.headers },\n      { query, variables }\n    )\n  }\n}\n\n// prettier-ignore\ninterface RawRequestMethod {\n  <T, V extends Variables = Variables>(query: string, variables?: V, requestHeaders?: GraphQLClientRequestHeaders): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// prettier-ignore\ntype RawRequestMethodArgs<V extends Variables> =\n  | [query: string, variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n  | [RawRequestOptions<V>]\n\n// prettier-ignore\ninterface RawRequest {\n  <T, V extends Variables = Variables>(url: string, query: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestExtendedOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// prettier-ignore\ntype RawRequestArgs<V extends Variables> = \n  | [options: RawRequestExtendedOptions<V>, query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n  | [url: string,                           query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest: RawRequest = async <T, V extends Variables>(\n  ...args: RawRequestArgs<V>\n): Promise<GraphQLClientResponse<T>> => {\n  const [urlOrOptions, query, ...variablesAndRequestHeaders] = args\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\n// REMARKS: In order to have autocomplete for options work make it the first overload. If not\n// then autocomplete will instead show the various methods for a string, which is not what we want.\n// prettier-ignore\nasync function request<T, V extends Variables = Variables>(options: RequestExtendedOptions<V, T>): Promise<T>\n// prettier-ignore\nasync function request<T, V extends Variables = Variables>(url: string, document: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T>\n// prettier-ignore\n// eslint-disable-next-line\nasync function request<T, V extends Variables = Variables>(urlOrOptions: string | RequestExtendedOptions<V, T>, document?: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T> {\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.request<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests: BatchRequests = async (...args: BatchRequestsArgs) => {\n  const params = parseBatchRequestsArgsExtended(args)\n  const client = new GraphQLClient(params.url)\n  return client.batchRequests(params)\n}\n\ninterface Result<Data extends object = object> {\n  data: Data\n}\n\ntype BatchResult = [Result, ...Result[]]\n\n// prettier-ignore\ninterface BatchRequests {\n  <T extends BatchResult, V extends Variables = Variables>(url: string, documents: BatchRequestDocument<V>[], requestHeaders?: GraphQLClientRequestHeaders): Promise<T>\n  <T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsExtendedOptions<V>): Promise<T>\n}\n\ntype BatchRequestsArgs =\n  | [url: string, documents: BatchRequestDocument[], requestHeaders?: GraphQLClientRequestHeaders]\n  | [options: BatchRequestsExtendedOptions]\n\nconst parseBatchRequestsArgsExtended = (args: BatchRequestsArgs): BatchRequestsExtendedOptions => {\n  if (args.length === 1) {\n    return args[0]\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined,\n    }\n  }\n}\n\nconst createRequestBody = (\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer?: JsonSerializer\n): string => {\n  const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer\n  if (!Array.isArray(query)) {\n    return jsonSerializer_.stringify({ query, variables, operationName })\n  }\n\n  if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n    throw new Error(`Cannot create request body with given variable type, array expected`)\n  }\n\n  // Batch support\n  const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n    (acc, currentQuery, index) => {\n      acc.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n      return acc\n    },\n    []\n  )\n\n  return jsonSerializer_.stringify(payload)\n}\n\nconst getResult = async (\n  response: Response,\n  jsonSerializer: JsonSerializer\n): Promise<\n  | { data: object; errors: undefined }[]\n  | { data: object; errors: undefined }\n  | { data: undefined; errors: object }\n  | { data: undefined; errors: object[] }\n> => {\n  let contentType: string | undefined\n\n  response.headers.forEach((value, key) => {\n    if (key.toLowerCase() === `content-type`) {\n      contentType = value\n    }\n  })\n\n  if (\n    contentType &&\n    (contentType.toLowerCase().startsWith(`application/json`) ||\n      contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n      contentType.toLowerCase().startsWith(`application/graphql-response+json`))\n  ) {\n    return jsonSerializer.parse(await response.text()) as any\n  } else {\n    return response.text() as any\n  }\n}\n\nconst callOrIdentity = <T>(value: MaybeLazy<T>) => {\n  return typeof value === `function` ? (value as () => T)() : value\n}\n\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport const gql = (chunks: TemplateStringsArray, ...variables: unknown[]): string => {\n  return chunks.reduce(\n    (acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`,\n    ``\n  )\n}\n\nexport { GraphQLWebSocketClient } from './graphql-ws.js'\nexport { resolveRequestDocument } from './resolveRequestDocument.js'\nexport {\n  BatchRequestDocument,\n  batchRequests,\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  GraphQLClient,\n  rawRequest,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  request,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestMiddleware,\n  RequestOptions,\n  ResponseMiddleware,\n  Variables,\n}\nexport default request\n","/* eslint-disable */\nimport { resolveRequestDocument } from './resolveRequestDocument.js'\nimport type { RequestDocument, Variables } from './types.js'\nimport { ClientError } from './types.js'\n// import type WebSocket from 'ws'\n\nconst CONNECTION_INIT = `connection_init`\nconst CONNECTION_ACK = `connection_ack`\nconst PING = `ping`\nconst PONG = `pong`\nconst SUBSCRIBE = `subscribe`\nconst NEXT = `next`\nconst ERROR = `error`\nconst COMPLETE = `complete`\n\ntype MessagePayload = { [key: string]: any }\n\ntype SubscribePayload<V extends Variables = Variables, E = any> = {\n  operationName?: string | null\n  query: string\n  variables?: V\n  extensions?: E\n}\n\nclass GraphQLWebSocketMessage<A = MessagePayload> {\n  private _type: string\n  private _id?: string\n  private _payload?: A\n\n  public get type(): string {\n    return this._type\n  }\n  public get id(): string | undefined {\n    return this._id\n  }\n  public get payload(): A | undefined {\n    return this._payload\n  }\n\n  constructor(type: string, payload?: A, id?: string) {\n    this._type = type\n    this._payload = payload\n    this._id = id\n  }\n\n  public get text(): string {\n    const result: any = { type: this.type }\n    if (this.id != null && this.id != undefined) result.id = this.id\n    if (this.payload != null && this.payload != undefined) result.payload = this.payload\n    return JSON.stringify(result)\n  }\n\n  static parse<A>(data: string, f: (payload: any) => A): GraphQLWebSocketMessage<A> {\n    const { type, payload, id }: { type: string; payload: any; id: string } = JSON.parse(data)\n    return new GraphQLWebSocketMessage(type, f(payload), id)\n  }\n}\n\nexport type SocketHandler = {\n  onInit?: <T>() => Promise<T>\n  onAcknowledged?: <A>(payload?: A) => Promise<void>\n  onPing?: <In, Out>(payload: In) => Promise<Out>\n  onPong?: <T>(payload: T) => any\n  onClose?: () => any\n}\n\nexport type UnsubscribeCallback = () => void\n\nexport interface GraphQLSubscriber<T, E = unknown> {\n  next?(data: T, extensions?: E): void\n  error?(errorValue: ClientError): void\n  complete?(): void\n}\n\ntype SubscriptionRecord = {\n  subscriber: GraphQLSubscriber<unknown, unknown>\n  query: string\n  variables?: Variables\n}\n\ntype SocketState = {\n  acknowledged: boolean\n  lastRequestId: number\n  subscriptions: { [key: string]: SubscriptionRecord }\n}\n\nexport class GraphQLWebSocketClient {\n  static PROTOCOL = `graphql-transport-ws`\n\n  private socket: WebSocket\n  private socketState: SocketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} }\n\n  constructor(socket: WebSocket, { onInit, onAcknowledged, onPing, onPong }: SocketHandler) {\n    this.socket = socket\n\n    socket.addEventListener(`open`, async (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n      socket.send(ConnectionInit(onInit ? await onInit() : null).text)\n    })\n\n    socket.addEventListener(`close`, (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n    })\n\n    socket.addEventListener(`error`, (e) => {\n      console.error(e)\n    })\n\n    socket.addEventListener(`message`, (e) => {\n      try {\n        const message = parseMessage(e.data)\n        switch (message.type) {\n          case CONNECTION_ACK: {\n            if (this.socketState.acknowledged) {\n              console.warn(`Duplicate CONNECTION_ACK message ignored`)\n            } else {\n              this.socketState.acknowledged = true\n              if (onAcknowledged) onAcknowledged(message.payload)\n            }\n            return\n          }\n          case PING: {\n            if (onPing) onPing(message.payload).then((r) => socket.send(Pong(r).text))\n            else socket.send(Pong(null).text)\n            return\n          }\n          case PONG: {\n            if (onPong) onPong(message.payload)\n            return\n          }\n        }\n\n        if (!this.socketState.acknowledged) {\n          // Web-socket connection not acknowledged\n          return\n        }\n\n        if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n          // No subscription identifer or subscription indentifier is not found\n          return\n        }\n        const { query, variables, subscriber } = this.socketState.subscriptions[message.id]!\n\n        switch (message.type) {\n          case NEXT: {\n            if (!message.payload.errors && message.payload.data) {\n              subscriber.next && subscriber.next(message.payload.data)\n            }\n            if (message.payload.errors) {\n              subscriber.error &&\n                subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query, variables }))\n            } else {\n            }\n            return\n          }\n\n          case ERROR: {\n            subscriber.error &&\n              subscriber.error(\n                new ClientError({ errors: message.payload, status: 200 }, { query, variables })\n              )\n            return\n          }\n\n          case COMPLETE: {\n            subscriber.complete && subscriber.complete()\n            delete this.socketState.subscriptions[message.id]\n            return\n          }\n        }\n      } catch (e) {\n        // Unexpected errors while handling graphql-ws message\n        console.error(e)\n        socket.close(1006)\n      }\n      socket.close(4400, `Unknown graphql-ws message.`)\n    })\n  }\n\n  private makeSubscribe<T, V extends Variables, E>(\n    query: string,\n    operationName: string | undefined,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const subscriptionId = (this.socketState.lastRequestId++).toString()\n    this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber }\n    this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text)\n    return () => {\n      this.socket.send(Complete(subscriptionId).text)\n      delete this.socketState.subscriptions[subscriptionId]\n    }\n  }\n\n  rawRequest<T = any, V extends Variables = Variables, E = any>(\n    query: string,\n    variables?: V\n  ): Promise<{ data: T; extensions?: E }> {\n    return new Promise<{ data: T; extensions?: E; headers?: Headers; status?: number }>((resolve, reject) => {\n      let result: { data: T; extensions?: E }\n      this.rawSubscribe(\n        query,\n        {\n          next: (data: T, extensions: E) => (result = { data, extensions }),\n          error: reject,\n          complete: () => resolve(result),\n        },\n        variables\n      )\n    })\n  }\n\n  request<T = any, V extends Variables = Variables>(document: RequestDocument, variables?: V): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      let result: T\n      this.subscribe(\n        document,\n        {\n          next: (data: T) => (result = data),\n          error: reject,\n          complete: () => resolve(result),\n        },\n        variables\n      )\n    })\n  }\n\n  subscribe<T = any, V extends Variables = Variables, E = any>(\n    document: RequestDocument,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const { query, operationName } = resolveRequestDocument(document)\n    return this.makeSubscribe(query, operationName, subscriber, variables)\n  }\n\n  rawSubscribe<T = any, V extends Variables = Variables, E = any>(\n    query: string,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    return this.makeSubscribe(query, undefined, subscriber, variables)\n  }\n\n  ping(payload: Variables) {\n    this.socket.send(Ping(payload).text)\n  }\n\n  close() {\n    this.socket.close(1000)\n  }\n}\n\n// Helper functions\n\nfunction parseMessage<A = any>(data: string, f: (payload: any) => A = (a) => a): GraphQLWebSocketMessage<A> {\n  const m = GraphQLWebSocketMessage.parse<A>(data, f)\n  return m\n}\n\nfunction ConnectionInit<A>(payload?: A) {\n  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload)\n}\n\nfunction Ping(payload: any) {\n  return new GraphQLWebSocketMessage(PING, payload, undefined)\n}\nfunction Pong(payload: any) {\n  return new GraphQLWebSocketMessage(PONG, payload, undefined)\n}\n\nfunction Subscribe(id: string, payload: SubscribePayload) {\n  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id)\n}\n\nfunction Complete(id: string) {\n  return new GraphQLWebSocketMessage(COMPLETE, undefined, id)\n}\n","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n","import type { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  Address: { input: string; output: string; }\n  AssetId: { input: string; output: string; }\n  BlobId: { input: any; output: any; }\n  BlockId: { input: string; output: string; }\n  Bytes32: { input: string; output: string; }\n  ContractId: { input: string; output: string; }\n  HexString: { input: string; output: string; }\n  Nonce: { input: string; output: string; }\n  RelayedTransactionId: { input: string; output: string; }\n  Salt: { input: string; output: string; }\n  Signature: { input: string; output: string; }\n  Tai64Timestamp: { input: string; output: string; }\n  TransactionId: { input: string; output: string; }\n  TxPointer: { input: string; output: string; }\n  U16: { input: string; output: string; }\n  U32: { input: string; output: string; }\n  U64: { input: string; output: string; }\n  UtxoId: { input: string; output: string; }\n};\n\nexport type GqlBalance = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n};\n\nexport type GqlBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBalance;\n};\n\nexport type GqlBalanceFilterInput = {\n  /** Filter coins based on the `owner` field */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlBlob = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['BlobId']['output'];\n};\n\nexport type GqlBlock = {\n  consensus: GqlConsensus;\n  header: GqlHeader;\n  height: Scalars['U32']['output'];\n  id: Scalars['BlockId']['output'];\n  transactionIds: Array<Scalars['TransactionId']['output']>;\n  transactions: Array<GqlTransaction>;\n  version: GqlBlockVersion;\n};\n\nexport type GqlBlockConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBlockEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBlock>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBlockEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBlock;\n};\n\nexport enum GqlBlockVersion {\n  V1 = 'V1'\n}\n\n/** Breakpoint, defined as a tuple of contract ID and relative PC offset inside it */\nexport type GqlBreakpoint = {\n  contract: Scalars['ContractId']['input'];\n  pc: Scalars['U64']['input'];\n};\n\nexport type GqlChainInfo = {\n  consensusParameters: GqlConsensusParameters;\n  daHeight: Scalars['U64']['output'];\n  gasCosts: GqlGasCosts;\n  latestBlock: GqlBlock;\n  name: Scalars['String']['output'];\n};\n\nexport type GqlChangeOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  /** TxPointer - the height of the block this coin was created in */\n  blockCreated: Scalars['U32']['output'];\n  owner: Scalars['Address']['output'];\n  /** TxPointer - the index of the transaction that created this coin */\n  txCreatedIdx: Scalars['U16']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlCoinConnection = {\n  /** A list of edges. */\n  edges: Array<GqlCoinEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlCoin>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlCoinEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlCoin;\n};\n\nexport type GqlCoinFilterInput = {\n  /** Returns coins only with `asset_id`. */\n  assetId?: InputMaybe<Scalars['AssetId']['input']>;\n  /** Returns coins owned by the `owner`. */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlCoinOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\n/** The schema analog of the [`coins::CoinType`]. */\nexport type GqlCoinType = GqlCoin | GqlMessageCoin;\n\nexport type GqlConsensus = GqlGenesis | GqlPoAConsensus;\n\nexport type GqlConsensusParameters = {\n  baseAssetId: Scalars['AssetId']['output'];\n  blockGasLimit: Scalars['U64']['output'];\n  blockTransactionSizeLimit: Scalars['U64']['output'];\n  chainId: Scalars['U64']['output'];\n  contractParams: GqlContractParameters;\n  feeParams: GqlFeeParameters;\n  gasCosts: GqlGasCosts;\n  predicateParams: GqlPredicateParameters;\n  privilegedAddress: Scalars['Address']['output'];\n  scriptParams: GqlScriptParameters;\n  txParams: GqlTxParameters;\n  version: GqlConsensusParametersVersion;\n};\n\nexport type GqlConsensusParametersPurpose = {\n  checksum: Scalars['Bytes32']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport enum GqlConsensusParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlContract = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['ContractId']['output'];\n  salt: Scalars['Salt']['output'];\n};\n\nexport type GqlContractBalance = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  contract: Scalars['ContractId']['output'];\n};\n\nexport type GqlContractBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlContractBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlContractBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlContractBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlContractBalance;\n};\n\nexport type GqlContractBalanceFilterInput = {\n  /** Filter assets based on the `contractId` field */\n  contract: Scalars['ContractId']['input'];\n};\n\nexport type GqlContractCreated = {\n  contract: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractOutput = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  inputIndex: Scalars['U16']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractParameters = {\n  contractMaxSize: Scalars['U64']['output'];\n  maxStorageSlots: Scalars['U64']['output'];\n  version: GqlContractParametersVersion;\n};\n\nexport enum GqlContractParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlDependentCost = GqlHeavyOperation | GqlLightOperation;\n\nexport type GqlDryRunFailureStatus = {\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunSuccessStatus = {\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunTransactionExecutionStatus = {\n  id: Scalars['TransactionId']['output'];\n  receipts: Array<GqlReceipt>;\n  status: GqlDryRunTransactionStatus;\n};\n\nexport type GqlDryRunTransactionStatus = GqlDryRunFailureStatus | GqlDryRunSuccessStatus;\n\nexport type GqlEstimateGasPrice = {\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlExcludeInput = {\n  /** Messages to exclude from the selection. */\n  messages: Array<Scalars['Nonce']['input']>;\n  /** Utxos to exclude from the selection. */\n  utxos: Array<Scalars['UtxoId']['input']>;\n};\n\nexport type GqlFailureStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlFeeParameters = {\n  gasPerByte: Scalars['U64']['output'];\n  gasPriceFactor: Scalars['U64']['output'];\n  version: GqlFeeParametersVersion;\n};\n\nexport enum GqlFeeParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGasCosts = {\n  add: Scalars['U64']['output'];\n  addi: Scalars['U64']['output'];\n  aloc: Scalars['U64']['output'];\n  alocDependentCost: GqlDependentCost;\n  and: Scalars['U64']['output'];\n  andi: Scalars['U64']['output'];\n  bal: Scalars['U64']['output'];\n  bhei: Scalars['U64']['output'];\n  bhsh: Scalars['U64']['output'];\n  bldd?: Maybe<GqlDependentCost>;\n  bsiz?: Maybe<GqlDependentCost>;\n  burn: Scalars['U64']['output'];\n  call: GqlDependentCost;\n  cb: Scalars['U64']['output'];\n  ccp: GqlDependentCost;\n  cfe: GqlDependentCost;\n  cfei: Scalars['U64']['output'];\n  cfeiDependentCost: GqlDependentCost;\n  cfsi: Scalars['U64']['output'];\n  contractRoot: GqlDependentCost;\n  croo: GqlDependentCost;\n  csiz: GqlDependentCost;\n  div: Scalars['U64']['output'];\n  divi: Scalars['U64']['output'];\n  eck1: Scalars['U64']['output'];\n  ecr1: Scalars['U64']['output'];\n  ed19: Scalars['U64']['output'];\n  ed19DependentCost: GqlDependentCost;\n  eq: Scalars['U64']['output'];\n  exp: Scalars['U64']['output'];\n  expi: Scalars['U64']['output'];\n  flag: Scalars['U64']['output'];\n  gm: Scalars['U64']['output'];\n  gt: Scalars['U64']['output'];\n  gtf: Scalars['U64']['output'];\n  ji: Scalars['U64']['output'];\n  jmp: Scalars['U64']['output'];\n  jmpb: Scalars['U64']['output'];\n  jmpf: Scalars['U64']['output'];\n  jne: Scalars['U64']['output'];\n  jneb: Scalars['U64']['output'];\n  jnef: Scalars['U64']['output'];\n  jnei: Scalars['U64']['output'];\n  jnzb: Scalars['U64']['output'];\n  jnzf: Scalars['U64']['output'];\n  jnzi: Scalars['U64']['output'];\n  k256: GqlDependentCost;\n  lb: Scalars['U64']['output'];\n  ldc: GqlDependentCost;\n  log: Scalars['U64']['output'];\n  logd: GqlDependentCost;\n  lt: Scalars['U64']['output'];\n  lw: Scalars['U64']['output'];\n  mcl: GqlDependentCost;\n  mcli: GqlDependentCost;\n  mcp: GqlDependentCost;\n  mcpi: GqlDependentCost;\n  meq: GqlDependentCost;\n  mint: Scalars['U64']['output'];\n  mldv: Scalars['U64']['output'];\n  mlog: Scalars['U64']['output'];\n  modOp: Scalars['U64']['output'];\n  modi: Scalars['U64']['output'];\n  moveOp: Scalars['U64']['output'];\n  movi: Scalars['U64']['output'];\n  mroo: Scalars['U64']['output'];\n  mul: Scalars['U64']['output'];\n  muli: Scalars['U64']['output'];\n  newStoragePerByte: Scalars['U64']['output'];\n  noop: Scalars['U64']['output'];\n  not: Scalars['U64']['output'];\n  or: Scalars['U64']['output'];\n  ori: Scalars['U64']['output'];\n  poph: Scalars['U64']['output'];\n  popl: Scalars['U64']['output'];\n  pshh: Scalars['U64']['output'];\n  pshl: Scalars['U64']['output'];\n  ret: Scalars['U64']['output'];\n  retd: GqlDependentCost;\n  rvrt: Scalars['U64']['output'];\n  s256: GqlDependentCost;\n  sb: Scalars['U64']['output'];\n  scwq: GqlDependentCost;\n  sll: Scalars['U64']['output'];\n  slli: Scalars['U64']['output'];\n  smo: GqlDependentCost;\n  srl: Scalars['U64']['output'];\n  srli: Scalars['U64']['output'];\n  srw: Scalars['U64']['output'];\n  srwq: GqlDependentCost;\n  stateRoot: GqlDependentCost;\n  sub: Scalars['U64']['output'];\n  subi: Scalars['U64']['output'];\n  sw: Scalars['U64']['output'];\n  sww: Scalars['U64']['output'];\n  swwq: GqlDependentCost;\n  time: Scalars['U64']['output'];\n  tr: Scalars['U64']['output'];\n  tro: Scalars['U64']['output'];\n  version: GqlGasCostsVersion;\n  vmInitialization: GqlDependentCost;\n  wdam: Scalars['U64']['output'];\n  wdcm: Scalars['U64']['output'];\n  wddv: Scalars['U64']['output'];\n  wdmd: Scalars['U64']['output'];\n  wdml: Scalars['U64']['output'];\n  wdmm: Scalars['U64']['output'];\n  wdop: Scalars['U64']['output'];\n  wqam: Scalars['U64']['output'];\n  wqcm: Scalars['U64']['output'];\n  wqdv: Scalars['U64']['output'];\n  wqmd: Scalars['U64']['output'];\n  wqml: Scalars['U64']['output'];\n  wqmm: Scalars['U64']['output'];\n  wqop: Scalars['U64']['output'];\n  xor: Scalars['U64']['output'];\n  xori: Scalars['U64']['output'];\n};\n\nexport enum GqlGasCostsVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGenesis = {\n  /**\n   * The chain configs define what consensus type to use, what settlement layer to use,\n   * rules of block validity, etc.\n   */\n  chainConfigHash: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis coins. */\n  coinsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of state, balances, contracts code hash of each contract. */\n  contractsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis messages. */\n  messagesRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all processed transaction ids. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlHeader = {\n  /** Hash of the application header. */\n  applicationHash: Scalars['Bytes32']['output'];\n  /** The version of the consensus parameters used to create this block. */\n  consensusParametersVersion: Scalars['U32']['output'];\n  /** The layer 1 height of messages and events to include since the last layer 1 block number. */\n  daHeight: Scalars['U64']['output'];\n  /** Merkle root of inbox events in this block. */\n  eventInboxRoot: Scalars['Bytes32']['output'];\n  /** Fuel block height. */\n  height: Scalars['U32']['output'];\n  /** Hash of the header */\n  id: Scalars['BlockId']['output'];\n  /** Merkle root of message receipts in this block. */\n  messageOutboxRoot: Scalars['Bytes32']['output'];\n  /** Number of message receipts in this block. */\n  messageReceiptCount: Scalars['U32']['output'];\n  /** Merkle root of all previous block header hashes. */\n  prevRoot: Scalars['Bytes32']['output'];\n  /** The version of the state transition bytecode used to create this block. */\n  stateTransitionBytecodeVersion: Scalars['U32']['output'];\n  /** The block producer time. */\n  time: Scalars['Tai64Timestamp']['output'];\n  /** Number of transactions in this block. */\n  transactionsCount: Scalars['U16']['output'];\n  /** Merkle root of transactions. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n  /** Version of the header */\n  version: GqlHeaderVersion;\n};\n\nexport enum GqlHeaderVersion {\n  V1 = 'V1'\n}\n\nexport type GqlHeavyOperation = {\n  base: Scalars['U64']['output'];\n  gasPerUnit: Scalars['U64']['output'];\n};\n\nexport type GqlInput = GqlInputCoin | GqlInputContract | GqlInputMessage;\n\nexport type GqlInputCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n  witnessIndex: Scalars['Int']['output'];\n};\n\nexport type GqlInputContract = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  contractId: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlInputMessage = {\n  amount: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport type GqlLatestGasPrice = {\n  blockHeight: Scalars['U32']['output'];\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlLightOperation = {\n  base: Scalars['U64']['output'];\n  unitsPerGas: Scalars['U64']['output'];\n};\n\nexport type GqlMerkleProof = {\n  proofIndex: Scalars['U64']['output'];\n  proofSet: Array<Scalars['Bytes32']['output']>;\n};\n\nexport type GqlMessage = {\n  amount: Scalars['U64']['output'];\n  daHeight: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  daHeight: Scalars['U64']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageConnection = {\n  /** A list of edges. */\n  edges: Array<GqlMessageEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlMessage>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlMessageEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlMessage;\n};\n\nexport type GqlMessageProof = {\n  amount: Scalars['U64']['output'];\n  blockProof: GqlMerkleProof;\n  commitBlockHeader: GqlHeader;\n  data: Scalars['HexString']['output'];\n  messageBlockHeader: GqlHeader;\n  messageProof: GqlMerkleProof;\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport enum GqlMessageState {\n  NotFound = 'NOT_FOUND',\n  Spent = 'SPENT',\n  Unspent = 'UNSPENT'\n}\n\nexport type GqlMessageStatus = {\n  state: GqlMessageState;\n};\n\nexport type GqlMutation = {\n  /**\n   * Resume execution of the VM instance after a breakpoint.\n   * Runs until the next breakpoint or until the transaction completes.\n   */\n  continueTx: GqlRunResult;\n  /** Execute a dry-run of multiple transactions using a fork of current state, no changes are committed. */\n  dryRun: Array<GqlDryRunTransactionExecutionStatus>;\n  /** End debugger session. */\n  endSession: Scalars['Boolean']['output'];\n  /** Execute a single fuel-asm instruction. */\n  execute: Scalars['Boolean']['output'];\n  /**\n   * Sequentially produces `blocks_to_produce` blocks. The first block starts with\n   * `start_timestamp`. If the block production in the [`crate::service::Config`] is\n   * `Trigger::Interval { block_time }`, produces blocks with `block_time ` intervals between\n   * them. The `start_timestamp` is the timestamp in seconds.\n   */\n  produceBlocks: Scalars['U32']['output'];\n  /** Reset the VM instance to the initial state. */\n  reset: Scalars['Boolean']['output'];\n  /** Set a breakpoint for a VM instance. */\n  setBreakpoint: Scalars['Boolean']['output'];\n  /** Set single-stepping mode for the VM instance. */\n  setSingleStepping: Scalars['Boolean']['output'];\n  /**\n   * Initialize a new debugger session, returning its ID.\n   * A new VM instance is spawned for each session.\n   * The session is run in a separate database transaction,\n   * on top of the most recent node state.\n   */\n  startSession: Scalars['ID']['output'];\n  /**\n   * Run a single transaction in given session until it\n   * hits a breakpoint or completes.\n   */\n  startTx: GqlRunResult;\n  /**\n   * Submits transaction to the `TxPool`.\n   *\n   * Returns submitted transaction if the transaction is included in the `TxPool` without problems.\n   */\n  submit: GqlTransaction;\n};\n\n\nexport type GqlMutationContinueTxArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationDryRunArgs = {\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n  txs: Array<Scalars['HexString']['input']>;\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlMutationEndSessionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationExecuteArgs = {\n  id: Scalars['ID']['input'];\n  op: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationProduceBlocksArgs = {\n  blocksToProduce: Scalars['U32']['input'];\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n};\n\n\nexport type GqlMutationResetArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetBreakpointArgs = {\n  breakpoint: GqlBreakpoint;\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetSingleSteppingArgs = {\n  enable: Scalars['Boolean']['input'];\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationStartTxArgs = {\n  id: Scalars['ID']['input'];\n  txJson: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationSubmitArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlNodeInfo = {\n  maxDepth: Scalars['U64']['output'];\n  maxTx: Scalars['U64']['output'];\n  nodeVersion: Scalars['String']['output'];\n  peers: Array<GqlPeerInfo>;\n  utxoValidation: Scalars['Boolean']['output'];\n  vmBacktrace: Scalars['Boolean']['output'];\n};\n\nexport type GqlOutput = GqlChangeOutput | GqlCoinOutput | GqlContractCreated | GqlContractOutput | GqlVariableOutput;\n\n/**\n * A separate `Breakpoint` type to be used as an output, as a single\n * type cannot act as both input and output type in async-graphql\n */\nexport type GqlOutputBreakpoint = {\n  contract: Scalars['ContractId']['output'];\n  pc: Scalars['U64']['output'];\n};\n\n/** Information about pagination in a connection */\nexport type GqlPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\nexport type GqlPeerInfo = {\n  /** The advertised multi-addrs that can be used to connect to this peer */\n  addresses: Array<Scalars['String']['output']>;\n  /** The internal fuel p2p reputation of this peer */\n  appScore: Scalars['Float']['output'];\n  /** The last reported height of the peer */\n  blockHeight?: Maybe<Scalars['U32']['output']>;\n  /** The self-reported version of the client the peer is using */\n  clientVersion?: Maybe<Scalars['String']['output']>;\n  /** The libp2p peer id */\n  id: Scalars['String']['output'];\n  /** The last heartbeat from this peer in unix epoch time ms */\n  lastHeartbeatMs: Scalars['U64']['output'];\n};\n\nexport type GqlPoAConsensus = {\n  /** Gets the signature of the block produced by `PoA` consensus. */\n  signature: Scalars['Signature']['output'];\n};\n\nexport type GqlPolicies = {\n  maturity?: Maybe<Scalars['U32']['output']>;\n  maxFee?: Maybe<Scalars['U64']['output']>;\n  tip?: Maybe<Scalars['U64']['output']>;\n  witnessLimit?: Maybe<Scalars['U64']['output']>;\n};\n\nexport type GqlPredicateParameters = {\n  maxGasPerPredicate: Scalars['U64']['output'];\n  maxMessageDataLength: Scalars['U64']['output'];\n  maxPredicateDataLength: Scalars['U64']['output'];\n  maxPredicateLength: Scalars['U64']['output'];\n  version: GqlPredicateParametersVersion;\n};\n\nexport enum GqlPredicateParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlProgramState = {\n  data: Scalars['HexString']['output'];\n  returnType: GqlReturnType;\n};\n\nexport type GqlQuery = {\n  balance: GqlBalance;\n  balances: GqlBalanceConnection;\n  blob?: Maybe<GqlBlob>;\n  block?: Maybe<GqlBlock>;\n  blocks: GqlBlockConnection;\n  chain: GqlChainInfo;\n  /** Gets the coin by `utxo_id`. */\n  coin?: Maybe<GqlCoin>;\n  /** Gets all unspent coins of some `owner` maybe filtered with by `asset_id` per page. */\n  coins: GqlCoinConnection;\n  /**\n   * For each `query_per_asset`, get some spendable coins(of asset specified by the query) owned by\n   * `owner` that add up at least the query amount. The returned coins can be spent.\n   * The number of coins is optimized to prevent dust accumulation.\n   *\n   * The query supports excluding and maximum the number of coins.\n   *\n   * Returns:\n   * The list of spendable coins per asset from the query. The length of the result is\n   * the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`\n   * is the same.\n   */\n  coinsToSpend: Array<Array<GqlCoinType>>;\n  consensusParameters: GqlConsensusParameters;\n  contract?: Maybe<GqlContract>;\n  contractBalance: GqlContractBalance;\n  contractBalances: GqlContractBalanceConnection;\n  estimateGasPrice: GqlEstimateGasPrice;\n  /** Estimate the predicate gas for the provided transaction */\n  estimatePredicates: GqlTransaction;\n  /** Returns true when the GraphQL API is serving requests. */\n  health: Scalars['Boolean']['output'];\n  latestGasPrice: GqlLatestGasPrice;\n  /** Read read a range of memory bytes. */\n  memory: Scalars['String']['output'];\n  message?: Maybe<GqlMessage>;\n  messageProof?: Maybe<GqlMessageProof>;\n  messageStatus: GqlMessageStatus;\n  messages: GqlMessageConnection;\n  nodeInfo: GqlNodeInfo;\n  /** Read register value by index. */\n  register: Scalars['U64']['output'];\n  relayedTransactionStatus?: Maybe<GqlRelayedTransactionStatus>;\n  stateTransitionBytecodeByRoot: GqlStateTransitionBytecode;\n  stateTransitionBytecodeByVersion?: Maybe<GqlStateTransitionBytecode>;\n  transaction?: Maybe<GqlTransaction>;\n  transactions: GqlTransactionConnection;\n  transactionsByOwner: GqlTransactionConnection;\n};\n\n\nexport type GqlQueryBalanceArgs = {\n  assetId: Scalars['AssetId']['input'];\n  owner: Scalars['Address']['input'];\n};\n\n\nexport type GqlQueryBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryBlobArgs = {\n  id: Scalars['BlobId']['input'];\n};\n\n\nexport type GqlQueryBlockArgs = {\n  height?: InputMaybe<Scalars['U32']['input']>;\n  id?: InputMaybe<Scalars['BlockId']['input']>;\n};\n\n\nexport type GqlQueryBlocksArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinArgs = {\n  utxoId: Scalars['UtxoId']['input'];\n};\n\n\nexport type GqlQueryCoinsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlCoinFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinsToSpendArgs = {\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput>;\n};\n\n\nexport type GqlQueryConsensusParametersArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryContractArgs = {\n  id: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalanceArgs = {\n  asset: Scalars['AssetId']['input'];\n  contract: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlContractBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryEstimateGasPriceArgs = {\n  blockHorizon?: InputMaybe<Scalars['U32']['input']>;\n};\n\n\nexport type GqlQueryEstimatePredicatesArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryMemoryArgs = {\n  id: Scalars['ID']['input'];\n  size: Scalars['U32']['input'];\n  start: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryMessageArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessageProofArgs = {\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  nonce: Scalars['Nonce']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryMessageStatusArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner?: InputMaybe<Scalars['Address']['input']>;\n};\n\n\nexport type GqlQueryRegisterArgs = {\n  id: Scalars['ID']['input'];\n  register: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryRelayedTransactionStatusArgs = {\n  id: Scalars['RelayedTransactionId']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByRootArgs = {\n  root: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByVersionArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryTransactionArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryTransactionsByOwnerArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlReceipt = {\n  amount?: Maybe<Scalars['U64']['output']>;\n  assetId?: Maybe<Scalars['AssetId']['output']>;\n  /** Set in the case of a Panic receipt to indicate a missing contract input id */\n  contractId?: Maybe<Scalars['ContractId']['output']>;\n  data?: Maybe<Scalars['HexString']['output']>;\n  digest?: Maybe<Scalars['Bytes32']['output']>;\n  gas?: Maybe<Scalars['U64']['output']>;\n  gasUsed?: Maybe<Scalars['U64']['output']>;\n  id?: Maybe<Scalars['ContractId']['output']>;\n  is?: Maybe<Scalars['U64']['output']>;\n  len?: Maybe<Scalars['U64']['output']>;\n  nonce?: Maybe<Scalars['Nonce']['output']>;\n  param1?: Maybe<Scalars['U64']['output']>;\n  param2?: Maybe<Scalars['U64']['output']>;\n  pc?: Maybe<Scalars['U64']['output']>;\n  ptr?: Maybe<Scalars['U64']['output']>;\n  ra?: Maybe<Scalars['U64']['output']>;\n  rb?: Maybe<Scalars['U64']['output']>;\n  rc?: Maybe<Scalars['U64']['output']>;\n  rd?: Maybe<Scalars['U64']['output']>;\n  reason?: Maybe<Scalars['U64']['output']>;\n  receiptType: GqlReceiptType;\n  recipient?: Maybe<Scalars['Address']['output']>;\n  result?: Maybe<Scalars['U64']['output']>;\n  sender?: Maybe<Scalars['Address']['output']>;\n  subId?: Maybe<Scalars['Bytes32']['output']>;\n  to?: Maybe<Scalars['ContractId']['output']>;\n  toAddress?: Maybe<Scalars['Address']['output']>;\n  val?: Maybe<Scalars['U64']['output']>;\n};\n\nexport enum GqlReceiptType {\n  Burn = 'BURN',\n  Call = 'CALL',\n  Log = 'LOG',\n  LogData = 'LOG_DATA',\n  MessageOut = 'MESSAGE_OUT',\n  Mint = 'MINT',\n  Panic = 'PANIC',\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT',\n  ScriptResult = 'SCRIPT_RESULT',\n  Transfer = 'TRANSFER',\n  TransferOut = 'TRANSFER_OUT'\n}\n\nexport type GqlRelayedTransactionFailed = {\n  blockHeight: Scalars['U32']['output'];\n  failure: Scalars['String']['output'];\n};\n\nexport type GqlRelayedTransactionStatus = GqlRelayedTransactionFailed;\n\nexport enum GqlReturnType {\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT'\n}\n\nexport type GqlRunResult = {\n  breakpoint?: Maybe<GqlOutputBreakpoint>;\n  jsonReceipts: Array<Scalars['String']['output']>;\n  state: GqlRunState;\n};\n\nexport enum GqlRunState {\n  /** Stopped on a breakpoint */\n  Breakpoint = 'BREAKPOINT',\n  /** All breakpoints have been processed, and the program has terminated */\n  Completed = 'COMPLETED'\n}\n\nexport type GqlScriptParameters = {\n  maxScriptDataLength: Scalars['U64']['output'];\n  maxScriptLength: Scalars['U64']['output'];\n  version: GqlScriptParametersVersion;\n};\n\nexport enum GqlScriptParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlSpendQueryElementInput = {\n  /** Target amount for the query. */\n  amount: Scalars['U64']['input'];\n  /** Identifier of the asset to spend. */\n  assetId: Scalars['AssetId']['input'];\n  /** The maximum number of currencies for selection. */\n  max?: InputMaybe<Scalars['U32']['input']>;\n};\n\nexport type GqlSqueezedOutStatus = {\n  reason: Scalars['String']['output'];\n};\n\nexport type GqlStateTransitionBytecode = {\n  bytecode: GqlUploadedBytecode;\n  root: Scalars['HexString']['output'];\n};\n\nexport type GqlStateTransitionPurpose = {\n  root: Scalars['Bytes32']['output'];\n};\n\nexport type GqlSubmittedStatus = {\n  time: Scalars['Tai64Timestamp']['output'];\n};\n\nexport type GqlSubscription = {\n  /**\n   * Returns a stream of status updates for the given transaction id.\n   * If the current status is [`TransactionStatus::Success`], [`TransactionStatus::SqueezedOut`]\n   * or [`TransactionStatus::Failed`] the stream will return that and end immediately.\n   * If the current status is [`TransactionStatus::Submitted`] this will be returned\n   * and the stream will wait for a future update.\n   *\n   * This stream will wait forever so it's advised to use within a timeout.\n   *\n   * It is possible for the stream to miss an update if it is polled slower\n   * then the updates arrive. In such a case the stream will close without\n   * a status. If this occurs the stream can simply be restarted to return\n   * the latest status.\n   */\n  statusChange: GqlTransactionStatus;\n  /** Submits transaction to the `TxPool` and await either confirmation or failure. */\n  submitAndAwait: GqlTransactionStatus;\n  /**\n   * Submits the transaction to the `TxPool` and returns a stream of events.\n   * Compared to the `submitAndAwait`, the stream also contains `\n   * SubmittedStatus` as an intermediate state.\n   */\n  submitAndAwaitStatus: GqlTransactionStatus;\n};\n\n\nexport type GqlSubscriptionStatusChangeArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitStatusArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlSuccessStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlTransaction = {\n  blobId?: Maybe<Scalars['BlobId']['output']>;\n  bytecodeRoot?: Maybe<Scalars['Bytes32']['output']>;\n  bytecodeWitnessIndex?: Maybe<Scalars['U16']['output']>;\n  id: Scalars['TransactionId']['output'];\n  inputAssetIds?: Maybe<Array<Scalars['AssetId']['output']>>;\n  inputContract?: Maybe<GqlInputContract>;\n  inputContracts?: Maybe<Array<Scalars['ContractId']['output']>>;\n  inputs?: Maybe<Array<GqlInput>>;\n  isBlob: Scalars['Boolean']['output'];\n  isCreate: Scalars['Boolean']['output'];\n  isMint: Scalars['Boolean']['output'];\n  isScript: Scalars['Boolean']['output'];\n  isUpgrade: Scalars['Boolean']['output'];\n  isUpload: Scalars['Boolean']['output'];\n  maturity?: Maybe<Scalars['U32']['output']>;\n  mintAmount?: Maybe<Scalars['U64']['output']>;\n  mintAssetId?: Maybe<Scalars['AssetId']['output']>;\n  mintGasPrice?: Maybe<Scalars['U64']['output']>;\n  outputContract?: Maybe<GqlContractOutput>;\n  outputs: Array<GqlOutput>;\n  policies?: Maybe<GqlPolicies>;\n  proofSet?: Maybe<Array<Scalars['Bytes32']['output']>>;\n  /** Return the transaction bytes using canonical encoding */\n  rawPayload: Scalars['HexString']['output'];\n  receiptsRoot?: Maybe<Scalars['Bytes32']['output']>;\n  salt?: Maybe<Scalars['Salt']['output']>;\n  script?: Maybe<Scalars['HexString']['output']>;\n  scriptData?: Maybe<Scalars['HexString']['output']>;\n  scriptGasLimit?: Maybe<Scalars['U64']['output']>;\n  status?: Maybe<GqlTransactionStatus>;\n  storageSlots?: Maybe<Array<Scalars['HexString']['output']>>;\n  subsectionIndex?: Maybe<Scalars['U16']['output']>;\n  subsectionsNumber?: Maybe<Scalars['U16']['output']>;\n  txPointer?: Maybe<Scalars['TxPointer']['output']>;\n  upgradePurpose?: Maybe<GqlUpgradePurpose>;\n  witnesses?: Maybe<Array<Scalars['HexString']['output']>>;\n};\n\nexport type GqlTransactionConnection = {\n  /** A list of edges. */\n  edges: Array<GqlTransactionEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlTransaction>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlTransactionEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlTransaction;\n};\n\nexport type GqlTransactionStatus = GqlFailureStatus | GqlSqueezedOutStatus | GqlSubmittedStatus | GqlSuccessStatus;\n\nexport type GqlTxParameters = {\n  maxBytecodeSubsections: Scalars['U16']['output'];\n  maxGasPerTx: Scalars['U64']['output'];\n  maxInputs: Scalars['U16']['output'];\n  maxOutputs: Scalars['U16']['output'];\n  maxSize: Scalars['U64']['output'];\n  maxWitnesses: Scalars['U32']['output'];\n  version: GqlTxParametersVersion;\n};\n\nexport enum GqlTxParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlUpgradePurpose = GqlConsensusParametersPurpose | GqlStateTransitionPurpose;\n\nexport type GqlUploadedBytecode = {\n  /** Combined bytecode of all uploaded subsections. */\n  bytecode: Scalars['HexString']['output'];\n  /** Indicates if the bytecode upload is complete. */\n  completed: Scalars['Boolean']['output'];\n  /** Number of uploaded subsections (if incomplete). */\n  uploadedSubsectionsNumber?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type GqlVariableOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlSubmittedStatusFragment = { time: string, type: 'SubmittedStatus' };\n\nexport type GqlSuccessStatusFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSuccessStatusWithBlockIdFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusWithBlockIdFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSqueezedOutStatusFragment = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusFragment = GqlTransactionStatusFragment_FailureStatus | GqlTransactionStatusFragment_SqueezedOutStatus | GqlTransactionStatusFragment_SubmittedStatus | GqlTransactionStatusFragment_SuccessStatus;\n\nexport type GqlMalleableTransactionFieldsFragment = { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> };\n\ntype GqlTransactionStatusSubscriptionFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusSubscriptionFragment = GqlTransactionStatusSubscriptionFragment_FailureStatus | GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus | GqlTransactionStatusSubscriptionFragment_SubmittedStatus | GqlTransactionStatusSubscriptionFragment_SuccessStatus;\n\nexport type GqlTransactionFragment = { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null };\n\nexport type GqlTransactionRawPayloadFragment = { id: string, rawPayload: string };\n\ntype GqlInputEstimatePredicatesFragment_InputCoin = { predicateGasUsed: string };\n\ntype GqlInputEstimatePredicatesFragment_InputContract = {};\n\ntype GqlInputEstimatePredicatesFragment_InputMessage = { predicateGasUsed: string };\n\nexport type GqlInputEstimatePredicatesFragment = GqlInputEstimatePredicatesFragment_InputCoin | GqlInputEstimatePredicatesFragment_InputContract | GqlInputEstimatePredicatesFragment_InputMessage;\n\nexport type GqlTransactionEstimatePredicatesFragment = { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null };\n\nexport type GqlDryRunFailureStatusFragment = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunSuccessStatusFragment = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlReceiptFragment = { id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunFailureStatus = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunSuccessStatus = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunTransactionStatusFragment = GqlDryRunTransactionStatusFragment_DryRunFailureStatus | GqlDryRunTransactionStatusFragment_DryRunSuccessStatus;\n\nexport type GqlDryRunTransactionExecutionStatusFragment = { id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlBlockFragment = { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> };\n\nexport type GqlCoinFragment = { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' };\n\nexport type GqlMessageCoinFragment = { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' };\n\nexport type GqlMessageFragment = { amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlGetMessageFragment = { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlMessageProofFragment = { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } };\n\nexport type GqlTxParametersFragment = { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string };\n\nexport type GqlPredicateParametersFragment = { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string };\n\nexport type GqlScriptParametersFragment = { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string };\n\nexport type GqlContractParametersFragment = { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string };\n\nexport type GqlFeeParametersFragment = { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string };\n\ntype GqlDependentCostFragment_HeavyOperation = { base: string, gasPerUnit: string, type: 'HeavyOperation' };\n\ntype GqlDependentCostFragment_LightOperation = { base: string, unitsPerGas: string, type: 'LightOperation' };\n\nexport type GqlDependentCostFragment = GqlDependentCostFragment_HeavyOperation | GqlDependentCostFragment_LightOperation;\n\nexport type GqlGasCostsFragment = { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } };\n\nexport type GqlConsensusParametersFragment = { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } };\n\nexport type GqlChainInfoFragment = { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } };\n\nexport type GqlContractBalanceFragment = { contract: string, amount: string, assetId: string };\n\nexport type GqlPageInfoFragment = { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null };\n\nexport type GqlGetVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetVersionQuery = { nodeInfo: { nodeVersion: string } };\n\nexport type GqlNodeInfoFragment = { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string };\n\nexport type GqlRelayedTransactionStatusFragment = { blockHeight: string, failure: string };\n\nexport type GqlGetNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetNodeInfoQuery = { nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string } };\n\nexport type GqlGetChainQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } } };\n\nexport type GqlGetChainAndNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainAndNodeInfoQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } }, nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string } };\n\nexport type GqlGetTransactionQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionWithReceiptsQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionWithReceiptsQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionsQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsQuery = { transactions: { edges: Array<{ node: { rawPayload: string } }>, pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null } } };\n\nexport type GqlGetTransactionsByOwnerQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsByOwnerQuery = { transactionsByOwner: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } }> } };\n\nexport type GqlEstimatePredicatesQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlEstimatePredicatesQuery = { estimatePredicates: { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null } };\n\nexport type GqlGetLatestBlockQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockQuery = { chain: { latestBlock: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } } };\n\nexport type GqlGetLatestBlockHeightQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockHeightQuery = { chain: { latestBlock: { height: string } } };\n\nexport type GqlGetBlockQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  height?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockQuery = { block?: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } | null };\n\nexport type GqlGetBlockWithTransactionsQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockWithTransactionsQuery = { block?: { id: string, height: string, transactions: Array<{ id: string, rawPayload: string }>, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string } } | null };\n\nexport type GqlGetBlocksQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBlocksQuery = { blocks: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } }> } };\n\nexport type GqlGetCoinQueryVariables = Exact<{\n  coinId: Scalars['UtxoId']['input'];\n}>;\n\n\nexport type GqlGetCoinQuery = { coin?: { owner: string, utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | null };\n\nexport type GqlGetCoinsQueryVariables = Exact<{\n  filter: GqlCoinFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetCoinsQuery = { coins: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } }> } };\n\nexport type GqlGetCoinsToSpendQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput> | GqlSpendQueryElementInput;\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n}>;\n\n\nexport type GqlGetCoinsToSpendQuery = { coinsToSpend: Array<Array<{ utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' }>> };\n\nexport type GqlGetContractQueryVariables = Exact<{\n  contractId: Scalars['ContractId']['input'];\n}>;\n\n\nexport type GqlGetContractQuery = { contract?: { bytecode: string, id: string } | null };\n\nexport type GqlGetContractBalanceQueryVariables = Exact<{\n  contract: Scalars['ContractId']['input'];\n  asset: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetContractBalanceQuery = { contractBalance: { contract: string, amount: string, assetId: string } };\n\nexport type GqlGetBalanceQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetBalanceQuery = { balance: { amount: string } };\n\nexport type GqlGetLatestGasPriceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestGasPriceQuery = { latestGasPrice: { gasPrice: string } };\n\nexport type GqlEstimateGasPriceQueryVariables = Exact<{\n  blockHorizon: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlEstimateGasPriceQuery = { estimateGasPrice: { gasPrice: string } };\n\nexport type GqlGetBalancesQueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBalancesQuery = { balances: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { assetId: string, amount: string } }> } };\n\nexport type GqlGetMessagesQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetMessagesQuery = { messages: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string } }> } };\n\nexport type GqlGetMessageProofQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n  nonce: Scalars['Nonce']['input'];\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetMessageProofQuery = { messageProof?: { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } } | null };\n\nexport type GqlGetMessageStatusQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageStatusQuery = { messageStatus: { state: GqlMessageState } };\n\nexport type GqlGetRelayedTransactionStatusQueryVariables = Exact<{\n  relayedTransactionId: Scalars['RelayedTransactionId']['input'];\n}>;\n\n\nexport type GqlGetRelayedTransactionStatusQuery = { relayedTransactionStatus?: { blockHeight: string, failure: string } | null };\n\nexport type GqlDryRunMutationVariables = Exact<{\n  encodedTransactions: Array<Scalars['HexString']['input']> | Scalars['HexString']['input'];\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n}>;\n\n\nexport type GqlDryRunMutation = { dryRun: Array<{ id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> }> };\n\nexport type GqlSubmitMutationVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitMutation = { submit: { id: string } };\n\nexport type GqlProduceBlocksMutationVariables = Exact<{\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n  blocksToProduce: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlProduceBlocksMutation = { produceBlocks: string };\n\nexport type GqlGetMessageByNonceQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageByNonceQuery = { message?: { amount: string, sender: string, recipient: string, data: string, daHeight: string } | null };\n\nexport type GqlIsUserAccountQueryVariables = Exact<{\n  blobId: Scalars['BlobId']['input'];\n  contractId: Scalars['ContractId']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlIsUserAccountQuery = { blob?: { id: any } | null, contract?: { id: string } | null, transaction?: { id: string } | null };\n\nexport type GqlGetConsensusParametersVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetConsensusParametersVersionQuery = { chain: { latestBlock: { header: { consensusParametersVersion: string } } } };\n\nexport type GqlSubmitAndAwaitStatusSubscriptionVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitAndAwaitStatusSubscription = { submitAndAwaitStatus: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport type GqlStatusChangeSubscriptionVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlStatusChangeSubscription = { statusChange: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport const SubmittedStatusFragmentDoc = gql`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nexport const ReceiptFragmentDoc = gql`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nexport const SuccessStatusFragmentDoc = gql`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nexport const SuccessStatusWithBlockIdFragmentDoc = gql`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nexport const MalleableTransactionFieldsFragmentDoc = gql`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nexport const FailureStatusFragmentDoc = gql`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const FailureStatusWithBlockIdFragmentDoc = gql`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nexport const SqueezedOutStatusFragmentDoc = gql`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nexport const TransactionStatusSubscriptionFragmentDoc = gql`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionStatusFragmentDoc = gql`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionFragmentDoc = gql`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nexport const TransactionRawPayloadFragmentDoc = gql`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nexport const InputEstimatePredicatesFragmentDoc = gql`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nexport const TransactionEstimatePredicatesFragmentDoc = gql`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nexport const DryRunFailureStatusFragmentDoc = gql`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunSuccessStatusFragmentDoc = gql`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunTransactionStatusFragmentDoc = gql`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nexport const DryRunTransactionExecutionStatusFragmentDoc = gql`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nexport const BlockFragmentDoc = gql`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nexport const CoinFragmentDoc = gql`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nexport const MessageCoinFragmentDoc = gql`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nexport const MessageFragmentDoc = gql`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nexport const GetMessageFragmentDoc = gql`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nexport const MessageProofFragmentDoc = gql`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nexport const TxParametersFragmentDoc = gql`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nexport const PredicateParametersFragmentDoc = gql`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nexport const ScriptParametersFragmentDoc = gql`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nexport const ContractParametersFragmentDoc = gql`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nexport const FeeParametersFragmentDoc = gql`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nexport const DependentCostFragmentDoc = gql`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nexport const GasCostsFragmentDoc = gql`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nexport const ConsensusParametersFragmentDoc = gql`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nexport const ChainInfoFragmentDoc = gql`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nexport const ContractBalanceFragmentDoc = gql`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nexport const PageInfoFragmentDoc = gql`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nexport const NodeInfoFragmentDoc = gql`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n}\n    `;\nexport const RelayedTransactionStatusFragmentDoc = gql`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nexport const GetVersionDocument = gql`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nexport const GetNodeInfoDocument = gql`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nexport const GetChainDocument = gql`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nexport const GetChainAndNodeInfoDocument = gql`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nexport const GetTransactionDocument = gql`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nexport const GetTransactionWithReceiptsDocument = gql`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const GetTransactionsDocument = gql`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetTransactionsByOwnerDocument = gql`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nexport const EstimatePredicatesDocument = gql`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nexport const GetLatestBlockDocument = gql`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetLatestBlockHeightDocument = gql`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nexport const GetBlockDocument = gql`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetBlockWithTransactionsDocument = gql`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nexport const GetBlocksDocument = gql`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nexport const GetCoinDocument = gql`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nexport const GetCoinsDocument = gql`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nexport const GetCoinsToSpendDocument = gql`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nexport const GetContractDocument = gql`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nexport const GetContractBalanceDocument = gql`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nexport const GetBalanceDocument = gql`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nexport const GetLatestGasPriceDocument = gql`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nexport const EstimateGasPriceDocument = gql`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nexport const GetBalancesDocument = gql`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetMessagesDocument = gql`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nexport const GetMessageProofDocument = gql`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nexport const GetMessageStatusDocument = gql`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nexport const GetRelayedTransactionStatusDocument = gql`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nexport const DryRunDocument = gql`\n    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nexport const SubmitDocument = gql`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nexport const ProduceBlocksDocument = gql`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nexport const GetMessageByNonceDocument = gql`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nexport const IsUserAccountDocument = gql`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nexport const GetConsensusParametersVersionDocument = gql`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nexport const SubmitAndAwaitStatusDocument = gql`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {\n  submitAndAwaitStatus(tx: $encodedTransaction) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport const StatusChangeDocument = gql`\n    subscription statusChange($transactionId: TransactionId!) {\n  statusChange(id: $transactionId) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport type Requester<C = {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>\nexport function getSdk<C>(requester: Requester<C>) {\n  return {\n    getVersion(variables?: GqlGetVersionQueryVariables, options?: C): Promise<GqlGetVersionQuery> {\n      return requester<GqlGetVersionQuery, GqlGetVersionQueryVariables>(GetVersionDocument, variables, options) as Promise<GqlGetVersionQuery>;\n    },\n    getNodeInfo(variables?: GqlGetNodeInfoQueryVariables, options?: C): Promise<GqlGetNodeInfoQuery> {\n      return requester<GqlGetNodeInfoQuery, GqlGetNodeInfoQueryVariables>(GetNodeInfoDocument, variables, options) as Promise<GqlGetNodeInfoQuery>;\n    },\n    getChain(variables?: GqlGetChainQueryVariables, options?: C): Promise<GqlGetChainQuery> {\n      return requester<GqlGetChainQuery, GqlGetChainQueryVariables>(GetChainDocument, variables, options) as Promise<GqlGetChainQuery>;\n    },\n    getChainAndNodeInfo(variables?: GqlGetChainAndNodeInfoQueryVariables, options?: C): Promise<GqlGetChainAndNodeInfoQuery> {\n      return requester<GqlGetChainAndNodeInfoQuery, GqlGetChainAndNodeInfoQueryVariables>(GetChainAndNodeInfoDocument, variables, options) as Promise<GqlGetChainAndNodeInfoQuery>;\n    },\n    getTransaction(variables: GqlGetTransactionQueryVariables, options?: C): Promise<GqlGetTransactionQuery> {\n      return requester<GqlGetTransactionQuery, GqlGetTransactionQueryVariables>(GetTransactionDocument, variables, options) as Promise<GqlGetTransactionQuery>;\n    },\n    getTransactionWithReceipts(variables: GqlGetTransactionWithReceiptsQueryVariables, options?: C): Promise<GqlGetTransactionWithReceiptsQuery> {\n      return requester<GqlGetTransactionWithReceiptsQuery, GqlGetTransactionWithReceiptsQueryVariables>(GetTransactionWithReceiptsDocument, variables, options) as Promise<GqlGetTransactionWithReceiptsQuery>;\n    },\n    getTransactions(variables?: GqlGetTransactionsQueryVariables, options?: C): Promise<GqlGetTransactionsQuery> {\n      return requester<GqlGetTransactionsQuery, GqlGetTransactionsQueryVariables>(GetTransactionsDocument, variables, options) as Promise<GqlGetTransactionsQuery>;\n    },\n    getTransactionsByOwner(variables: GqlGetTransactionsByOwnerQueryVariables, options?: C): Promise<GqlGetTransactionsByOwnerQuery> {\n      return requester<GqlGetTransactionsByOwnerQuery, GqlGetTransactionsByOwnerQueryVariables>(GetTransactionsByOwnerDocument, variables, options) as Promise<GqlGetTransactionsByOwnerQuery>;\n    },\n    estimatePredicates(variables: GqlEstimatePredicatesQueryVariables, options?: C): Promise<GqlEstimatePredicatesQuery> {\n      return requester<GqlEstimatePredicatesQuery, GqlEstimatePredicatesQueryVariables>(EstimatePredicatesDocument, variables, options) as Promise<GqlEstimatePredicatesQuery>;\n    },\n    getLatestBlock(variables?: GqlGetLatestBlockQueryVariables, options?: C): Promise<GqlGetLatestBlockQuery> {\n      return requester<GqlGetLatestBlockQuery, GqlGetLatestBlockQueryVariables>(GetLatestBlockDocument, variables, options) as Promise<GqlGetLatestBlockQuery>;\n    },\n    getLatestBlockHeight(variables?: GqlGetLatestBlockHeightQueryVariables, options?: C): Promise<GqlGetLatestBlockHeightQuery> {\n      return requester<GqlGetLatestBlockHeightQuery, GqlGetLatestBlockHeightQueryVariables>(GetLatestBlockHeightDocument, variables, options) as Promise<GqlGetLatestBlockHeightQuery>;\n    },\n    getBlock(variables?: GqlGetBlockQueryVariables, options?: C): Promise<GqlGetBlockQuery> {\n      return requester<GqlGetBlockQuery, GqlGetBlockQueryVariables>(GetBlockDocument, variables, options) as Promise<GqlGetBlockQuery>;\n    },\n    getBlockWithTransactions(variables?: GqlGetBlockWithTransactionsQueryVariables, options?: C): Promise<GqlGetBlockWithTransactionsQuery> {\n      return requester<GqlGetBlockWithTransactionsQuery, GqlGetBlockWithTransactionsQueryVariables>(GetBlockWithTransactionsDocument, variables, options) as Promise<GqlGetBlockWithTransactionsQuery>;\n    },\n    getBlocks(variables?: GqlGetBlocksQueryVariables, options?: C): Promise<GqlGetBlocksQuery> {\n      return requester<GqlGetBlocksQuery, GqlGetBlocksQueryVariables>(GetBlocksDocument, variables, options) as Promise<GqlGetBlocksQuery>;\n    },\n    getCoin(variables: GqlGetCoinQueryVariables, options?: C): Promise<GqlGetCoinQuery> {\n      return requester<GqlGetCoinQuery, GqlGetCoinQueryVariables>(GetCoinDocument, variables, options) as Promise<GqlGetCoinQuery>;\n    },\n    getCoins(variables: GqlGetCoinsQueryVariables, options?: C): Promise<GqlGetCoinsQuery> {\n      return requester<GqlGetCoinsQuery, GqlGetCoinsQueryVariables>(GetCoinsDocument, variables, options) as Promise<GqlGetCoinsQuery>;\n    },\n    getCoinsToSpend(variables: GqlGetCoinsToSpendQueryVariables, options?: C): Promise<GqlGetCoinsToSpendQuery> {\n      return requester<GqlGetCoinsToSpendQuery, GqlGetCoinsToSpendQueryVariables>(GetCoinsToSpendDocument, variables, options) as Promise<GqlGetCoinsToSpendQuery>;\n    },\n    getContract(variables: GqlGetContractQueryVariables, options?: C): Promise<GqlGetContractQuery> {\n      return requester<GqlGetContractQuery, GqlGetContractQueryVariables>(GetContractDocument, variables, options) as Promise<GqlGetContractQuery>;\n    },\n    getContractBalance(variables: GqlGetContractBalanceQueryVariables, options?: C): Promise<GqlGetContractBalanceQuery> {\n      return requester<GqlGetContractBalanceQuery, GqlGetContractBalanceQueryVariables>(GetContractBalanceDocument, variables, options) as Promise<GqlGetContractBalanceQuery>;\n    },\n    getBalance(variables: GqlGetBalanceQueryVariables, options?: C): Promise<GqlGetBalanceQuery> {\n      return requester<GqlGetBalanceQuery, GqlGetBalanceQueryVariables>(GetBalanceDocument, variables, options) as Promise<GqlGetBalanceQuery>;\n    },\n    getLatestGasPrice(variables?: GqlGetLatestGasPriceQueryVariables, options?: C): Promise<GqlGetLatestGasPriceQuery> {\n      return requester<GqlGetLatestGasPriceQuery, GqlGetLatestGasPriceQueryVariables>(GetLatestGasPriceDocument, variables, options) as Promise<GqlGetLatestGasPriceQuery>;\n    },\n    estimateGasPrice(variables: GqlEstimateGasPriceQueryVariables, options?: C): Promise<GqlEstimateGasPriceQuery> {\n      return requester<GqlEstimateGasPriceQuery, GqlEstimateGasPriceQueryVariables>(EstimateGasPriceDocument, variables, options) as Promise<GqlEstimateGasPriceQuery>;\n    },\n    getBalances(variables: GqlGetBalancesQueryVariables, options?: C): Promise<GqlGetBalancesQuery> {\n      return requester<GqlGetBalancesQuery, GqlGetBalancesQueryVariables>(GetBalancesDocument, variables, options) as Promise<GqlGetBalancesQuery>;\n    },\n    getMessages(variables: GqlGetMessagesQueryVariables, options?: C): Promise<GqlGetMessagesQuery> {\n      return requester<GqlGetMessagesQuery, GqlGetMessagesQueryVariables>(GetMessagesDocument, variables, options) as Promise<GqlGetMessagesQuery>;\n    },\n    getMessageProof(variables: GqlGetMessageProofQueryVariables, options?: C): Promise<GqlGetMessageProofQuery> {\n      return requester<GqlGetMessageProofQuery, GqlGetMessageProofQueryVariables>(GetMessageProofDocument, variables, options) as Promise<GqlGetMessageProofQuery>;\n    },\n    getMessageStatus(variables: GqlGetMessageStatusQueryVariables, options?: C): Promise<GqlGetMessageStatusQuery> {\n      return requester<GqlGetMessageStatusQuery, GqlGetMessageStatusQueryVariables>(GetMessageStatusDocument, variables, options) as Promise<GqlGetMessageStatusQuery>;\n    },\n    getRelayedTransactionStatus(variables: GqlGetRelayedTransactionStatusQueryVariables, options?: C): Promise<GqlGetRelayedTransactionStatusQuery> {\n      return requester<GqlGetRelayedTransactionStatusQuery, GqlGetRelayedTransactionStatusQueryVariables>(GetRelayedTransactionStatusDocument, variables, options) as Promise<GqlGetRelayedTransactionStatusQuery>;\n    },\n    dryRun(variables: GqlDryRunMutationVariables, options?: C): Promise<GqlDryRunMutation> {\n      return requester<GqlDryRunMutation, GqlDryRunMutationVariables>(DryRunDocument, variables, options) as Promise<GqlDryRunMutation>;\n    },\n    submit(variables: GqlSubmitMutationVariables, options?: C): Promise<GqlSubmitMutation> {\n      return requester<GqlSubmitMutation, GqlSubmitMutationVariables>(SubmitDocument, variables, options) as Promise<GqlSubmitMutation>;\n    },\n    produceBlocks(variables: GqlProduceBlocksMutationVariables, options?: C): Promise<GqlProduceBlocksMutation> {\n      return requester<GqlProduceBlocksMutation, GqlProduceBlocksMutationVariables>(ProduceBlocksDocument, variables, options) as Promise<GqlProduceBlocksMutation>;\n    },\n    getMessageByNonce(variables: GqlGetMessageByNonceQueryVariables, options?: C): Promise<GqlGetMessageByNonceQuery> {\n      return requester<GqlGetMessageByNonceQuery, GqlGetMessageByNonceQueryVariables>(GetMessageByNonceDocument, variables, options) as Promise<GqlGetMessageByNonceQuery>;\n    },\n    isUserAccount(variables: GqlIsUserAccountQueryVariables, options?: C): Promise<GqlIsUserAccountQuery> {\n      return requester<GqlIsUserAccountQuery, GqlIsUserAccountQueryVariables>(IsUserAccountDocument, variables, options) as Promise<GqlIsUserAccountQuery>;\n    },\n    getConsensusParametersVersion(variables?: GqlGetConsensusParametersVersionQueryVariables, options?: C): Promise<GqlGetConsensusParametersVersionQuery> {\n      return requester<GqlGetConsensusParametersVersionQuery, GqlGetConsensusParametersVersionQueryVariables>(GetConsensusParametersVersionDocument, variables, options) as Promise<GqlGetConsensusParametersVersionQuery>;\n    },\n    submitAndAwaitStatus(variables: GqlSubmitAndAwaitStatusSubscriptionVariables, options?: C): AsyncIterable<GqlSubmitAndAwaitStatusSubscription> {\n      return requester<GqlSubmitAndAwaitStatusSubscription, GqlSubmitAndAwaitStatusSubscriptionVariables>(SubmitAndAwaitStatusDocument, variables, options) as AsyncIterable<GqlSubmitAndAwaitStatusSubscription>;\n    },\n    statusChange(variables: GqlStatusChangeSubscriptionVariables, options?: C): AsyncIterable<GqlStatusChangeSubscription> {\n      return requester<GqlStatusChangeSubscription, GqlStatusChangeSubscriptionVariables>(StatusChangeDocument, variables, options) as AsyncIterable<GqlStatusChangeSubscription>;\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\ntype FuelGraphQLSubscriberOptions = {\n  url: string;\n  query: DocumentNode;\n  variables?: Record<string, unknown>;\n  fetchFn: typeof fetch;\n};\n\nexport class FuelGraphqlSubscriber implements AsyncIterator<unknown> {\n  private static textDecoder = new TextDecoder();\n\n  private constructor(private stream: ReadableStreamDefaultReader<Uint8Array>) {}\n\n  public static async create(options: FuelGraphQLSubscriberOptions) {\n    const { url, query, variables, fetchFn } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query: print(query),\n        variables,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/event-stream',\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [errorReader, resultReader] = response.body!.tee().map((stream) => stream.getReader());\n\n    /**\n     * If the node threw an error, read it and throw it to the user\n     * Else just discard the response and return the subscriber below,\n     * which will have that same response via `resultReader`\n     */\n    await new FuelGraphqlSubscriber(errorReader).next();\n\n    return new FuelGraphqlSubscriber(resultReader);\n  }\n\n  private events: Array<{ data: unknown; errors?: { message: string }[] }> = [];\n  private parsingLeftover = '';\n\n  async next(): Promise<IteratorResult<unknown, unknown>> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (this.events.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { data, errors } = this.events.shift()!;\n        if (Array.isArray(errors)) {\n          throw new FuelError(\n            FuelError.CODES.INVALID_REQUEST,\n            errors.map((err) => err.message).join('\\n\\n')\n          );\n        }\n        return { value: data, done: false };\n      }\n      const { value, done } = await this.stream.read();\n      if (done) {\n        return { value, done };\n      }\n\n      /**\n       * We don't care about keep-alive messages.\n       * The only responses that I came across from the node are either 200 responses with \"data:.*\" or keep-alive messages.\n       * You can find the keep-alive message in the fuel-core codebase (latest permalink as of writing):\n       * https://github.com/FuelLabs/fuel-core/blob/e1e631902f762081d2124d9c457ddfe13ac366dc/crates/fuel-core/src/graphql_api/service.rs#L247\n       * To get the actual latest info you need to check out the master branch (might change):\n       * https://github.com/FuelLabs/fuel-core/blob/master/crates/fuel-core/src/graphql_api/service.rs#L247\n       * */\n      const decoded = FuelGraphqlSubscriber.textDecoder\n        .decode(value)\n        .replace(':keep-alive-text\\n\\n', '');\n\n      if (decoded === '') {\n        continue;\n      }\n\n      const text = `${this.parsingLeftover}${decoded}`;\n      const regex = /data:.*\\n\\n/g;\n\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n\n      matches.forEach((match) => {\n        try {\n          this.events.push(JSON.parse(match.replace(/^data:/, '')));\n        } catch (e) {\n          throw new FuelError(\n            ErrorCode.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      });\n\n      this.parsingLeftover = text.replace(matches.join(), '');\n    }\n  }\n\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return(): Promise<IteratorResult<unknown, undefined>> {\n    return Promise.resolve({ done: true, value: undefined });\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<unknown, unknown, undefined> {\n    return this;\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport type { ExcludeResourcesOption } from './resource';\n\ninterface CachedResource {\n  utxos: Set<string>;\n  messages: Set<string>;\n  timestamp: number;\n}\n\nconst cache = new Map<string, CachedResource>();\n\nexport class ResourceCache {\n  readonly ttl: number;\n\n  constructor(ttl: number) {\n    this.ttl = ttl; // TTL in milliseconds\n\n    if (typeof ttl !== 'number' || this.ttl <= 0) {\n      throw new FuelError(\n        ErrorCode.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n\n  // Add resources to the cache\n  set(transactionId: string, resources: Required<ExcludeResourcesOption>): void {\n    const currentTime = Date.now();\n    const existingResources = cache.get(transactionId) || {\n      utxos: new Set<string>(),\n      messages: new Set<string>(),\n      timestamp: currentTime,\n    };\n\n    resources.utxos.forEach((utxo) => existingResources.utxos.add(hexlify(utxo)));\n    resources.messages.forEach((message) => existingResources.messages.add(hexlify(message)));\n\n    cache.set(transactionId, existingResources);\n  }\n\n  // Remove resources from the cache for a given transaction ID\n  unset(transactionId: string): void {\n    cache.delete(transactionId);\n  }\n\n  // Get all cached resources and remove expired ones\n  getActiveData() {\n    const allResources: { utxos: string[]; messages: string[] } = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    cache.forEach((resource, transactionId) => {\n      if (currentTime - resource.timestamp < this.ttl) {\n        allResources.utxos.push(...resource.utxos);\n        allResources.messages.push(...resource.messages);\n      } else {\n        cache.delete(transactionId);\n      }\n    });\n    return allResources;\n  }\n\n  // Check if a UTXO ID or message nonce is already cached and not expired\n  isCached(key: string): boolean {\n    const currentTime = Date.now();\n    for (const [transactionId, resourceData] of cache.entries()) {\n      if (currentTime - resourceData.timestamp > this.ttl) {\n        cache.delete(transactionId);\n      } else if (resourceData.utxos.has(key) || resourceData.messages.has(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  clear() {\n    cache.clear();\n  }\n}\n","export const ZeroBytes32 = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EmptyRoot = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\n","import { BYTES_32, UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport type { Input } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestInput = {\n  type: InputType.Coin;\n\n  /** UTXO ID */\n  id: BytesLike;\n\n  /** Owning address or script hash */\n  owner: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Asset ID of the coins */\n  assetId: BytesLike;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Index of witness that authorizes spending the coin */\n  witnessIndex: number;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n};\n\nexport type MessageTransactionRequestInput = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: BytesLike;\n\n  /** Address of recipient */\n  recipient: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Index of witness that authorizes the message */\n  witnessIndex: number;\n\n  /** Unique nonce of message */\n  nonce: BytesLike;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n\n  /** data of message */\n  data?: BytesLike;\n};\n\nexport type ContractTransactionRequestInput = {\n  type: InputType.Contract;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Contract ID */\n  contractId: BytesLike;\n};\nexport type TransactionRequestInput =\n  | CoinTransactionRequestInput\n  | ContractTransactionRequestInput\n  | MessageTransactionRequestInput;\n\n/** @hidden */\nexport const inputify = (value: TransactionRequestInput): Input => {\n  const { type } = value;\n\n  switch (value.type) {\n    case InputType.Coin: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      return {\n        type: InputType.Coin,\n        txID: hexlify(arrayify(value.id).slice(0, BYTES_32)),\n        outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),\n        owner: hexlify(value.owner),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n      };\n    }\n    case InputType.Contract: {\n      return {\n        type: InputType.Contract,\n        txID: ZeroBytes32,\n        outputIndex: 0,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        contractID: hexlify(value.contractId),\n      };\n    }\n    case InputType.Message: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      const data = arrayify(value.data ?? '0x');\n      return {\n        type: InputType.Message,\n        sender: hexlify(value.sender),\n        recipient: hexlify(value.recipient),\n        amount: bn(value.amount),\n        nonce: hexlify(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n        data: hexlify(data),\n        dataLength: data.length,\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Output } from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestOutput = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Amount of coins to send */\n  amount: BigNumberish;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type ContractTransactionRequestOutput = {\n  type: OutputType.Contract;\n  /** Index of input contract */\n  inputIndex: number;\n};\nexport type ChangeTransactionRequestOutput = {\n  type: OutputType.Change;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type VariableTransactionRequestOutput = {\n  type: OutputType.Variable;\n};\nexport type ContractCreatedTransactionRequestOutput = {\n  type: OutputType.ContractCreated;\n  /** Contract ID */\n  contractId: BytesLike;\n  /** State Root */\n  stateRoot: BytesLike;\n};\nexport type TransactionRequestOutput =\n  | CoinTransactionRequestOutput\n  | ContractTransactionRequestOutput\n  | ChangeTransactionRequestOutput\n  | VariableTransactionRequestOutput\n  | ContractCreatedTransactionRequestOutput;\n\n/** @hidden */\nexport const outputify = (value: TransactionRequestOutput): Output => {\n  const { type } = value;\n\n  switch (type) {\n    case OutputType.Coin: {\n      return {\n        type: OutputType.Coin,\n        to: hexlify(value.to),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Contract: {\n      return {\n        type: OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n      };\n    }\n    case OutputType.Change: {\n      return {\n        type: OutputType.Change,\n        to: hexlify(value.to),\n        amount: bn(0),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Variable: {\n      return {\n        type: OutputType.Variable,\n        to: ZeroBytes32,\n        amount: bn(0),\n        assetId: ZeroBytes32,\n      };\n    }\n    case OutputType.ContractCreated: {\n      return {\n        type: OutputType.ContractCreated,\n        contractId: hexlify(value.contractId),\n        stateRoot: hexlify(value.stateRoot),\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n};\n","import type { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { GqlMessageState } from './__generated__/operations';\n\n// #region Message-shape\n/**\n * A Fuel message\n */\nexport type Message = {\n  messageId: BytesLike;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  data: BytesLike;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n// #endregion Message-shape\n\nexport type MessageCoin = {\n  assetId: string;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n\nexport type MerkleProof = {\n  proofSet: Array<string>;\n  proofIndex: BN;\n};\n\nexport type BlockHeader = {\n  id: string;\n  daHeight: BN;\n  transactionsCount: number;\n  transactionsRoot: string;\n  height: BN;\n  prevRoot: string;\n  time: string;\n  applicationHash: string;\n  messageOutboxRoot: string;\n  eventInboxRoot: string;\n  consensusParametersVersion: number;\n  stateTransitionBytecodeVersion: number;\n  messageReceiptCount: number;\n};\n\n/**\n * Message Proof\n */\nexport type MessageProof = {\n  messageProof: MerkleProof;\n  blockProof: MerkleProof;\n  messageBlockHeader: BlockHeader;\n  commitBlockHeader: BlockHeader;\n  sender: Address;\n  recipient: Address;\n  nonce: string;\n  amount: BN;\n  data: string;\n};\n\n/**\n * Message Status\n */\nexport type MessageStatus = {\n  state: GqlMessageState;\n};\n\nexport const isMessageCoin = (message: Message | MessageCoin): message is MessageCoin =>\n  !('data' in message);\n","import type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Coin } from './coin';\nimport type { MessageCoin } from './message';\n\nexport type RawCoin = {\n  utxoId: string;\n  owner: string;\n  amount: string;\n  assetId: string;\n  blockCreated: string;\n  txCreatedIdx: string;\n};\n\nexport type RawMessage = {\n  amount: string;\n  sender: string;\n  assetId: string;\n  recipient: string;\n  data: string;\n  nonce: string;\n  daHeight: string;\n};\n\nexport type RawResource = RawCoin | RawMessage;\nexport type Resource = Coin | MessageCoin;\n\n/** @hidden */\nexport type ExcludeResourcesOption = {\n  utxos?: BytesLike[];\n  messages?: BytesLike[];\n};\n\n/** @hidden */\nexport const isRawCoin = (resource: RawResource): resource is RawCoin => 'utxoId' in resource;\n/** @hidden */\nexport const isRawMessage = (resource: RawResource): resource is RawMessage =>\n  'recipient' in resource;\n/** @hidden */\nexport const isCoin = (resource: Resource): resource is Coin => 'id' in resource;\n/** @hidden */\nexport const isMessage = (resource: Resource): resource is MessageCoin => 'recipient' in resource;\n","/** Maximum contract size, in bytes. */\nexport const CONTRACT_MAX_SIZE = 16 * 1024;\n\n/** Maximum number of witnesses. */\nexport const MAX_WITNESSES = 16;\n\n/**\n * Gas Price factor this is used to calculate\n * This is used to calculate the gas fee in Native Coins.\n * Ex.: transactionFee = Math.ceil(<gasUsed> / MAX_GAS_PER_TX);\n */\n\n/** Maximum length of script, in instructions. */\nexport const MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum length of script data, in bytes. */\nexport const MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum number of static contracts. */\nexport const MAX_STATIC_CONTRACTS = 255;\n\n/** Maximum length of predicate, in instructions. */\nexport const MAX_PREDICATE_LENGTH = 1024 * 1024;\n\n/** Maximum length of predicate data, in bytes. */\nexport const MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\n\n// Revert with this value for a failing call to `std::revert::require`.\nexport const FAILED_REQUIRE_SIGNAL = '0xffffffffffff0000';\n\n// Revert with this value for a failing call to `std::asset::transfer_to_address`.\nexport const FAILED_TRANSFER_TO_ADDRESS_SIGNAL = '0xffffffffffff0001';\n\n// Revert with this value for a failing call to `std::assert::assert_eq`.\nexport const FAILED_ASSERT_EQ_SIGNAL = '0xffffffffffff0003';\n\n// Revert with this value for a failing call to `std::assert::assert`.\nexport const FAILED_ASSERT_SIGNAL = '0xffffffffffff0004';\n\n// Revert with this value for a failing call to `std::assert::assert_ne`.\nexport const FAILED_ASSERT_NE_SIGNAL = '0xffffffffffff0005';\n\nexport const FAILED_UNKNOWN_SIGNAL = '0x0';\n\nexport const PANIC_REASONS = [\n  'UnknownPanicReason',\n  'Revert',\n  'OutOfGas',\n  'TransactionValidity',\n  'MemoryOverflow',\n  'ArithmeticOverflow',\n  'ContractNotFound',\n  'MemoryOwnership',\n  'NotEnoughBalance',\n  'ExpectedInternalContext',\n  'AssetIdNotFound',\n  'InputNotFound',\n  'OutputNotFound',\n  'WitnessNotFound',\n  'TransactionMaturity',\n  'InvalidMetadataIdentifier',\n  'MalformedCallStructure',\n  'ReservedRegisterNotWritable',\n  'InvalidFlags',\n  'InvalidImmediateValue',\n  'ExpectedCoinInput',\n  'EcalError',\n  'MemoryWriteOverlap',\n  'ContractNotInInputs',\n  'InternalBalanceOverflow',\n  'ContractMaxSize',\n  'ExpectedUnallocatedStack',\n  'MaxStaticContractsReached',\n  'TransferAmountCannotBeZero',\n  'ExpectedOutputVariable',\n  'ExpectedParentInternalContext',\n  'PredicateReturnedNonOne',\n  'ContractIdAlreadyDeployed',\n  'ContractMismatch',\n  'MessageDataTooLong',\n  'ArithmeticError',\n  'ContractInstructionNotAllowed',\n  'TransferZeroCoins',\n  'InvalidInstruction',\n  'MemoryNotExecutable',\n  'PolicyIsNotSet',\n  'PolicyNotFound',\n  'TooManyReceipts',\n  'BalanceOverflow',\n  'InvalidBlockHeight',\n  'TooManySlots',\n  'ExpectedNestedCaller',\n  'MemoryGrowthOverlap',\n  'UninitalizedMemoryAccess',\n  'OverridingConsensusParameters',\n  'UnknownStateTransactionBytecodeRoot',\n  'OverridingStateTransactionBytecode',\n  'BytecodeAlreadyUploaded',\n  'ThePartIsNotSequentiallyConnected',\n  'BlobIdAlreadyUploaded',\n  'BlobNotFound',\n  'GasCostNotDefined',\n];\n\nexport const PANIC_DOC_URL = 'https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html';\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptBurn,\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptMessageOut,\n  ReceiptMint,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptScriptResult,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n} from '@fuel-ts/transactions';\nimport { getMintedAssetId, InputMessageCoder, ReceiptType } from '@fuel-ts/transactions';\nimport { FAILED_TRANSFER_TO_ADDRESS_SIGNAL } from '@fuel-ts/transactions/configs';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nimport type { GqlReceiptFragment } from '../__generated__/operations';\nimport { GqlReceiptType } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\n/** @hidden */\nconst doesReceiptHaveMissingOutputVariables = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptRevert =>\n  receipt.type === ReceiptType.Revert &&\n  receipt.val.toString('hex') === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\n\n/** @hidden */\nconst doesReceiptHaveMissingContractId = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptPanic =>\n  receipt.type === ReceiptType.Panic &&\n  receipt.contractId !== '0x0000000000000000000000000000000000000000000000000000000000000000';\n\n/** @hidden */\nexport const getReceiptsWithMissingData = (receipts: Array<TransactionResultReceipt>) =>\n  receipts.reduce<{\n    missingOutputVariables: Array<ReceiptRevert>;\n    missingOutputContractIds: Array<ReceiptPanic>;\n  }>(\n    (memo, receipt) => {\n      if (doesReceiptHaveMissingOutputVariables(receipt)) {\n        memo.missingOutputVariables.push(receipt);\n      }\n      if (doesReceiptHaveMissingContractId(receipt)) {\n        memo.missingOutputContractIds.push(receipt);\n      }\n      return memo;\n    },\n    {\n      missingOutputVariables: [],\n      missingOutputContractIds: [],\n    }\n  );\n\nconst hexOrZero = (hex?: string | null) => hex || ZeroBytes32;\n\nexport function assembleReceiptByType(receipt: GqlReceiptFragment) {\n  const { receiptType } = receipt;\n\n  switch (receiptType) {\n    case GqlReceiptType.Call: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt: ReceiptCall = {\n        type: ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: bn(receipt.gas),\n        param1: bn(receipt.param1),\n        param2: bn(receipt.param2),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return callReceipt;\n    }\n\n    case GqlReceiptType.Return: {\n      const returnReceipt: ReceiptReturn = {\n        type: ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return returnReceipt;\n    }\n\n    case GqlReceiptType.ReturnData: {\n      const returnDataReceipt: ReceiptReturnData = {\n        type: ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n\n      return returnDataReceipt;\n    }\n\n    case GqlReceiptType.Panic: {\n      const panicReceipt: ReceiptPanic = {\n        type: ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: bn(receipt.reason),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n        contractId: hexOrZero(receipt.contractId),\n      };\n\n      return panicReceipt;\n    }\n\n    case GqlReceiptType.Revert: {\n      const revertReceipt: ReceiptRevert = {\n        type: ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.ra),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return revertReceipt;\n    }\n\n    case GqlReceiptType.Log: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const rc = bn(receipt.rc);\n      const rd = bn(receipt.rd);\n\n      const logReceipt: ReceiptLog = {\n        type: ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return logReceipt;\n    }\n\n    case GqlReceiptType.LogData: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const logDataReceipt: ReceiptLogData = {\n        type: ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n      return logDataReceipt;\n    }\n\n    case GqlReceiptType.Transfer: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt: ReceiptTransfer = {\n        type: ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return transferReceipt;\n    }\n\n    case GqlReceiptType.TransferOut: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt: ReceiptTransferOut = {\n        type: ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return transferOutReceipt;\n    }\n\n    case GqlReceiptType.ScriptResult: {\n      const scriptResultReceipt: ReceiptScriptResult = {\n        type: ReceiptType.ScriptResult,\n        result: bn(receipt.result),\n        gasUsed: bn(receipt.gasUsed),\n      };\n\n      return scriptResultReceipt;\n    }\n\n    case GqlReceiptType.MessageOut: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = bn(receipt.amount);\n      const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = bn(receipt.len).toNumber();\n\n      const messageId = InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: hexlify(data),\n      });\n\n      const receiptMessageOut: ReceiptMessageOut = {\n        type: ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId,\n      };\n\n      return receiptMessageOut;\n    }\n\n    case GqlReceiptType.Mint: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const mintReceipt: ReceiptMint = {\n        type: ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return mintReceipt;\n    }\n\n    case GqlReceiptType.Burn: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const burnReceipt: ReceiptBurn = {\n        type: ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return burnReceipt;\n    }\n\n    default:\n      throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nconst DEFAULT_BLOCK_EXPLORER_URL = 'https://app.fuel.network';\n\n/** @hidden */\nconst getPathFromInput = (\n  key: BuildBlockExplorerUrlHelperParam,\n  value: string | number | undefined\n) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`,\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n};\n\ntype BuildBlockExplorerUrlHelperParam = 'address' | 'txId' | 'blockNumber';\n\n/**\n * @hidden\n *\n * Builds a block explorer url based on and the given path, block explorer URL and provider URL\n */\nexport const buildBlockExplorerUrl = (\n  options: {\n    blockExplorerUrl?: string;\n    path?: string;\n    providerUrl?: string;\n    address?: string;\n    txId?: string;\n    blockNumber?: number;\n  } = {}\n) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n\n  // make sure that only ONE or none of the following is defined: address, txId, blockNumber\n  const customInputParams = [\n    {\n      key: 'address',\n      value: address,\n    },\n    {\n      key: 'txId',\n      value: txId,\n    },\n    {\n      key: 'blockNumber',\n      value: blockNumber,\n    },\n  ];\n\n  const definedValues = customInputParams\n    .filter((param) => !!param.value)\n    .map(({ key, value }) => ({\n      key,\n      value,\n    }));\n\n  const hasAnyDefinedValues = definedValues.length > 0;\n\n  if (definedValues.length > 1) {\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams\n        .map((param) => param.key)\n        .join(', ')}.`\n    );\n  }\n\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(', ');\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n\n  const pathGeneratedFromInputParams = hasAnyDefinedValues\n    ? getPathFromInput(\n        definedValues[0].key as BuildBlockExplorerUrlHelperParam,\n        definedValues[0].value\n      )\n    : '';\n\n  // Remove leading and trailing slashes from the path and block explorer url respectively, if present\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, '') : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, '');\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, '');\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : undefined;\n\n  // if the block explorer url doesn't have a protocol i.e. http:// or https://, add https://\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? '' : 'https://';\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? '' : 'https://';\n\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${\n    encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : ''\n  }`;\n\n  return url;\n};\n","import { bn } from '@fuel-ts/math';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport { ReceiptType, type Input } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type {\n  GqlDependentCost,\n  GqlHeavyOperation,\n  GqlLightOperation,\n} from '../__generated__/operations';\nimport type { GasCosts } from '../provider';\nimport type { TransactionRequestInput } from '../transaction-request';\nimport type {\n  TransactionResultReceipt,\n  TransactionResultScriptResultReceipt,\n} from '../transaction-response';\n\n/** @hidden */\nexport const getGasUsedFromReceipts = (receipts: Array<TransactionResultReceipt>): BN => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === ReceiptType.ScriptResult\n  ) as TransactionResultScriptResultReceipt[];\n\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));\n\n  return gasUsed;\n};\n\nexport function resolveGasDependentCosts(byteSize: BNInput, gasDependentCost: GqlDependentCost) {\n  const base = bn(gasDependentCost.base);\n  let dependentValue = bn(0);\n  if ('unitsPerGas' in gasDependentCost) {\n    dependentValue = bn(byteSize).div(bn((<GqlLightOperation>gasDependentCost).unitsPerGas));\n  } else {\n    dependentValue = bn(byteSize).mul(bn((<GqlHeavyOperation>gasDependentCost).gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\n\nexport function gasUsedByInputs(\n  inputs: Array<TransactionRequestInput | Input>,\n  txBytesSize: number,\n  gasCosts: GasCosts\n) {\n  const witnessCache: Array<number> = [];\n\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = 'owner' in input || 'sender' in input;\n    if (isCoinOrMessage) {\n      if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n        return true;\n      }\n\n      if (!witnessCache.includes(input.witnessIndex)) {\n        // should charge only once for each witness\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n      return total.add(\n        vmInitializationCost\n          .add(resolveGasDependentCosts(arrayify(input.predicate).length, gasCosts.contractRoot))\n          .add(bn(input.predicateGasUsed))\n      );\n    }\n\n    return total.add(gasCosts.ecr1);\n  }, bn(0));\n  // Never allow gas to exceed MAX_U64\n  return totalGas;\n}\n\nexport interface IGetMinGasParams {\n  inputs: Array<TransactionRequestInput | Input>;\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  metadataGas: BN;\n  gasPerByte: BN;\n}\n\nexport function getMinGas(params: IGetMinGasParams) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = bn(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n\n  return minGas;\n}\n\nexport interface IGetMaxGasParams {\n  witnessesLength: number;\n  witnessLimit?: BN;\n  gasPerByte: BN;\n  minGas: BN;\n  gasLimit?: BN;\n  blobSize?: BN;\n  maxGasPerTx: BN;\n}\n\nexport function getMaxGas(params: IGetMaxGasParams) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = bn(0),\n    maxGasPerTx,\n  } = params;\n\n  let remainingAllowedWitnessGas = bn(0);\n\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = bn(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\n\nexport function calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize,\n}: {\n  gasCosts: GasCosts;\n  contractBytesSize: BN;\n  stateRootSize: number;\n  txBytesSize: number;\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  // See https://github.com/FuelLabs/fuel-specs/blob/master/src/identifiers/contract-id.md\n  const contractIdInputSize = bn(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\n\nexport function calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\n\nexport function calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  witnessBytesSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\n\nexport function calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  consensusSize?: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n\n  return txId;\n}\n\nexport function calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  subsectionSize: number;\n  subsectionsSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n\n  return txId;\n}\n\nexport function calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize,\n}: {\n  gasCosts: GasCosts;\n  baseMinGas: number;\n  subsectionSize: number;\n}) {\n  // Since the `Upload` transaction occupies much of the storage, we want to\n  // discourage people from using it too much. For that, we charge additional gas\n  // for the storage.\n  // https://github.com/FuelLabs/fuel-vm/blob/6e137db6387bd291b9505d17e15e0f2edda7957e/fuel-tx/src/transaction/types/upload.rs#L135-L150\n  const additionalStoragePerByte = bn(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return bn(baseMinGas).add(additionalStoragePerByte);\n}\n\nexport interface CalculateGasFeeParams {\n  tip?: BN;\n  gas: BN;\n  gasPrice: BN;\n  priceFactor: BN;\n}\n\nexport const calculateGasFee = (params: CalculateGasFeeParams) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add(bn(tip));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-param-reassign */\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\n// When parsing a Transaction to JSON we need\n// to convert special types into each respective\n// JSON friendly value. This enables a tx to be\n// stringified and parsed back into a Transaction\n/** @hidden */\nfunction normalize(object: any) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case 'Uint8Array':\n        object[key] = hexlify(object[key]);\n        break;\n      case 'Array':\n        object[key] = normalize(object[key]);\n        break;\n      case 'BN':\n        object[key] = object[key].toHex();\n        break;\n      case 'Address':\n        object[key] = object[key].toB256();\n        break;\n      case 'Object':\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\n\n/**\n * Stringify Transaction to a JSON object\n * compatible with the Transaction class constructor.\n */\n/** @hidden */\nexport function normalizeJSON(root: any) {\n  // Do a single deep clone before normalizing\n  // to avoid mutating the original object\n  // and doing extra clones on each iteration\n  return normalize(clone(root));\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type { ReceiptRevert } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport {\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_NE_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,\n  PANIC_REASONS,\n  PANIC_DOC_URL,\n} from '@fuel-ts/transactions/configs';\n\nimport type { TransactionResultReceipt } from '../transaction-response';\n\n/**\n * Assembles an error message for a panic status.\n * @param status - The transaction failure status.\n * @returns The error message.\n */\nexport const assemblePanicError = (\n  statusReason: string,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n\n  if (PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\\n\\nYou can read more about this error at:\\n\\n${PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason,\n  });\n};\n\n/** @hidden */\nconst stringify = (obj: unknown) => JSON.stringify(obj, null, 2);\n\n/**\n * Assembles an error message for a revert status.\n * @param receipts - The transaction result processed receipts.\n * @param logs - The transaction decoded logs.\n * @returns The error message.\n */\nexport const assembleRevertError = (\n  receipts: Array<TransactionResultReceipt>,\n  logs: Array<unknown>,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = 'The transaction reverted with an unknown reason.';\n\n  const revertReceipt = receipts.find(({ type }) => type === ReceiptType.Revert) as ReceiptRevert;\n  let reason = '';\n\n  if (revertReceipt) {\n    const reasonHex = bn(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n\n    switch (reasonHex) {\n      case FAILED_REQUIRE_SIGNAL: {\n        reason = 'require';\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${\n          logs.length ? stringify(lastLog) : 'an error.'\n        }.`;\n        break;\n      }\n\n      case FAILED_ASSERT_EQ_SIGNAL: {\n        const sufix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.`\n            : '.';\n\n        reason = 'assert_eq';\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${sufix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_NE_SIGNAL: {\n        const sufix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.`\n            : '.';\n\n        reason = 'assert_ne';\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${sufix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_SIGNAL:\n        reason = 'assert';\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n\n      case FAILED_TRANSFER_TO_ADDRESS_SIGNAL:\n        reason = 'MissingOutputChange';\n        errorMessage = `The transaction reverted because it's missing an \"OutputChange\".`;\n        break;\n\n      default:\n        throw new FuelError(\n          ErrorCode.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: 'unknown',\n          }\n        );\n    }\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason,\n  });\n};\n\ninterface IExtractTxError {\n  receipts: Array<TransactionResultReceipt>;\n  logs: Array<unknown>;\n  statusReason: string;\n}\n\n/**\n * Extracts the transaction error and returns a FuelError object.\n * @param IExtractTxError - The parameters for extracting the error.\n * @returns The FuelError object.\n */\nexport const extractTxError = (params: IExtractTxError): FuelError => {\n  const { receipts, statusReason, logs } = params;\n\n  const isPanic = receipts.some(({ type }) => type === ReceiptType.Panic);\n  const isRevert = receipts.some(({ type }) => type === ReceiptType.Revert);\n  const metadata = {\n    logs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: '',\n  };\n\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n};\n","/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\n\n/**\n * @hidden\n */\nexport class ChangeOutputCollisionError extends Error {\n  override name = 'ChangeOutputCollisionError';\n  override message =\n    'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessAtIndexError extends Error {\n  override name = 'NoWitnessAtIndexError';\n  constructor(public readonly index: number) {\n    super();\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessByOwnerError extends Error {\n  override name = 'NoWitnessByOwnerError';\n  constructor(public readonly owner: Address) {\n    super();\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { InputType, OutputType } from '@fuel-ts/transactions';\n\nimport type { ExcludeResourcesOption } from '../resource';\n\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport type { TransactionRequest } from './types';\n\nexport const isRequestInputCoin = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput => input.type === InputType.Coin;\n\nexport const isRequestInputMessage = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput => input.type === InputType.Message;\n\nexport const isRequestInputMessageWithoutData = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput =>\n  input.type === InputType.Message && bn(input.data).isZero();\n\nexport const isRequestInputCoinOrMessage = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessage(input);\n\nexport const isRequestInputResource = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);\n\nexport const getRequestInputResourceOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput\n) => (isRequestInputCoin(input) ? input.owner : input.recipient);\n\nexport const isRequestInputResourceFromOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput,\n  owner: Address\n) => getRequestInputResourceOwner(input) === owner.toB256();\n\nexport const getAssetAmountInRequestInputs = (\n  inputs: TransactionRequestInput[],\n  assetId: string,\n  baseAsset: string\n) =>\n  inputs.filter(isRequestInputResource).reduce((acc, input) => {\n    if (isRequestInputCoin(input) && input.assetId === assetId) {\n      return acc.add(input.amount);\n    }\n\n    if (isRequestInputMessage(input) && assetId === baseAsset) {\n      return acc.add(input.amount);\n    }\n\n    return acc;\n  }, bn(0));\n\nexport const cacheRequestInputsResources = (inputs: TransactionRequestInput[]) =>\n  inputs.filter(isRequestInputResource).reduce(\n    (cache, input) => {\n      if (isRequestInputCoin(input)) {\n        cache.utxos.push(input.id);\n      } else {\n        cache.messages.push(input.nonce);\n      }\n      return cache;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ExcludeResourcesOption>\n  );\n\nexport const cacheRequestInputsResourcesFromOwner = (\n  inputs: TransactionRequestInput[],\n  owner: Address\n): ExcludeResourcesOption =>\n  inputs.reduce(\n    (acc, input) => {\n      if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n        acc.utxos.push(input.id);\n      } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n        acc.messages.push(input.nonce);\n      }\n      return acc;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ExcludeResourcesOption>\n  );\n\n/**\n * @hidden\n *\n * Get the number of burnable assets in the transaction request.\n *\n * @param baseAssetId - The base asset ID.\n * @param transactionRequest - The transaction request to get the burnable asset count from.\n * @returns The number of burnable assets in the transaction request.\n */\nexport const getBurnableAssetCount = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest\n) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  // If there is a message input without data, we need to add the base asset to the set\n  if (inputs.some((i) => isRequestInputMessage(i) && bn(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === OutputType.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n};\n\n/**\n * @hidden\n *\n * Validates the transaction request for asset burn.\n *\n * @param transactionRequest - The transaction request to validate.\n * @param enableAssetBurn - Whether asset burn is enabled (default: false).\n *\n * @throws `FuelError` when an asset burn is detected and not enabled.\n */\nexport const validateTransactionForAssetBurn = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest,\n  enableAssetBurn: boolean = false\n) => {\n  // Asset burn is enabled\n  if (enableAssetBurn === true) {\n    return;\n  }\n\n  // No burnable assets detected\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n\n  const message = [\n    'Asset burn detected.',\n    'Add the relevant change outputs to the transaction to avoid burning assets.',\n    'Or enable asset burn, upon sending the transaction.',\n  ].join('\\n');\n  throw new FuelError(ErrorCode.ASSET_BURN_DETECTED, message);\n};\n","import type { Witness } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestWitness = BytesLike;\n\nexport const witnessify = (value: TransactionRequestWitness): Witness => {\n  const data = arrayify(value);\n\n  return {\n    data: hexlify(data),\n    dataLength: data.length,\n  };\n};\n","import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { Address, addressify } from '@fuel-ts/address';\nimport type { AddressLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionScript,\n  Policy,\n  TransactionCreate,\n  TransactionBlob,\n  TransactionUpload,\n  TransactionUpgrade,\n} from '@fuel-ts/transactions';\nimport {\n  PolicyType,\n  TransactionCoder,\n  InputType,\n  OutputType,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, hexlify, isDefined } from '@fuel-ts/utils';\n\nimport type { Account } from '../../account';\nimport type { Coin } from '../coin';\nimport type { CoinQuantity, CoinQuantityLike } from '../coin-quantity';\nimport { coinQuantityfy } from '../coin-quantity';\nimport { isMessageCoin, type Message, type MessageCoin } from '../message';\nimport type { ChainInfo, GasCosts } from '../provider';\nimport type { Resource } from '../resource';\nimport { isCoin } from '../resource';\nimport { normalizeJSON } from '../utils';\nimport { getMaxGas, getMinGas } from '../utils/gas';\n\nimport { NoWitnessAtIndexError } from './errors';\nimport {\n  getRequestInputResourceOwner,\n  isRequestInputCoinOrMessage,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n} from './helpers';\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport { inputify } from './input';\nimport type {\n  TransactionRequestOutput,\n  ChangeTransactionRequestOutput,\n  CoinTransactionRequestOutput,\n} from './output';\nimport { outputify } from './output';\nimport type { TransactionRequestLike } from './types';\nimport type { TransactionRequestWitness } from './witness';\nimport { witnessify } from './witness';\n\nexport {\n  /**\n   * @hidden\n   */\n  TransactionType,\n};\n\n/**\n * @hidden\n *\n * Interface defining a like structure for a base transaction request.\n */\nexport interface BaseTransactionRequestLike {\n  /** Gas price for transaction */\n  tip?: BigNumberish;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee?: BigNumberish;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BigNumberish;\n  /** List of inputs */\n  inputs?: TransactionRequestInput[];\n  /** List of outputs */\n  outputs?: TransactionRequestOutput[];\n  /** List of witnesses */\n  witnesses?: TransactionRequestWitness[];\n}\n\ntype ToBaseTransactionResponse = Pick<\n  TransactionScript,\n  | 'inputs'\n  | 'inputsCount'\n  | 'outputs'\n  | 'outputsCount'\n  | 'witnesses'\n  | 'witnessesCount'\n  | 'policies'\n  | 'policyTypes'\n>;\n\n/**\n * Abstract class to define the functionalities of a transaction request transaction request.\n */\nexport abstract class BaseTransactionRequest implements BaseTransactionRequestLike {\n  /** Type of the transaction */\n  abstract type: TransactionType;\n  /** Gas price for transaction */\n  tip?: BN;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee: BN;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BN | undefined;\n  /** List of inputs */\n  inputs: TransactionRequestInput[] = [];\n  /** List of outputs */\n  outputs: TransactionRequestOutput[] = [];\n  /** List of witnesses */\n  witnesses: TransactionRequestWitness[] = [];\n\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses,\n  }: BaseTransactionRequestLike = {}) {\n    this.tip = tip ? bn(tip) : undefined;\n    this.maturity = maturity && maturity > 0 ? maturity : undefined;\n    this.witnessLimit = isDefined(witnessLimit) ? bn(witnessLimit) : undefined;\n    this.maxFee = bn(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n  }\n\n  static getPolicyMeta(req: BaseTransactionRequest) {\n    let policyTypes = 0;\n    const policies: Policy[] = [];\n\n    const { tip, witnessLimit, maturity } = req;\n\n    if (bn(tip).gt(0)) {\n      policyTypes += PolicyType.Tip;\n      policies.push({ data: bn(tip), type: PolicyType.Tip });\n    }\n    if (isDefined(witnessLimit) && bn(witnessLimit).gte(0)) {\n      policyTypes += PolicyType.WitnessLimit;\n      policies.push({ data: bn(witnessLimit), type: PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += PolicyType.Maturity;\n      policies.push({ data: maturity, type: PolicyType.Maturity });\n    }\n\n    policyTypes += PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: PolicyType.MaxFee });\n\n    return {\n      policyTypes,\n      policies,\n    };\n  }\n\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n\n  protected getBaseTransaction(): ToBaseTransactionResponse {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n\n    const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);\n\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length,\n    };\n  }\n\n  abstract toTransaction():\n    | TransactionCreate\n    | TransactionScript\n    | TransactionBlob\n    | TransactionUpgrade\n    | TransactionUpload;\n\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes(): Uint8Array {\n    return new TransactionCoder().encode(this.toTransaction());\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  protected pushInput(input: TransactionRequestInput): number {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  protected pushOutput(output: TransactionRequestOutput): number {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature: BytesLike) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness(): number {\n    // Push a dummy witness with same byte size as a real witness signature\n    this.addWitness(concat([ZeroBytes32, ZeroBytes32]));\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address: string | Address, signature: BytesLike) {\n    const ownerAddress = Address.fromAddressOrString(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === 'number') {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index: number, witness: TransactionRequestWitness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account: Account | Account[]) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(<TransactionRequestLike>this));\n      })\n    );\n\n    return this;\n  }\n\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs(): CoinTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is CoinTransactionRequestInput => input.type === InputType.Coin\n    );\n  }\n\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs(): CoinTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is CoinTransactionRequestOutput => output.type === OutputType.Coin\n    );\n  }\n\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs(): ChangeTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ChangeTransactionRequestOutput => output.type === OutputType.Change\n    );\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner: AddressLike): number | undefined {\n    const ownerAddress = addressify(owner);\n\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case InputType.Coin:\n          return hexlify((<CoinTransactionRequestInput>input).owner) === ownerAddress.toB256();\n        case InputType.Message:\n          return (\n            hexlify((<MessageTransactionRequestInput>input).recipient) === ownerAddress.toB256()\n          );\n        default:\n          return false;\n      }\n    });\n\n    return (<CoinTransactionRequestInput>found)?.witnessIndex;\n  }\n\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin: Coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n\n    let witnessIndex;\n\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: CoinTransactionRequestInput = {\n      id,\n      type: InputType.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: '0x00000000000000000000000000000000',\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    this.addChangeOutput(owner, assetId);\n  }\n\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message: Message | MessageCoin) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n\n    let witnessIndex;\n\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: MessageTransactionRequestInput = {\n      nonce,\n      type: InputType.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? '0x' : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource: Resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources: ReadonlyArray<Resource>) {\n    resources.forEach((resource) => this.addResource(resource));\n\n    return this;\n  }\n\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to: AddressLike, amount: BigNumberish, assetId: BytesLike) {\n    this.pushOutput({\n      type: OutputType.Coin,\n      to: addressify(to).toB256(),\n      amount,\n      assetId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to: AddressLike, quantities: CoinQuantityLike[]) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: OutputType.Coin,\n        to: addressify(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId,\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to: AddressLike, assetId: BytesLike) {\n    // Find the ChangeOutput for the AssetId of the Resource\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => hexlify(output.assetId) === assetId\n    );\n\n    // Insert a ChangeOutput if it does not exist\n    if (!changeOutput) {\n      this.pushOutput({\n        type: OutputType.Change,\n        to: addressify(to).toB256(),\n        assetId,\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts: GasCosts): BN {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Not implemented');\n  }\n\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo: ChainInfo): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte },\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts),\n    });\n  }\n\n  calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities: CoinQuantity[], baseAssetId: string, resourcesOwner?: Address) {\n    const findAssetInput = (assetId: string) =>\n      this.inputs.find((input) => {\n        if ('assetId' in input) {\n          return input.assetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n\n      let usedQuantity = quantity;\n\n      if (assetId === baseAssetId) {\n        usedQuantity = bn('1000000000000000000');\n      }\n\n      if (assetInput && 'assetId' in assetInput) {\n        assetInput.id = hexlify(randomBytes(UTXO_ID_LEN));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: hexlify(randomBytes(UTXO_ID_LEN)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || Address.fromRandom(),\n            blockCreated: bn(1),\n            txCreatedIdx: bn(1),\n          },\n        ]);\n      }\n    };\n\n    updateAssetInput(baseAssetId, bn(100_000_000_000));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n\n    return this;\n  }\n\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities(): CoinQuantity[] {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: bn(amount),\n      assetId: assetId.toString(),\n    }));\n\n    return coinsQuantities;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  abstract getTransactionId(chainId: number): string;\n\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n\n  removeWitness(index: number) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n\n  private adjustWitnessIndexes(removedIndex: number) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n\n  updatePredicateGasUsed(inputs: TransactionRequestInput[]) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find((x) =>\n        isRequestInputResourceFromOwner(x, Address.fromString(String(owner)))\n      );\n\n      if (\n        correspondingInput &&\n        'predicateGasUsed' in correspondingInput &&\n        bn(correspondingInput.predicateGasUsed).gt(0)\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n\n  byteLength(): number {\n    return this.toTransactionBytes().byteLength;\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { uint64ToBytesBE, sha256 } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionType, InputType, OutputType, TransactionCoder } from '@fuel-ts/transactions';\nimport { concat } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { TransactionRequest } from './types';\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequest: TransactionRequest, chainId: number) {\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = clone(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txPointer, predicateGasUsed\n      case InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: predicateGasUsed\n      case InputType.Message: {\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txPointer\n      case InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.txID = ZeroBytes32;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = clone(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);\n  return sha256(concatenatedData);\n}\n","import type { BN } from '@fuel-ts/math';\nimport type { TransactionBlob } from '@fuel-ts/transactions';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxBlob } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest, TransactionType } from './transaction-request';\n\nexport interface BlobTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex?: number;\n}\n\nexport class BlobTransactionRequest extends BaseTransactionRequest {\n  static from(obj: BlobTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Blob as const;\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex: number;\n\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }: BlobTransactionRequestLike) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionBlob {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex,\n    };\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length,\n    });\n  }\n}\n","import type { StorageSlot } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestStorageSlot =\n  | {\n      /** Key */\n      key: BytesLike;\n      /** Value */\n      value: BytesLike;\n    }\n  | [key: BytesLike, value: BytesLike];\n\n// Make sure all values have 32 bytes\nconst getStorageValue = (value: BytesLike): Uint8Array => {\n  const v = new Uint8Array(32);\n  v.set(arrayify(value));\n  return v;\n};\n\nexport const storageSlotify = (storageSlot: TransactionRequestStorageSlot): StorageSlot => {\n  let key;\n  let value;\n\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n\n  return {\n    key: hexlify(key),\n    value: hexlify(getStorageValue(value)),\n  };\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn, type BN } from '@fuel-ts/math';\nimport type { TransactionCreate } from '@fuel-ts/transactions';\nimport { TransactionType, OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxCreate } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractCreatedTransactionRequestOutput } from './output';\nimport type { TransactionRequestStorageSlot } from './storage-slot';\nimport { storageSlotify } from './storage-slot';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface CreateTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex?: number;\n  /** Salt */\n  salt?: BytesLike;\n  /** List of storage slots to initialize */\n  storageSlots?: TransactionRequestStorageSlot[];\n}\n\n/**\n * `CreateTransactionRequest` provides functionalities for creating a transaction request that creates a contract.\n */\nexport class CreateTransactionRequest extends BaseTransactionRequest {\n  static from(obj: CreateTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Create as const;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex: number;\n  /** Salt */\n  salt: string;\n  /** List of storage slots to initialize */\n  storageSlots: TransactionRequestStorageSlot[];\n\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }: CreateTransactionRequestLike) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = hexlify(salt ?? ZeroBytes32);\n    this.storageSlots = [...(storageSlots ?? [])];\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionCreate {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: TransactionType.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: bn(storageSlots.length),\n      salt: this.salt ? hexlify(this.salt) : ZeroBytes32,\n      storageSlots,\n    };\n  }\n\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs(): ContractCreatedTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractCreatedTransactionRequestOutput =>\n        output.type === OutputType.ContractCreated\n    );\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(\n    /** Contract ID */\n    contractId: BytesLike,\n    /** State Root */\n    stateRoot: BytesLike\n  ) {\n    this.pushOutput({\n      type: OutputType.ContractCreated,\n      contractId,\n      stateRoot,\n    });\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: bn(arrayify(this.witnesses[this.bytecodeWitnessIndex] || '0x').length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n","import { arrayify } from '@fuel-ts/utils';\n\nimport type { AbstractScriptRequest } from './types';\n\n// We can't import this from `@fuel-ts/script` because it causes\n// cyclic dependency errors so we duplicate it here.\n/** @hidden */\nexport const returnZeroScript: AbstractScriptRequest<void> = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x24000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n\n/** @hidden */\nexport const withdrawScript: AbstractScriptRequest<void> = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x5040C0105D44C0064C40001124000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n","import type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { addressify } from '@fuel-ts/address';\nimport type { ContractIdLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn } from '@fuel-ts/math';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport type { TransactionScript } from '@fuel-ts/transactions';\nimport { InputType, OutputType, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { Account } from '../../account';\nimport type { ChainInfo, GasCosts, TransactionCostParams } from '../provider';\nimport { calculateMetadataGasForTxScript, getMaxGas } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractTransactionRequestInput } from './input';\nimport type { ContractTransactionRequestOutput, VariableTransactionRequestOutput } from './output';\nimport { returnZeroScript } from './scripts';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { AbstractScriptRequest, JsonAbisFromAllCalls } from './types';\n\n/**\n * @hidden\n */\nexport interface ScriptTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Gas limit for transaction */\n  gasLimit?: BigNumberish;\n  /** Script to execute */\n  script?: BytesLike;\n  /** Script input data (parameters) */\n  scriptData?: BytesLike;\n\n  abis?: JsonAbisFromAllCalls;\n}\n\n/**\n * `ScriptTransactionRequest` provides functionalities for creating a transaction request that uses a script.\n */\nexport class ScriptTransactionRequest extends BaseTransactionRequest {\n  static from(obj: ScriptTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Script as const;\n  /** Gas limit for transaction */\n  gasLimit: BN;\n  /** Script to execute */\n  script: Uint8Array;\n  /** Script input data (parameters) */\n  scriptData: Uint8Array;\n\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest }: ScriptTransactionRequestLike = {}) {\n    super(rest);\n    this.gasLimit = bn(gasLimit);\n    this.script = arrayify(script ?? returnZeroScript.bytes);\n    this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   */\n  async estimateAndFund(\n    account: Account,\n    { signatureCallback, quantities = [] }: TransactionCostParams = {}\n  ): Promise<ScriptTransactionRequest> {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n\n    await account.fund(this, txCost);\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction(): TransactionScript {\n    const script = arrayify(this.script ?? '0x');\n    const scriptData = arrayify(this.scriptData ?? '0x');\n    return {\n      type: TransactionType.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: bn(script.length),\n      scriptDataLength: bn(scriptData.length),\n      receiptsRoot: ZeroBytes32,\n      script: hexlify(script),\n      scriptData: hexlify(scriptData),\n    };\n  }\n\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs(): ContractTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is ContractTransactionRequestInput => input.type === InputType.Contract\n    );\n  }\n\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs(): ContractTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractTransactionRequestOutput => output.type === OutputType.Contract\n    );\n  }\n\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs(): VariableTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is VariableTransactionRequestOutput => output.type === OutputType.Variable\n    );\n  }\n\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript<T>(script: AbstractScriptRequest<T>, data: T) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables: number = 1) {\n    let outputsNumber = numberOfVariables;\n\n    while (outputsNumber) {\n      this.pushOutput({\n        type: OutputType.Variable,\n      });\n      outputsNumber -= 1;\n    }\n\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  override calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract: ContractIdLike): ScriptTransactionRequest {\n    const contractAddress = addressify(contract);\n\n    // Add only one input contract per contractId\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n\n    const inputIndex = super.pushInput({\n      type: InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: '0x00000000000000000000000000000000',\n    });\n\n    this.pushOutput({\n      type: OutputType.Contract,\n      inputIndex,\n    });\n\n    return this;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi: JsonAbi, args: InputValue[]): ScriptTransactionRequest {\n    const abiInterface = new Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n","import { FuelError } from '@fuel-ts/errors';\nimport { hash } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport {\n  TransactionType,\n  type TransactionUpgrade,\n  type UpgradePurpose,\n  UpgradePurposeTypeEnum,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpgrade } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { BaseTransactionRequest, type BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport type UpgradePurposeRequest =\n  | {\n      type: UpgradePurposeTypeEnum.ConsensusParameters;\n      checksum: string;\n    }\n  | {\n      type: UpgradePurposeTypeEnum.StateTransition;\n      data: BytesLike;\n    };\n\n/**\n * @hidden\n */\nexport interface UpgradeTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The upgrade purpose */\n  upgradePurpose?: UpgradePurposeRequest;\n\n  /** Witness index */\n  bytecodeWitnessIndex?: number;\n}\n\nexport class UpgradeTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UpgradeTransactionRequestLike) {\n    if (obj instanceof UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** The type of transaction */\n  type = TransactionType.Upgrade as const;\n  /** The upgrade purpose */\n  upgradePurpose: UpgradePurposeRequest;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex: number;\n\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  }: UpgradeTransactionRequestLike = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: '0x',\n    };\n  }\n\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus: BytesLike) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: hash(consensus),\n    };\n    return this;\n  }\n\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot: BytesLike) {\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.StateTransition,\n      data: hexlify(bytecodeRoot),\n    };\n    return this;\n  }\n\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type: UpgradePurposeTypeEnum, data: BytesLike) {\n    if (type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n\n    if (type === UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpgrade {\n    let upgradePurpose: UpgradePurpose;\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum,\n        },\n      };\n    } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: hexlify(this.upgradePurpose.data),\n        },\n      };\n    } else {\n      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n    }\n\n    return {\n      type: TransactionType.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose,\n    };\n  }\n\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    const txBytesSize = this.byteSize();\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize,\n      });\n    }\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n      });\n    }\n\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { BN } from '@fuel-ts/math';\nimport { type TransactionUpload, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { ChainInfo, GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpload, calculateMinGasForTxUpload } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { type BaseTransactionRequestLike, BaseTransactionRequest } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface UploadSubsectionRequest {\n  /** The root of the Merkle tree is created over the bytecode. */\n  root: BytesLike;\n\n  /** The index of the subsection of the bytecode. */\n  subsectionIndex: number;\n\n  /** The total number of subsections on which bytecode was divided. */\n  subsectionsNumber: number;\n\n  /** The proof set helps to verify the connection of the subsection to the `root`. */\n  proofSet: BytesLike[];\n\n  /** The subsection bytecode. */\n  subsection: BytesLike;\n}\n\n/**\n * @hidden\n */\nexport interface UploadTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex?: number;\n\n  /** The subsection data. */\n  subsection?: Omit<UploadSubsectionRequest, 'subsection'>;\n}\n\nexport class UploadTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UploadTransactionRequestLike): UploadTransactionRequest {\n    if (obj instanceof UploadTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Upload as const;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex: number;\n  /** The subsection data. */\n  subsection: Omit<UploadSubsectionRequest, 'subsection'>;\n\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest }: UploadTransactionRequestLike = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: ZeroBytes32,\n      subsectionIndex: 0,\n      subsectionsNumber: 0,\n    };\n  }\n\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection: UploadSubsectionRequest) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpload {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: TransactionType.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: hexlify(root),\n      proofSet: proofSet.map(hexlify),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length,\n    };\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: arrayify(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber,\n    });\n  }\n\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  override calculateMinGas(chainInfo: ChainInfo): BN {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? ZeroBytes32;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: arrayify(bytecode).length,\n    });\n  }\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { TransactionType } from '@fuel-ts/transactions';\n\nimport type {\n  BlobTransactionRequest,\n  BlobTransactionRequestLike,\n} from './blob-transaction-request';\nimport type {\n  CreateTransactionRequest,\n  CreateTransactionRequestLike,\n} from './create-transaction-request';\nimport type {\n  ScriptTransactionRequest,\n  ScriptTransactionRequestLike,\n} from './script-transaction-request';\nimport type {\n  UpgradeTransactionRequest,\n  UpgradeTransactionRequestLike,\n} from './upgrade-transaction-request';\nimport type {\n  UploadTransactionRequest,\n  UploadTransactionRequestLike,\n} from './upload-transaction-request';\n\nexport type TransactionRequest =\n  | ScriptTransactionRequest\n  | CreateTransactionRequest\n  | BlobTransactionRequest\n  | UpgradeTransactionRequest\n  | UploadTransactionRequest;\nexport type TransactionRequestLike =\n  | ({ type: TransactionType.Script } & ScriptTransactionRequestLike)\n  | ({ type: TransactionType.Create } & CreateTransactionRequestLike)\n  | ({ type: TransactionType.Blob } & BlobTransactionRequestLike)\n  | ({ type: TransactionType.Upgrade } & UpgradeTransactionRequestLike)\n  | ({ type: TransactionType.Upload } & UploadTransactionRequestLike);\n\nexport type JsonAbisFromAllCalls = {\n  main: JsonAbi;\n  otherContractsAbis: Record<string, JsonAbi>;\n};\n\n/**\n * @hidden\n */\nexport abstract class AbstractScriptRequest<T> {\n  abstract bytes: Uint8Array;\n  abstract encodeScriptData: (data: T) => Uint8Array;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { TransactionType } from '@fuel-ts/transactions';\n\nimport { BlobTransactionRequest } from './blob-transaction-request';\nimport { CreateTransactionRequest } from './create-transaction-request';\nimport { ScriptTransactionRequest } from './script-transaction-request';\nimport type { TransactionRequestLike, TransactionRequest } from './types';\nimport { UpgradeTransactionRequest } from './upgrade-transaction-request';\nimport { UploadTransactionRequest } from './upload-transaction-request';\n\n/** @hidden */\nexport const transactionRequestify = (obj: TransactionRequestLike): TransactionRequest => {\n  if (\n    obj instanceof ScriptTransactionRequest ||\n    obj instanceof CreateTransactionRequest ||\n    obj instanceof BlobTransactionRequest ||\n    obj instanceof UpgradeTransactionRequest ||\n    obj instanceof UploadTransactionRequest\n  ) {\n    return obj;\n  }\n\n  const { type } = obj;\n\n  switch (obj.type) {\n    case TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case TransactionType.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case TransactionType.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case TransactionType.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n};\n\n/** @hidden */\nexport const isTransactionTypeScript = (\n  request: TransactionRequestLike\n): request is ScriptTransactionRequest => request.type === TransactionType.Script;\n\n/** @hidden */\nexport const isTransactionTypeCreate = (\n  request: TransactionRequestLike\n): request is CreateTransactionRequest => request.type === TransactionType.Create;\n\n/** @hidden */\nexport const isTransactionTypeBlob = (\n  request: TransactionRequestLike\n): request is BlobTransactionRequest => request.type === TransactionType.Blob;\n\n/** @hidden */\nexport const isTransactionTypeUpgrade = (\n  request: TransactionRequestLike\n): request is UpgradeTransactionRequest => request.type === TransactionType.Upgrade;\n\n/** @hidden */\nexport const isTransactionTypeUpload = (\n  request: TransactionRequestLike\n): request is UploadTransactionRequest => request.type === TransactionType.Upload;\n","import type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionCreate, TransactionScript } from '@fuel-ts/transactions';\nimport { PolicyType, TransactionCoder, TransactionType } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { GqlFeeParameters } from '../__generated__/operations';\nimport type { ConsensusParameters } from '../provider';\nimport {\n  calculateGasFee,\n  calculateMetadataGasForTxCreate,\n  calculateMetadataGasForTxScript,\n  getMaxGas,\n  getMinGas,\n} from '../utils/gas';\n\ntype FeeParams =\n  | Pick<GqlFeeParameters, 'gasPerByte' | 'gasPriceFactor'>\n  | {\n      gasPerByte: BN | number;\n      gasPriceFactor: BN | number;\n    };\n\nexport type CalculateTXFeeForSummaryParams = {\n  gasPrice: BN;\n  rawPayload: string;\n  tip: BN;\n  consensusParameters: Pick<ConsensusParameters, 'gasCosts'> & {\n    feeParams: FeeParams;\n    maxGasPerTx: BN;\n  };\n};\n\nexport const calculateTXFeeForSummary = (params: CalculateTXFeeForSummaryParams): BN => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx },\n  } = params;\n\n  const gasPerByte = bn(feeParams.gasPerByte);\n  const gasPriceFactor = bn(feeParams.gasPriceFactor);\n\n  const transactionBytes = arrayify(rawPayload);\n\n  const [transaction] = new TransactionCoder().decode(transactionBytes, 0);\n\n  const { type, witnesses, inputs, policies } = transaction as\n    | TransactionCreate\n    | TransactionScript;\n\n  let metadataGas = bn(0);\n  let gasLimit = bn(0);\n\n  if (type !== TransactionType.Create && type !== TransactionType.Script) {\n    return bn(0);\n  }\n\n  if (type === TransactionType.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction as TransactionCreate;\n\n    const contractBytesSize = bn(arrayify(witnesses[bytecodeWitnessIndex].data).length);\n\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length,\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length,\n    });\n  }\n\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: bn(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length,\n  });\n\n  const witnessLimit = policies.find((policy) => policy.type === PolicyType.WitnessLimit)?.data as\n    | BN\n    | undefined;\n\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx,\n  });\n\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip,\n  });\n\n  return maxFee;\n};\n","import { Interface, type JsonAbi } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\nimport type { ReceiptCall } from '@fuel-ts/transactions';\n\ntype GetFunctionCallProps = {\n  abi: JsonAbi;\n  receipt: ReceiptCall;\n  rawPayload?: string;\n  maxInputs: BN;\n};\n\nexport interface FunctionCall {\n  amount?: BN | undefined;\n  assetId?: string | undefined;\n  functionSignature: string;\n  functionName: string;\n  argumentsProvided: Record<string, unknown> | undefined;\n}\n\nexport const getFunctionCall = ({ abi, receipt }: GetFunctionCallProps): FunctionCall => {\n  const abiInterface = new Interface(abi);\n  const callFunctionSelector = receipt.param1.toHex(8);\n  const functionFragment = abiInterface.getFunction(callFunctionSelector);\n  const inputs = functionFragment.jsonFn.inputs;\n\n  const encodedArgs = receipt.param2.toHex();\n  let argumentsProvided;\n\n  // use bytes got from rawPayload to decode function params\n  const data = functionFragment.decodeArguments(encodedArgs);\n  if (data) {\n    // put together decoded data with input names from abi\n    argumentsProvided = inputs.reduce((prev, input, index) => {\n      const value = data[index];\n      const name = input.name;\n\n      if (name) {\n        return {\n          ...prev,\n          // reparse to remove bn\n          [name]: JSON.parse(JSON.stringify(value)),\n        };\n      }\n\n      return prev;\n    }, {});\n  }\n\n  const call = {\n    functionSignature: functionFragment.signature,\n    functionName: functionFragment.name,\n    argumentsProvided,\n    ...(receipt.amount?.isZero() ? {} : { amount: receipt.amount, assetId: receipt.assetId }),\n  };\n\n  return call;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { BN } from '@fuel-ts/math';\nimport type { Input, InputCoin, InputContract, InputMessage } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getInputsByTypes<T = Input>(inputs: Input[], types: Array<InputType>) {\n  return inputs.filter((i) => types.includes(i.type)) as T[];\n}\n\n/** @hidden */\nexport function getInputsByType<T = Input>(inputs: Input[], type: InputType) {\n  return inputs.filter((i) => i.type === type) as T[];\n}\n\n/** @hidden */\nexport function getInputsCoin(inputs: Input[]): InputCoin[] {\n  return getInputsByType<InputCoin>(inputs, InputType.Coin);\n}\n\n/** @hidden */\nexport function getInputsMessage(inputs: Input[]) {\n  return getInputsByType<InputMessage>(inputs, InputType.Message);\n}\n\n/** @hidden */\nexport function getInputsCoinAndMessage(inputs: Input[]) {\n  return getInputsByTypes<InputCoin | InputMessage>(inputs, [InputType.Coin, InputType.Message]);\n}\n\n/** @hidden */\nexport function isInputCoin(input: Input): input is InputCoin {\n  return input.type === InputType.Coin;\n}\n\n/** @hidden */\nexport function getInputsContract(inputs: Input[]) {\n  return getInputsByType<InputContract>(inputs, InputType.Contract);\n}\n\n/** @hidden */\nfunction findCoinInput(inputs: Input[], assetId: string): InputCoin | undefined {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\n\n/** @hidden */\nexport function aggregateInputsAmountsByAssetAndOwner(\n  inputs: Input[],\n  baseAssetId: string\n): Map<string, Map<string, BN>> {\n  const aggregated = new Map<string, Map<string, BN>>();\n\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n\n    // Ensure that the map for the assetId exists\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = new Map<string, BN>();\n      aggregated.set(assetId, ownersMap);\n    }\n\n    // Ensure that the map for the owner exists\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n\n    // Update the balance\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n\n  return aggregated;\n}\n\n/** @hidden */\nfunction findMessageInput(inputs: Input[]): InputMessage | undefined {\n  return getInputsMessage(inputs)?.[0];\n}\n/** @hidden */\nexport function getInputFromAssetId(\n  inputs: Input[],\n  assetId: string,\n  isBaseAsset = false\n): InputCoin | InputMessage | undefined {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n\n  // #TODO: we should throw an error here if we are unable to return a valid input\n  return undefined;\n}\n\n/** @hidden */\nexport function getInputContractFromIndex(\n  inputs: Input[],\n  inputIndex: number\n): InputContract | undefined {\n  if (inputIndex == null) {\n    return undefined;\n  }\n\n  const contractInput = inputs?.[inputIndex];\n\n  if (!contractInput) {\n    return undefined;\n  }\n  if (contractInput.type !== InputType.Contract) {\n    throw new FuelError(\n      ErrorCode.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n\n  return contractInput as InputContract;\n}\n\n/** @hidden */\nexport function getInputAccountAddress(input: Input) {\n  if (input.type === InputType.Coin) {\n    return input.owner.toString();\n  }\n\n  if (input.type === InputType.Message) {\n    return input.recipient.toString();\n  }\n\n  return '';\n}\n","import type {\n  Output,\n  OutputChange,\n  OutputCoin,\n  OutputContract,\n  OutputContractCreated,\n  OutputVariable,\n} from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getOutputsByType<T = Output>(outputs: Output[], type: OutputType) {\n  return outputs.filter((o) => o.type === type) as T[];\n}\n\n/** @hidden */\nexport function getOutputsContractCreated(outputs: Output[]) {\n  return getOutputsByType<OutputContractCreated>(outputs, OutputType.ContractCreated);\n}\n\n/** @hidden */\nexport function getOutputsCoin(outputs: Output[]) {\n  return getOutputsByType<OutputCoin>(outputs, OutputType.Coin);\n}\n\n/** @hidden */\nexport function getOutputsChange(outputs: Output[]) {\n  return getOutputsByType<OutputChange>(outputs, OutputType.Change);\n}\n\n/** @hidden */\nexport function getOutputsContract(outputs: Output[]) {\n  return getOutputsByType<OutputContract>(outputs, OutputType.Contract);\n}\n\n/** @hidden */\nexport function getOutputsVariable(outputs: Output[]) {\n  return getOutputsByType<OutputVariable>(outputs, OutputType.Variable);\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport type { B256Address } from '@fuel-ts/address';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport type { Input, Output, Transaction, TransactionType } from '@fuel-ts/transactions';\n\nimport type { GqlReceiptFragment, GqlSuccessStatusFragment } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\nexport type SubmittedStatus = {\n  type: 'SubmittedStatus';\n  time: string;\n};\n\nexport type SuccessStatus = {\n  type: 'SuccessStatus';\n  time: string;\n  programState?: GqlSuccessStatusFragment['programState'];\n  block?: {\n    id: string;\n  };\n  receipts: GqlReceiptFragment[];\n  totalGas: string;\n  totalFee: string;\n};\n\nexport type FailureStatus = {\n  type: 'FailureStatus';\n  time: string;\n  reason: string;\n  block?: {\n    id: string;\n  };\n  receipts: GqlReceiptFragment[];\n  totalGas: string;\n  totalFee: string;\n};\n\nexport type SqueezedOutStatus = {\n  type: 'SqueezedOutStatus';\n  reason: string;\n};\n\nexport type GraphqlTransactionStatus =\n  | SubmittedStatus\n  | SuccessStatus\n  | FailureStatus\n  | SqueezedOutStatus\n  | null;\n\nexport type GqlTransaction = {\n  id: string;\n  rawPayload: string;\n  status?: GraphqlTransactionStatus;\n};\n\nexport type Reason = FailureStatus['reason'];\nexport type ProgramState = SuccessStatus['programState'];\nexport type Time = SubmittedStatus['time'] | SuccessStatus['time'] | FailureStatus['time'];\nexport type BlockId = string;\n\n/**\n * @hidden\n */\nexport enum TransactionTypeName {\n  Create = 'Create',\n  Mint = 'Mint',\n  Script = 'Script',\n  Upgrade = 'Upgrade',\n  Upload = 'Upload',\n  Blob = 'Blob',\n}\n\n/**\n * @hidden\n */\nexport enum TransactionStatus {\n  submitted = 'submitted',\n  success = 'success',\n  squeezedout = 'squeezedout',\n  failure = 'failure',\n}\n\n/**\n * @hidden\n */\nexport type GqlTransactionStatusesNames =\n  | 'FailureStatus'\n  | 'SubmittedStatus'\n  | 'SuccessStatus'\n  | 'SqueezedOutStatus';\n\n/**\n * @hidden\n */\nexport enum OperationName {\n  payBlockProducer = 'Pay network fee to block producer',\n  contractCreated = 'Contract created',\n  transfer = 'Transfer asset',\n  contractCall = 'Contract call',\n  receive = 'Receive asset',\n  withdrawFromFuel = 'Withdraw from Fuel',\n}\n\nexport type OperationCoin = {\n  assetId: string;\n  amount: BNInput;\n};\n\nexport type OperationFunctionCall = {\n  functionSignature: string;\n  functionName: string;\n  argumentsProvided?: Record<string, unknown>;\n} & Partial<OperationCoin>;\n\nexport type Operation = {\n  name?: OperationName;\n  from?: OperationTransactionAddress;\n  to?: OperationTransactionAddress;\n  assetsSent?: Array<OperationCoin>;\n  calls?: Array<OperationFunctionCall>;\n};\n\n/**\n * @hidden\n */\nexport enum AddressType {\n  contract,\n  account,\n}\n\n/**\n * @hidden\n */\nexport enum ChainName {\n  ethereum = 'ethereum',\n  fuel = 'fuel',\n}\n\nexport type OperationTransactionAddress = {\n  address: string;\n  type: AddressType;\n  chain?: ChainName;\n};\n\nexport type InputParam = {\n  inputs: Input[];\n};\n\nexport type OutputParam = {\n  outputs: Output[];\n};\n\nexport type ReceiptParam = {\n  receipts: TransactionResultReceipt[];\n};\n\nexport type AbiMap = Record<string, JsonAbi>;\n\nexport type RawPayloadParam = {\n  rawPayload?: string;\n};\n\nexport type InputOutputParam = InputParam & OutputParam;\n\nexport interface GetTransferOperationsParams extends InputOutputParam {\n  receipts: TransactionResultReceipt[];\n  baseAssetId: string;\n}\n\nexport type GetOperationParams = {\n  transactionType: TransactionType;\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  baseAssetId: string;\n} & InputOutputParam &\n  ReceiptParam &\n  RawPayloadParam;\n\nexport interface MintedAsset {\n  subId: B256Address;\n  contractId: B256Address;\n  assetId: B256Address;\n  amount: BN;\n}\n\nexport type BurnedAsset = MintedAsset;\n\nexport type TransactionSummary<TTransactionType = void> = {\n  id: string;\n  time?: string;\n  operations: Operation[];\n  gasUsed: BN;\n  tip: BN;\n  fee: BN;\n  type: TransactionTypeName;\n  blockId?: BlockId;\n  status?: TransactionStatus;\n  isTypeMint: boolean;\n  isTypeCreate: boolean;\n  isTypeScript: boolean;\n  isTypeUpgrade: boolean;\n  isTypeUpload: boolean;\n  isTypeBlob: boolean;\n  isStatusPending: boolean;\n  isStatusSuccess: boolean;\n  isStatusFailure: boolean;\n  mintedAssets: MintedAsset[];\n  burnedAssets: BurnedAsset[];\n  date?: Date;\n  receipts: TransactionResultReceipt[];\n  transaction: Transaction<TTransactionType>;\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { ReceiptType, TransactionType } from '@fuel-ts/transactions';\nimport type { InputContract, Output, OutputChange, Input } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultReceipt,\n  TransactionResultCallReceipt,\n  TransactionResultMessageOutReceipt,\n  TransactionResultTransferOutReceipt,\n  TransactionResultTransferReceipt,\n} from '../transaction-response';\n\nimport type { FunctionCall } from './call';\nimport { getFunctionCall } from './call';\nimport {\n  getInputFromAssetId,\n  getInputAccountAddress,\n  getInputContractFromIndex,\n  getInputsContract,\n  getInputsCoinAndMessage,\n  aggregateInputsAmountsByAssetAndOwner,\n} from './input';\nimport {\n  getOutputsChange,\n  getOutputsCoin,\n  getOutputsContract,\n  getOutputsContractCreated,\n} from './output';\nimport { AddressType, ChainName, OperationName, TransactionTypeName } from './types';\nimport type {\n  InputOutputParam,\n  InputParam,\n  OperationCoin,\n  RawPayloadParam,\n  ReceiptParam,\n  Operation,\n  GetOperationParams,\n  GetTransferOperationsParams,\n  AbiMap,\n} from './types';\n\n/**\n * Extracts a specific type of receipt from a list of receipts.\n *\n * @param receipts - The list of receipts to filter.\n * @param type - The type of receipt to filter for.\n * @returns The filtered list of receipts.\n */\nexport function getReceiptsByType<T = TransactionResultReceipt>(\n  receipts: TransactionResultReceipt[],\n  type: ReceiptType\n) {\n  return (receipts ?? []).filter((r) => r.type === type) as T[];\n}\n\n/**\n * Returns the transaction type's name based on the transaction type enum value.\n *\n * @param transactionType - The transaction type enum value.\n * @returns The transaction type's name.\n */\nexport function getTransactionTypeName(transactionType: TransactionType): TransactionTypeName {\n  switch (transactionType) {\n    case TransactionType.Mint:\n      return TransactionTypeName.Mint;\n    case TransactionType.Create:\n      return TransactionTypeName.Create;\n    case TransactionType.Script:\n      return TransactionTypeName.Script;\n    case TransactionType.Blob:\n      return TransactionTypeName.Blob;\n    case TransactionType.Upgrade:\n      return TransactionTypeName.Upgrade;\n    case TransactionType.Upload:\n      return TransactionTypeName.Upload;\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\n\n/** @hidden */\nexport function isType(transactionType: TransactionType, type: TransactionTypeName) {\n  const txType = getTransactionTypeName(transactionType);\n\n  return txType === type;\n}\n\n/** @hidden */\nexport function isTypeMint(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Mint);\n}\n\n/** @hidden */\nexport function isTypeCreate(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Create);\n}\n\n/** @hidden */\nexport function isTypeScript(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Script);\n}\n\n/** @hidden */\nexport function isTypeUpgrade(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upgrade);\n}\n\n/** @hidden */\nexport function isTypeUpload(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upload);\n}\n\n/** @hidden */\nexport function isTypeBlob(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Blob);\n}\n\n/** @hidden */\nexport function hasSameAssetId(a: OperationCoin) {\n  return (b: OperationCoin) => a.assetId === b.assetId;\n}\n\n/** @hidden */\nexport function getReceiptsCall(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultCallReceipt>(receipts, ReceiptType.Call);\n}\n\n/** @hidden */\nexport function getReceiptsMessageOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultMessageOutReceipt>(receipts, ReceiptType.MessageOut);\n}\n\n/** @hidden */\nfunction mergeAssets(op1: Operation, op2: Operation): OperationCoin[] {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n\n  const assetMap = new Map<string, OperationCoin>();\n\n  // Merge assets from op1\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n\n  // Merge assets from op2, adding to existing assets or creating new ones\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = bn(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n\n  return Array.from(assetMap.values());\n}\n\n/** @hidden */\nfunction isSameOperation(a: Operation, b: Operation) {\n  return (\n    a.name === b.name &&\n    a.from?.address === b.from?.address &&\n    a.to?.address === b.to?.address &&\n    a.from?.type === b.from?.type &&\n    a.to?.type === b.to?.type\n  );\n}\n\n/** @hidden */\nfunction mergeAssetsSent(existing: Operation, toAdd: Operation): Operation['assetsSent'] {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\n\n/** @hidden */\nfunction mergeCalls(existing: Operation, toAdd: Operation): Operation['calls'] {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n\n  return [...(existing.calls || []), ...toAdd.calls];\n}\n\n/** @hidden */\nfunction mergeOperations(existing: Operation, toAdd: Operation): Operation {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd),\n  };\n}\n\n/** @hidden */\nexport function addOperation(operations: Operation[], toAdd: Operation): Operation[] {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n\n  return operations.map((op, index) => (index === existingIndex ? mergeOperations(op, toAdd) : op));\n}\n\n/** @hidden */\nexport function getReceiptsTransferOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultTransferOutReceipt>(receipts, ReceiptType.TransferOut);\n}\n\n/**\n * Creates withdrawal operations from Fuel to Ethereum based on message out receipts\n *\n * @param inputs - Transaction inputs containing account information\n * @param receipts - Transaction receipts containing withdrawal details\n * @param baseAssetId - The ID of the asset being withdrawn\n * @returns Array of withdrawal operations with sender, recipient, and asset id.\n */\nexport function getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId,\n}: InputParam & ReceiptParam & { baseAssetId: string }): Operation[] {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: OperationName.withdrawFromFuel,\n          from: {\n            type: AddressType.account,\n            address: inputAddress,\n          },\n          to: {\n            type: AddressType.account,\n            address: receipt.recipient.toString(),\n            chain: ChainName.ethereum,\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId,\n            },\n          ],\n        });\n\n        return newWithdrawFromFuelOps;\n      }\n\n      return prevWithdrawFromFuelOps;\n    },\n    [] as Operation[]\n  );\n\n  return withdrawFromFuelOperations;\n}\n\n/** @hidden */\nfunction getContractCalls(\n  contractInput: InputContract,\n  abiMap: AbiMap | undefined,\n  receipt: TransactionResultCallReceipt,\n  rawPayload: string,\n  maxInputs: BN\n): FunctionCall[] {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n\n  return [\n    getFunctionCall({\n      abi,\n      receipt,\n      rawPayload,\n      maxInputs,\n    }),\n  ];\n}\n\n/** @hidden */\nfunction getAssetsSent(receipt: TransactionResultCallReceipt): OperationCoin[] | undefined {\n  return receipt.amount?.isZero()\n    ? undefined\n    : [\n        {\n          amount: receipt.amount,\n          assetId: receipt.assetId,\n        },\n      ];\n}\n\n/** @hidden */\nfunction processCallReceipt(\n  receipt: TransactionResultCallReceipt,\n  contractInput: InputContract,\n  inputs: Input[],\n  abiMap: AbiMap | undefined,\n  rawPayload: string,\n  maxInputs: BN,\n  baseAssetId: string\n): Operation[] {\n  const assetId = receipt.assetId === ZeroBytes32 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n\n  return [\n    {\n      name: OperationName.contractCall,\n      from: {\n        type: AddressType.account,\n        address: inputAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: receipt.to,\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls,\n    },\n  ];\n}\n\n/** @hidden */\nexport function getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: InputOutputParam &\n  ReceiptParam &\n  Pick<GetOperationParams, 'abiMap' | 'maxInputs' | 'baseAssetId'> &\n  RawPayloadParam): Operation[] {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n\n    return contractCallReceipts\n      .filter((receipt) => receipt.to === contractInput.contractID)\n      .flatMap((receipt) =>\n        processCallReceipt(\n          receipt,\n          contractInput,\n          inputs,\n          abiMap,\n          rawPayload as string,\n          maxInputs,\n          baseAssetId\n        )\n      );\n  });\n}\n\n/**\n * Extracts a transfer operation from a transaction receipt, determining the addresses and types\n * of the sender and receiver, along with the transferred asset details.\n *\n * @param receipt - The transaction receipt containing transfer information\n * @param contractInputs - Array of contract inputs to determine address types\n * @param changeOutputs - Array of change outputs to resolve zero addresses\n * @returns A transfer operation object with sender, receiver and asset details\n */\nfunction extractTransferOperationFromReceipt(\n  receipt: TransactionResultTransferReceipt | TransactionResultTransferOutReceipt,\n  contractInputs: InputContract[],\n  changeOutputs: OutputChange[]\n) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n\n  const toType = contractInputs.some((input) => input.contractID === toAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  if (ZeroBytes32 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n\n    fromAddress = change?.to || fromAddress;\n  }\n\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  return {\n    name: OperationName.transfer,\n    from: {\n      type: fromType,\n      address: fromAddress,\n    },\n    to: {\n      type: toType,\n      address: toAddress,\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount,\n      },\n    ],\n  };\n}\n\n/** @hidden */\nexport function getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId,\n}: GetTransferOperationsParams): Operation[] {\n  let operations: Operation[] = [];\n\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n\n  /**\n   * Extracting transfer operations between wallets, as they do not produce receipts\n   */\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || new Map<string, BN>();\n    let selectedPayer: string | undefined;\n    let fallbackPayer: string | undefined;\n\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address; // Set the first payer as a fallback\n      }\n\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break; // Stop looping once a suitable payer is found\n      }\n    }\n\n    // If no suitable payer is found, use the fallback payer\n    selectedPayer = selectedPayer || fallbackPayer;\n\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: OperationName.transfer,\n        from: {\n          type: AddressType.account,\n          address: selectedPayer,\n        },\n        to: {\n          type: AddressType.account,\n          address: to,\n        },\n        assetsSent: [{ assetId, amount }],\n      });\n    }\n  });\n\n  /**\n   * `Transfer` receipts are produced from transfers:\n   * - Wallet to Contract\n   * - Contract to Contract\n   */\n  const transferReceipts = getReceiptsByType<TransactionResultTransferReceipt>(\n    receipts,\n    ReceiptType.Transfer\n  );\n\n  /**\n   * `TransferOut` receipts are produced from transfer:\n   * - Contract to Wallet\n   */\n  const transferOutReceipts = getReceiptsByType<TransactionResultTransferOutReceipt>(\n    receipts,\n    ReceiptType.TransferOut\n  );\n\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n\n    operations = addOperation(operations, operation);\n  });\n\n  return operations;\n}\n\n/** @hidden */\nexport function getPayProducerOperations(outputs: Output[]): Operation[] {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: OperationName.payBlockProducer,\n      from: {\n        type: AddressType.account,\n        address: 'Network',\n      },\n      to: {\n        type: AddressType.account,\n        address: output.to.toString(),\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount,\n        },\n      ],\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return payProducerOperations;\n}\n\n/** @hidden */\nexport function getContractCreatedOperations({ inputs, outputs }: InputOutputParam): Operation[] {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: OperationName.contractCreated,\n      from: {\n        type: AddressType.account,\n        address: fromAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: contractCreatedOutput?.contractId || '',\n      },\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return contractCreatedOperations;\n}\n\n/** @hidden */\nexport function getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: GetOperationParams): Operation[] {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId,\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId }),\n    ];\n  }\n  // at this point we are sure it's a mint transaction\n  return [...getPayProducerOperations(outputs)];\n}\n","import { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { GqlReceiptFragment } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { assembleReceiptByType } from '../utils';\n\nimport type { BurnedAsset, MintedAsset } from './types';\n\nexport const processGqlReceipt = (gqlReceipt: GqlReceiptFragment): TransactionResultReceipt =>\n  assembleReceiptByType(gqlReceipt);\n\nexport const extractMintedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): MintedAsset[] => {\n  const mintedAssets: MintedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return mintedAssets;\n};\n\nexport const extractBurnedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): BurnedAsset[] => {\n  const burnedAssets: BurnedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return burnedAssets;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nimport { TransactionStatus } from './types';\nimport type {\n  BlockId,\n  GqlTransactionStatusesNames,\n  GraphqlTransactionStatus,\n  Time,\n  TransactionSummary,\n} from './types';\n\n/** @hidden */\nexport const getTransactionStatusName = (gqlStatus: GqlTransactionStatusesNames) => {\n  switch (gqlStatus) {\n    case 'FailureStatus':\n      return TransactionStatus.failure;\n    case 'SuccessStatus':\n      return TransactionStatus.success;\n    case 'SubmittedStatus':\n      return TransactionStatus.submitted;\n    case 'SqueezedOutStatus':\n      return TransactionStatus.squeezedout;\n    default:\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n};\n\ntype IProcessGraphqlStatusResponse = Pick<\n  TransactionSummary,\n  'time' | 'blockId' | 'isStatusPending' | 'isStatusSuccess' | 'isStatusFailure' | 'status'\n> & { totalFee?: BN; totalGas?: BN };\n\n/** @hidden */\nexport const processGraphqlStatus = (gqlTransactionStatus?: GraphqlTransactionStatus) => {\n  let time: Time | undefined;\n  let blockId: BlockId | undefined;\n  let status: TransactionStatus | undefined;\n  let totalFee: BN | undefined;\n  let totalGas: BN | undefined;\n\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n\n    switch (gqlTransactionStatus.type) {\n      case 'SuccessStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'FailureStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'SubmittedStatus':\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      default:\n    }\n  }\n\n  const processedGraphqlStatus: IProcessGraphqlStatusResponse = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n  };\n\n  return processedGraphqlStatus;\n};\n\n/**\n * Returns the total fee from the transaction status.\n *\n * @param status - The transaction status.\n * @returns The total fee from the transaction status or undefined.\n */\nexport const getTotalFeeFromStatus = (status?: GraphqlTransactionStatus): BN | undefined =>\n  status && 'totalFee' in status ? bn(status.totalFee) : undefined;\n","import { bn, type BN } from '@fuel-ts/math';\nimport { PolicyType, type Transaction } from '@fuel-ts/transactions';\nimport { DateTime, hexlify } from '@fuel-ts/utils';\n\nimport type { GasCosts } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { getGasUsedFromReceipts } from '../utils';\n\nimport { calculateTXFeeForSummary } from './calculate-tx-fee-for-summary';\nimport {\n  getOperations,\n  getTransactionTypeName,\n  isTypeMint,\n  isTypeCreate,\n  isTypeScript,\n  isTypeUpgrade,\n  isTypeUpload,\n  isTypeBlob,\n} from './operations';\nimport { extractBurnedAssetsFromReceipts, extractMintedAssetsFromReceipts } from './receipt';\nimport { processGraphqlStatus } from './status';\nimport type { AbiMap, GraphqlTransactionStatus, TransactionSummary } from './types';\n\nexport interface AssembleTransactionSummaryParams {\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  transaction: Transaction;\n  id: string;\n  transactionBytes: Uint8Array;\n  gqlTransactionStatus?: GraphqlTransactionStatus;\n  receipts: TransactionResultReceipt[];\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  gasCosts: GasCosts;\n  maxGasPerTx: BN;\n  gasPrice: BN;\n  baseAssetId: string;\n}\n\n/** @hidden */\nexport function assembleTransactionSummary<TTransactionType = void>(\n  params: AssembleTransactionSummaryParams\n) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  } = params;\n\n  const gasUsed = getGasUsedFromReceipts(receipts);\n\n  const rawPayload = hexlify(transactionBytes);\n\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId,\n  });\n\n  const typeName = getTransactionTypeName(transaction.type);\n\n  const tip = bn(transaction.policies?.find((policy) => policy.type === PolicyType.Tip)?.data);\n\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } =\n    processGraphqlStatus(gqlTransactionStatus);\n\n  const fee =\n    totalFee ??\n    calculateTXFeeForSummary({\n      gasPrice,\n      rawPayload,\n      tip,\n      consensusParameters: {\n        gasCosts,\n        maxGasPerTx,\n        feeParams: {\n          gasPerByte,\n          gasPriceFactor,\n        },\n      },\n    });\n\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n\n  let date: DateTime | undefined;\n\n  if (time) {\n    date = DateTime.fromTai64(time);\n  }\n\n  const transactionSummary: TransactionSummary<TTransactionType> = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction: transaction as Transaction<TTransactionType>,\n  };\n\n  return transactionSummary;\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { TransactionResultReceipt } from './transaction-response';\n\n/** @hidden */\nexport function getDecodedLogs<T = unknown>(\n  receipts: Array<TransactionResultReceipt>,\n  mainAbi: JsonAbi,\n  externalAbis: Record<string, JsonAbi> = {}\n): T[] {\n  /**\n   * This helper decodes logs from transaction receipts.\n   * It loops through all receipts and decodes two types of logs:\n   * - ReceiptType.LogData\n   * - ReceiptType.Log\n   *\n   * The \"mainAbi\" parameter represents the ABI of the main contract used to create the transaction\n   * or the ABI from a script used within a \"BaseInvocationScope\" context.\n   * The \"externalAbis\" parameter is a record of contract ABIs that are also part of the transaction.\n   * These ABIs were added using `contract.addContracts` or through a multicall with `contract.multiCall`.\n   *\n   * @param receipts - The array of transaction result receipts.\n   * @param mainAbi - The ABI of the script or main contract.\n   * @param externalAbis - The record of external contract ABIs.\n   * @returns An array of decoded logs from Sway projects.\n   */\n  return receipts.reduce((logs: T[], receipt) => {\n    if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {\n      const interfaceToUse = new Interface(externalAbis[receipt.id] || mainAbi);\n\n      const data =\n        receipt.type === ReceiptType.Log\n          ? new BigNumberCoder('u64').encode(receipt.ra)\n          : receipt.data;\n\n      const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n      logs.push(decodedLog);\n    }\n\n    return logs;\n  }, []);\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n  ReceiptScriptResult,\n  ReceiptMessageOut,\n  Transaction,\n  ReceiptMint,\n  ReceiptBurn,\n  OutputCoin,\n  OutputContract,\n  OutputChange,\n  OutputVariable,\n  OutputContractCreated,\n  Output,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport { OutputType, TransactionCoder, TxPointerCoder } from '@fuel-ts/transactions';\nimport { arrayify, assertUnreachable } from '@fuel-ts/utils';\n\nimport type {\n  GqlMalleableTransactionFieldsFragment,\n  GqlStatusChangeSubscription,\n  GqlSubmitAndAwaitStatusSubscription,\n} from '../__generated__/operations';\nimport type Provider from '../provider';\nimport type { JsonAbisFromAllCalls, TransactionRequest } from '../transaction-request';\nimport { assembleTransactionSummary } from '../transaction-summary/assemble-transaction-summary';\nimport { processGqlReceipt } from '../transaction-summary/receipt';\nimport { getTotalFeeFromStatus } from '../transaction-summary/status';\nimport type { TransactionSummary, GqlTransaction, AbiMap } from '../transaction-summary/types';\nimport { extractTxError } from '../utils';\n\nimport { getDecodedLogs } from './getDecodedLogs';\n\n/** @hidden */\nexport type TransactionResultCallReceipt = ReceiptCall;\n/** @hidden */\nexport type TransactionResultReturnReceipt = ReceiptReturn;\n/** @hidden */\nexport type TransactionResultReturnDataReceipt = ReceiptReturnData & { data: string };\n/** @hidden */\nexport type TransactionResultPanicReceipt = ReceiptPanic;\n/** @hidden */\nexport type TransactionResultRevertReceipt = ReceiptRevert;\n/** @hidden */\nexport type TransactionResultLogReceipt = ReceiptLog;\n/** @hidden */\nexport type TransactionResultLogDataReceipt = ReceiptLogData & { data: string };\n/** @hidden */\nexport type TransactionResultTransferReceipt = ReceiptTransfer;\n/** @hidden */\nexport type TransactionResultTransferOutReceipt = ReceiptTransferOut;\n/** @hidden */\nexport type TransactionResultScriptResultReceipt = ReceiptScriptResult;\n/** @hidden */\nexport type TransactionResultMessageOutReceipt = ReceiptMessageOut;\nexport type TransactionResultMintReceipt = ReceiptMint;\nexport type TransactionResultBurnReceipt = ReceiptBurn;\n\n/** @hidden */\nexport type TransactionResultReceipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | (ReceiptReturnData & { data: string })\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | (ReceiptLogData & { data: string })\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | TransactionResultMintReceipt\n  | TransactionResultBurnReceipt;\n\n/** @hidden */\nexport type TransactionResult<TTransactionType = void> = TransactionSummary<TTransactionType> & {\n  logs?: Array<unknown>;\n};\n\nfunction mapGqlOutputsToTxOutputs(\n  outputs: GqlMalleableTransactionFieldsFragment['outputs']\n): Output[] {\n  return outputs.map((o) => {\n    const obj = 'amount' in o ? { ...o, amount: bn(o.amount) } : o;\n    switch (obj.type) {\n      case 'CoinOutput':\n        return { ...obj, type: OutputType.Coin } satisfies OutputCoin;\n      case 'ContractOutput':\n        return {\n          ...obj,\n          type: OutputType.Contract,\n          inputIndex: parseInt(obj.inputIndex, 10),\n        } satisfies OutputContract;\n      case 'ChangeOutput':\n        return {\n          ...obj,\n          type: OutputType.Change,\n        } satisfies OutputChange;\n      case 'VariableOutput':\n        return { ...obj, type: OutputType.Variable } satisfies OutputVariable;\n      case 'ContractCreated':\n        return {\n          ...obj,\n          type: OutputType.ContractCreated,\n          contractId: obj.contract,\n        } satisfies OutputContractCreated;\n      default:\n        return assertUnreachable(obj);\n    }\n  });\n}\n\n/**\n * Represents a response for a transaction.\n */\nexport class TransactionResponse {\n  /** Transaction ID */\n  id: string;\n  /** Current provider */\n  provider: Provider;\n  /** Gas used on the transaction */\n  gasUsed: BN = bn(0);\n  /** The graphql Transaction with receipts object. */\n  private gqlTransaction?: GqlTransaction;\n  private request?: TransactionRequest;\n  private status?: GqlStatusChangeSubscription['statusChange'];\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(\n    tx: string | TransactionRequest,\n    provider: Provider,\n    chainId: number,\n    abis?: JsonAbisFromAllCalls,\n    private submitTxSubscription?: AsyncIterable<GqlSubmitAndAwaitStatusSubscription>\n  ) {\n    this.id = typeof tx === 'string' ? tx : tx.getTransactionId(chainId);\n\n    this.provider = provider;\n    this.abis = abis;\n    this.request = typeof tx === 'string' ? undefined : tx;\n  }\n\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(\n    id: string,\n    provider: Provider,\n    abis?: JsonAbisFromAllCalls\n  ): Promise<TransactionResponse> {\n    const chainId = await provider.getChainId();\n    const response = new TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n\n  private applyMalleableSubscriptionFields<TTransactionType = void>(\n    transaction: Transaction<TTransactionType>\n  ) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n\n    // The SDK currently submits only these\n    const tx = transaction as Transaction<\n      TransactionType.Script | TransactionType.Create | TransactionType.Blob\n    >;\n\n    if (status.type === 'SuccessStatus' || status.type === 'FailureStatus') {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if ('txPointer' in input) {\n          const correspondingInput = status.transaction.inputs?.[idx] as { txPointer: string };\n          return {\n            ...input,\n            txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer),\n          };\n        }\n        return input;\n      });\n\n      tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);\n\n      if ('receiptsRoot' in status.transaction) {\n        (tx as Transaction<TransactionType.Script>).receiptsRoot = status.transaction\n          .receiptsRoot as string;\n      }\n    }\n  }\n\n  private async getTransaction<TTransactionType = void>(): Promise<{\n    tx: Transaction<TTransactionType>;\n    bytes: Uint8Array;\n  }> {\n    if (this.request) {\n      const tx = this.request.toTransaction() as Transaction<TTransactionType>;\n      this.applyMalleableSubscriptionFields(tx);\n      return {\n        tx,\n        bytes: this.request.toTransactionBytes(),\n      };\n    }\n\n    const gqlTransaction = this.gqlTransaction ?? (await this.fetch());\n    return {\n      tx: this.decodeTransaction(gqlTransaction) as Transaction<TTransactionType>,\n      bytes: arrayify(gqlTransaction.rawPayload),\n    };\n  }\n\n  private getReceipts(): TransactionResultReceipt[] {\n    const status = this.status ?? this.gqlTransaction?.status;\n\n    switch (status?.type) {\n      case 'SuccessStatus':\n      case 'FailureStatus':\n        return status.receipts.map(processGqlReceipt);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch(): Promise<GqlTransaction> {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id,\n    });\n\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id,\n      });\n\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n\n      return this.fetch();\n    }\n\n    this.gqlTransaction = response.transaction;\n\n    return response.transaction;\n  }\n\n  /**\n   * Decode the raw payload of the transaction.\n   *\n   * @param transactionWithReceipts - The transaction with receipts object.\n   * @returns The decoded transaction.\n   */\n  decodeTransaction<TTransactionType = void>(transactionWithReceipts: GqlTransaction) {\n    return new TransactionCoder().decode(\n      arrayify(transactionWithReceipts.rawPayload),\n      0\n    )?.[0] as Transaction<TTransactionType>;\n  }\n\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionSummary<TTransactionType>> {\n    const { tx: transaction, bytes: transactionBytes } =\n      await this.getTransaction<TTransactionType>();\n\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } =\n      await this.provider.getGasConfig();\n\n    // If we have the total fee, we do not need to refetch the gas price\n    const totalFee = getTotalFeeFromStatus(this.status ?? this.gqlTransaction?.status);\n    const gasPrice = totalFee ? bn(0) : await this.provider.getLatestGasPrice();\n\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    const transactionSummary = assembleTransactionSummary<TTransactionType>({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: this.status ?? this.gqlTransaction?.status,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    return transactionSummary;\n  }\n\n  private async waitForStatusChange() {\n    const status = this.gqlTransaction?.status?.type;\n    if (status && status !== 'SubmittedStatus') {\n      return;\n    }\n\n    const subscription =\n      this.submitTxSubscription ??\n      (await this.provider.operations.statusChange({\n        transactionId: this.id,\n      }));\n\n    for await (const sub of subscription) {\n      const statusChange = 'statusChange' in sub ? sub.statusChange : sub.submitAndAwaitStatus;\n      this.status = statusChange;\n      if (statusChange.type === 'SqueezedOutStatus') {\n        this.unsetResourceCache();\n        throw new FuelError(\n          ErrorCode.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n      if (statusChange.type !== 'SubmittedStatus') {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    const transactionSummary = await this.getTransactionSummary<TTransactionType>(contractsAbiMap);\n\n    const transactionResult: TransactionResult<TTransactionType> = {\n      ...transactionSummary,\n    };\n\n    let logs: Array<unknown> = [];\n\n    if (this.abis) {\n      logs = getDecodedLogs(\n        transactionSummary.receipts,\n        this.abis.main,\n        this.abis.otherContractsAbis\n      );\n\n      transactionResult.logs = logs;\n    }\n\n    const { receipts } = transactionResult;\n\n    const status = this.status ?? this.gqlTransaction?.status;\n    if (status?.type === 'FailureStatus') {\n      this.unsetResourceCache();\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs,\n      });\n    }\n\n    return transactionResult;\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    await this.waitForStatusChange();\n    return this.assembleResult<TTransactionType>(contractsAbiMap);\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    return this.waitForResult<TTransactionType>(contractsAbiMap);\n  }\n\n  private unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n}\n","import { sleep } from '@fuel-ts/utils';\n\nimport type { ProviderOptions } from '../provider';\n\ntype Backoff = 'linear' | 'exponential' | 'fixed';\n\n/**\n * Retry options scheme\n */\nexport type RetryOptions = {\n  /**\n   * Amount of attempts to retry before failing the call.\n   */\n  maxRetries: number;\n  /**\n   * Backoff strategy to use when retrying. Default is exponential.\n   */\n  backoff?: Backoff;\n  /**\n   * Starting delay for backoff strategy. Default is 150ms.\n   */\n  baseDelay?: number;\n};\n\n/**\n * Calculate the delay for the next retry attempt\n * @param options - Retry options configuration\n * @param retryAttemptNum - 1-based, tells which retry attempt is this\n * @returns Next wait delay\n */\nexport function getWaitDelay(options: RetryOptions, retryAttemptNum: number) {\n  const duration = options.baseDelay ?? 150;\n\n  switch (options.backoff) {\n    case 'linear':\n      return duration * retryAttemptNum;\n    case 'fixed':\n      return duration;\n    case 'exponential':\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\n\n/**\n * Returns a wrapped fetch function that will auto-execute itself in case of errors, until it succeeds\n * @param fetchFn - Function to be auto-retried\n * @param options - Retry options configuration\n * @param retryAttemptNum - ZERO=first call, ONE=first retry, TWO=second retry, etc.\n * @returns Whatever is the output of the `fetchFn` function\n */\nexport function autoRetryFetch(\n  fetchFn: NonNullable<ProviderOptions['fetch']>,\n  options?: RetryOptions,\n  retryAttemptNum: number = 0\n): NonNullable<ProviderOptions['fetch']> {\n  if (options === undefined) {\n    return fetchFn;\n  }\n\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error: unknown) {\n      const error = _error as Error & { cause?: { code: string } };\n\n      /**\n       * So far, we are auto-retrying only for `ECONNREFUSED` error.\n       * TODO: Investigate if we should consider more errors.\n       */\n      if (error.cause?.code !== 'ECONNREFUSED') {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n\n      const delay = getWaitDelay(options, retryNum);\n\n      await sleep(delay);\n\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { GraphQLError } from 'graphql';\n\nexport enum GqlErrorMessage {\n  NOT_ENOUGH_COINS = 'not enough coins to fit the target',\n  MAX_COINS_REACHED = 'max number of coins is reached while trying to fit the target',\n}\n\nexport const handleGqlErrorMessage = (errorMessage: string, rawError: GraphQLError) => {\n  switch (errorMessage) {\n    case GqlErrorMessage.NOT_ENOUGH_COINS:\n      throw new FuelError(\n        ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account(s) sending the transaction don't have enough funds to cover the transaction.`,\n        {},\n        rawError\n      );\n    case GqlErrorMessage.MAX_COINS_REACHED:\n      throw new FuelError(\n        ErrorCode.MAX_COINS_REACHED,\n        'The account retrieving coins has exceeded the maximum number of coins per asset. Please consider combining your coins into a single UTXO.',\n        {},\n        rawError\n      );\n    default:\n      throw new FuelError(ErrorCode.INVALID_REQUEST, errorMessage);\n  }\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nimport type { CursorPaginationArgs } from '../provider';\n\n/**\n * @hidden\n */\nexport const validatePaginationArgs = (params: {\n  inputArgs?: CursorPaginationArgs;\n  paginationLimit: number;\n}): CursorPaginationArgs => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n\n  if (after && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n\n  if (first && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n\n  if (last && after) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n\n  // If neither first nor last is provided, set a default first value\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n\n  return inputArgs;\n};\n","import { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { BN, bn } from '@fuel-ts/math';\nimport type { Transaction } from '@fuel-ts/transactions';\nimport { InputType, InputMessageCoder, TransactionCoder } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, DateTime, isDefined } from '@fuel-ts/utils';\nimport { checkFuelCoreVersionCompatibility, versions } from '@fuel-ts/versions';\nimport { equalBytes } from '@noble/curves/abstract/utils';\nimport type { DocumentNode } from 'graphql';\nimport { GraphQLClient } from 'graphql-request';\nimport type { GraphQLClientResponse, GraphQLResponse } from 'graphql-request/src/types';\nimport gql from 'graphql-tag';\nimport { clone } from 'ramda';\n\nimport { getSdk as getOperationsSdk } from './__generated__/operations';\nimport type {\n  GqlChainInfoFragment,\n  GqlConsensusParametersVersion,\n  GqlContractParameters as ContractParameters,\n  GqlDryRunFailureStatusFragment,\n  GqlDryRunSuccessStatusFragment,\n  GqlFeeParameters as FeeParameters,\n  GqlGasCostsFragment as GasCosts,\n  GqlPredicateParameters as PredicateParameters,\n  GqlScriptParameters as ScriptParameters,\n  GqlTxParameters as TxParameters,\n  GqlPageInfo,\n  GqlRelayedTransactionFailed,\n  Requester,\n  GqlBlockFragment,\n} from './__generated__/operations';\nimport type { Coin } from './coin';\nimport type { CoinQuantity, CoinQuantityLike } from './coin-quantity';\nimport { coinQuantityfy } from './coin-quantity';\nimport { FuelGraphqlSubscriber } from './fuel-graphql-subscriber';\nimport type { Message, MessageCoin, MessageProof, MessageStatus } from './message';\nimport type { ExcludeResourcesOption, Resource } from './resource';\nimport { ResourceCache } from './resource-cache';\nimport type {\n  TransactionRequestLike,\n  TransactionRequest,\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  JsonAbisFromAllCalls,\n  ScriptTransactionRequest,\n} from './transaction-request';\nimport {\n  isTransactionTypeCreate,\n  isTransactionTypeScript,\n  transactionRequestify,\n  validateTransactionForAssetBurn,\n} from './transaction-request';\nimport type { TransactionResultReceipt } from './transaction-response';\nimport { TransactionResponse, getDecodedLogs } from './transaction-response';\nimport { processGqlReceipt } from './transaction-summary/receipt';\nimport {\n  calculateGasFee,\n  extractTxError,\n  getGasUsedFromReceipts,\n  getReceiptsWithMissingData,\n} from './utils';\nimport type { RetryOptions } from './utils/auto-retry-fetch';\nimport { autoRetryFetch } from './utils/auto-retry-fetch';\nimport { handleGqlErrorMessage } from './utils/handle-gql-error-message';\nimport { validatePaginationArgs } from './utils/validate-pagination-args';\n\nconst MAX_RETRIES = 10;\n\nexport const RESOURCES_PAGE_SIZE_LIMIT = 512;\nexport const TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nexport const BLOCKS_PAGE_SIZE_LIMIT = 5;\nexport const DEFAULT_RESOURCE_CACHE_TTL = 20_000; // 20 seconds\nexport const GAS_USED_MODIFIER = 1.2;\n\nexport type DryRunFailureStatusFragment = GqlDryRunFailureStatusFragment;\nexport type DryRunSuccessStatusFragment = GqlDryRunSuccessStatusFragment;\n\nexport type DryRunStatus = DryRunFailureStatusFragment | DryRunSuccessStatusFragment;\n\nexport type CallResult = {\n  receipts: TransactionResultReceipt[];\n  dryRunStatus?: DryRunStatus;\n};\n\nexport type EstimateTxDependenciesReturns = CallResult & {\n  outputVariables: number;\n  missingContractIds: string[];\n};\n\n/**\n * A Fuel block\n */\nexport type Block = {\n  id: string;\n  height: BN;\n  time: string;\n  transactionIds: string[];\n  header: {\n    daHeight: BN;\n    stateTransitionBytecodeVersion: string;\n    transactionsCount: string;\n    transactionsRoot: string;\n    messageOutboxRoot: string;\n    eventInboxRoot: string;\n    prevRoot: string;\n    applicationHash: string;\n  };\n};\n\nexport type PageInfo = GqlPageInfo;\n\nexport type GetCoinsResponse = {\n  coins: Coin[];\n  pageInfo: PageInfo;\n};\n\nexport type GetMessagesResponse = {\n  messages: Message[];\n  pageInfo: PageInfo;\n};\n\nexport type GetBalancesResponse = {\n  balances: CoinQuantity[];\n};\n\nexport type GetTransactionsResponse = {\n  transactions: Transaction[];\n  pageInfo: PageInfo;\n};\n\nexport type GetBlocksResponse = {\n  blocks: Block[];\n  pageInfo: PageInfo;\n};\n\n/**\n * Deployed Contract bytecode and contract id\n */\nexport type ContractResult = {\n  id: string;\n  bytecode: string;\n};\n\ntype ModifyStringToBN<T> = {\n  [P in keyof T]: P extends 'version' ? T[P] : T[P] extends string ? BN : T[P];\n};\n\nexport {\n  GasCosts,\n  FeeParameters,\n  ContractParameters,\n  PredicateParameters,\n  ScriptParameters,\n  TxParameters,\n};\n\nexport type ConsensusParameters = {\n  version: GqlConsensusParametersVersion;\n  chainId: BN;\n  baseAssetId: string;\n  feeParameters: ModifyStringToBN<FeeParameters>;\n  contractParameters: ModifyStringToBN<ContractParameters>;\n  predicateParameters: ModifyStringToBN<PredicateParameters>;\n  scriptParameters: ModifyStringToBN<ScriptParameters>;\n  txParameters: ModifyStringToBN<TxParameters>;\n  gasCosts: GasCosts;\n};\n\n/**\n * Chain information\n */\nexport type ChainInfo = {\n  name: string;\n  baseChainHeight: BN;\n  consensusParameters: ConsensusParameters;\n};\n\n/**\n * Node information\n */\nexport type NodeInfo = {\n  utxoValidation: boolean;\n  vmBacktrace: boolean;\n  maxTx: BN;\n  maxDepth: BN;\n  nodeVersion: string;\n};\n\nexport type NodeInfoAndConsensusParameters = {\n  nodeVersion: string;\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  maxGasPerTx: BN;\n};\n\n// #region cost-estimation-1\nexport type TransactionCost = {\n  gasPrice: BN;\n  gasUsed: BN;\n  minGas: BN;\n  minFee: BN;\n  maxFee: BN;\n  maxGas: BN;\n  receipts: TransactionResultReceipt[];\n  outputVariables: number;\n  missingContractIds: string[];\n  estimatedPredicates: TransactionRequestInput[];\n  requiredQuantities: CoinQuantity[];\n  addedSignatures: number;\n  dryRunStatus?: DryRunStatus;\n  updateMaxFee?: boolean;\n};\n// #endregion cost-estimation-1\n\nconst processGqlChain = (chain: GqlChainInfoFragment): ChainInfo => {\n  const { name, daHeight, consensusParameters } = chain;\n\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version,\n  } = consensusParameters;\n\n  return {\n    name,\n    baseChainHeight: bn(daHeight),\n    consensusParameters: {\n      version,\n      chainId: bn(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: bn(feeParams.gasPerByte),\n        gasPriceFactor: bn(feeParams.gasPriceFactor),\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: bn(contractParams.contractMaxSize),\n        maxStorageSlots: bn(contractParams.maxStorageSlots),\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: bn(txParams.maxInputs),\n        maxOutputs: bn(txParams.maxOutputs),\n        maxWitnesses: bn(txParams.maxWitnesses),\n        maxGasPerTx: bn(txParams.maxGasPerTx),\n        maxSize: bn(txParams.maxSize),\n        maxBytecodeSubsections: bn(txParams.maxBytecodeSubsections),\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: bn(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: bn(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: bn(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: bn(predicateParams.maxMessageDataLength),\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: bn(scriptParams.maxScriptLength),\n        maxScriptDataLength: bn(scriptParams.maxScriptDataLength),\n      },\n      gasCosts,\n    },\n  };\n};\n\n/**\n * @hidden\n *\n * Cursor pagination arguments\n *\n * https://relay.dev/graphql/connections.htm#sec-Arguments\n */\nexport type CursorPaginationArgs = {\n  /** Forward pagination limit */\n  first?: number | null;\n  /** Forward pagination cursor */\n  after?: string | null;\n  /** Backward pagination limit  */\n  last?: number | null;\n  /** Backward pagination cursor */\n  before?: string | null;\n};\n\n/*\n * Provider initialization options\n */\nexport type ProviderOptions = {\n  /**\n   * Custom fetch function to use for making requests.\n   */\n  fetch?: (\n    url: string,\n    requestInit?: RequestInit,\n    providerOptions?: Omit<ProviderOptions, 'fetch'>\n  ) => Promise<Response>;\n  /**\n   * Timeout [ms] after which every request will be aborted.\n   */\n  timeout?: number;\n  /**\n   * Resources cache for the given time [ms]. If set to -1, the cache will be disabled.\n   */\n  resourceCacheTTL?: number;\n  /**\n   * Retry options to use when fetching data from the node.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * Custom headers to include in the request.\n   */\n  headers?: RequestInit['headers'];\n  /**\n   * Middleware to modify the request before it is sent.\n   * This can be used to add headers, modify the body, etc.\n   */\n  requestMiddleware?: (request: RequestInit) => RequestInit | Promise<RequestInit>;\n};\n\n/**\n * UTXO validation params\n */\nexport type UTXOValidationParams = {\n  utxoValidation?: boolean;\n};\n\n/**\n * Transaction estimation params\n */\nexport type EstimateTransactionParams = {\n  /**\n   * Estimate the transaction dependencies.\n   */\n  estimateTxDependencies?: boolean;\n};\n\nexport type TransactionCostParams = EstimateTransactionParams & {\n  /**\n   * The quantities to forward to the contract.\n   */\n  quantities?: CoinQuantity[];\n\n  /**\n   * A callback to sign the transaction.\n   *\n   * @param request - The transaction request to sign.\n   * @returns A promise that resolves to the signed transaction request.\n   */\n  signatureCallback?: (request: ScriptTransactionRequest) => Promise<ScriptTransactionRequest>;\n};\n\n/**\n * Provider Call transaction params\n */\nexport type ProviderCallParams = UTXOValidationParams & EstimateTransactionParams;\n\n/**\n * Provider Send transaction params\n */\nexport type ProviderSendTxParams = EstimateTransactionParams & {\n  /**\n   * Whether to enable asset burn for the transaction.\n   */\n  enableAssetBurn?: boolean;\n};\n\n/**\n * URL - Consensus Params mapping.\n */\ntype ChainInfoCache = Record<string, ChainInfo>;\n\n/**\n * URL - Node Info mapping.\n */\ntype NodeInfoCache = Record<string, NodeInfo>;\n\ntype Operations = ReturnType<typeof getOperationsSdk>;\n\ntype SdkOperations = Omit<Operations, 'statusChange' | 'submitAndAwaitStatus'> & {\n  statusChange: (\n    ...args: Parameters<Operations['statusChange']>\n  ) => Promise<ReturnType<Operations['statusChange']>>;\n  submitAndAwaitStatus: (\n    ...args: Parameters<Operations['submitAndAwaitStatus']>\n  ) => Promise<ReturnType<Operations['submitAndAwaitStatus']>>;\n  getBlobs: (variables: { blobIds: string[] }) => Promise<{ blob: { id: string } | null }[]>;\n};\n\n/**\n * A provider for connecting to a node\n */\nexport default class Provider {\n  operations: SdkOperations;\n  cache?: ResourceCache;\n\n  /** @hidden */\n  static clearChainAndNodeCaches() {\n    Provider.nodeInfoCache = {};\n    Provider.chainInfoCache = {};\n  }\n\n  /** @hidden */\n  public url: string;\n  /** @hidden */\n  private urlWithoutAuth: string;\n  /** @hidden */\n  private static chainInfoCache: ChainInfoCache = {};\n  /** @hidden */\n  private static nodeInfoCache: NodeInfoCache = {};\n\n  /** @hidden */\n  public consensusParametersTimestamp?: number;\n\n  options: ProviderOptions = {\n    timeout: undefined,\n    resourceCacheTTL: undefined,\n    fetch: undefined,\n    retryOptions: undefined,\n    headers: undefined,\n  };\n\n  /**\n   * @hidden\n   */\n  private static getFetchFn(options: ProviderOptions): NonNullable<ProviderOptions['fetch']> {\n    const { retryOptions, timeout, headers } = options;\n\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : undefined;\n\n      let fullRequest: RequestInit = {\n        ...request,\n        signal,\n        headers: { ...request?.headers, ...headers },\n      };\n\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n\n      return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);\n    }, retryOptions);\n  }\n\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url: string, options: ProviderOptions = {}) {\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n\n    const { FUELS } = versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n\n    this.options = {\n      ...this.options,\n      ...options,\n      headers,\n    };\n\n    this.operations = this.createOperations();\n    const { resourceCacheTTL } = this.options;\n    if (isDefined(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = undefined;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n\n  private static extractBasicAuth(url: string): {\n    url: string;\n    urlWithoutAuth: string;\n    headers: ProviderOptions['headers'];\n  } {\n    let parsedUrl: URL;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new FuelError(FuelError.CODES.INVALID_URL, 'Invalid URL provided.', { url }, error);\n    }\n\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: undefined };\n    }\n\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` },\n    };\n  }\n\n  /**\n   * Initialize Provider async stuff\n   */\n  async init(): Promise<Provider> {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain(): Promise<ChainInfo> {\n    await this.init();\n    return Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode(): Promise<NodeInfo> {\n    await this.init();\n    return Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts,\n    } = (await this.getChain()).consensusParameters;\n\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts,\n    };\n  }\n\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url: string, options?: ProviderOptions): Promise<void> {\n    const { url: rawUrl, urlWithoutAuth, headers } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n\n    this.operations = this.createOperations();\n\n    await this.init();\n  }\n\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(ignoreCache: boolean = false) {\n    let nodeInfo: NodeInfo;\n    let chain: ChainInfo;\n\n    try {\n      nodeInfo = Provider.nodeInfoCache[this.urlWithoutAuth];\n      chain = Provider.chainInfoCache[this.urlWithoutAuth];\n\n      const noCache = !nodeInfo || !chain;\n\n      if (ignoreCache || noCache) {\n        throw new Error(`Jumps to the catch block and re-fetch`);\n      }\n    } catch (_err) {\n      const data = await this.operations.getChainAndNodeInfo();\n\n      nodeInfo = {\n        maxDepth: bn(data.nodeInfo.maxDepth),\n        maxTx: bn(data.nodeInfo.maxTx),\n        nodeVersion: data.nodeInfo.nodeVersion,\n        utxoValidation: data.nodeInfo.utxoValidation,\n        vmBacktrace: data.nodeInfo.vmBacktrace,\n      };\n\n      Provider.ensureClientVersionIsSupported(nodeInfo);\n\n      chain = processGqlChain(data.chain);\n\n      Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n\n      this.consensusParametersTimestamp = Date.now();\n    }\n\n    return {\n      chain,\n      nodeInfo,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  private static ensureClientVersionIsSupported(nodeInfo: NodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } =\n      checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);\n\n    if (!isMajorSupported || !isMinorSupported) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion},\nwhich is not supported by the version of the TS SDK that you are using.\nThings may not work as expected.\nSupported fuel-core version: ${supportedVersion}.`\n      );\n    }\n  }\n\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  private createOperations(): SdkOperations {\n    const fetchFn = Provider.getFetchFn(this.options);\n    const gqlClient = new GraphQLClient(this.urlWithoutAuth, {\n      fetch: (input: RequestInfo | URL, requestInit?: RequestInit) =>\n        fetchFn(input.toString(), requestInit || {}, this.options),\n      responseMiddleware: (response: GraphQLClientResponse<unknown> | Error) => {\n        if ('response' in response) {\n          const graphQlResponse = response.response as GraphQLResponse;\n\n          if (Array.isArray(graphQlResponse?.errors)) {\n            for (const error of graphQlResponse.errors) {\n              handleGqlErrorMessage(error.message, error);\n            }\n          }\n        }\n      },\n    });\n\n    const executeQuery = (query: DocumentNode, vars: Record<string, unknown>) => {\n      const opDefinition = query.definitions.find((x) => x.kind === 'OperationDefinition') as {\n        operation: string;\n      };\n      const isSubscription = opDefinition?.operation === 'subscription';\n\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: (url, requestInit) => fetchFn(url as string, requestInit, this.options),\n          variables: vars,\n        });\n      }\n      return gqlClient.request(query, vars);\n    };\n\n    const customOperations = (requester: Requester) => ({\n      getBlobs(variables: { blobIds: string[] }) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(', ');\n        const blobParams = variables.blobIds\n          .map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`)\n          .join('\\n');\n\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {} as Record<string, string>\n        );\n\n        const document = gql`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n\n        return requester(document, updatedVariables);\n      },\n    });\n\n    // @ts-expect-error This is due to this function being generic. Its type is specified when calling a specific operation via provider.operations.xyz.\n    return { ...getOperationsSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion(): Promise<string> {\n    const {\n      nodeInfo: { nodeVersion },\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber(): Promise<BN> {\n    const {\n      chain: {\n        latestBlock: { height },\n      },\n    } = await this.operations.getLatestBlockHeight();\n    return bn(height);\n  }\n\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode(): Promise<NodeInfo> {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n\n    const processedNodeInfo: NodeInfo = {\n      maxDepth: bn(nodeInfo.maxDepth),\n      maxTx: bn(nodeInfo.maxTx),\n      nodeVersion: nodeInfo.nodeVersion,\n      utxoValidation: nodeInfo.utxoValidation,\n      vmBacktrace: nodeInfo.vmBacktrace,\n    };\n\n    Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n\n    return processedNodeInfo;\n  }\n\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain(): Promise<ChainInfo> {\n    const { chain } = await this.operations.getChain();\n\n    const processedChain = processGqlChain(chain);\n\n    Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n\n    return processedChain;\n  }\n\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId },\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId },\n    } = all;\n    return baseAssetId;\n  }\n\n  /**\n   * @hidden\n   */\n  #cacheInputs(inputs: TransactionRequestInput[], transactionId: string): void {\n    if (!this.cache) {\n      return;\n    }\n\n    const inputsToCache = inputs.reduce(\n      (acc, input) => {\n        if (input.type === InputType.Coin) {\n          acc.utxos.push(input.id);\n        } else if (input.type === InputType.Message) {\n          acc.messages.push(input.nonce);\n        }\n        return acc;\n      },\n      { utxos: [], messages: [] } as Required<ExcludeResourcesOption>\n    );\n\n    this.cache.set(transactionId, inputsToCache);\n  }\n\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx: TransactionRequest) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs },\n      },\n    } = await this.getChain();\n    if (bn(tx.inputs.length).gt(maxInputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n\n    if (bn(tx.outputs.length).gt(maxOutputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n\n    await this.validateTransaction(transactionRequest);\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n\n    let abis: JsonAbisFromAllCalls | undefined;\n\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });\n\n    this.#cacheInputs(\n      transactionRequest.inputs,\n      transactionRequest.getTransactionId(await this.getChainId())\n    );\n\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(\n    transactionRequestLike: TransactionRequestLike,\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false,\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(processGqlReceipt);\n\n    return { receipts, dryRunStatus };\n  }\n\n  /**\n   * Verifies whether enough gas is available to complete transaction.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimated transaction request object.\n   */\n  async estimatePredicates<T extends TransactionRequest>(transactionRequest: T): Promise<T> {\n    const shouldEstimatePredicates = Boolean(\n      transactionRequest.inputs.find(\n        (input) =>\n          'predicate' in input &&\n          input.predicate &&\n          !equalBytes(arrayify(input.predicate), arrayify('0x')) &&\n          new BN(input.predicateGasUsed).isZero()\n      )\n    );\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction,\n    });\n\n    const {\n      estimatePredicates: { inputs },\n    } = response;\n\n    if (inputs) {\n      inputs.forEach((input, index) => {\n        if ('predicateGasUsed' in input && bn(input.predicateGasUsed).gt(0)) {\n          // eslint-disable-next-line no-param-reassign\n          (<CoinTransactionRequestInput>transactionRequest.inputs[index]).predicateGasUsed =\n            input.predicateGasUsed;\n        }\n      });\n    }\n\n    return transactionRequest;\n  }\n\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(\n    transactionRequest: TransactionRequest\n  ): Promise<EstimateTxDependenciesReturns> {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: [],\n      };\n    }\n\n    let receipts: TransactionResultReceipt[] = [];\n    const missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let dryRunStatus: DryRunStatus | undefined;\n\n    await this.validateTransaction(transactionRequest);\n\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: rawReceipts, status }],\n      } = await this.operations.dryRun({\n        encodedTransactions: [hexlify(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: '0',\n      });\n\n      receipts = rawReceipts.map(processGqlReceipt);\n      dryRunStatus = status;\n\n      const { missingOutputVariables, missingOutputContractIds } =\n        getReceiptsWithMissingData(receipts);\n\n      const hasMissingOutputs =\n        missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(Address.fromString(contractId));\n          missingContractIds.push(contractId);\n        });\n\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice: bn(0),\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n\n    return {\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus,\n    };\n  }\n\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(\n    transactionRequests: TransactionRequest[]\n  ): Promise<EstimateTxDependenciesReturns[]> {\n    const results: EstimateTxDependenciesReturns[] = transactionRequests.map(() => ({\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: undefined,\n    }));\n\n    const allRequests = clone(transactionRequests);\n\n    // Map of original request index to its serialized transaction (for ScriptTransactionRequest only)\n    const serializedTransactionsMap = new Map();\n\n    // Prepare ScriptTransactionRequests and their indices\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, hexlify(req.toTransactionBytes()));\n      }\n    });\n\n    // Indices of ScriptTransactionRequests\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map((index) =>\n        serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false,\n      });\n\n      const nextRoundTransactions = [];\n\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(processGqlReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs =\n          missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request)) {\n          result.outputVariables += missingOutputVariables.length;\n          request.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request.addContractInputAndOutput(Address.fromString(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request,\n          });\n          request.maxFee = maxFee;\n          // Prepare for the next round of dry run\n          serializedTransactionsMap.set(requestIdx, hexlify(request.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(\n    transactionRequests: TransactionRequest[],\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult[]> {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => hexlify(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false,\n    });\n\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(processGqlReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n\n    return results;\n  }\n\n  public async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n\n    if (diff < 60000) {\n      return;\n    }\n\n    // no cache? refetch.\n    if (!Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n\n    const chainInfo = Provider.chainInfoCache[this.urlWithoutAuth];\n\n    const {\n      consensusParameters: { version: previous },\n    } = chainInfo;\n\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current },\n        },\n      },\n    } = await this.operations.getConsensusParametersVersion();\n\n    // old cache? refetch.\n    if (previous !== current) {\n      // calling with true to skip cache\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param transactionRequest - The transaction request object.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params: { transactionRequest: TransactionRequest; gasPrice?: BN }) {\n    const { transactionRequest } = params;\n    let { gasPrice } = params;\n\n    await this.autoRefetchConfigs();\n\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!isDefined(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n\n    const minFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    let gasLimit = bn(0);\n\n    // Only Script transactions consume gas\n    if (isTransactionTypeScript(transactionRequest)) {\n      // If the gasLimit is set to 0, it means we need to estimate it.\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n\n        /*\n         * Adjusting the gasLimit of a transaction (TX) impacts its maxGas.\n         * Consequently, this affects the maxFee, as it is derived from the maxGas. To accurately estimate the\n         * gasLimit for a transaction, especially when the exact gas consumption is uncertain (as in an estimation dry-run),\n         * the following steps are required:\n         * 1 - Initially, set the gasLimit using the calculated minGas.\n         * 2 - Based on this initial gasLimit, calculate the maxGas.\n         * 3 - Get the maximum gas per transaction allowed by the chain, and subtract the previously calculated maxGas from this limit.\n         * 4 - The result of this subtraction should then be adopted as the new, definitive gasLimit.\n         * 5 - Recalculate the maxGas with the updated gasLimit. This new maxGas is then used to compute the maxFee.\n         * 6 - The calculated maxFee represents the safe, estimated cost required to fund the transaction.\n         */\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit,\n    };\n  }\n\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [hexlify(transactionRequest.toTransactionBytes())];\n\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true,\n    });\n\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n\n      const processedReceipts = receipts.map(processGqlReceipt);\n\n      return { id, receipts: processedReceipts, status };\n    });\n\n    return { receipts: callResult[0].receipts };\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback }: TransactionCostParams = {}\n  ): Promise<Omit<TransactionCost, 'requiredQuantities'>> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n\n    // Remove gasLimit to avoid gasLimit when estimating predicates\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = bn(0);\n    }\n\n    const signedRequest = clone(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n\n    await this.estimatePredicates(signedRequest);\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n\n    /**\n     * Calculate minGas and maxGas based on the real transaction\n     */\n    // eslint-disable-next-line prefer-const\n    let { maxFee, maxGas, minFee, minGas, gasPrice, gasLimit } = await this.estimateTxGasAndFee({\n      transactionRequest: signedRequest,\n    });\n\n    let receipts: TransactionResultReceipt[] = [];\n    let dryRunStatus: DryRunStatus | undefined;\n    let missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let gasUsed = bn(0);\n\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n\n      ({ receipts, missingContractIds, outputVariables, dryRunStatus } =\n        await this.estimateTxDependencies(txRequestClone));\n\n      if (dryRunStatus && 'reason' in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);\n      }\n\n      const { maxGasPerTx } = await this.getGasConfig();\n\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = bn(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n\n      ({ maxFee, maxGas, minFee, minGas, gasPrice } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice,\n      }));\n    }\n\n    return {\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee,\n    };\n  }\n\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(\n    owner: string | Address,\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    const ownerAddress = Address.fromAddressOrString(owner);\n    const {\n      coins: { edges, pageInfo },\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs,\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify(assetId) },\n    });\n\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: bn(node.amount),\n      owner: ownerAddress,\n      blockCreated: bn(node.blockCreated),\n      txCreatedIdx: bn(node.txCreatedIdx),\n    }));\n\n    return {\n      coins,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param excludedIds - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(\n    owner: string | Address,\n    quantities: CoinQuantityLike[],\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    const ownerAddress = Address.fromAddressOrString(owner);\n    const excludeInput = {\n      messages: excludedIds?.messages?.map((nonce) => hexlify(nonce)) || [],\n      utxos: excludedIds?.utxos?.map((id) => hexlify(id)) || [],\n    };\n\n    if (this.cache) {\n      const cached = this.cache.getActiveData();\n      excludeInput.messages.push(...cached.messages);\n      excludeInput.utxos.push(...cached.utxos);\n    }\n\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities\n        .map(coinQuantityfy)\n        .map(({ assetId, amount, max: maxPerAsset }) => ({\n          assetId: hexlify(assetId),\n          amount: amount.toString(10),\n          max: maxPerAsset ? maxPerAsset.toString(10) : undefined,\n        })),\n      excludedIds: excludeInput,\n    };\n\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n\n    const coins = result.coinsToSpend\n      .flat()\n      .map((coin) => {\n        switch (coin.type) {\n          case 'MessageCoin':\n            return {\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              daHeight: bn(coin.daHeight),\n              sender: Address.fromAddressOrString(coin.sender),\n              recipient: Address.fromAddressOrString(coin.recipient),\n              nonce: coin.nonce,\n            } as MessageCoin;\n          case 'Coin':\n            return {\n              id: coin.utxoId,\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              owner: ownerAddress,\n              blockCreated: bn(coin.blockCreated),\n              txCreatedIdx: bn(coin.txCreatedIdx),\n            } as Coin;\n          default:\n            return null;\n        }\n      })\n      .filter((v) => !!v) as Array<Resource>;\n\n    return coins;\n  }\n\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds: string[]): Promise<string[]> {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs: (string | null)[] = [];\n\n    Object.keys(res).forEach((key) => {\n      // @ts-expect-error keys are strings\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n\n    return blobs.filter((v) => v) as string[];\n  }\n\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight: string | number | 'latest'): Promise<Block | null> {\n    let block: GqlBlockFragment | undefined | null;\n\n    if (idOrHeight === 'latest') {\n      const {\n        chain: { latestBlock },\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === 'string' && idOrHeight.length === 66;\n      const variables = isblockId\n        ? { blockId: idOrHeight }\n        : { height: bn(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n\n    if (!block) {\n      return null;\n    }\n\n    const { header, height, id, transactions } = block;\n\n    return {\n      id,\n      height: bn(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: bn(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot,\n      },\n      transactionIds: transactions.map((tx) => tx.id),\n    };\n  }\n\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params?: CursorPaginationArgs): Promise<GetBlocksResponse> {\n    const {\n      blocks: { edges, pageInfo },\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params,\n      }),\n    });\n\n    const blocks: Block[] = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: bn(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n    }));\n\n    return { blocks, pageInfo };\n  }\n\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(\n    /** ID or height of the block */\n    idOrHeight: string | number | 'latest'\n  ): Promise<(Block & { transactions: Transaction[] }) | null> {\n    let variables;\n    if (typeof idOrHeight === 'number') {\n      variables = { blockHeight: bn(idOrHeight).toString(10) };\n    } else if (idOrHeight === 'latest') {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else {\n      variables = { blockId: idOrHeight };\n    }\n\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n\n    if (!block) {\n      return null;\n    }\n\n    return {\n      id: block.id,\n      height: bn(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new TransactionCoder().decode(arrayify(tx.rawPayload), 0)?.[0]\n      ),\n    };\n  }\n\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction<TTransactionType = void>(\n    transactionId: string\n  ): Promise<Transaction<TTransactionType> | null> {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n\n    if (!transaction) {\n      return null;\n    }\n\n    try {\n      return new TransactionCoder().decode(\n        arrayify(transaction.rawPayload),\n        0\n      )?.[0] as Transaction<TTransactionType>;\n    } catch (error) {\n      if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n        // eslint-disable-next-line no-console\n        console.warn('Unsupported transaction type encountered');\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs?: CursorPaginationArgs): Promise<GetTransactionsResponse> {\n    const {\n      transactions: { edges, pageInfo },\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n      }),\n    });\n\n    const coder = new TransactionCoder();\n    const transactions = edges\n      .map(({ node: { rawPayload } }) => {\n        try {\n          return coder.decode(arrayify(rawPayload), 0)[0];\n        } catch (error) {\n          if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n            // eslint-disable-next-line no-console\n            console.warn('Unsupported transaction type encountered');\n            return null;\n          }\n          throw error;\n        }\n      })\n      .filter((tx): tx is Transaction => tx !== null);\n\n    return { transactions, pageInfo };\n  }\n\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId: string): Promise<ContractResult | null> {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(\n    /** The contract ID to get the balance for */\n    contractId: string | Address,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: Address.fromAddressOrString(contractId).toB256(),\n      asset: hexlify(assetId),\n    });\n    return bn(contractBalance.amount, 10);\n  }\n\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(\n    /** The address to get coins for */\n    owner: string | Address,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { balance } = await this.operations.getBalance({\n      owner: Address.fromAddressOrString(owner).toB256(),\n      assetId: hexlify(assetId),\n    });\n    return bn(balance.amount, 10);\n  }\n\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(owner: string | Address): Promise<GetBalancesResponse> {\n    const {\n      balances: { edges },\n    } = await this.operations.getBalances({\n      /**\n       * The query parameters for this method were designed to support pagination,\n       * but the current Fuel-Core implementation does not support pagination yet.\n       */\n      first: 10000,\n      filter: { owner: Address.fromAddressOrString(owner).toB256() },\n    });\n\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: bn(node.amount),\n    }));\n\n    return { balances };\n  }\n\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(\n    address: string | Address,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetMessagesResponse> {\n    const {\n      messages: { edges, pageInfo },\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n      }),\n      owner: Address.fromAddressOrString(address).toB256(),\n    });\n\n    const messages = edges.map(({ node }) => ({\n      messageId: InputMessageCoder.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: bn(node.amount),\n        data: node.data,\n      }),\n      sender: Address.fromAddressOrString(node.sender),\n      recipient: Address.fromAddressOrString(node.recipient),\n      nonce: node.nonce,\n      amount: bn(node.amount),\n      data: InputMessageCoder.decodeData(node.data),\n      daHeight: bn(node.daHeight),\n    }));\n\n    return {\n      messages,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(\n    transactionId: string,\n    nonce: string,\n    commitBlockId?: string,\n    commitBlockHeight?: BN\n  ): Promise<MessageProof | null> {\n    let inputObject: {\n      /** The transaction to get message from */\n      transactionId: string;\n      /** The message id from MessageOut receipt */\n      nonce: string;\n      commitBlockId?: string;\n      commitBlockHeight?: string;\n    } = {\n      transactionId,\n      nonce,\n    };\n\n    if (commitBlockId && commitBlockHeight) {\n      throw new FuelError(\n        ErrorCode.INVALID_INPUT_PARAMETERS,\n        'commitBlockId and commitBlockHeight cannot be used together'\n      );\n    }\n\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId,\n      };\n    }\n\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Conver BN into a number string required on the query\n        // This should problably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString(),\n      };\n    }\n\n    const result = await this.operations.getMessageProof(inputObject);\n\n    if (!result.messageProof) {\n      return null;\n    }\n\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data,\n    } = result.messageProof;\n\n    return {\n      messageProof: {\n        proofIndex: bn(messageProof.proofIndex),\n        proofSet: messageProof.proofSet,\n      },\n      blockProof: {\n        proofIndex: bn(blockProof.proofIndex),\n        proofSet: blockProof.proofSet,\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: bn(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: bn(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion),\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: bn(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: bn(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion),\n      },\n      sender: Address.fromAddressOrString(sender),\n      recipient: Address.fromAddressOrString(recipient),\n      nonce,\n      amount: bn(amount),\n      data,\n    };\n  }\n\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice(): Promise<BN> {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return bn(latestGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon: number): Promise<BN> {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon),\n    });\n    return bn(estimateGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(\n    /** The nonce of the message to get status from */\n    nonce: string\n  ): Promise<MessageStatus> {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount: number, startTime?: number) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: bn(amount).toString(10),\n      startTimestamp: startTime ? DateTime.fromUnixMilliseconds(startTime).toTai64() : undefined,\n    });\n    return bn(latestBlockHeight);\n  }\n\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id: string): Promise<boolean> {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id,\n    });\n\n    if (contract || blob || transaction) {\n      return false;\n    }\n    return true;\n  }\n\n  async getAddressType(id: string): Promise<'Account' | 'Contract' | 'Transaction' | 'Blob'> {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id,\n    });\n\n    if (contract) {\n      return 'Contract';\n    }\n    if (blob) {\n      return 'Blob';\n    }\n    if (transaction) {\n      return 'Transaction';\n    }\n\n    return 'Account';\n  }\n\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n\n  async getTransactionResponse(transactionId: string): Promise<TransactionResponse> {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce: string): Promise<Message | null> {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n\n    if (!rawMessage) {\n      return null;\n    }\n\n    const message: Message = {\n      messageId: InputMessageCoder.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: bn(rawMessage.amount),\n        data: rawMessage.data,\n      }),\n      sender: Address.fromAddressOrString(rawMessage.sender),\n      recipient: Address.fromAddressOrString(rawMessage.recipient),\n      nonce,\n      amount: bn(rawMessage.amount),\n      data: InputMessageCoder.decodeData(rawMessage.data),\n      daHeight: bn(rawMessage.daHeight),\n    };\n\n    return message;\n  }\n\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(\n    relayedTransactionId: string\n  ): Promise<GqlRelayedTransactionFailed | null> {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId,\n    });\n\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n\n    return relayedTransactionStatus;\n  }\n\n  /**\n   * @hidden\n   */\n  private extractDryRunError(\n    transactionRequest: ScriptTransactionRequest,\n    receipts: TransactionResultReceipt[],\n    dryRunStatus: DryRunStatus\n  ): FuelError {\n    const status = dryRunStatus as DryRunFailureStatusFragment;\n    let logs: unknown[] = [];\n    if (transactionRequest.abis) {\n      logs = getDecodedLogs(\n        receipts,\n        transactionRequest.abis.main,\n        transactionRequest.abis.otherContractsAbis\n      );\n    }\n\n    return extractTxError({\n      logs,\n      receipts,\n      statusReason: status.reason,\n    });\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type {\n  GqlGetTransactionsByOwnerQueryVariables,\n  GqlReceiptFragment,\n} from '../__generated__/operations';\nimport type Provider from '../provider';\nimport { TRANSACTIONS_PAGE_SIZE_LIMIT, type PageInfo } from '../provider';\nimport type { TransactionRequest } from '../transaction-request';\nimport type { TransactionResult } from '../transaction-response';\nimport { validatePaginationArgs } from '../utils/validate-pagination-args';\n\nimport { assembleTransactionSummary } from './assemble-transaction-summary';\nimport { processGqlReceipt } from './receipt';\nimport { getTotalFeeFromStatus } from './status';\nimport type { AbiMap, TransactionSummary } from './types';\n/** @hidden */\nexport interface GetTransactionSummaryParams {\n  id: string;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\nexport async function getTransactionSummary<TTransactionType = void>(\n  params: GetTransactionSummaryParams\n): Promise<TransactionResult> {\n  const { id, provider, abiMap } = params;\n\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id,\n  });\n\n  if (!gqlTransaction) {\n    throw new FuelError(\n      ErrorCode.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n\n  const [decodedTransaction] = new TransactionCoder().decode(\n    arrayify(gqlTransaction.rawPayload),\n    0\n  );\n\n  let txReceipts: GqlReceiptFragment[] = [];\n\n  if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n\n  const receipts = txReceipts.map(processGqlReceipt);\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  // If we have the total fee, we do not need to refetch the gas price\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? bn(0) : await provider.getLatestGasPrice();\n\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionInfo = assembleTransactionSummary<TTransactionType>({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: arrayify(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: bn(gasPerByte),\n    gasPriceFactor: bn(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return {\n    ...transactionInfo,\n  };\n}\n\nexport interface GetTransactionSummaryFromRequestParams {\n  transactionRequest: TransactionRequest;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\n/** @hidden */\nexport async function getTransactionSummaryFromRequest<TTransactionType = void>(\n  params: GetTransactionSummaryFromRequestParams\n): Promise<TransactionSummary<TTransactionType>> {\n  const { provider, transactionRequest, abiMap } = params;\n\n  const { receipts } = await provider.dryRun(transactionRequest);\n\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionSummary = assembleTransactionSummary<TTransactionType>({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return transactionSummary;\n}\n\nexport interface GetTransactionsSummariesParams {\n  provider: Provider;\n  filters: GqlGetTransactionsByOwnerQueryVariables;\n  abiMap?: AbiMap;\n}\n\nexport interface GetTransactionsSummariesReturns {\n  transactions: TransactionResult[];\n  pageInfo: PageInfo;\n}\n\n/**\n * Gets transaction summaries for a given owner/address.\n *\n * @param params - The filters to apply to the query.\n * @returns The transaction summaries.\n */\nexport async function getTransactionsSummaries(\n  params: GetTransactionsSummariesParams\n): Promise<GetTransactionsSummariesReturns> {\n  const { filters, provider, abiMap } = params;\n\n  const { owner, ...inputArgs } = filters;\n\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n  });\n\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner,\n  });\n\n  const { edges, pageInfo } = transactionsByOwner;\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n\n    const { id, rawPayload, status } = gqlTransaction;\n\n    const [decodedTransaction] = new TransactionCoder().decode(arrayify(rawPayload), 0);\n\n    let txReceipts: GqlReceiptFragment[] = [];\n\n    if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n\n    const receipts = txReceipts.map(processGqlReceipt);\n\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: arrayify(rawPayload),\n      gqlTransactionStatus: status,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    const output: TransactionResult = {\n      ...transactionSummary,\n    };\n\n    return output;\n  });\n\n  return {\n    transactions,\n    pageInfo,\n  };\n}\n","export const CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337,\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889,\n  },\n};\n","import { CHAIN_IDS } from '../../chains';\nimport type { Asset, AssetEth, AssetFuel, NetworkEthereum, NetworkFuel } from '../types';\n\ntype Network = NetworkEthereum | NetworkFuel;\nexport type NetworkTypes = NetworkEthereum['type'] | NetworkFuel['type'];\ntype NetworkTypeToNetwork<T> = T extends 'ethereum' ? NetworkEthereum : T extends 'fuel' ? NetworkFuel : Network;\n\n/**\n * Returns the default chainId for the given network\n*/\nexport const getDefaultChainId = (networkType: NetworkTypes): number | undefined => {\n  if (networkType === 'ethereum') {\n    return CHAIN_IDS.eth.sepolia;\n  }\n  if (networkType === 'fuel') {\n    return CHAIN_IDS.fuel.testnet;\n  }\n\n  return undefined;\n};\n\nexport type GetAssetNetworkParams<T extends NetworkTypes | undefined> = {\n  asset: Asset;\n  chainId?: number;\n  networkType: T;\n};\n\n/**\n * Returns the asset's network on the given network\n * eg. getAssetNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet\n*/\nexport const getAssetNetwork = <T extends NetworkTypes | undefined>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): NetworkTypeToNetwork<T> => {\n  const network = asset.networks.find(\n    (item) => item.chainId === chainId && item.type === networkType\n  ) as NetworkTypeToNetwork<T>;\n\n  return network;\n};\n\n/**\n * Returns the asset's details on the given network alongwith the asset itself\n * eg. getAssetWithNetwork({ asset, chainId: 1, networkType: 'ethereum' }) will return the asset's details on Ethereum mainnet and the asset itself\n*/\nexport const getAssetWithNetwork = <T extends NetworkTypes>({\n  asset,\n  chainId,\n  networkType,\n}: GetAssetNetworkParams<T>): AssetEth | AssetFuel | undefined => {\n  const { networks: _, ...assetRest } = asset;\n\n  const chainIdToUse = chainId ?? getDefaultChainId(networkType);\n  // use two equals(==) cuz we wan't to keep 0 as a valid chainId\n  if (chainIdToUse === undefined) {\n    return undefined;\n  }\n\n  const assetNetwork = getAssetNetwork({\n    asset,\n    chainId: chainIdToUse,\n    networkType,\n  });\n\n  if (!assetNetwork) {\n    return undefined;\n  }\n\n  return {\n    ...assetRest,\n    ...assetNetwork,\n  };\n};\n\n/**\n * Returns the asset's details on Ethereum\n*/\nexport const getAssetEth = (asset: Asset, chainId?: number): AssetEth | undefined =>\n  getAssetWithNetwork({\n    asset,\n    networkType: 'ethereum',\n    chainId,\n  }) as AssetEth;\n\n/**\n * Returns the asset's details on Fuel\n*/\nexport const getAssetFuel = (asset: Asset, chainId?: number): AssetFuel | undefined =>\n  getAssetWithNetwork({\n    asset,\n    networkType: 'fuel',\n    chainId,\n  }) as AssetFuel;\n","const DELIMITER_PATH = '/';\nconst trimRegex = /^\\/|\\/$/g;\nconst trimPath = (path = '') => path.replace(trimRegex, '');\n\nexport function urlJoin(baseUrl: string | undefined, ...paths: Array<string>): string {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== undefined;\n  const rootPath = baseUrl?.[0] === '/' && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift('');\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n","import type { Assets } from '../types';\n\nimport { urlJoin } from './url';\n\n/**\n * Returns the list of assets with the icon paths 'resolved'. eg. `./eth.svg` -> `https://some-url.com/eth.svg`\n * @param assets - List of assets\n * @param basePath - Base path for the icon URLs (default: './')\n * @returns The assets with the icon paths resolved\n */\nexport function resolveIconPaths(assets: Assets, basePath: string = './') {\n  return assets.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon),\n  }));\n}\n","export const fuelAssetsBaseUrl = 'https://cdn.fuel.network/assets/'\n","import { CHAIN_IDS } from '../chains';\n\nimport type { Assets } from './types';\nimport { resolveIconPaths, fuelAssetsBaseUrl } from './utils';\n\nexport const rawAssets: Assets = [\n  {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    icon: 'eth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07'\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      }\n    ],\n  },\n  {\n    name: 'WETH',\n    symbol: 'WETH',\n    icon: 'weth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'weETH',\n    symbol: 'weETH',\n    icon: 'weETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsETH',\n    symbol: 'rsETH',\n    icon: 'rsETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rETH',\n    symbol: 'rETH',\n    icon: 'reth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xae78736cd615f374d3085123a210448e74fc6393',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wbETH',\n    symbol: 'wbETH',\n    icon: 'wbeth.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa2E3356610840701BDf5611a53974510Ae27E2e1',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rstETH',\n    symbol: 'rstETH',\n    icon: 'rstETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a4EffD87C2f3C55CA251080b1343b605f327E3a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'amphrETH',\n    symbol: 'amphrETH',\n    icon: 'amphrETH.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x5fD13359Ba15A84B76f7F87568309040176167cd',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mBTC',\n    symbol: 'Manta mBTC',\n    icon: 'manta-mbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4041381e947CFD3D483d67a25C6aa9Dc924250c5',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mETH',\n    symbol: 'Manta mETH',\n    icon: 'manta-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8CdF550C04Bc9B9F10938368349C9c8051A772b6',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mUSD',\n    symbol: 'Manta mUSD',\n    icon: 'manta-musd.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x3f24E1d7a973867fC2A03fE199E5502514E0e11E',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pumpBTC',\n    symbol: 'pumpBTC',\n    icon: 'pumpbtc.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xf469fbd2abcd6b9de8e169d128226c0fc90a012e',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'FBTC',\n    symbol: 'FBTC',\n    icon: 'fbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xc96de26018a54d51c097160568752c4e3bd6c364',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC',\n    symbol: 'SolvBTC',\n    icon: 'solvBTC.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a56e1c57c7475ccf742a1832b028f0456652f97',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC.BBN',\n    symbol: 'SolvBTC.BBN',\n    icon: 'SolvBTC.BBN.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd9d920aa40f578ab794426f5c90f6c731d159def',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Mantle mETH',\n    symbol: 'Mantle mETH',\n    icon: 'mantle-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sDAI',\n    symbol: 'sDAI',\n    icon: 'sdai.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x83f20f44975d03b1b09e64809b757c47f942beea',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'USDT',\n    symbol: 'USDT',\n    icon: 'usdt.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDC',\n    symbol: 'USDC',\n    icon: 'usdc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDe',\n    symbol: 'USDe',\n    icon: 'USDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4c9edd5852cd905f086c759e8383e09bff1e68b3',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sUSDe',\n    symbol: 'sUSDe',\n    icon: 'sUSDe.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsUSDe',\n    symbol: 'rsUSDe',\n    icon: 'rsUSDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wstETH',\n    symbol: 'wstETH',\n    icon: 'wsteth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'ezETH',\n    symbol: 'ezETH',\n    icon: 'ezeth.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xbf5495Efe5DB9ce00f80364C8B423567e58d2110',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pzETH',\n    symbol: 'pzETH',\n    icon: 'pzETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Re7LRT',\n    symbol: 'Re7LRT',\n    icon: 'Re7LRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'steakLRT',\n    symbol: 'steakLRT',\n    icon: 'steakLRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30',\n        decimals: 9,\n      },\n    ],\n  },\n];\n\nexport const assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);","import type { BN } from '@fuel-ts/math';\n\nimport type { CoinQuantity } from '../coin-quantity';\n\nexport const mergeQuantities = (...coinQuantities: CoinQuantity[][]): CoinQuantity[] => {\n  const resultMap: { [key: string]: BN } = {};\n\n  function addToMap({ amount, assetId }: CoinQuantity) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n\n  // Convert the resultMap back to an array\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Address } from '@fuel-ts/address';\n\nexport abstract class AbstractAccount {\n  abstract address: Address;\n  abstract provider: unknown;\n  abstract getResourcesToSpend(quantities: any[], options?: any): any;\n  abstract sendTransaction(transactionRequest: any, options?: any): any;\n  abstract simulateTransaction(transactionRequest: any, options?: any): any;\n  abstract getTransactionCost(transactionRequest: any, options?: any): Promise<any>;\n  abstract fund(transactionRequest: any, txCost: any): Promise<any>;\n}\n","import { ASSET_ID_LEN, BigNumberCoder, CONTRACT_ID_LEN, WORD_SIZE } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\ninterface AssembleTransferToContractParams {\n  contractId: string;\n  assetId: BytesLike;\n  amount: BN;\n}\n\nexport const formatTransferToContractScriptData = (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const numberCoder = new BigNumberCoder('u64');\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = concat([\n      Address.fromAddressOrString(contractId).toBytes(),\n      encoded,\n      arrayify(assetId),\n    ]);\n    return concat([acc, scriptData]);\n  }, new Uint8Array());\n};\n\nexport const assembleTransferToContractScript = async (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n\n  // @ts-expect-error method reference missing in DTS\n  await asm.initWasm();\n\n  let script = new Uint8Array();\n\n  transferParams.forEach((_, i) => {\n    const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;\n\n    script = concat([\n      script,\n      // Load ScriptData into register 0x10.\n      asm.gtf(0x10, 0x0, asm.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      asm.addi(0x11, 0x10, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      asm.addi(0x12, 0x11, CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      asm.lw(0x13, 0x12, 0x0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      asm.addi(0x14, 0x12, WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      asm.tr(0x11, 0x13, 0x14).to_bytes(),\n    ]);\n  });\n\n  // Add return instruction at the end of the script\n  script = concat([script, asm.ret(0x1).to_bytes()]);\n\n  return { script, scriptData };\n};\n","import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport type { WithAddress } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, isDefined } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { FuelConnector, FuelConnectorSendTxParams } from './connectors';\nimport type {\n  TransactionRequest,\n  CoinQuantityLike,\n  CoinQuantity,\n  Resource,\n  ExcludeResourcesOption,\n  Provider,\n  ScriptTransactionRequestLike,\n  TransactionCost,\n  EstimateTransactionParams,\n  CursorPaginationArgs,\n  TransactionRequestLike,\n  CallResult,\n  GetCoinsResponse,\n  GetMessagesResponse,\n  GetBalancesResponse,\n  Coin,\n  TransactionCostParams,\n  TransactionResponse,\n  ProviderSendTxParams,\n} from './providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  transactionRequestify,\n  addAmountToCoinQuantities,\n} from './providers';\nimport {\n  cacheRequestInputsResourcesFromOwner,\n  getAssetAmountInRequestInputs,\n  isRequestInputCoin,\n  isRequestInputMessageWithoutData,\n  isRequestInputResource,\n} from './providers/transaction-request/helpers';\nimport { mergeQuantities } from './providers/utils/merge-quantities';\nimport { AbstractAccount } from './types';\nimport { assembleTransferToContractScript } from './utils/formatTransferToContractScriptData';\n\nexport type TxParamsType = Pick<\n  ScriptTransactionRequestLike,\n  'gasLimit' | 'tip' | 'maturity' | 'maxFee' | 'witnessLimit'\n>;\n\nexport type TransferParams = {\n  destination: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type ContractTransferParams = {\n  contractId: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type AccountSendTxParams = ProviderSendTxParams & FuelConnectorSendTxParams;\n\nexport type EstimatedTxParams = Pick<\n  TransactionCost,\n  'estimatedPredicates' | 'addedSignatures' | 'requiredQuantities' | 'updateMaxFee' | 'gasPrice'\n>;\nconst MAX_FUNDING_ATTEMPTS = 5;\n\nexport type FakeResources = Partial<Coin> & Required<Pick<Coin, 'amount' | 'assetId'>>;\n\n/**\n * `Account` provides an abstraction for interacting with accounts or wallets on the network.\n */\nexport class Account extends AbstractAccount implements WithAddress {\n  /**\n   * The address associated with the account.\n   */\n  readonly address: Address;\n\n  /**\n   * The provider used to interact with the network.\n   */\n  protected _provider?: Provider;\n\n  /**\n   * The connector for use with external wallets\n   */\n  protected _connector?: FuelConnector;\n\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address: string | Address, provider?: Provider, connector?: FuelConnector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = Address.fromDynamicInput(address);\n  }\n\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider(): Provider {\n    if (!this._provider) {\n      throw new FuelError(ErrorCode.MISSING_PROVIDER, 'Provider not set');\n    }\n\n    return this._provider;\n  }\n\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider: Provider): Provider {\n    this._provider = provider;\n    return this.provider;\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param excludedIds - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[],\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs?: CursorPaginationArgs): Promise<GetMessagesResponse> {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId?: BytesLike): Promise<BN> {\n    const assetIdToFetch = assetId ?? (await this.provider.getBaseAssetId());\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances(): Promise<GetBalancesResponse> {\n    return this.provider.getBalances(this.address);\n  }\n\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   */\n  async fund<T extends TransactionRequest>(request: T, params: EstimatedTxParams): Promise<T> {\n    const { addedSignatures, estimatedPredicates, requiredQuantities, updateMaxFee, gasPrice } =\n      params;\n\n    const fee = request.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset =\n      requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || bn(0);\n\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: bn(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities,\n    });\n\n    const quantitiesDict: Record<string, { required: BN; owned: BN }> = {};\n\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: bn(0),\n      };\n    });\n\n    request.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin = isRequestInputCoin(input);\n      const assetId = isCoin ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n\n    let missingQuantities: CoinQuantity[] = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned),\n        });\n      }\n    });\n\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request.inputs, this.address)\n      );\n\n      request.addResources(resources);\n      request.updatePredicateGasUsed(estimatedPredicates);\n\n      const requestToReestimate = clone(request);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(() =>\n          requestToReestimate.addEmptyWitness()\n        );\n      }\n\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n\n      // Recalculate the fee after adding the resources\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate,\n        gasPrice,\n      });\n\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n\n      // Update the new total as the fee will change after adding new resources\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId,\n          },\n        ];\n      }\n\n      fundingAttempts += 1;\n    }\n\n    // If the transaction still needs to be funded after the maximum number of attempts\n    if (needsToBeFunded) {\n      throw new FuelError(\n        ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n\n    await this.provider.validateTransaction(request);\n\n    request.updatePredicateGasUsed(estimatedPredicates);\n\n    const requestToReestimate = clone(request);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n\n    if (!updateMaxFee) {\n      return request;\n    }\n\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice,\n    });\n\n    request.maxFee = maxFee;\n\n    return request;\n  }\n\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<ScriptTransactionRequest> {\n    let request = new ScriptTransactionRequest(txParams);\n\n    request = this.addTransfer(request, {\n      destination,\n      amount,\n      assetId: assetId || (await this.provider.getBaseAssetId()),\n    });\n\n    request = await this.estimateAndFundTransaction(request, txParams);\n\n    return request;\n  }\n\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const request = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(\n    transferParams: TransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest(txParams);\n    request = this.addBatchTransfer(request, transferParams);\n    request = await this.estimateAndFundTransaction(request, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request: ScriptTransactionRequest, transferParams: TransferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request.addCoinOutput(Address.fromAddressOrString(destination), amount, assetId);\n    return request;\n  }\n\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request: ScriptTransactionRequest, transferParams: TransferParams[]) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request, {\n        destination,\n        amount,\n        assetId,\n      });\n    });\n    return request;\n  }\n\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(\n    contractId: string | Address,\n    amount: BigNumberish,\n    assetId: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n\n  async batchTransferToContracts(\n    contractTransferParams: ContractTransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest({\n      ...txParams,\n    });\n\n    const quantities: CoinQuantity[] = [];\n\n    const defaultAssetId = await this.provider.getBaseAssetId();\n\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = bn(transferParam.amount);\n      const contractAddress = Address.fromAddressOrString(transferParam.contractId);\n\n      const assetId = transferParam.assetId ? hexlify(transferParam.assetId) : defaultAssetId;\n\n      if (amount.lte(0)) {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSFER_AMOUNT,\n          'Transfer amount must be a positive number.'\n        );\n      }\n\n      request.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId,\n      };\n    });\n\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n\n    request.script = script;\n    request.scriptData = scriptData;\n\n    request = await this.estimateAndFundTransaction(request, txParams, { quantities });\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(\n    recipient: string | Address,\n    amount: BigNumberish,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const recipientAddress = Address.fromAddressOrString(recipient);\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipientAddress.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    const params: ScriptTransactionRequestLike = { script, ...txParams };\n\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: bn(amount), assetId: baseAssetId }];\n\n    const txCost = await this.getTransactionCost(request, { quantities });\n\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n\n    await this.fund(request, txCost);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback, quantities = [] }: TransactionCostParams = {}\n  ): Promise<TransactionCost> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    // Fund with fake UTXOs to avoid not enough funds error\n    // Getting coin quantities from amounts being transferred\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    // Combining coin quantities from amounts being transferred and forwarding to contracts\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    // An arbitrary amount of the base asset is added to cover the transaction fee during dry runs\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn('100000000000000000') }];\n\n    const findAssetInput = (assetId: string) =>\n      txRequestClone.inputs.find((input) => {\n        if (input.type === InputType.Coin) {\n          return input.assetId === assetId;\n        }\n\n        // We only consider the message input if it has no data.\n        // Messages with `data` cannot fund the gas of a transaction.\n        if (isRequestInputMessageWithoutData(input)) {\n          return baseAssetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n\n      if (assetInput && 'amount' in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId,\n            },\n          ])\n        );\n      }\n    };\n\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(({ amount, assetId }) =>\n      updateAssetInput(assetId, amount)\n    );\n\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n    });\n\n    return {\n      ...txCost,\n      requiredQuantities,\n    };\n  }\n\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message: string): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(ErrorCode.MISSING_CONNECTOR, 'A connector is required to sign messages.');\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        'A connector is required to sign transactions.'\n      );\n    }\n    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);\n  }\n\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, onBeforeSend, skipCustomFee = false }: AccountSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    if (this._connector) {\n      return this.provider.getTransactionResponse(\n        await this._connector.sendTransaction(this.address.toString(), transactionRequestLike, {\n          onBeforeSend,\n          skipCustomFee,\n        })\n      );\n    }\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false,\n    });\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return coins.map((coin) => ({\n      id: hexlify(randomBytes(UTXO_ID_LEN)),\n      owner: this.address,\n      blockCreated: bn(1),\n      txCreatedIdx: bn(1),\n      ...coin,\n    }));\n  }\n\n  /** @hidden * */\n  private validateTransferAmount(amount: BigNumberish) {\n    if (bn(amount).lte(0)) {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSFER_AMOUNT,\n        'Transfer amount must be a positive number.'\n      );\n    }\n  }\n\n  /** @hidden * */\n  private async estimateAndFundTransaction(\n    transactionRequest: ScriptTransactionRequest,\n    txParams: TxParamsType,\n    costParams?: TransactionCostParams\n  ) {\n    let request = transactionRequest;\n    const txCost = await this.getTransactionCost(request, costParams);\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n    request = await this.fund(request, txCost);\n    return request;\n  }\n\n  /** @hidden * */\n  private validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee },\n  }: {\n    gasUsed: BN;\n    maxFee: BN;\n    transactionRequest: ScriptTransactionRequest;\n    txParams: Pick<TxParamsType, 'gasLimit' | 'maxFee'>;\n  }) {\n    const request = transactionRequestify(transactionRequest) as ScriptTransactionRequest;\n\n    if (!isDefined(setGasLimit)) {\n      request.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new FuelError(\n        ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n\n    if (!isDefined(setMaxFee)) {\n      request.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError(\n        ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n\n    return request;\n  }\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\nexport function FpLegendre(order: bigint) {\n  // (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n  // (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * NOTE: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject, bitLen } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const validateW = (W: number) => {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n      throw new Error(`Wrong window size=${W}, should be [1..${bits}]`);\n  };\n  const opts = (W: number) => {\n    validateW(W);\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W: number = pointWindowSizes.get(P) || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return this.wNAF(W, comp, n);\n    },\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM).\n * MSM is basically (Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param field field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  field: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  if (!Array.isArray(points) || !Array.isArray(scalars) || scalars.length !== points.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error(`wrong scalar at index ${i}`);\n  });\n  points.forEach((p, i) => {\n    if (!(p instanceof (c as any))) throw new Error(`wrong point at index ${i}`);\n  });\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(c.ZERO); // +1 for zero array\n  const lastBits = Math.floor((field.BITS - 1) / windowSize) * windowSize;\n  let sum = c.ZERO;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(c.ZERO);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = c.ZERO; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = c.ZERO; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport {\n  AffinePoint,\n  BasicCurve,\n  Group,\n  GroupConstructor,\n  validateBasic,\n  wNAF,\n  pippenger,\n} from './curve.js';\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes, memoized, abool } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      return `${ut.numberToHexUnpadded(tag)}${lenLen}${len}${data}`;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint) {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected assertion');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('Invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('Invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const seq = `${tlv.encode(0x02, int.encode(sig.r))}${tlv.encode(0x02, int.encode(sig.s))}`;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = mod.Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]) {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      ut.aInRange('scalar', sc, _0n, CURVE.n);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (sc === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, sc);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange(`num < 2^${CURVE.nBitLength}`, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    validateSigVerOpts(opts);\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || ut.isBytes(sg)) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { CHash } from './abstract/utils.js';\nimport { CurveType, weierstrass } from './abstract/weierstrass.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve } from './_shortw_utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  inRange,\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n */\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Schnorr signatures over secp256k1.\n */\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","import { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { hash } from '@fuel-ts/hasher';\nimport { toBytes } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\nexport class Signer {\n  readonly address: Address;\n\n  readonly publicKey: string;\n\n  readonly compressedPublicKey: string;\n\n  readonly privateKey: string;\n\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey: BytesLike) {\n    // A lot of common tools do not prefix private keys with a 0x\n    if (typeof privateKey === 'string') {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    // Convert to byte array, normalize private key input allowing it to be BytesLike\n    // like remove 0x prefix and accept array of bytes\n    const privateKeyBytes = toBytes(privateKey, 32);\n\n    this.privateKey = hexlify(privateKeyBytes);\n\n    // Slice(1) removes the encoding scheme from the public key\n    this.publicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = Address.fromPublicKey(this.publicKey);\n  }\n\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data: BytesLike) {\n    const signature = secp256k1.sign(arrayify(data), arrayify(this.privateKey));\n\n    const r = toBytes(`0x${signature.r.toString(16)}`, 32);\n    const s = toBytes(`0x${signature.s.toString(16)}`, 32);\n\n    // add recoveryParam to first s byte\n    s[0] |= (signature.recovery || 0) << 7;\n\n    return hexlify(concat([r, s]));\n  }\n\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point: BytesLike) {\n    const p0 = secp256k1.ProjectivePoint.fromHex(arrayify(this.compressedPublicKey));\n    const p1 = secp256k1.ProjectivePoint.fromHex(arrayify(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data: BytesLike, signature: BytesLike): string {\n    const signedMessageBytes = arrayify(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 0x80) >> 7;\n\n    // remove recoveryParam from s first byte\n    s[0] &= 0x7f;\n\n    const sig = new secp256k1.Signature(BigInt(hexlify(r)), BigInt(hexlify(s))).addRecoveryBit(\n      recoveryParam\n    );\n\n    const publicKey = sig.recoverPublicKey(arrayify(data)).toRawBytes(false).slice(1);\n    return hexlify(publicKey);\n  }\n\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data: BytesLike, signature: BytesLike): Address {\n    return Address.fromPublicKey(Signer.recoverPublicKey(data, signature));\n  }\n\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy?: BytesLike) {\n    return entropy ? hash(concat([randomBytes(32), arrayify(entropy)])) : randomBytes(32);\n  }\n\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey: BytesLike) {\n    const point = secp256k1.ProjectivePoint.fromHex(arrayify(publicKey));\n    return hexlify(point.toRawBytes(false).slice(1));\n  }\n}\n","import { Address } from '@fuel-ts/address';\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  randomUUID,\n} from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type KeystoreWallet = {\n  id: string;\n  version: number;\n  address: string;\n  crypto: KeystoreCrypto;\n};\n\ntype KeystoreCrypto = {\n  cipher: 'aes-128-ctr';\n  cipherparams: { iv: string };\n  ciphertext: string;\n  kdf: 'scrypt';\n  mac: string;\n  kdfparams: KDFParams;\n};\n\ntype KDFParams = {\n  dklen: number;\n  n: number;\n  p: number;\n  r: number;\n  salt: string;\n};\n\n// Same values used in the Rust SDK\nexport const DEFAULT_KDF_PARAMS_LOG_N = 13;\nexport const DEFAULT_KDF_PARAMS_R = 8;\nexport const DEFAULT_KDF_PARAMS_P = 1;\nexport const DEFAULT_KEY_SIZE = 32;\nexport const DEFAULT_IV_SIZE = 16;\n\n/**\n * Removes the '0x' prefix from a hexadecimal string.\n * If the prefix does not exist, it returns the original string.\n */\nexport const removeHexPrefix = (hexString: string) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n\n  return hexString;\n};\n\nexport async function encryptKeystoreWallet(\n  privateKey: string,\n  address: string | Address,\n  password: string\n): Promise<string> {\n  // Convert the hexlified private key string to a Buffer.\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), 'hex');\n  const ownerAddress = Address.fromAddressOrString(address);\n  // Generate a random salt.\n  const salt = randomBytes(DEFAULT_KEY_SIZE);\n\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P,\n  });\n\n  // Encrypt the private key using AES-128-CTR.\n  const iv = randomBytes(DEFAULT_IV_SIZE);\n\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n\n  // Calculate the MAC.\n  const macHashUint8Array = keccak256(data);\n\n  const mac = stringFromBuffer(macHashUint8Array, 'hex');\n\n  // Construct keystore.\n  const keystore: KeystoreWallet = {\n    id: randomUUID(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: 'aes-128-ctr',\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, 'hex') },\n      ciphertext: stringFromBuffer(ciphertext, 'hex'),\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, 'hex'),\n      },\n    },\n  };\n\n  return JSON.stringify(keystore);\n}\n\nexport async function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string> {\n  const keystoreWallet = JSON.parse(jsonWallet) as KeystoreWallet;\n\n  // Extract the parameters needed for decryption.\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt },\n    },\n  } = keystoreWallet;\n\n  const ciphertextBuffer = bufferFromString(ciphertext, 'hex');\n  const ivBuffer = bufferFromString(iv, 'hex');\n  const saltBuffer = bufferFromString(salt, 'hex');\n\n  const passwordBuffer = bufferFromString(password);\n\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen,\n  });\n\n  // Verify the MAC. It should be the Keccak-256 hash of the concatenation of the second half of the derived key and the ciphertext.\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n\n  const macHashUint8Array = keccak256(data);\n\n  const macHash = stringFromBuffer(macHashUint8Array, 'hex');\n\n  if (mac !== macHash) {\n    throw new FuelError(\n      ErrorCode.INVALID_PASSWORD,\n      'Failed to decrypt the keystore wallet, the provided password is incorrect.'\n    );\n  }\n\n  // Decrypt the private key.\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n\n  const privateKey = hexlify(buffer);\n\n  return privateKey;\n}\n","import { hashMessage } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { transactionRequestify, validateTransactionForAssetBurn } from '../providers';\nimport type {\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n  ProviderSendTxParams,\n  EstimateTransactionParams,\n  TransactionRequest,\n  TransactionResponse,\n} from '../providers';\nimport { Signer } from '../signer';\n\nimport { encryptKeystoreWallet } from './keystore-wallet';\n\n/**\n * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.\n */\nexport class BaseWalletUnlocked extends Account {\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer: () => Signer;\n\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey: BytesLike, provider?: Provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signMessage(message: string): Promise<string> {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return hexlify(signedMessage);\n  }\n\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return hexlify(signature);\n  }\n\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const transactionRequest = transactionRequestify(transactionRequestLike) as T;\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  override async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = false, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  override async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false,\n      }\n    );\n  }\n\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password: string): Promise<string> {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n}\n","export const english = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo',\n];\n","export { english } from './words/english';\n\nexport enum Language {\n  'english' = 'english',\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\n/* Mnemonic phrase composed by words from the provided wordlist it can be a text or a array of words */\nexport type MnemonicPhrase = string | Array<string>;\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n  return (1 << bits) - 1;\n}\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n  return ((1 << bits) - 1) << (8 - bits);\n}\n\nexport function getWords(mnemonic: MnemonicPhrase): Array<string> {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\n\nexport function getPhrase(mnemonic: MnemonicPhrase): string {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(' ');\n  }\n  return mnemonic;\n}\n\nexport function entropyToMnemonicIndices(entropy: Uint8Array): Array<number> {\n  const indices: Array<number> = [0];\n\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n      remainingBits += 3;\n    }\n  }\n\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> (8 - checksumBits);\n\n  return indices;\n}\n\nexport function mnemonicWordsToEntropy(words: Array<string>, wordlist: Array<string>): BytesLike {\n  const size = Math.ceil((11 * words.length) / 8);\n  const entropy = arrayify(new Uint8Array(size));\n\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize('NFKD'));\n    if (index === -1) {\n      throw new FuelError(\n        ErrorCode.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & (1 << (10 - bit))) {\n        entropy[offset >> 3] |= 1 << (7 - (offset % 8));\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = (32 * words.length) / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new FuelError(\n      ErrorCode.INVALID_CHECKSUM,\n      'Checksum validation failed for the provided mnemonic.'\n    );\n  }\n\n  return entropy.slice(0, entropyBits / 8);\n}\n","import { randomBytes, pbkdf2, computeHmac } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, toUtf8Bytes } from '@fuel-ts/utils';\n\nimport { english } from '../wordlists';\n\nimport type { MnemonicPhrase } from './utils';\nimport { entropyToMnemonicIndices, getWords, getPhrase, mnemonicWordsToEntropy } from './utils';\n\n//\n// Constants\n//\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes('Bitcoin seed');\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = '0x0488ade4';\nconst TestnetPRV = '0x04358394';\nexport const MNEMONIC_SIZES = [12, 15, 18, 21, 24];\n\nfunction assertWordList(wordlist: Array<string>) {\n  if (wordlist.length !== 2048) {\n    throw new FuelError(\n      ErrorCode.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\n\nfunction assertEntropy(entropy: BytesLike) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new FuelError(\n      ErrorCode.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\n\nfunction assertMnemonic(words: Array<string>) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      ', '\n    )}] words, but got ${words.length}.`;\n\n    throw new FuelError(ErrorCode.INVALID_MNEMONIC, errorMsg);\n  }\n}\n\nclass Mnemonic {\n  wordlist: Array<string>;\n\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist: Array<string> = english) {\n    this.wordlist = wordlist;\n\n    assertWordList(this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase: MnemonicPhrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy: BytesLike) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase: MnemonicPhrase, wordlist: Array<string> = english): string {\n    const words = getWords(phrase);\n\n    assertMnemonic(words);\n\n    return hexlify(mnemonicWordsToEntropy(words, wordlist));\n  }\n\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy: BytesLike, wordlist: Array<string> = english): string {\n    const entropyBytes = arrayify(entropy);\n\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n\n    return entropyToMnemonicIndices(entropyBytes)\n      .map((i) => wordlist[i])\n      .join(' ');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    assertMnemonic(getWords(phrase));\n\n    const phraseBytes = toUtf8Bytes(getPhrase(phrase));\n    const salt = toUtf8Bytes(`mnemonic${passphrase}`);\n\n    return pbkdf2(phraseBytes, salt, 2048, 64, 'sha512');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase: string) {\n    const words = getWords(phrase);\n\n    let i: number = 0;\n\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n\n    return true;\n  }\n\n  static binarySearch(target: string): boolean {\n    const words = english;\n    let left: number = 0;\n    let right: number = words.length - 1;\n\n    while (left <= right) {\n      const mid: number = Math.floor((left + right) / 2);\n\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed: string): Uint8Array {\n    const seedArray = arrayify(seed);\n\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new FuelError(\n        ErrorCode.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n\n    return arrayify(computeHmac('sha512', MasterSecret, seedArray));\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed: string, testnet: boolean = false): string {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);\n    const depth = '0x00';\n    const fingerprint = '0x00000000';\n    const index = '0x00000000';\n    // last 32 bites from the key\n    const chainCode = masterKey.slice(32);\n    // first 32 bites from the key\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = concat([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      concat(['0x00', privateKey]),\n    ]);\n    const checksum = dataSlice(sha256(sha256(extendedKey)), 0, 4);\n\n    return encodeBase58(concat([extendedKey, checksum]));\n  }\n\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size: number = 32, extraEntropy: BytesLike = '') {\n    const entropy = extraEntropy\n      ? sha256(concat([randomBytes(size), arrayify(extraEntropy)]))\n      : randomBytes(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n}\n\nexport default Mnemonic;\n","import { computeHmac, ripemd160 } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { bn, toBytes, toHex } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, decodeBase58 } from '@fuel-ts/utils';\n\nimport { Mnemonic } from '../mnemonic';\nimport { Signer } from '../signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return encodeBase58(concat([data, dataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new FuelError(ErrorCode.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Both public and private Key cannot be missing. At least one should be provided.'\n        );\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Cannot derive a hardened index without a private Key.'\n        );\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(toBytes(index, 4), 33);\n\n    const bytes = arrayify(computeHmac('sha512', chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141';\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = arrayify(concat([prefix, depth, parentFingerprint, index, chainCode, key]));\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const decoded = hexlify(toBytes(decodeBase58(extendedKey)));\n    const bytes = arrayify(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key is not a valid extended key.');\n    }\n    if (!validChecksum) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key has an invalid checksum.');\n    }\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        'Inconsistency detected: Depth is zero but fingerprint/index is non-zero.'\n      );\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid public extended key.');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid private extended key.');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n","//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { HDWallet } from '../hdwallet';\nimport { Mnemonic } from '../mnemonic';\nimport type { Provider } from '../providers';\nimport { Signer } from '../signer';\n\nimport { BaseWalletUnlocked } from './base-wallet-unlocked';\nimport { decryptKeystoreWallet } from './keystore-wallet';\n\nexport interface GenerateOptions {\n  /** Additional entropy for the random bytes */\n  entropy?: BytesLike;\n  provider?: Provider;\n}\n\n/**\n * `WalletLocked` provides the functionalities for a locked  wallet.\n */\nexport class WalletLocked extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey: BytesLike): WalletUnlocked {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n}\n\n/**\n * `WalletUnlocked` provides the functionalities for an unlocked wallet.\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this._provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions?: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed: string, path?: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    path?: string,\n    passphrase?: BytesLike,\n    provider?: Provider\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(\n    jsonWallet: string,\n    password: string,\n    provider?: Provider\n  ): Promise<WalletUnlocked> {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n\n    return new WalletUnlocked(privateKey, provider);\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Provider } from '../providers';\n\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\n/**\n * `Wallet` provides methods to create locked and unlocked wallet instances.\n */\nexport class Wallet {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address: string | Address, provider?: Provider): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey: BytesLike, provider?: Provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n}\n","import { Address } from '@fuel-ts/address';\nimport type { Keystore } from '@fuel-ts/crypto';\nimport { encrypt, decrypt } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { EventEmitter } from 'events';\n\nimport type { WalletUnlocked } from '../wallet';\n\nimport { MemoryStorage } from './storages/memory-storage';\nimport type {\n  StorageAbstract,\n  WalletManagerAccount,\n  VaultConfig,\n  VaultsState,\n  WalletManagerOptions,\n  WalletManagerState,\n  Vault,\n} from './types';\nimport { MnemonicVault } from './vaults/mnemonic-vault';\nimport { PrivateKeyVault } from './vaults/privatekey-vault';\n\nconst ERROR_MESSAGES = {\n  invalid_vault_type: 'The provided Vault type is invalid.',\n  address_not_found: 'No private key found for address the specified wallet address.',\n  vault_not_found: 'The specified vault was not found.',\n  wallet_not_unlocked: 'The wallet is currently locked.',\n  passphrase_not_match: 'The provided passphrase did not match the expected value.',\n};\n\n/**\n * Generic assert function to avoid undesirable errors\n */\nfunction assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new FuelError(ErrorCode.WALLET_MANAGER_ERROR, message);\n  }\n}\n\n/**\n * WalletManager is a upper package to manage multiple vaults like mnemonic and privateKeys.\n *\n * - VaultTypes can be add to `WalletManager.Vaults` enabling to add custom Vault types.\n * - Storage can be instantiate when initializing enabling custom storage types.\n */\nexport class WalletManager extends EventEmitter {\n  /**\n   * Vaults\n   *\n   * Vaults are responsible to store secret keys and return an `Wallet` instance,\n   * to interact with the network.\n   *\n   * Each vault has access to its own state\n   *\n   */\n  static Vaults = [MnemonicVault, PrivateKeyVault];\n  /**\n   * Storage\n   *\n   * Persistent encrypted data. `The default storage works only on memory`.\n   */\n  readonly storage: StorageAbstract = new MemoryStorage();\n  /* Key name passed to the storage */\n  readonly STORAGE_KEY: string = 'WalletManager';\n\n  // `This variables are only accessible from inside the class`\n  #vaults: VaultsState = [];\n  #passphrase = '';\n  #isLocked: boolean = true;\n\n  constructor(options?: WalletManagerOptions) {\n    super();\n    this.storage = options?.storage || this.storage;\n  }\n\n  get isLocked(): boolean {\n    return this.#isLocked;\n  }\n\n  /**\n   * Return the vault serialized object containing all the privateKeys,\n   * the format of the return depends on the Vault type.\n   */\n  exportVault<T extends Vault>(vaultId: number): ReturnType<T['serialize']> {\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((_, idx) => idx === vaultId);\n    assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    return vaultState.vault.serialize() as ReturnType<T['serialize']>;\n  }\n\n  /**\n   * List all vaults on the Wallet Manager, this function not return secret's\n   */\n  getVaults(): Array<{ title?: string; type: string; vaultId: number }> {\n    return this.#vaults.map((v, idx) => ({\n      title: v.title,\n      type: v.type,\n      vaultId: idx,\n    }));\n  }\n\n  /**\n   * List all accounts on the Wallet Manager not vault information is revealed\n   */\n  getAccounts(): Array<WalletManagerAccount> {\n    // Return all WalletManagerAccounts from vaults\n    return this.#vaults.flatMap<WalletManagerAccount>((vaultState, vaultId) =>\n      vaultState.vault.getAccounts().map((account) => ({ ...account, vaultId }))\n    );\n  }\n\n  /**\n   * Create a Wallet instance for the specific account\n   */\n  getWallet(address: string | Address): WalletUnlocked {\n    const ownerAddress = Address.fromAddressOrString(address);\n    const vaultState = this.#vaults.find((vs) =>\n      vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n\n    return vaultState.vault.getWallet(ownerAddress);\n  }\n\n  /**\n   * Export specific account privateKey\n   */\n  exportPrivateKey(address: string | Address) {\n    const ownerAddress = Address.fromAddressOrString(address);\n    assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n    const vaultState = this.#vaults.find((vs) =>\n      vs.vault.getAccounts().find((a) => a.address.equals(ownerAddress))\n    );\n    assert(vaultState, ERROR_MESSAGES.address_not_found);\n\n    return vaultState.vault.exportAccount(ownerAddress);\n  }\n\n  /**\n   * Add account to a selected vault or on the first vault as default.\n   * If not vaults are adds it will return error\n   */\n  async addAccount(options?: { vaultId: number }) {\n    // Make sure before add new vault state is fully loaded\n    await this.loadState();\n    // Get vault instance\n    const vaultState = this.#vaults[options?.vaultId || 0];\n    await assert(vaultState, ERROR_MESSAGES.vault_not_found);\n    // Add account on vault\n    const account = vaultState.vault.addAccount();\n    // Save the accounts state\n    await this.saveState();\n    // Return account\n    return account;\n  }\n\n  /**\n   * Remove vault by index, by remove the vault you also remove all accounts\n   * created by the vault.\n   */\n  async removeVault(index: number) {\n    this.#vaults.splice(index, 1);\n    await this.saveState();\n  }\n\n  /**\n   * Add Vault, the `vaultConfig.type` will look for the Vaults supported if\n   * didn't found it will throw.\n   */\n  async addVault(vaultConfig: VaultConfig) {\n    // Make sure before add new vault state is fully loaded\n    await this.loadState();\n    // Check if vault is supported\n    const Vault = this.getVaultClass(vaultConfig.type);\n    // create Vault instance\n    const vault = new Vault(vaultConfig);\n    // Push vaults to state\n    this.#vaults = this.#vaults.concat({\n      title: vaultConfig.title,\n      type: vaultConfig.type,\n      vault,\n    });\n    // Persist data on storage\n    await this.saveState();\n  }\n\n  /**\n   * Lock wallet. It removes passphrase from class instance, encrypt and hide all address and\n   * secrets.\n   */\n  lock() {\n    this.#isLocked = true;\n    // Clean state vaults from state\n    this.#vaults = [];\n    // Clean password from state\n    this.#passphrase = '';\n    // Emit event that wallet is locked\n    this.emit('lock');\n  }\n\n  /**\n   * Unlock wallet. It sets passphrase on WalletManger instance load all address from configured vaults.\n   * Vaults with secrets are not unlocked or instantiated on this moment.\n   */\n  async unlock(passphrase: string) {\n    // Set password on state\n    this.#passphrase = passphrase;\n    // Set locked state to false\n    this.#isLocked = false;\n    // Try to load state with passphrase\n    try {\n      // Load state with passphrase\n      await this.loadState();\n      // Emit event that wallet is unlocked\n      this.emit('unlock');\n    } catch (err) {\n      // If passphrase is wrong lock wallet\n      await this.lock();\n      // Forward error\n      throw err;\n    }\n  }\n\n  /**\n   * Update WalletManager encryption passphrase\n   */\n  async updatePassphrase(oldpass: string, newpass: string) {\n    const isLocked = this.#isLocked;\n    // Unlock wallet to decrypt data\n    await this.unlock(oldpass);\n    // Set new password on state\n    this.#passphrase = newpass;\n    // Persist data on storage\n    await this.saveState();\n    // Load state with new password\n    await this.loadState();\n    // If wallet was locked, lock the wallet again\n    if (isLocked) {\n      await this.lock();\n    }\n  }\n\n  /**\n   * Retrieve and decrypt WalletManager state from storage\n   */\n  async loadState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n\n    const data = await this.storage.getItem(this.STORAGE_KEY);\n    if (data) {\n      const state = await decrypt<WalletManagerState>(this.#passphrase, <Keystore>JSON.parse(data));\n      this.#vaults = this.#deserializeVaults(state.vaults);\n    }\n  }\n\n  /**\n   * Store encrypted WalletManager state on storage\n   */\n  private async saveState() {\n    await assert(!this.#isLocked, ERROR_MESSAGES.wallet_not_unlocked);\n\n    const encryptedData = await encrypt(this.#passphrase, {\n      vaults: this.#serializeVaults(this.#vaults),\n    });\n    await this.storage.setItem(this.STORAGE_KEY, JSON.stringify(encryptedData));\n    this.emit('update');\n  }\n\n  /**\n   * Serialize all vaults to store\n   *\n   * `This is only accessible from inside the class`\n   */\n  #serializeVaults(vaults: VaultsState) {\n    return vaults.map(({ title, type, vault }) => ({\n      title,\n      type,\n      data: vault.serialize(),\n    }));\n  }\n\n  /**\n   * Deserialize all vaults to state\n   *\n   * `This is only accessible from inside the class`\n   */\n  #deserializeVaults(vaults: VaultsState) {\n    return vaults.map(({ title, type, data: vaultConfig }) => {\n      const VaultClass = this.getVaultClass(type);\n      return {\n        title,\n        type,\n        vault: new VaultClass(<VaultConfig>vaultConfig),\n      };\n    });\n  }\n\n  /**\n   * Return a instantiable Class reference from `WalletManager.Vaults` supported list.\n   */\n  private getVaultClass(type: string) {\n    const VaultClass = WalletManager.Vaults.find((v) => v.type === type);\n\n    assert(VaultClass, ERROR_MESSAGES.invalid_vault_type);\n\n    return VaultClass;\n  }\n}\n","import type { StorageAbstract } from '../types';\n\nexport class MemoryStorage implements StorageAbstract {\n  storage = new Map<string, unknown>();\n\n  async getItem<T>(key: string): Promise<T | null> {\n    const item = await this.storage.get(key);\n    return item as T | null;\n  }\n\n  async setItem(key: string, value: string) {\n    await this.storage.set(key, value);\n  }\n\n  async removeItem(key: string) {\n    await this.storage.delete(key);\n  }\n\n  async clear() {\n    await this.storage.clear();\n  }\n}\n","import { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { Mnemonic } from '../../mnemonic';\nimport type { WalletUnlocked } from '../../wallet';\nimport { Wallet } from '../../wallet';\nimport type { Vault } from '../types';\n\nexport interface MnemonicVaultOptions {\n  secret?: string;\n  rootPath?: string;\n  numberOfAccounts?: number | null;\n}\n\nexport class MnemonicVault implements Vault<MnemonicVaultOptions> {\n  static readonly type = 'mnemonic';\n  readonly #secret: string;\n\n  pathKey = '{}';\n  rootPath: string = `m/44'/1179993420'/${this.pathKey}'/0/0`;\n  numberOfAccounts: number = 0;\n\n  constructor(options: MnemonicVaultOptions) {\n    this.#secret = options.secret || Mnemonic.generate();\n    this.rootPath = options.rootPath || this.rootPath;\n    // On creating the vault also adds one account\n    this.numberOfAccounts = options.numberOfAccounts || 1;\n  }\n\n  getDerivePath(index: number) {\n    if (this.rootPath.includes(this.pathKey)) {\n      return this.rootPath.replace(this.pathKey, String(index));\n    }\n    return `${this.rootPath}/${index}`;\n  }\n\n  serialize(): MnemonicVaultOptions {\n    return {\n      secret: this.#secret,\n      rootPath: this.rootPath,\n      numberOfAccounts: this.numberOfAccounts,\n    };\n  }\n\n  getAccounts() {\n    const accounts = [];\n    let numberOfAccounts = 0;\n\n    // Create all accounts to current vault\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      accounts.push({\n        publicKey: wallet.publicKey,\n        address: wallet.address,\n      });\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n\n    return accounts;\n  }\n\n  addAccount() {\n    this.numberOfAccounts += 1;\n    const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(this.numberOfAccounts - 1));\n\n    return {\n      publicKey: wallet.publicKey,\n      address: wallet.address,\n    };\n  }\n\n  exportAccount(address: string | Address): string {\n    let numberOfAccounts = 0;\n    const ownerAddress = Address.fromAddressOrString(address);\n    // Look for the account that has the same address\n    do {\n      const wallet = Wallet.fromMnemonic(this.#secret, this.getDerivePath(numberOfAccounts));\n      if (wallet.address.equals(ownerAddress)) {\n        return wallet.privateKey;\n      }\n      numberOfAccounts += 1;\n    } while (numberOfAccounts < this.numberOfAccounts);\n\n    throw new FuelError(\n      ErrorCode.WALLET_MANAGER_ERROR,\n      `Account with address '${address}' not found in derived wallets.`\n    );\n  }\n\n  getWallet(address: string | Address): WalletUnlocked {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n}\n","import { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { WalletUnlocked } from '../../wallet';\nimport { Wallet } from '../../wallet';\nimport type { WalletManagerAccount, Vault } from '../types';\n\nexport interface PkVaultOptions {\n  secret?: string;\n  accounts?: Array<string>;\n}\n\nexport class PrivateKeyVault implements Vault<PkVaultOptions> {\n  static readonly type = 'privateKey';\n\n  #privateKeys: Array<string> = [];\n\n  /**\n   * If privateKey vault is initialized with a secretKey, it creates\n   * one account with the fallowing secret\n   */\n  constructor(options: PkVaultOptions = {}) {\n    if (options.secret) {\n      this.#privateKeys = [options.secret];\n    } else {\n      this.#privateKeys = options.accounts || [Wallet.generate().privateKey];\n    }\n  }\n\n  serialize(): PkVaultOptions {\n    return {\n      accounts: this.#privateKeys,\n    };\n  }\n\n  getPublicAccount(privateKey: string) {\n    const wallet = Wallet.fromPrivateKey(privateKey);\n    return {\n      address: wallet.address,\n      publicKey: wallet.publicKey,\n    };\n  }\n\n  getAccounts(): WalletManagerAccount[] {\n    return this.#privateKeys.map((pk) => this.getPublicAccount(pk));\n  }\n\n  addAccount() {\n    const wallet = Wallet.generate();\n\n    this.#privateKeys.push(wallet.privateKey);\n\n    return this.getPublicAccount(wallet.privateKey);\n  }\n\n  exportAccount(address: string | Address): string {\n    const ownerAddress = Address.fromAddressOrString(address);\n    const privateKey = this.#privateKeys.find((pk) =>\n      Wallet.fromPrivateKey(pk).address.equals(ownerAddress)\n    );\n\n    if (!privateKey) {\n      throw new FuelError(\n        ErrorCode.WALLET_MANAGER_ERROR,\n        `No private key found for address '${address}'.`\n      );\n    }\n\n    return privateKey;\n  }\n\n  getWallet(address: string | Address): WalletUnlocked {\n    const privateKey = this.exportAccount(address);\n    return Wallet.fromPrivateKey(privateKey);\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport type { WalletUnlocked } from '../wallet';\n\nexport type WalletManagerAccount = {\n  address: Address;\n  publicKey: string;\n  vaultId?: number;\n};\n\nexport type WalletManagerOptions = {\n  storage: StorageAbstract;\n};\n\nexport type VaultConfig = {\n  type: string;\n  title?: string;\n  secret?: string;\n};\n\nexport type VaultsState = Array<{\n  type: string;\n  title?: string;\n  data?: VaultConfig;\n  vault: Vault;\n}>;\n\nexport interface WalletManagerState {\n  vaults: VaultsState;\n}\n\nexport abstract class Vault<TOptions = { secret?: string }> {\n  static readonly type: string;\n\n  constructor(_options: TOptions) {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  serialize(): TOptions {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  getAccounts(): WalletManagerAccount[] {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  addAccount(): WalletManagerAccount {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  exportAccount(_address: Address): string {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n\n  getWallet(_address: Address): WalletUnlocked {\n    throw new FuelError(ErrorCode.NOT_IMPLEMENTED, 'Not implemented.');\n  }\n}\n\nexport abstract class StorageAbstract {\n  abstract setItem(key: string, value: string): Promise<void>;\n  abstract getItem(key: string): Promise<string | null | undefined>;\n  abstract removeItem(key: string): Promise<void>;\n  abstract clear(): Promise<void>;\n}\n","import { concat } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\nconst BLOB_ID_SIZE = 32;\nconst REG_ADDRESS_OF_DATA_AFTER_CODE = 0x10;\nconst REG_START_OF_LOADED_CODE = 0x11;\nconst REG_GENERAL_USE = 0x12;\nconst WORD_SIZE = 8; // size in bytes\n\nexport function getDataOffset(binary: Uint8Array): number {\n  // Extract 8 bytes starting from index 8 (similar to binary[8..16] in Rust)\n  const OFFSET_INDEX = 8;\n  const dataView = new DataView(binary.buffer, OFFSET_INDEX, 8);\n\n  // Read the value as a 64-bit big-endian unsigned integer\n  const dataOffset = dataView.getBigUint64(0, false); // false means big-endian\n\n  // Convert the BigInt to a regular number (safe as long as the offset is within Number.MAX_SAFE_INTEGER)\n  return Number(dataOffset);\n}\n\nexport function getPredicateScriptLoaderInstructions(\n  originalBinary: Uint8Array,\n  blobId: Uint8Array\n) {\n  // The final code is going to have this structure:\n  // 1. loader instructions\n  // 2. blob id\n  // 3. length_of_data_section\n  // 4. the data_section (updated with configurables as needed)\n\n  const { RegId, Instruction } = asm;\n\n  const REG_PC = RegId.pc().to_u8();\n  const REG_SP = RegId.sp().to_u8();\n  const REG_IS = RegId.is().to_u8();\n\n  const getInstructions = (numOfInstructions: number) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Move on to the data section length\n    asm.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, BLOB_ID_SIZE),\n    // load the size of the data section into REG_GENERAL_USE\n    asm.lw(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE, 0),\n    // after we have read the length of the data section, we move the pointer to the actual\n    // data by skipping WORD_SIZE bytes.\n    asm.addi(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_ADDRESS_OF_DATA_AFTER_CODE, WORD_SIZE),\n    // load the data section of the executable\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 2),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm.jmp(REG_START_OF_LOADED_CODE),\n  ];\n\n  const getInstructionsNoDataSection = (numOfInstructions: number) => [\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    // 1. Load the blob content into memory\n    // Find the start of the hardcoded blob ID, which is located after the loader code ends.\n    asm.move_(REG_ADDRESS_OF_DATA_AFTER_CODE, REG_PC),\n    // hold the address of the blob ID.\n    asm.addi(\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      REG_ADDRESS_OF_DATA_AFTER_CODE,\n      numOfInstructions * Instruction.size()\n    ),\n    // The code is going to be loaded from the current value of SP onwards, save\n    // the location into REG_START_OF_LOADED_CODE so we can jump into it at the end.\n    asm.move_(REG_START_OF_LOADED_CODE, REG_SP),\n    // REG_GENERAL_USE to hold the size of the blob.\n    asm.bsiz(REG_GENERAL_USE, REG_ADDRESS_OF_DATA_AFTER_CODE),\n    // Push the blob contents onto the stack.\n    asm.ldc(REG_ADDRESS_OF_DATA_AFTER_CODE, 0, REG_GENERAL_USE, 1),\n    // Jump into the memory where the contract is loaded.\n    // What follows is called _jmp_mem by the sway compiler.\n    // Subtract the address contained in IS because jmp will add it back.\n    asm.sub(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, REG_IS),\n    // jmp will multiply by 4, so we need to divide to cancel that out.\n    asm.divi(REG_START_OF_LOADED_CODE, REG_START_OF_LOADED_CODE, 4),\n    // Jump to the start of the contract we loaded.\n    asm.jmp(REG_START_OF_LOADED_CODE),\n  ];\n\n  const offset = getDataOffset(originalBinary);\n\n  // if the binary length is smaller than the offset\n  if (originalBinary.length < offset) {\n    throw new Error(\n      `Data section offset is out of bounds, offset: ${offset}, binary length: ${originalBinary.length}`\n    );\n  }\n\n  // Extract the data section from the binary (slice from the offset onwards)\n  const dataSection = originalBinary.slice(offset);\n\n  // Check if the data section is non-empty\n  if (dataSection.length > 0) {\n    // Get the number of instructions (assuming it won't exceed u16::MAX)\n    const numOfInstructions = getInstructions(0).length;\n    if (numOfInstructions > 65535) {\n      throw new Error('Too many instructions, exceeding u16::MAX.');\n    }\n\n    // Convert instructions to bytes\n    const instructionBytes = new Uint8Array(\n      getInstructions(numOfInstructions).flatMap((instruction) =>\n        Array.from(instruction.to_bytes())\n      )\n    );\n\n    // Convert blobId to bytes\n    const blobBytes = new Uint8Array(blobId);\n\n    // Convert data section length to big-endian 8-byte array\n    const dataSectionLenBytes = new Uint8Array(8);\n    const dataView = new DataView(dataSectionLenBytes.buffer);\n    dataView.setBigUint64(0, BigInt(dataSection.length), false); // false for big-endian\n\n    // Combine the instruction bytes, blob bytes, data section length, and the data section\n    const loaderBytecode = new Uint8Array([\n      ...instructionBytes,\n      ...blobBytes,\n      ...dataSectionLenBytes,\n    ]);\n\n    return {\n      loaderBytecode: concat([loaderBytecode, dataSection]),\n      blobOffset: loaderBytecode.length,\n    };\n  }\n  // Handle case where there is no data section\n  const numOfInstructions = getInstructionsNoDataSection(0).length;\n  if (numOfInstructions > 65535) {\n    throw new Error('Too many instructions, exceeding u16::MAX.');\n  }\n\n  // Convert instructions to bytes\n  const instructionBytes = new Uint8Array(\n    getInstructionsNoDataSection(numOfInstructions).flatMap((instruction) =>\n      Array.from(instruction.to_bytes())\n    )\n  );\n\n  // Convert blobId to bytes\n  const blobBytes = new Uint8Array(blobId);\n\n  // Combine the instruction bytes and blob bytes\n  const loaderBytecode = new Uint8Array([...instructionBytes, ...blobBytes]);\n\n  return { loaderBytecode };\n}\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { hash } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { Account } from '../account';\nimport { BlobTransactionRequest, calculateGasFee, TransactionStatus } from '../providers';\n\nimport {\n  getDataOffset,\n  getPredicateScriptLoaderInstructions,\n} from './predicate-script-loader-instructions';\n\nasync function fundBlobTx(deployer: Account, blobTxRequest: BlobTransactionRequest) {\n  // Check the account can afford to deploy all chunks and loader\n  let totalCost = bn(0);\n  const chainInfo = await deployer.provider.getChain();\n  const gasPrice = await deployer.provider.estimateGasPrice(10);\n  const priceFactor = chainInfo.consensusParameters.feeParameters.gasPriceFactor;\n\n  const minGas = blobTxRequest.calculateMinGas(chainInfo);\n\n  const minFee = calculateGasFee({\n    gasPrice,\n    gas: minGas,\n    priceFactor,\n    tip: blobTxRequest.tip,\n  }).add(1);\n\n  totalCost = totalCost.add(minFee);\n\n  if (totalCost.gt(await deployer.getBalance())) {\n    throw new FuelError(ErrorCode.FUNDS_TOO_LOW, 'Insufficient balance to deploy predicate.');\n  }\n\n  const txCost = await deployer.getTransactionCost(blobTxRequest);\n  // eslint-disable-next-line no-param-reassign\n  blobTxRequest.maxFee = txCost.maxFee;\n  return deployer.fund(blobTxRequest, txCost);\n}\n\nfunction adjustConfigurableOffsets(jsonAbi: JsonAbi, configurableOffsetDiff: number) {\n  const { configurables: readOnlyConfigurables } = jsonAbi;\n  const configurables: JsonAbi['configurables'] = [];\n  readOnlyConfigurables.forEach((config) => {\n    // @ts-expect-error shut up the read-only thing\n    configurables.push({ ...config, offset: config.offset - configurableOffsetDiff });\n  });\n  return { ...jsonAbi, configurables } as JsonAbi;\n}\n\ninterface Deployer<T> {\n  deployer: Account;\n  bytecode: Uint8Array;\n  abi: JsonAbi;\n  loaderInstanceCallback: (loaderBytecode: Uint8Array, newAbi: JsonAbi) => T;\n}\n\nexport async function deployScriptOrPredicate<T>({\n  deployer,\n  bytecode,\n  abi,\n  loaderInstanceCallback,\n}: Deployer<T>) {\n  const dataSectionOffset = getDataOffset(arrayify(bytecode));\n  const byteCodeWithoutDataSection = bytecode.slice(0, dataSectionOffset);\n\n  // Generate the associated create tx for the loader contract\n  const blobId = hash(byteCodeWithoutDataSection);\n\n  const blobTxRequest = new BlobTransactionRequest({\n    blobId,\n    witnessIndex: 0,\n    witnesses: [byteCodeWithoutDataSection],\n  });\n\n  const { loaderBytecode, blobOffset } = getPredicateScriptLoaderInstructions(\n    arrayify(bytecode),\n    arrayify(blobId)\n  );\n\n  const configurableOffsetDiff = byteCodeWithoutDataSection.length - (blobOffset || 0);\n  const newAbi = adjustConfigurableOffsets(abi, configurableOffsetDiff);\n\n  const blobExists = (await deployer.provider.getBlobs([blobId])).length > 0;\n\n  const loaderInstance = loaderInstanceCallback(loaderBytecode, newAbi);\n  if (blobExists) {\n    return {\n      waitForResult: () => Promise.resolve(loaderInstance),\n      blobId,\n    };\n  }\n\n  const fundedBlobRequest = await fundBlobTx(deployer, blobTxRequest);\n\n  // Transaction id is unset until we have funded the create tx, which is dependent on the blob tx\n  const waitForResult = async () => {\n    try {\n      const blobTx = await deployer.sendTransaction(fundedBlobRequest);\n      const result = await blobTx.waitForResult();\n\n      if (result.status !== TransactionStatus.success) {\n        throw new Error();\n      }\n    } catch (err: unknown) {\n      throw new FuelError(ErrorCode.TRANSACTION_FAILED, 'Failed to deploy predicate chunk');\n    }\n\n    return loaderInstance;\n  };\n\n  return {\n    waitForResult,\n    blobId,\n  };\n}\n","// A set of useful helper methods for testing binary Merkle trees.\nimport { hash } from '@fuel-ts/hasher';\n\nimport { EMPTY } from '../common';\n\nimport Node from './types/node';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n */\nexport function hashLeaf(data: string): string {\n  return hash('0x00'.concat(data.slice(2)));\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * hash(prefix +  left + right)\n */\nexport function hashNode(left: string, right: string): string {\n  return hash('0x01'.concat(left.slice(2)).concat(right.slice(2)));\n}\n\n/**\n * Construct tree\n */\nexport function constructTree(data: string[]): Node[] {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new Node(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n\n    if (size === 1) {\n      break;\n    }\n\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\n\n/**\n * Compute the merkle root\n */\nexport function calcRoot(data: string[]): string {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new Node(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\n\n/**\n * Get proof for the leaf\n */\nexport function getProof(nodes: Node[], id: number): string[] {\n  const proof: string[] = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\n\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const MAX_HEIGHT = 256;\n","class Node {\n  left: number;\n  right: number;\n  parent: number;\n  hash: string;\n  data: string;\n  index: number;\n\n  constructor(\n    left: number,\n    right: number,\n    parent: number,\n    hash: string,\n    data: string,\n    index: number = 0\n  ) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash;\n    this.data = data;\n    this.index = index;\n  }\n}\n\nexport default Node;\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\nimport { hash } from '@fuel-ts/hasher';\n\nimport { compactProof } from './proofs';\nimport { isLeaf, hashLeaf, hashNode, parseLeaf, parseNode } from './treeHasher';\nimport type SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport type { MapStore } from './utils';\nimport { ZERO, MAX_HEIGHT, getBitAtFromMSB, reverseSideNodes, countCommonPrefix } from './utils';\n\nexport class SparseMerkleTree {\n  ms: MapStore;\n\n  root: string;\n\n  constructor() {\n    const ms: MapStore = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n\n  get(key: string): string {\n    return this.ms[key];\n  }\n\n  set(key: string, value: string): void {\n    this.ms[key] = value;\n  }\n\n  setRoot(root: string): void {\n    this.root = root;\n  }\n\n  sideNodesForRoot(key: string, root: string): [string[], string, string, string] {\n    const sideNodes: string[] = [];\n\n    // If the root is a placeholder, there are no sidenodes to return.\n    // The data is nil, and the sibling is nil\n    if (root === ZERO) {\n      return [sideNodes, ZERO, '', ''];\n    }\n\n    let currentData = this.get(root);\n\n    // If the root is a leaf, there are also no sidenodes to return.\n    // The data is the leaf data, and the sibling is nil\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, ''];\n    }\n\n    let leftNode;\n    let rightNode;\n    let nodeHash = '';\n    let sideNode = '';\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n\n      sideNodes.push(sideNode);\n\n      // If the node is a placeholder, we've reached the end.\n      if (nodeHash === ZERO) {\n        currentData = '';\n        break;\n      }\n\n      currentData = this.get(nodeHash);\n\n      // If the node is a leaf, we've reached the end.\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n\n    const siblingData = this.get(sideNode);\n\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n\n  deleteWithSideNodes(\n    key: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    // If value already zero, deletion changes nothing. Just return current root\n\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n\n    // If key is already empty (different key found in its place), deletion changed nothing. Just return current root\n    const [actualPath] = parseLeaf(oldLeafData);\n\n    if (actualPath !== key) {\n      return this.root;\n    }\n\n    let currentHash = '';\n    let currentData = '';\n    let sideNode = '';\n    let sideNodeValue = '';\n    let nonPlaceholderReached = false;\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === '') {\n        continue;\n      }\n\n      sideNode = sideNodes[i];\n\n      if (currentData === '') {\n        sideNodeValue = this.get(sideNode);\n\n        if (isLeaf(sideNodeValue)) {\n          // This is the leaf sibling that needs to be percolated up the tree.\n          currentHash = sideNode;\n          currentData = sideNode;\n          continue;\n        } else {\n          // This is the node sibling that needs to be left in its place.\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        // We found another placeholder sibling node, keep going up the\n        // tree until we find the first sibling that is not a placeholder.\n        continue;\n      } else if (!nonPlaceholderReached) {\n        // We found the first sibling node that is not a placeholder, it is\n        // time to insert our leaf sibling node here.\n        nonPlaceholderReached = true;\n      }\n\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    // The tree is empty; return placeholder value as root.\n    // How can currentHash be '' / nil if it's a hash ?\n    if (currentHash === '') {\n      currentHash = ZERO;\n    }\n\n    return currentHash;\n  }\n\n  updateWithSideNodes(\n    key: string,\n    value: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    let currentHash;\n    let currentData;\n\n    this.set(hash(value), value);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    this.set(currentHash, currentData);\n\n    currentData = currentHash;\n\n    // If the leaf node that sibling nodes lead to has a different actual path\n    // than the leaf node being updated, we need to create an intermediate node\n    // with this leaf node and the new leaf node as children.\n    //\n    // First, get the number of bits that the paths of the two leaf nodes share\n    // in common as a prefix.\n\n    let commonPrefixCount;\n\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n\n      // If there are no sidenodes at this height, but the number of\n      // bits that the paths of the two leaf nodes share in common is\n      // greater than this height, then we need to build up the tree\n      // to this height with placeholder values at siblings.\n\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === '') {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    return currentHash;\n  }\n\n  update(key: string, value: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  delete(key: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n    const newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    this.setRoot(newRoot);\n  }\n\n  prove(key: string): SparseMerkleProof {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n\n    const nonEmptySideNodes: string[] = [];\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== '') {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n\n    // Deal with non-membership proofs. If the leaf hash is the placeholder\n    // value, we do not need to add anything else to the proof.\n    let nonMembershipLeafData = '';\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        // This is a non-membership proof that involves showing a different leaf.\n        // Add the leaf data to the proof.\n        nonMembershipLeafData = leafData;\n      }\n    }\n\n    const proof = new SparseMerkleProof(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n\n  proveCompacted(key: string): SparseCompactMerkleProof {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n}\n","import { hash } from '@fuel-ts/hasher';\n\nimport { hashLeaf, hashNode, parseLeaf } from './treeHasher';\nimport SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport { getBitAtFromMSB, ZERO } from './utils';\n\n/**\n * Verify a merkle proof\n */\nexport function verifyProof(\n  proof: SparseMerkleProof,\n  root: string,\n  key: string,\n  value: string\n): [boolean, string[][]] {\n  const updates: string[][] = [[]];\n\n  // Detemine what the leaf hash should be\n  let currentHash;\n  let currentData;\n  let actualPath;\n  let valueHash;\n\n  if (value === ZERO) {\n    // Non-membership proof\n    if (proof.NonMembershipLeafData === '') {\n      currentHash = ZERO;\n    } else {\n      // leaf is an unrelated leaf\n      [actualPath, valueHash] = parseLeaf(proof.NonMembershipLeafData);\n      if (actualPath === key) {\n        // Leaf does exist : non-membership proof failed\n        return [false, []];\n      }\n      [currentHash, currentData] = hashLeaf(actualPath, valueHash);\n      updates.push([currentHash, currentData]);\n    }\n  } else {\n    // Membership proof\n    valueHash = hash(value);\n    updates.push([valueHash, value]);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    updates.push([currentHash, currentData]);\n  }\n\n  // Recompute root\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    const node = proof.SideNodes[i];\n\n    if (getBitAtFromMSB(key, proof.SideNodes.length - 1 - i) === 1) {\n      [currentHash, currentData] = hashNode(node, currentHash);\n    } else {\n      [currentHash, currentData] = hashNode(currentHash, node);\n    }\n\n    updates.push([currentHash, currentData]);\n  }\n\n  return [currentHash === root, updates];\n}\n\n/**\n * Compact a Sparse Merkle Proof using a bitmask\n */\nexport function compactProof(proof: SparseMerkleProof): SparseCompactMerkleProof {\n  const bitMask: number[] = [];\n  const compactedSideNodes: string[] = [];\n  let node;\n\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new SparseCompactMerkleProof(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n/**\n * Decompact a Sparse Merkle Proof\n */\nexport function decompactProof(proof: SparseCompactMerkleProof): SparseMerkleProof {\n  const decompactedSideNodes: string[] = [];\n  let position = 0;\n\n  for (let i = 0; i < proof.NumSideNodes; i += 1) {\n    if (proof.BitMask[i] === 0) {\n      decompactedSideNodes[i] = ZERO;\n    } else {\n      decompactedSideNodes[i] = proof.SideNodes[position];\n      position += 1;\n    }\n  }\n  const decompactedProof = new SparseMerkleProof(\n    decompactedSideNodes,\n    proof.NonMembershipLeafData,\n    proof.SiblingData\n  );\n\n  return decompactedProof;\n}\n","import { hash } from '@fuel-ts/hasher';\n\nexport const leafPrefix = '0x00';\nexport const nodePrefix = '0x01';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encode\n * prefix + key + hash(data)\n */\nexport function hashLeaf(key: string, data: string): [string, string] {\n  const value = '0x00'.concat(key.slice(2)).concat(hash(data).slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * prefix + key + hash(data)\n */\nexport function hashNode(left: string, right: string): [string, string] {\n  const value = '0x01'.concat(left.slice(2)).concat(right.slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Parse a leaf\n */\nexport function parseLeaf(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Parse a nodes\n */\nexport function parseNode(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Check if data is a leaf by checking prefix\n */\nexport function isLeaf(data: string): boolean {\n  return data.slice(0, 4) === leafPrefix;\n}\n","class SparseCompactMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  BitMask: number[];\n  NumSideNodes: number;\n  SiblingData: string;\n\n  constructor(\n    SideNodes: string[],\n    NonMembershipLeafData: string,\n    Bitmask: number[],\n    NumSideNodes: number,\n    SiblingData: string\n  ) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseCompactMerkleProof;\n","// Sparse Merkle proof\nclass SparseMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  SiblingData: string;\n\n  constructor(sideNodes: string[], NonMembershipLeafData: string, SiblingData: string) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseMerkleProof;\n","export const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const MAX_HEIGHT = 256;\n\nexport interface MapStore {\n  [key: string]: string;\n}\n\n/**\n * Gets the bit at an offset from the most significant bit\n */\nexport function getBitAtFromMSB(data: string, position: number): number {\n  // if int(data[position / 8]) & (1 << (8 - 1 - uint(position) % 8)) > 0\n\n  // Slice off '0x'\n  const slicedData = data.slice(2);\n  // Get byte that contains the specified position\n  const byte = '0x'.concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  // Get bits from specified position within that byte\n  const bits = Number(byte) & (1 << (8 - 1 - (position % 8)));\n\n  // Bit at position = 0 IFF bits > 0.\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Reverse the nodes position\n */\nexport function reverseSideNodes(sideNodes: string[]): string[] {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes: string[] = sideNodes;\n\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left],\n    ];\n    left += 1;\n    right -= 1;\n  }\n\n  return reversedSideNodes;\n}\n\n/**\n * Counts the common bit at at an offset from the most significant bit\n * between two inputs\n */\nexport function countCommonPrefix(data1: string, data2: string): number {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n","import { hash } from '@fuel-ts/hasher';\nimport { calcRoot } from '@fuel-ts/merkle';\nimport { chunkAndPadBytes, hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\n\n/**\n * @hidden\n *\n * Calculates the predicate root for a given bytecode and chain ID.\n *\n * @param bytecode - The bytecode represented as a BytesLike object.\n * @param chainId - The ID of the chain associated with the bytecode.\n * @returns The predicate root as a string.\n */\nexport const getPredicateRoot = (bytecode: BytesLike): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  const codeRoot = calcRoot(chunks.map((c) => hexlify(c)));\n\n  const predicateRoot = hash(concat(['0x4655454C', codeRoot]));\n  return predicateRoot;\n};\n","import type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nimport type { FakeResources } from '../account';\nimport { Account } from '../account';\nimport {\n  transactionRequestify,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n  isRequestInputCoinOrMessage,\n} from '../providers';\nimport type {\n  CallResult,\n  CoinQuantityLike,\n  ExcludeResourcesOption,\n  Provider,\n  Resource,\n  TransactionRequest,\n  TransactionRequestLike,\n  TransactionResponse,\n} from '../providers';\nimport { deployScriptOrPredicate } from '../utils/deployScriptOrPredicate';\n\nimport { getPredicateRoot } from './utils';\n\nexport type PredicateParams<\n  TData extends InputValue[] = InputValue[],\n  TConfigurables extends { [name: string]: unknown } | undefined = { [name: string]: unknown },\n> = {\n  bytecode: BytesLike;\n  provider: Provider;\n  abi: JsonAbi;\n  data?: TData;\n  configurableConstants?: TConfigurables;\n};\n\n/**\n * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.\n */\nexport class Predicate<\n  TData extends InputValue[] = InputValue[],\n  TConfigurables extends { [name: string]: unknown } | undefined = { [name: string]: unknown },\n> extends Account {\n  bytes: Uint8Array;\n  predicateData: TData = [] as unknown as TData;\n  interface: Interface;\n  initialBytecode: Uint8Array;\n  configurableConstants: TConfigurables | undefined;\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytecode - The bytecode of the predicate.\n   * @param abi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param data - The predicate input data (optional).\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor({\n    bytecode,\n    abi,\n    provider,\n    data,\n    configurableConstants,\n  }: PredicateParams<TData, TConfigurables>) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytecode,\n      abi,\n      configurableConstants\n    );\n    const address = Address.fromB256(getPredicateRoot(predicateBytes));\n    super(address, provider);\n\n    this.initialBytecode = arrayify(bytecode);\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n    this.configurableConstants = configurableConstants;\n    if (data !== undefined && data.length > 0) {\n      this.predicateData = data;\n    }\n  }\n\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const request = transactionRequestify(transactionRequestLike) as T;\n\n    const placeholderIndex = this.getIndexFromPlaceholderWitness(request);\n\n    if (placeholderIndex !== -1) {\n      request.removeWitness(placeholderIndex);\n    }\n\n    request.inputs.filter(isRequestInputCoinOrMessage).forEach((input) => {\n      if (isRequestInputResourceFromOwner(input, this.address)) {\n        // eslint-disable-next-line no-param-reassign\n        input.predicate = hexlify(this.bytes);\n        // eslint-disable-next-line no-param-reassign\n        input.predicateData = hexlify(this.getPredicateData());\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex = 0;\n      }\n    });\n\n    return request;\n  }\n\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  override sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n\n    return super.sendTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  override simulateTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  private getPredicateData(): Uint8Array {\n    if (!this.predicateData.length) {\n      return new Uint8Array();\n    }\n\n    const mainFn = this.interface?.functions.main;\n    return mainFn?.encodeArguments(this.predicateData) || new Uint8Array();\n  }\n\n  /**\n   * Creates a new Predicate instance from an existing Predicate instance.\n   * @param overrides - The data and configurable constants to override.\n   * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.\n   */\n  toNewInstance(\n    overrides: Pick<PredicateParams<TData, TConfigurables>, 'data' | 'configurableConstants'> = {}\n  ) {\n    return new Predicate<TData, TConfigurables>({\n      bytecode: this.initialBytecode,\n      abi: this.interface.jsonAbi,\n      provider: this.provider,\n      data: overrides.data ?? this.predicateData,\n      configurableConstants: overrides.configurableConstants ?? this.configurableConstants,\n    });\n  }\n\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  private static processPredicateData(\n    bytes: BytesLike,\n    jsonAbi: JsonAbi,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    let predicateBytes = arrayify(bytes);\n    const abiInterface: Interface = new Interface(jsonAbi);\n\n    if (abiInterface.functions.main === undefined) {\n      throw new FuelError(\n        ErrorCode.ABI_MAIN_METHOD_MISSING,\n        'Cannot use ABI without \"main\" function.'\n      );\n    }\n\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface,\n    };\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param excludedIds - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  override async getResourcesToSpend(\n    quantities: CoinQuantityLike[] /** IDs of coins to exclude */,\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    const resources = await this.provider.getResourcesToSpend(\n      this.address,\n      quantities,\n      excludedIds\n    );\n    return resources.map((resource) => ({\n      ...resource,\n      predicate: hexlify(this.bytes),\n      predicateData: hexlify(this.getPredicateData()),\n    }));\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  override generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return super.generateFakeResources(coins).map((coin) => ({\n      ...coin,\n      predicate: hexlify(this.bytes),\n      predicateData: hexlify(this.getPredicateData()),\n    }));\n  }\n\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  private static setConfigurableConstants(\n    bytes: Uint8Array,\n    configurableConstants: { [name: string]: unknown },\n    abiInterface: Interface\n  ) {\n    const mutatedBytes = bytes;\n\n    try {\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new FuelError(\n          ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n          'Predicate has no configurable constants to be set'\n        );\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new FuelError(\n            ErrorCode.CONFIGURABLE_NOT_FOUND,\n            `No configurable constant named '${key}' found in the Predicate`\n          );\n        }\n\n        const { offset } = abiInterface.configurables[key];\n\n        const encoded = abiInterface.encodeConfigurable(key, value as InputValue);\n\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new FuelError(\n        ErrorCode.INVALID_CONFIGURABLE_CONSTANTS,\n        `Error setting configurable constants: ${(<Error>err).message}.`\n      );\n    }\n\n    return mutatedBytes;\n  }\n\n  /**\n   * Returns the index of the witness placeholder that was added to this predicate.\n   * If no witness placeholder was added, it returns -1.\n   * @param request - The transaction request.\n   * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.\n   */\n  private getIndexFromPlaceholderWitness(request: TransactionRequest): number {\n    const predicateInputs = request.inputs\n      .filter(isRequestInputResource)\n      .filter((input) => isRequestInputResourceFromOwner(input, this.address));\n\n    let index = -1;\n\n    const hasEmptyPredicateInputs = predicateInputs.find((input) => !input.predicate);\n\n    if (hasEmptyPredicateInputs) {\n      index = hasEmptyPredicateInputs.witnessIndex;\n\n      const allInputsAreEmpty = predicateInputs.every((input) => !input.predicate);\n\n      if (!allInputsAreEmpty) {\n        /**\n         * If at least one resource was added as a predicate resource, we need to check if it was the\n         * first one. If that is the case, we don't need to remove the witness placeholder\n         * as this was added with the \"witnessIndex\" as 0 and without a placeholder witness. Later if\n         * any resource without a predicate is added, it will have the same witnessIndex because it has the\n         * same owner.\n         */\n        const wasFilledInputAddedFirst = !!predicateInputs[0]?.predicate;\n\n        if (wasFilledInputAddedFirst) {\n          index = -1;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  /**\n   *\n   * @param account - The account used to pay the deployment costs.\n   * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate\n   * once the blob deployment transaction finishes.\n   *\n   * The returned loader predicate will have the same configurable constants\n   * as the original predicate which was used to generate the loader predicate.\n   */\n  async deploy<T = this>(account: Account) {\n    return deployScriptOrPredicate<T>({\n      deployer: account,\n      abi: this.interface.jsonAbi,\n      bytecode: this.bytes,\n      loaderInstanceCallback: (loaderBytecode, newAbi) =>\n        new Predicate({\n          bytecode: loaderBytecode,\n          abi: newAbi,\n          provider: this.provider,\n          data: this.predicateData,\n        }) as T,\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/require-await */\nimport { FuelError } from '@fuel-ts/errors';\nimport { EventEmitter } from 'events';\n\nimport type { TransactionRequestLike } from '../providers';\nimport type { Asset } from '../providers/assets/types';\n\nimport { FuelConnectorEventTypes } from './types';\nimport type {\n  FuelConnectorEvents,\n  ConnectorMetadata,\n  FuelABI,\n  Network,\n  FuelEventArg,\n  Version,\n  SelectNetworkArguments,\n  FuelConnectorSendTxParams,\n} from './types';\n\ninterface Connector {\n  // #region fuel-connector-method-ping\n  ping(): Promise<boolean>;\n  // #endregion fuel-connector-method-ping\n  // #region fuel-connector-method-version\n  version(): Promise<Version>;\n  // #endregion fuel-connector-method-version\n  // #region fuel-connector-method-isConnected\n  isConnected(): Promise<boolean>;\n  // #endregion fuel-connector-method-isConnected\n  // #region fuel-connector-method-accounts\n  accounts(): Promise<Array<string>>;\n  // #endregion fuel-connector-method-accounts\n  // #region fuel-connector-method-connect\n  connect(): Promise<boolean>;\n  // #endregion fuel-connector-method-connect\n  // #region fuel-connector-method-disconnect\n  disconnect(): Promise<boolean>;\n  // #endregion fuel-connector-method-disconnect\n  // #region fuel-connector-method-signMessage\n  signMessage(address: string, message: string): Promise<string>;\n  // #endregion fuel-connector-method-signMessage\n  // #region fuel-connector-method-signTransaction\n  signTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;\n  // #endregion fuel-connector-method-signTransaction\n  // #region fuel-connector-method-sendTransaction\n  sendTransaction(\n    address: string,\n    transaction: TransactionRequestLike,\n    params?: FuelConnectorSendTxParams\n  ): Promise<string>;\n  // #endregion fuel-connector-method-sendTransaction\n  // #region fuel-connector-method-currentAccount\n  currentAccount(): Promise<string | null>;\n  // #endregion fuel-connector-method-currentAccount\n  // #region fuel-connector-method-addAssets\n  addAssets(assets: Array<Asset>): Promise<boolean>;\n  // #endregion fuel-connector-method-addAssets\n  // #region fuel-connector-method-addAsset\n  addAsset(asset: Asset): Promise<boolean>;\n  // #endregion fuel-connector-method-addAsset\n  // #region fuel-connector-method-assets\n  assets(): Promise<Array<Asset>>;\n  // #endregion fuel-connector-method-assets\n  // #region fuel-connector-method-addNetwork\n  addNetwork(networkUrl: string): Promise<boolean>;\n  // #endregion fuel-connector-method-addNetwork\n  // #region fuel-connector-method-selectNetwork\n  selectNetwork(network: SelectNetworkArguments): Promise<boolean>;\n  // #endregion fuel-connector-method-selectNetwork\n  // #region fuel-connector-method-networks\n  networks(): Promise<Array<Network>>;\n  // #endregion fuel-connector-method-networks\n  // #region fuel-connector-method-currentNetwork\n  currentNetwork(): Promise<Network>;\n  // #endregion fuel-connector-method-currentNetwork\n  // #region fuel-connector-method-addABI\n  addABI(contractId: string, abi: FuelABI): Promise<boolean>;\n  // #endregion fuel-connector-method-addABI\n  // #region fuel-connector-method-getABI\n  getABI(contractId: string): Promise<FuelABI | null>;\n  // #endregion fuel-connector-method-getABI\n  // #region fuel-connector-method-hasABI\n  hasABI(contractId: string): Promise<boolean>;\n  // #endregion fuel-connector-method-hasABI\n}\n\n/**\n * @name FuelConnector\n *\n * Wallet Connector is a interface that represents a Wallet Connector and all the methods\n * that should be implemented to be compatible with the Fuel SDK.\n */\nexport abstract class FuelConnector extends EventEmitter implements Connector {\n  name: string = '';\n  metadata: ConnectorMetadata = {} as ConnectorMetadata;\n  connected: boolean = false;\n  installed: boolean = false;\n  external: boolean = true;\n  events = FuelConnectorEventTypes;\n\n  /**\n   * Should return true if the connector is loaded\n   * in less then one second.\n   *\n   * @returns Always true.\n   */\n  async ping(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current version of the connector\n   * and the network version that is compatible.\n   *\n   * @returns boolean - connection status.\n   */\n  async version(): Promise<Version> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return true if the connector is connected\n   * to any of the accounts available.\n   *\n   * @returns The connection status.\n   */\n  async isConnected(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the accounts authorized for the\n   * current connection.\n   *\n   * @returns The accounts addresses strings\n   */\n  async accounts(): Promise<Array<string>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the connection process and return\n   * true if the account authorize the connection.\n   *\n   * and return false if the user reject the connection.\n   *\n   * @emits accounts\n   * @returns boolean - connection status.\n   */\n  async connect(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should disconnect the current connection and\n   * return false if the disconnection was successful.\n   *\n   * @emits assets connection\n   * @returns The connection status.\n   */\n  async disconnect(): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the sign message process and return\n   * the signed message.\n   *\n   * @param address - The address to sign the message\n   * @param message - The message to sign all text will be treated as text utf-8\n   *\n   * @returns Message signature\n   */\n  async signMessage(_address: string, _message: string): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the sign transaction process and return\n   * the signed transaction.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to sign\n   *\n   * @returns Transaction signature\n   */\n  async signTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the send transaction process and return\n   * the transaction id submitted to the network.\n   *\n   * If the network is not available for the connection\n   * it should throw an error to avoid the transaction\n   * to be sent to the wrong network and lost.\n   *\n   * @param address - The address to sign the transaction\n   * @param transaction - The transaction to send\n   * @param params - Optional parameters to send the transaction\n   * @returns The transaction id\n   */\n  async sendTransaction(\n    _address: string,\n    _transaction: TransactionRequestLike,\n    _params?: FuelConnectorSendTxParams\n  ): Promise<string> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current account selected inside the connector, if the account\n   * is authorized for the connection.\n   *\n   * If the account is not authorized it should return null.\n   *\n   * @returns The current account selected otherwise null.\n   */\n  async currentAccount(): Promise<string | null> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the assets metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param assets - The assets to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAssets(_assets: Array<Asset>): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the asset metadata to the connector and return true if the asset\n   * was added successfully.\n   *\n   * If the asset already exists it should throw an error.\n   *\n   * @emits assets\n   * @param asset - The asset to add the metadata to the connection.\n   * @throws Error if the asset already exists\n   * @returns True if the asset was added successfully\n   */\n  async addAsset(_asset: Asset): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the assets added to the connector. If a connection is already established.\n   *\n   * @returns Array of assets metadata from the connector vinculated to the all accounts from a specific Wallet.\n   */\n  async assets(): Promise<Array<Asset>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the add network process and return true if the network was added successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param networkUrl - The URL of the network to be added.\n   * @returns Return true if the network was added successfully\n   */\n  async addNetwork(_networkUrl: string): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should start the select network process and return true if the network has change successfully.\n   *\n   * @emits networks\n   * @throws Error if the network already exists\n   * @param network - The network to be selected.\n   * @returns Return true if the network was added successfully\n   */\n  async selectNetwork(_network: SelectNetworkArguments): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return all the networks available from the connector. If the connection is already established.\n   *\n   * @returns Return all the networks added to the connector.\n   */\n  async networks(): Promise<Array<Network>> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the current network selected inside the connector. Even if the connection is not established.\n   *\n   * @returns Return the current network selected inside the connector.\n   */\n  async currentNetwork(): Promise<Network> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should add the ABI to the connector and return true if the ABI was added successfully.\n   *\n   * @param contractId - The contract id to add the ABI.\n   * @param abi - The JSON ABI that represents a contract.\n   * @returns Return true if the ABI was added successfully.\n   */\n  async addABI(_contractId: string, _abi: FuelABI): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return the ABI from the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the ABI.\n   * @returns The ABI if it exists, otherwise return null.\n   */\n  async getABI(_id: string): Promise<FuelABI | null> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Should return true if the abi exists in the connector vinculated to the all accounts from a specific Wallet.\n   *\n   * @param id - The contract id to get the abi\n   * @returns Returns true if the abi exists or false if not.\n   */\n  async hasABI(_id: string): Promise<boolean> {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Method not implemented.');\n  }\n\n  /**\n   * Event listener for the connector.\n   *\n   * @param eventName - The event name to listen\n   * @param listener - The listener function\n   */\n  override on<E extends FuelConnectorEvents['type'], D extends FuelEventArg<E>>(\n    eventName: E,\n    listener: (data: D) => void\n  ): this {\n    super.on(eventName, listener);\n    return this;\n  }\n}\n","export enum FuelConnectorMethods {\n  // General methods\n  ping = 'ping',\n  version = 'version',\n  // Connection methods\n  connect = 'connect',\n  disconnect = 'disconnect',\n  isConnected = 'isConnected',\n  // Account methods\n  accounts = 'accounts',\n  currentAccount = 'currentAccount',\n  // Signature methods\n  signMessage = 'signMessage',\n  sendTransaction = 'sendTransaction',\n  // Assets metadata methods\n  assets = 'assets',\n  addAsset = 'addAsset',\n  addAssets = 'addAssets',\n  // Network methods\n  networks = 'networks',\n  currentNetwork = 'currentNetwork',\n  addNetwork = 'addNetwork',\n  selectNetwork = 'selectNetwork',\n  // ABI methods\n  addABI = 'addABI',\n  getABI = 'getABI',\n  hasABI = 'hasABI',\n}\n\nexport enum FuelConnectorEventTypes {\n  connectors = 'connectors',\n  currentConnector = 'currentConnector',\n  connection = 'connection',\n  accounts = 'accounts',\n  currentAccount = 'currentAccount',\n  networks = 'networks',\n  currentNetwork = 'currentNetwork',\n  assets = 'assets',\n  abis = 'abis',\n}\n\nexport const FuelConnectorEventType = 'FuelConnector';\n","/* eslint-disable @typescript-eslint/require-await */\nimport type { StorageAbstract } from '../../wallet-manager';\n\nexport class LocalStorage implements StorageAbstract {\n  private storage: Storage;\n\n  constructor(localStorage: Storage) {\n    this.storage = localStorage;\n  }\n\n  async setItem(key: string, value: string): Promise<void> {\n    this.storage.setItem(key, value);\n  }\n\n  async getItem(key: string): Promise<string | null | undefined> {\n    return this.storage.getItem(key);\n  }\n\n  async removeItem(key: string): Promise<void> {\n    this.storage.removeItem(key);\n  }\n\n  async clear(): Promise<void> {\n    this.storage.clear();\n  }\n}\n","/* eslint-disable no-param-reassign */\n\nexport type CacheFor = {\n  [key: string]: {\n    timeout: number;\n    value: unknown;\n  } | null;\n};\n\ntype CacheForOptions = {\n  key: string;\n  cache: CacheFor;\n  cacheTime: number;\n};\n\nexport function cacheFor<F extends (...args: unknown[]) => Promise<unknown>>(\n  fn: F,\n  { cache, cacheTime, key }: CacheForOptions\n): F {\n  return (async (...args: unknown[]) => {\n    if (cache[key] && cache[key]?.value) {\n      return cache[key]?.value as ReturnType<F>;\n    }\n    clearTimeout(cache[key]?.timeout);\n    const result = await fn(...args);\n\n    // Create cache auto clean\n\n    cache[key] = {\n      timeout: Number(\n        setTimeout(() => {\n          cache[key] = null;\n        }, cacheTime)\n      ),\n      value: result,\n    };\n\n    return result;\n  }) as F;\n}\n","import type { FuelConnector } from '../fuel-connector';\nimport { FuelConnectorEventType } from '../types';\n\n/**\n * Fuel Connector Event is a custom event that can be used by the connector to\n * inform the Fuel Connector Manager that a new connector is available.\n */\nexport function dispatchFuelConnectorEvent(connector: FuelConnector) {\n  window.dispatchEvent(\n    new CustomEvent(FuelConnectorEventType, {\n      detail: connector,\n    })\n  );\n}\n","import { FuelError } from '@fuel-ts/errors';\n\n// eslint-disable-next-line eslint-comments/disable-enable-pair\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport type DeferPromise<R = unknown> = {\n  promise: Promise<R>;\n  resolve: (value: R) => void;\n  reject: (error: unknown) => void;\n};\n\nexport function deferPromise<R = unknown>() {\n  const defer: DeferPromise<R> = {} as any;\n\n  defer.promise = new Promise((resolve, reject) => {\n    defer.reject = reject;\n    defer.resolve = resolve;\n  });\n\n  return defer;\n}\n\n// eslint-disable-next-line @typescript-eslint/require-await\nexport async function withTimeout<F extends Promise<unknown>, RT = Awaited<F>>(\n  promise: F,\n  timeout: number = 1050\n): Promise<RT> {\n  const timeoutPromise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new FuelError(FuelError.CODES.TIMEOUT_EXCEEDED, 'Promise timed out'));\n    }, timeout);\n  });\n  return Promise.race([timeoutPromise, promise]) as any;\n}\n","import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { Account } from '../account';\nimport { Provider } from '../providers';\nimport type { StorageAbstract } from '../wallet-manager';\n\nimport { FuelConnector } from './fuel-connector';\nimport {\n  FuelConnectorMethods,\n  FuelConnectorEventTypes,\n  FuelConnectorEventType,\n  LocalStorage,\n} from './types';\nimport type { Network, FuelConnectorEventsType, TargetObject } from './types';\nimport type { CacheFor } from './utils';\nimport { cacheFor, deferPromise, withTimeout } from './utils';\n\n// This is the time to wait for the connector\n// to be available before returning false for hasConnector.\nconst HAS_CONNECTOR_TIMEOUT = 2_000;\n// The time to cache the ping result, as is not\n// expected to change the availability of the connector to\n// change too often we can safely cache the result for 5 seconds\n// at minimum.\nconst PING_CACHE_TIME = 5_000;\n\nconst { warn } = console;\n\nexport type FuelConfig = {\n  connectors?: Array<FuelConnector>;\n  storage?: StorageAbstract | null;\n  targetObject?: TargetObject;\n};\n\nexport type FuelConnectorSelectOptions = {\n  emitEvents?: boolean;\n};\n\nexport type Status = {\n  installed: boolean;\n  connected: boolean;\n};\n\ninterface FuelSdk {\n  // #region connector-manager-method-connectors\n  connectors: () => Promise<Array<FuelConnector>>;\n  // #endregion connector-manager-method-connectors\n  // #region connector-manager-method-getConnector\n  getConnector: (connector: FuelConnector | string) => FuelConnector | null;\n  // #endregion connector-manager-method-getConnector\n  // #region connector-manager-method-hasConnector\n  hasConnector(): Promise<boolean>;\n  // #endregion connector-manager-method-hasConnector\n  // #region connector-manager-method-selectConnector\n  selectConnector(connectorName: string, options: FuelConnectorSelectOptions): Promise<boolean>;\n  // #endregion connector-manager-method-selectConnector\n  // #region connector-manager-method-currentConnector\n  currentConnector(): FuelConnector | null | undefined;\n  // #endregion connector-manager-method-currentConnector\n  // #region connector-manager-method-hasWallet\n  hasWallet(): Promise<boolean>;\n  // #endregion connector-manager-method-hasWallet\n  // #region connector-manager-method-getWallet\n  getWallet(address: string | Address, providerOrNetwork?: Provider | Network): Promise<Account>;\n  // #endregion connector-manager-method-getWallet\n  // #region connector-manager-method-unsubscribe\n  unsubscribe(): void;\n  // #endregion connector-manager-method-unsubscribe\n  // #region connector-manager-method-clean\n  clean(): Promise<void>;\n  // #endregion connector-manager-method-clean\n  // #region connector-manager-method-destroy\n  destroy(): Promise<void>;\n  // #endregion connector-manager-method-destroy\n}\n\nexport class Fuel extends FuelConnector implements FuelSdk {\n  static STORAGE_KEY = 'fuel-current-connector';\n  static defaultConfig: FuelConfig = {};\n  private _storage?: StorageAbstract | null = null;\n  private _connectors: Array<FuelConnector> = [];\n  private _targetObject: TargetObject | null = null;\n  private _unsubscribes: Array<() => void> = [];\n  private _targetUnsubscribe = () => {};\n  private _pingCache: CacheFor = {};\n  private _currentConnector?: FuelConnector | null;\n  private _initializationPromise: Promise<void> | null = null;\n\n  constructor(config: FuelConfig = Fuel.defaultConfig) {\n    super();\n    // Increase the limit of listeners\n    this.setMaxListeners(1_000);\n    // Set all connectors\n    this._connectors = config.connectors ?? [];\n    // Set the target object to listen for global events\n    this._targetObject = this.getTargetObject(config.targetObject);\n    // Set default storage\n    this._storage = config.storage === undefined ? this.getStorage() : config.storage;\n    // Setup all methods\n    this.setupMethods();\n    this._initializationPromise = this.initialize();\n  }\n\n  private async initialize(): Promise<void> {\n    try {\n      const connectResponse = this.setDefaultConnector();\n      this._targetUnsubscribe = this.setupConnectorListener();\n      await connectResponse;\n    } catch (error) {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Error initializing Fuel Connector');\n    }\n  }\n\n  public async init(): Promise<Fuel> {\n    await this._initializationPromise;\n    return this;\n  }\n\n  /**\n   * Return the target object to listen for global events.\n   */\n  private getTargetObject(targetObject?: TargetObject): TargetObject | null {\n    if (targetObject) {\n      return targetObject;\n    }\n    if (typeof window !== 'undefined') {\n      return window;\n    }\n    if (typeof document !== 'undefined') {\n      return document;\n    }\n    return null;\n  }\n\n  /**\n   * Return the storage used.\n   */\n  private getStorage(): StorageAbstract | undefined {\n    if (typeof window !== 'undefined') {\n      return new LocalStorage(window.localStorage);\n    }\n    return undefined;\n  }\n\n  /**\n   * Setup the default connector from the storage.\n   */\n  private async setDefaultConnector(): Promise<boolean | undefined> {\n    const connectorName =\n      (await this._storage?.getItem(Fuel.STORAGE_KEY)) || this._connectors[0]?.name;\n    if (connectorName) {\n      // Setup all events for the current connector\n      return this.selectConnector(connectorName, {\n        emitEvents: false,\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Start listener for all the events of the current\n   * connector and emit them to the Fuel instance\n   */\n  private setupConnectorEvents(events: string[]): void {\n    if (!this._currentConnector) {\n      return;\n    }\n    const currentConnector = this._currentConnector;\n    this._unsubscribes.map((unSub) => unSub());\n    this._unsubscribes = events.map((event) => {\n      const handler = (...args: unknown[]) => this.emit(event, ...args);\n      currentConnector.on(event as FuelConnectorEventsType, handler);\n      return () => currentConnector.off(event, handler);\n    });\n  }\n\n  /**\n   * Call method from the current connector.\n   */\n  private async callMethod(method: string, ...args: unknown[]) {\n    const hasConnector = await this.hasConnector();\n    await this.pingConnector();\n    if (!this._currentConnector || !hasConnector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        `No connector selected for calling ${method}. Use hasConnector before executing other methods.`\n      );\n    }\n    if (typeof this._currentConnector[method as keyof FuelConnector] === 'function') {\n      return (this._currentConnector[method as keyof FuelConnector] as CallableFunction)(...args);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Create a method for each method proxy that is available on the Common interface\n   * and call the method from the current connector.\n   */\n  private setupMethods(): void {\n    Object.values(FuelConnectorMethods).forEach((method) => {\n      this[method] = async (...args: unknown[]) => this.callMethod(method, ...args);\n    });\n  }\n\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status.\n   */\n  private async fetchConnectorStatus(\n    connector: FuelConnector & { _latestUpdate?: number }\n  ): Promise<Status> {\n    // Control fetch status to avoid rewriting the status\n    // on late responses in this way even if a response is\n    // late we can avoid rewriting the status of the connector\n    const requestTimestamp = Date.now();\n    const [isConnected, ping] = await Promise.allSettled([\n      withTimeout(connector.isConnected()),\n      withTimeout(this.pingConnector(connector)),\n    ]);\n    // If the requestTimestamp is greater than the latest update\n    // we can ignore the response as is treated as stale.\n    const isStale = requestTimestamp < (connector._latestUpdate || 0);\n    if (!isStale) {\n      // eslint-disable-next-line no-param-reassign\n      connector._latestUpdate = Date.now();\n      // eslint-disable-next-line no-param-reassign\n      connector.installed = ping.status === 'fulfilled' && ping.value;\n      // eslint-disable-next-line no-param-reassign\n      connector.connected = isConnected.status === 'fulfilled' && isConnected.value;\n    }\n    return {\n      installed: connector.installed,\n      connected: connector.connected,\n    };\n  }\n\n  /**\n   * Fetch the status of all connectors and set the installed and connected\n   * status.\n   */\n  private async fetchConnectorsStatus(): Promise<Status[]> {\n    return Promise.all(\n      this._connectors.map(async (connector) => this.fetchConnectorStatus(connector))\n    );\n  }\n\n  /**\n   * Fetch the status of a connector and set the installed and connected\n   * status. If no connector is provided it will ping the current connector.\n   */\n  private async pingConnector(connector?: FuelConnector) {\n    const curConnector = connector || this._currentConnector;\n    if (!curConnector) {\n      return false;\n    }\n    // If finds a ping in the cache and the value is true\n    // return from cache\n    try {\n      return await cacheFor(async () => withTimeout(curConnector.ping()), {\n        key: curConnector.name,\n        cache: this._pingCache,\n        cacheTime: PING_CACHE_TIME,\n      })();\n    } catch {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Current connector is not available.');\n    }\n  }\n\n  /**\n   * Setup a listener for the FuelConnector event and add the connector\n   * to the list of new connectors.\n   */\n  private setupConnectorListener = () => {\n    const { _targetObject: targetObject } = this;\n    const eventName = FuelConnectorEventType;\n    if (targetObject?.on) {\n      targetObject.on(eventName, this.addConnector);\n      return () => {\n        targetObject.off?.(eventName, this.addConnector);\n      };\n    }\n    if (targetObject?.addEventListener) {\n      const handler = (e: CustomEvent<FuelConnector>) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.addConnector(e.detail);\n      };\n      targetObject.addEventListener(eventName, handler);\n      return () => {\n        targetObject.removeEventListener?.(eventName, handler);\n      };\n    }\n    return () => {};\n  };\n\n  /**\n   * Add a new connector to the list of connectors.\n   */\n  private addConnector = async (connector: FuelConnector): Promise<void> => {\n    if (!this.getConnector(connector)) {\n      this._connectors.push(connector);\n    }\n    // Fetch the status of the new connector\n    await this.fetchConnectorStatus(connector);\n    // Emit connectors events once the connector list changes\n    this.emit(this.events.connectors, this._connectors);\n    // If the current connector is not set\n    if (!this._currentConnector) {\n      // set the new connector as currentConnector\n      await this.selectConnector(connector.name, {\n        emitEvents: false,\n      });\n    }\n  };\n\n  private triggerConnectorEvents = async () => {\n    const [isConnected, networks, currentNetwork] = await Promise.all([\n      this.isConnected(),\n      this.networks(),\n      this.currentNetwork(),\n    ]);\n    this.emit(this.events.connection, isConnected);\n    this.emit(this.events.networks, networks);\n    this.emit(this.events.currentNetwork, currentNetwork);\n    if (isConnected) {\n      const [accounts, currentAccount] = await Promise.all([\n        this.accounts(),\n        this.currentAccount(),\n      ]);\n      this.emit(this.events.accounts, accounts);\n      this.emit(this.events.currentAccount, currentAccount);\n    }\n  };\n\n  /**\n   * Get a connector from the list of connectors.\n   */\n  getConnector = (connector: FuelConnector | string): FuelConnector | null =>\n    this._connectors.find((c) => {\n      const connectorName = typeof connector === 'string' ? connector : connector.name;\n      return c.name === connectorName || c === connector;\n    }) || null;\n\n  /**\n   * Return the list of connectors with the status of installed and connected.\n   */\n  async connectors(): Promise<Array<FuelConnector>> {\n    await this.fetchConnectorsStatus();\n    return this._connectors;\n  }\n\n  /**\n   * Set the current connector to be used.\n   */\n  async selectConnector(\n    connectorName: string,\n    options: FuelConnectorSelectOptions = {\n      emitEvents: true,\n    }\n  ): Promise<boolean> {\n    const connector = this.getConnector(connectorName);\n    if (!connector) {\n      return false;\n    }\n    if (this._currentConnector?.name === connectorName) {\n      return true;\n    }\n    const { installed } = await this.fetchConnectorStatus(connector);\n    if (installed) {\n      this._currentConnector = connector;\n      this.emit(this.events.currentConnector, connector);\n      this.setupConnectorEvents(Object.values(FuelConnectorEventTypes));\n      await this._storage?.setItem(Fuel.STORAGE_KEY, connector.name);\n      // If emitEvents is true we query all the data from the connector\n      // and emit the events to the Fuel instance allowing the application to\n      // react to changes in the connector state.\n      if (options.emitEvents) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.triggerConnectorEvents();\n      }\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Return the current selected connector.\n   */\n  currentConnector(): FuelConnector | null | undefined {\n    return this._currentConnector;\n  }\n\n  /**\n   * Return true if any connector is available.\n   */\n  async hasConnector(): Promise<boolean> {\n    // If there is a current connector return true\n    // as the connector is ready\n    if (this._currentConnector) {\n      return true;\n    }\n    // If there is no current connector\n    // wait for the current connector to be set\n    // for 1 second and return false if is not set\n    const defer = deferPromise<boolean>();\n    this.once(this.events.currentConnector, () => {\n      defer.resolve(true);\n    });\n    // As the max ping time is 1 second we wait for 2 seconds\n    // to allow applications to react to the current connector\n    return withTimeout(defer.promise, HAS_CONNECTOR_TIMEOUT)\n      .then(() => true)\n      .catch(() => false);\n  }\n\n  async hasWallet(): Promise<boolean> {\n    return this.hasConnector();\n  }\n\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   *\n   * @deprecated getProvider is deprecated and is going to be removed in the future, use getWallet instead.\n   */\n  async getProvider(providerOrNetwork?: Provider | Network): Promise<Provider> {\n    warn(\n      'getProvider is deprecated and is going to be removed in the future, use getWallet instead.'\n    );\n    return this._getProvider(providerOrNetwork);\n  }\n\n  /**\n   * Return a Fuel Provider instance with extends features to work with\n   * connectors.\n   */\n  private async _getProvider(providerOrNetwork?: Provider | Network): Promise<Provider> {\n    // Decide which provider to use based on the providerOrNetwork\n    let provider: Provider;\n    // If provider is a valid instance of a Provider use it\n    if (providerOrNetwork && 'getTransactionResponse' in providerOrNetwork) {\n      provider = providerOrNetwork;\n      // If the provided param is a valid network use it\n    } else if (providerOrNetwork && 'chainId' in providerOrNetwork && 'url' in providerOrNetwork) {\n      provider = new Provider(providerOrNetwork.url);\n      // If nor provider or network is provided use the current network\n    } else if (!providerOrNetwork) {\n      const currentNetwork = await this.currentNetwork();\n      provider = new Provider(currentNetwork.url);\n      // If a provider or network was informed but is not valid\n      // throw an error\n    } else {\n      throw new FuelError(ErrorCode.INVALID_PROVIDER, 'Provider is not valid.');\n    }\n    return provider;\n  }\n\n  /**\n   * Return a Fuel Wallet Locked instance with extends features to work with\n   * connectors.\n   */\n  async getWallet(\n    address: string | Address,\n    providerOrNetwork?: Provider | Network\n  ): Promise<Account> {\n    const provider = await this._getProvider(providerOrNetwork);\n    return new Account(address, provider, this);\n  }\n\n  /**\n   * Remove all open listeners this is useful when you want to\n   * remove the Fuel instance and avoid memory leaks.\n   */\n  unsubscribe(): void {\n    // Unsubscribe from all events\n    this._unsubscribes.map((unSub) => unSub());\n    this._targetUnsubscribe();\n    // Remove all listeners from fuel instance\n    this.removeAllListeners();\n  }\n\n  /**\n   * Clean all the data from the storage.\n   */\n  async clean(): Promise<void> {\n    await this._storage?.removeItem(Fuel.STORAGE_KEY);\n  }\n\n  /**\n   * Removes all listeners and cleans the storage.\n   */\n  async destroy(): Promise<void> {\n    this.unsubscribe();\n    await this.clean();\n  }\n}\n"],"mappings":"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AC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,IAAG,GAAE,GAAG,GAAE,CAAC,CAAC,IAAG,EAAE,GAAE,CAAC,GAAE,CAAC,CAAC,IAAG,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,UAAK,GAAE,CAAC,KAAI,GAAE,UAAK,GAAE,CAAC,KAAI,GAAE,UAAK,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,IAAI,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,GAAE,IAAI,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,GAAE,OAAI,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,GAAE,SAAI,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,GAAE,IAAI,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,GAAE,IAAI,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,GAAE,IAAI,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,GAAE,SAAI,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,GAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,ceAAK,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,MAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,CAAC,KAAI,GAAG,GAAE,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAI,GAAE,QAAG,GAAE,CAAC,KAAI,CAAC,GAAE,CAAC,KAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,ccAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,oBAAK,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,oBAAK,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,ccAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,eAAK,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,EAAE,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,oBAAK,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,cAAI,GAAE,CAAC,MAAK,GAAE,oBAAK,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,SAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,0BAAM,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,OAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,OAAI,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,MAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,QAAG,GAAE,CAAC,CAAC,MAAK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AI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,IAAI,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,MAAK,GAAE,MAAM,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,KAAK,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,MAAK,GAAE,GAAG,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,MAAK,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,IAAI,GAAE,CAAC,GAAE,CAAC,CAAC,MAAK,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,KAAK,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,KAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,ccAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,gBAAM,GAAE,CAAC,OAAM,GAAE,gBAAM,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,UAAK,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,KAAK,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,ccAAI,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,sCAAQ,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,gCAAO,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAA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AAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,eAAK,GAAE,CAAC,OAAM,GAAE,eAAK,GAAE,CAAC,OAAM,GAAE,eAAK,GAAE,CAAC,OAAM,GAAE,eAAK,GAAE,CAAC,OAAM,GAAE,eAAK,GAAE,CAAC,OAAM,GAAE,eAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,GAAE,oBAAK,GAAE,CAAC,OAAM,GAAE,+FAAoB,GAAE,CAAC,OAAM,GAAE,6CAAU,GAAE,CAAC,OAAM,GAAE,0BAAM,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,SAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,IAAI,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,OAAM,GAAE,GAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,CAAC,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,CAAC,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,SAAI,GAAE,CAAC,OAAM,GAAE,cAAI,GAAE,CAAC,OAAM,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,QAAG,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,cAAI,GAAE,CAAC,CAAC,OAAM,KAAK,GAAE,GAAE,coBAAM,GAAE,CAAC,QAAO,GAAE,oBAAM,GAAE,CAAC,QAAO,GAAE,6BAAQ,GAAE,CAAC,QAAO,GAAE,6BAAQ,GAAE,CAAC,QAAO,GAAE,6BAAQ,GAAE,CAAC,QAAO,GAAE,6BAAQ,GAAE,CAAC,QAAO,GAAE,6BAAQ,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,GAAE,oBAAM,GAAE,CAAC,QAAO,GAAE,oeAAK,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,GAAG,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,KAAK,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,GAAE,IAAI,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,GAAE,cAAI,GAAE,CAAC,QAAO,GAAE,cAAI,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,QAAO,GAAE,QAAG,GAAE,CAAC,CAAC,QAAO,MAAM,GAAE,CAAC,GAAE,CAAC,QAAO,GAAE,oBAAK,GAAE,CAAC,QAAO,GAAE,oBAAK,GAAE,CAAC,QAAO,GAAE,oBAAK,GAAE,CAAC,QAAO,GAAE,oBAAK,GAAE,CAAC,QAAO,GAAE,oBAAK,GAAE,CAAC,QAAO,G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","names":["module","exports","assert","BN","number","base","Buffer","mod","pow","clone","inspect","toNumber","ret","allocate","sub","comb10MulTo","split","output","prime","toNumber","type","output","punycode","error","toASCII","toUnicode","bytes","output","bytes","output","number","base","res","ret","parsePath","output","bytes","output","Function","V","tmp","nextItem","base","URL","URL","URL","Headers","Response","type","Stream","error","clone","map","URL","fetch","https","http","abort","abortAndFinalize","zlib","Url","whatwgUrl","isDomainOrSubdomain","isSameProtocol","fetch","ret","move_","sub","bytes","ldc","tr","jmp","addi","divi","lw","gtf","bsiz","GTFArgs","module","imports","isNode","mod","initWasm","ErrorCode","error","__publicField","BnJs","base","output","bytes","mod","bytes","__publicField","FuelError","ErrorCode","bytes","output","toBytes","concatBytes","toBytes","isLE","_32n","toBytes","hash","toBytes","hash","toBytes","Pi","toBytes","bytes","tr","import_crypto","import_crypto","import_crypto","scrypt","ripemd160","pbkdf2","arrayify","randomBytes","crypto","hexlify","UUID","bufferFromString","decrypt","encrypt","keyFromPassword","stringFromBuffer","keccak256","decryptJsonWalletData","encryptJsonWalletData","computeHmac","randomUUID","sha256","hash","type","error","FuelError","ErrorCode","bytes","arrayify","bn","toHex","toBytes","__publicField","concat","toNumber","output","toUtf8Bytes","toUtf8String","concatBytes","type","getCoder","f","sha256","randomBytes2","error","FuelError","arrayify","hexlify","ret","InputType","Coder","NumberCoder","concat","arrayify","sha256","bytes","type","FuelError","ErrorCode","OutputType","B256Coder","BigNumberCoder","PolicyType","ReceiptType","StructCoder","B256Coder","UpgradePurposeTypeEnum","Coder","type","NumberCoder","FuelError","ErrorCode","concat","TransactionType","BigNumberCoder","type","map","copy","type","_ObjectMap","clone","concatBytes","isBytes","utf8ToBytes","_0n","_1n","_2n","bytes","gen","type","map","output","OperationTypeNode","DirectiveLocation","Kind","indent","TokenKind","instanceOf","type","type","document","operationName","type","f","e","document","f","params_","fetch","crossFetch","url","error","document","variables","__assign","lib_default","lib_default","errors","type","type","base","normalize","type","cache","output","output","randomBytes2","output","sha256","output","output","hash","type","type","type","type","type","TransactionTypeName","TransactionStatus","OperationName","AddressType","ChainName","type","output","sub","error","error","document","lib_default","block","output","assets","isCoin","requestToReestimate","randomBytes2","_0n","_1n","_2n","number","Fp","map","f","_0n","_1n","bitLen","isLE","_0n","f","_1n","bytes","isLE","_1n","_0n","_1n","base","window","f","wbits","Fp","_0n","_1n","_2n","_3n","_4n","toBytes","concatBytes","bytes","isBytes","error","Point","f","a","number","hash","randomBytes","r","s","hash","concatBytes","_1n","_2n","_3n","_0n","hash","randomBytes2","randomBytes2","scrypt2","Language","sha256","pbkdf22","sha256","randomBytes2","MainnetPRV","TestnetPRV","sha256","ripemd1602","bytes","Vault","type","asm","WORD_SIZE","numOfInstructions","instructionBytes","blobBytes","loaderBytecode","hash","hash","node_default","node_default","bytes","hash","bytes","import_events","FuelConnectorMethods","FuelConnectorEventTypes","cache","error"]}