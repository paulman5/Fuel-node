import { ReceiptType, TransactionType } from '@fuel-ts/transactions';
import type { Output } from '@fuel-ts/transactions';
import type { TransactionResultReceipt } from '../transaction-response';
import { TransactionTypeName } from './types';
import type { InputOutputParam, InputParam, OperationCoin, RawPayloadParam, ReceiptParam, Operation, GetOperationParams, GetTransferOperationsParams } from './types';
/**
 * Extracts a specific type of receipt from a list of receipts.
 *
 * @param receipts - The list of receipts to filter.
 * @param type - The type of receipt to filter for.
 * @returns The filtered list of receipts.
 */
export declare function getReceiptsByType<T = TransactionResultReceipt>(receipts: TransactionResultReceipt[], type: ReceiptType): T[];
/**
 * Returns the transaction type's name based on the transaction type enum value.
 *
 * @param transactionType - The transaction type enum value.
 * @returns The transaction type's name.
 */
export declare function getTransactionTypeName(transactionType: TransactionType): TransactionTypeName;
/** @hidden */
export declare function isType(transactionType: TransactionType, type: TransactionTypeName): boolean;
/** @hidden */
export declare function isTypeMint(transactionType: TransactionType): boolean;
/** @hidden */
export declare function isTypeCreate(transactionType: TransactionType): boolean;
/** @hidden */
export declare function isTypeScript(transactionType: TransactionType): boolean;
/** @hidden */
export declare function isTypeUpgrade(transactionType: TransactionType): boolean;
/** @hidden */
export declare function isTypeUpload(transactionType: TransactionType): boolean;
/** @hidden */
export declare function isTypeBlob(transactionType: TransactionType): boolean;
/** @hidden */
export declare function hasSameAssetId(a: OperationCoin): (b: OperationCoin) => boolean;
/** @hidden */
export declare function getReceiptsCall(receipts: TransactionResultReceipt[]): import("@fuel-ts/transactions").ReceiptCall[];
/** @hidden */
export declare function getReceiptsMessageOut(receipts: TransactionResultReceipt[]): import("@fuel-ts/transactions").ReceiptMessageOut[];
/** @hidden */
export declare function addOperation(operations: Operation[], toAdd: Operation): Operation[];
/** @hidden */
export declare function getReceiptsTransferOut(receipts: TransactionResultReceipt[]): import("@fuel-ts/transactions").ReceiptTransferOut[];
/**
 * Creates withdrawal operations from Fuel to Ethereum based on message out receipts
 *
 * @param inputs - Transaction inputs containing account information
 * @param receipts - Transaction receipts containing withdrawal details
 * @param baseAssetId - The ID of the asset being withdrawn
 * @returns Array of withdrawal operations with sender, recipient, and asset id.
 */
export declare function getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId, }: InputParam & ReceiptParam & {
    baseAssetId: string;
}): Operation[];
/** @hidden */
export declare function getContractCallOperations({ inputs, outputs, receipts, abiMap, rawPayload, maxInputs, baseAssetId, }: InputOutputParam & ReceiptParam & Pick<GetOperationParams, 'abiMap' | 'maxInputs' | 'baseAssetId'> & RawPayloadParam): Operation[];
/** @hidden */
export declare function getTransferOperations({ inputs, outputs, receipts, baseAssetId, }: GetTransferOperationsParams): Operation[];
/** @hidden */
export declare function getPayProducerOperations(outputs: Output[]): Operation[];
/** @hidden */
export declare function getContractCreatedOperations({ inputs, outputs }: InputOutputParam): Operation[];
/** @hidden */
export declare function getOperations({ transactionType, inputs, outputs, receipts, abiMap, rawPayload, maxInputs, baseAssetId, }: GetOperationParams): Operation[];
//# sourceMappingURL=operations.d.ts.map