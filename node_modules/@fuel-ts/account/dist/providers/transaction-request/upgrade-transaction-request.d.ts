import type { BN } from '@fuel-ts/math';
import { TransactionType, type TransactionUpgrade, UpgradePurposeTypeEnum } from '@fuel-ts/transactions';
import type { BytesLike } from '@fuel-ts/utils';
import type { GasCosts } from '../provider';
import { BaseTransactionRequest, type BaseTransactionRequestLike } from './transaction-request';
/**
 * @hidden
 */
export type UpgradePurposeRequest = {
    type: UpgradePurposeTypeEnum.ConsensusParameters;
    checksum: string;
} | {
    type: UpgradePurposeTypeEnum.StateTransition;
    data: BytesLike;
};
/**
 * @hidden
 */
export interface UpgradeTransactionRequestLike extends BaseTransactionRequestLike {
    /** The upgrade purpose */
    upgradePurpose?: UpgradePurposeRequest;
    /** Witness index */
    bytecodeWitnessIndex?: number;
}
export declare class UpgradeTransactionRequest extends BaseTransactionRequest {
    static from(obj: UpgradeTransactionRequestLike): UpgradeTransactionRequest;
    /** The type of transaction */
    type: TransactionType.Upgrade;
    /** The upgrade purpose */
    upgradePurpose: UpgradePurposeRequest;
    /** Witness index of consensus */
    bytecodeWitnessIndex: number;
    /**
     * Creates an instance `UpgradeTransactionRequest`.
     *
     * @param upgradeTransactionRequestLike - The initial values for the instance
     */
    constructor({ upgradePurpose, bytecodeWitnessIndex, ...rest }?: UpgradeTransactionRequestLike);
    /**
     * Adds a consensus parameters upgrade purpose.
     *
     * @param consensus - The consensus bytecode.
     *
     * @returns - The current instance of `UpgradeTransactionRequest`.
     */
    addConsensusParametersUpgradePurpose(consensus: BytesLike): this;
    /**
     * Adds a state transition upgrade purpose.
     *
     * @param bytecodeRoot - The Merkle root of the state transition.
     *
     * @returns - The current instance of `UpgradeTransactionRequest`.
     */
    addStateTransitionUpgradePurpose(bytecodeRoot: BytesLike): this;
    /**
     * Adds an upgrade purpose.
     *
     * @param type - The upgrade purpose type.
     * @param data - The bytecode or merkle root of upgrade purpose
     *
     * @returns - The current instance of `UpgradeTransactionRequest`.
     */
    addUpgradePurpose(type: UpgradePurposeTypeEnum, data: BytesLike): this;
    /**
     * Converts the transaction request to a `TransactionUpgrade`.
     *
     * @returns The transaction create object.
     */
    toTransaction(): TransactionUpgrade;
    /**
     * Gets the Transaction ID by hashing the transaction
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId: number): string;
    /**
     * Calculates the metadata gas cost for an upgrade transaction.
     *
     * @param gasCosts - gas costs passed from the chain.
     *
     * @returns metadata gas cost for the upgrade transaction.
     */
    metadataGas(gasCosts: GasCosts): BN;
}
//# sourceMappingURL=upgrade-transaction-request.d.ts.map