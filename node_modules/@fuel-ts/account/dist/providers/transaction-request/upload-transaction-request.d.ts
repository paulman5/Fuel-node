import type { BN } from '@fuel-ts/math';
import { type TransactionUpload, TransactionType } from '@fuel-ts/transactions';
import type { BytesLike } from '@fuel-ts/utils';
import type { ChainInfo, GasCosts } from '../provider';
import { type BaseTransactionRequestLike, BaseTransactionRequest } from './transaction-request';
/**
 * @hidden
 */
export interface UploadSubsectionRequest {
    /** The root of the Merkle tree is created over the bytecode. */
    root: BytesLike;
    /** The index of the subsection of the bytecode. */
    subsectionIndex: number;
    /** The total number of subsections on which bytecode was divided. */
    subsectionsNumber: number;
    /** The proof set helps to verify the connection of the subsection to the `root`. */
    proofSet: BytesLike[];
    /** The subsection bytecode. */
    subsection: BytesLike;
}
/**
 * @hidden
 */
export interface UploadTransactionRequestLike extends BaseTransactionRequestLike {
    /** The witness index of the subsection of the bytecode. */
    witnessIndex?: number;
    /** The subsection data. */
    subsection?: Omit<UploadSubsectionRequest, 'subsection'>;
}
export declare class UploadTransactionRequest extends BaseTransactionRequest {
    static from(obj: UploadTransactionRequestLike): UploadTransactionRequest;
    /** Type of the transaction */
    type: TransactionType.Upload;
    /** The witness index of the subsection of the bytecode. */
    witnessIndex: number;
    /** The subsection data. */
    subsection: Omit<UploadSubsectionRequest, 'subsection'>;
    /**
     * Creates an instance `UploadTransactionRequest`.
     *
     * @param uploadTransactionRequestLike - The initial values for the instance
     */
    constructor({ witnessIndex, subsection, ...rest }?: UploadTransactionRequestLike);
    /**
     * Adds the subsection.
     *
     * @param subsection - The subsection data.
     */
    addSubsection(subsection: UploadSubsectionRequest): void;
    /**
     * Gets the Transaction Request by hashing the transaction.
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId: number): string;
    /**
     * Converts the transaction request to a `TransactionUpload`.
     *
     * @returns The transaction create object.
     */
    toTransaction(): TransactionUpload;
    /**
     * Calculates the metadata gas cost for an upload transaction.
     *
     * @param gasCosts - gas costs passed from the chain.
     *
     * @returns metadata gas cost for the upload transaction.
     */
    metadataGas(gasCosts: GasCosts): BN;
    /**
     * Calculates the minimum gas for an upload transaction.
     *
     * @param chainInfo - The chain information.
     *
     * @returns the minimum gas for the upload transaction
     */
    calculateMinGas(chainInfo: ChainInfo): BN;
}
//# sourceMappingURL=upload-transaction-request.d.ts.map