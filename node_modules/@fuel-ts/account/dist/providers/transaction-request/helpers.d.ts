import type { Address } from '@fuel-ts/address';
import type { ExcludeResourcesOption } from '../resource';
import type { TransactionRequestInput, CoinTransactionRequestInput, MessageTransactionRequestInput } from './input';
import type { TransactionRequest } from './types';
export declare const isRequestInputCoin: (input: TransactionRequestInput) => input is CoinTransactionRequestInput;
export declare const isRequestInputMessage: (input: TransactionRequestInput) => input is MessageTransactionRequestInput;
export declare const isRequestInputMessageWithoutData: (input: TransactionRequestInput) => input is MessageTransactionRequestInput;
export declare const isRequestInputCoinOrMessage: (input: TransactionRequestInput) => input is CoinTransactionRequestInput | MessageTransactionRequestInput;
export declare const isRequestInputResource: (input: TransactionRequestInput) => input is CoinTransactionRequestInput | MessageTransactionRequestInput;
export declare const getRequestInputResourceOwner: (input: CoinTransactionRequestInput | MessageTransactionRequestInput) => import("@fuel-ts/utils").BytesLike;
export declare const isRequestInputResourceFromOwner: (input: CoinTransactionRequestInput | MessageTransactionRequestInput, owner: Address) => boolean;
export declare const getAssetAmountInRequestInputs: (inputs: TransactionRequestInput[], assetId: string, baseAsset: string) => import("@fuel-ts/math").BN;
export declare const cacheRequestInputsResources: (inputs: TransactionRequestInput[]) => Required<ExcludeResourcesOption>;
export declare const cacheRequestInputsResourcesFromOwner: (inputs: TransactionRequestInput[], owner: Address) => ExcludeResourcesOption;
/**
 * @hidden
 *
 * Get the number of burnable assets in the transaction request.
 *
 * @param baseAssetId - The base asset ID.
 * @param transactionRequest - The transaction request to get the burnable asset count from.
 * @returns The number of burnable assets in the transaction request.
 */
export declare const getBurnableAssetCount: (baseAssetId: string, transactionRequest: TransactionRequest) => number;
/**
 * @hidden
 *
 * Validates the transaction request for asset burn.
 *
 * @param transactionRequest - The transaction request to validate.
 * @param enableAssetBurn - Whether asset burn is enabled (default: false).
 *
 * @throws `FuelError` when an asset burn is detected and not enabled.
 */
export declare const validateTransactionForAssetBurn: (baseAssetId: string, transactionRequest: TransactionRequest, enableAssetBurn?: boolean) => void;
//# sourceMappingURL=helpers.d.ts.map