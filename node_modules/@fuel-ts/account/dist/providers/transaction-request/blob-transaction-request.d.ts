import type { BN } from '@fuel-ts/math';
import type { TransactionBlob } from '@fuel-ts/transactions';
import type { GasCosts } from '../provider';
import type { BaseTransactionRequestLike } from './transaction-request';
import { BaseTransactionRequest, TransactionType } from './transaction-request';
export interface BlobTransactionRequestLike extends BaseTransactionRequestLike {
    /** Blob ID */
    blobId: string;
    /** Witness index of the bytecode to create */
    witnessIndex?: number;
}
export declare class BlobTransactionRequest extends BaseTransactionRequest {
    static from(obj: BlobTransactionRequestLike): BlobTransactionRequest;
    /** Type of the transaction */
    type: TransactionType.Blob;
    /** Blob ID */
    blobId: string;
    /** Witness index of the bytecode to create */
    witnessIndex: number;
    /**
     * Creates an instance `BlobTransactionRequest`.
     *
     * @param blobTransactionRequestLike - The initial values for the instance
     */
    constructor({ witnessIndex, blobId, ...rest }: BlobTransactionRequestLike);
    /**
     * Converts the transaction request to a `TransactionBlob`.
     *
     * @returns The transaction create object.
     */
    toTransaction(): TransactionBlob;
    /**
     * Gets the Transaction Request by hashing the transaction.
     *
     * @param chainId - The chain ID.
     *
     * @returns - A hash of the transaction, which is the transaction ID.
     */
    getTransactionId(chainId: number): string;
    /**
     * Calculates the metadata gas cost for a blob transaction.
     *
     * @param gasCosts - gas costs passed from the chain.
     * @returns metadata gas cost for the blob transaction.
     */
    metadataGas(gasCosts: GasCosts): BN;
}
//# sourceMappingURL=blob-transaction-request.d.ts.map