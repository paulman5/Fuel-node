import type { BN, BNInput } from '@fuel-ts/math';
import { type Input } from '@fuel-ts/transactions';
import type { GqlDependentCost } from '../__generated__/operations';
import type { GasCosts } from '../provider';
import type { TransactionRequestInput } from '../transaction-request';
import type { TransactionResultReceipt } from '../transaction-response';
/** @hidden */
export declare const getGasUsedFromReceipts: (receipts: Array<TransactionResultReceipt>) => BN;
export declare function resolveGasDependentCosts(byteSize: BNInput, gasDependentCost: GqlDependentCost): BN;
export declare function gasUsedByInputs(inputs: Array<TransactionRequestInput | Input>, txBytesSize: number, gasCosts: GasCosts): BN;
export interface IGetMinGasParams {
    inputs: Array<TransactionRequestInput | Input>;
    gasCosts: GasCosts;
    txBytesSize: number;
    metadataGas: BN;
    gasPerByte: BN;
}
export declare function getMinGas(params: IGetMinGasParams): BN;
export interface IGetMaxGasParams {
    witnessesLength: number;
    witnessLimit?: BN;
    gasPerByte: BN;
    minGas: BN;
    gasLimit?: BN;
    blobSize?: BN;
    maxGasPerTx: BN;
}
export declare function getMaxGas(params: IGetMaxGasParams): BN;
export declare function calculateMetadataGasForTxCreate({ gasCosts, stateRootSize, txBytesSize, contractBytesSize, }: {
    gasCosts: GasCosts;
    contractBytesSize: BN;
    stateRootSize: number;
    txBytesSize: number;
}): BN;
export declare function calculateMetadataGasForTxScript({ gasCosts, txBytesSize, }: {
    gasCosts: GasCosts;
    txBytesSize: number;
}): BN;
export declare function calculateMetadataGasForTxBlob({ gasCosts, txBytesSize, witnessBytesSize, }: {
    gasCosts: GasCosts;
    txBytesSize: number;
    witnessBytesSize: number;
}): BN;
export declare function calculateMetadataGasForTxUpgrade({ gasCosts, txBytesSize, consensusSize, }: {
    gasCosts: GasCosts;
    txBytesSize: number;
    consensusSize?: number;
}): BN;
export declare function calculateMetadataGasForTxUpload({ gasCosts, txBytesSize, subsectionSize, subsectionsSize, }: {
    gasCosts: GasCosts;
    txBytesSize: number;
    subsectionSize: number;
    subsectionsSize: number;
}): BN;
export declare function calculateMinGasForTxUpload({ gasCosts, baseMinGas, subsectionSize, }: {
    gasCosts: GasCosts;
    baseMinGas: number;
    subsectionSize: number;
}): BN;
export interface CalculateGasFeeParams {
    tip?: BN;
    gas: BN;
    gasPrice: BN;
    priceFactor: BN;
}
export declare const calculateGasFee: (params: CalculateGasFeeParams) => BN;
//# sourceMappingURL=gas.d.ts.map