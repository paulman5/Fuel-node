import { FuelError } from '@fuel-ts/errors';
import type { TransactionResultReceipt } from '../transaction-response';
/**
 * Assembles an error message for a panic status.
 * @param status - The transaction failure status.
 * @returns The error message.
 */
export declare const assemblePanicError: (statusReason: string, metadata: Record<string, unknown>) => FuelError;
/**
 * Assembles an error message for a revert status.
 * @param receipts - The transaction result processed receipts.
 * @param logs - The transaction decoded logs.
 * @returns The error message.
 */
export declare const assembleRevertError: (receipts: Array<TransactionResultReceipt>, logs: Array<unknown>, metadata: Record<string, unknown>) => FuelError;
interface IExtractTxError {
    receipts: Array<TransactionResultReceipt>;
    logs: Array<unknown>;
    statusReason: string;
}
/**
 * Extracts the transaction error and returns a FuelError object.
 * @param IExtractTxError - The parameters for extracting the error.
 * @returns The FuelError object.
 */
export declare const extractTxError: (params: IExtractTxError) => FuelError;
export {};
//# sourceMappingURL=extract-tx-error.d.ts.map