import type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';
import { Interface } from '@fuel-ts/abi-coder';
import type { BytesLike } from '@fuel-ts/utils';
import type { FakeResources } from '../account';
import { Account } from '../account';
import type { CallResult, CoinQuantityLike, ExcludeResourcesOption, Provider, Resource, TransactionRequest, TransactionRequestLike, TransactionResponse } from '../providers';
export type PredicateParams<TData extends InputValue[] = InputValue[], TConfigurables extends {
    [name: string]: unknown;
} | undefined = {
    [name: string]: unknown;
}> = {
    bytecode: BytesLike;
    provider: Provider;
    abi: JsonAbi;
    data?: TData;
    configurableConstants?: TConfigurables;
};
/**
 * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.
 */
export declare class Predicate<TData extends InputValue[] = InputValue[], TConfigurables extends {
    [name: string]: unknown;
} | undefined = {
    [name: string]: unknown;
}> extends Account {
    bytes: Uint8Array;
    predicateData: TData;
    interface: Interface;
    initialBytecode: Uint8Array;
    configurableConstants: TConfigurables | undefined;
    /**
     * Creates an instance of the Predicate class.
     *
     * @param bytecode - The bytecode of the predicate.
     * @param abi - The JSON ABI of the predicate.
     * @param provider - The provider used to interact with the blockchain.
     * @param data - The predicate input data (optional).
     * @param configurableConstants - Optional configurable constants for the predicate.
     */
    constructor({ bytecode, abi, provider, data, configurableConstants, }: PredicateParams<TData, TConfigurables>);
    /**
     * Populates the transaction data with predicate data.
     *
     * @param transactionRequestLike - The transaction request-like object.
     * @returns The transaction request with predicate data.
     */
    populateTransactionPredicateData<T extends TransactionRequest>(transactionRequestLike: TransactionRequestLike): T;
    /**
     * Sends a transaction with the populated predicate data.
     *
     * @param transactionRequestLike - The transaction request-like object.
     * @returns A promise that resolves to the transaction response.
     */
    sendTransaction(transactionRequestLike: TransactionRequestLike): Promise<TransactionResponse>;
    /**
     * Simulates a transaction with the populated predicate data.
     *
     * @param transactionRequestLike - The transaction request-like object.
     * @returns A promise that resolves to the call result.
     */
    simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult>;
    private getPredicateData;
    /**
     * Creates a new Predicate instance from an existing Predicate instance.
     * @param overrides - The data and configurable constants to override.
     * @returns A new Predicate instance with the same bytecode, ABI and provider but with the ability to set the data and configurable constants.
     */
    toNewInstance(overrides?: Pick<PredicateParams<TData, TConfigurables>, 'data' | 'configurableConstants'>): Predicate<TData, TConfigurables>;
    /**
     * Processes the predicate data and returns the altered bytecode and interface.
     *
     * @param bytes - The bytes of the predicate.
     * @param jsonAbi - The JSON ABI of the predicate.
     * @param configurableConstants - Optional configurable constants for the predicate.
     * @returns An object containing the new predicate bytes and interface.
     */
    private static processPredicateData;
    /**
     * Retrieves resources satisfying the spend query for the account.
     *
     * @param quantities - IDs of coins to exclude.
     * @param excludedIds - IDs of resources to be excluded from the query.
     * @returns A promise that resolves to an array of Resources.
     */
    getResourcesToSpend(quantities: CoinQuantityLike[] /** IDs of coins to exclude */, excludedIds?: ExcludeResourcesOption): Promise<Resource[]>;
    /**
     * Generates an array of fake resources based on the provided coins.
     *
     * @param coins - An array of `FakeResources` objects representing the coins.
     * @returns An array of `Resource` objects with generated properties.
     */
    generateFakeResources(coins: FakeResources[]): Array<Resource>;
    /**
     * Sets the configurable constants for the predicate.
     *
     * @param bytes - The bytes of the predicate.
     * @param configurableConstants - Configurable constants to be set.
     * @param abiInterface - The ABI interface of the predicate.
     * @returns The mutated bytes with the configurable constants set.
     */
    private static setConfigurableConstants;
    /**
     * Returns the index of the witness placeholder that was added to this predicate.
     * If no witness placeholder was added, it returns -1.
     * @param request - The transaction request.
     * @returns The index of the witness placeholder, or -1 if there is no witness placeholder.
     */
    private getIndexFromPlaceholderWitness;
    /**
     *
     * @param account - The account used to pay the deployment costs.
     * @returns The _blobId_ and a _waitForResult_ callback that returns the deployed predicate
     * once the blob deployment transaction finishes.
     *
     * The returned loader predicate will have the same configurable constants
     * as the original predicate which was used to generate the loader predicate.
     */
    deploy<T = this>(account: Account): Promise<{
        waitForResult: () => Promise<T>;
        blobId: string;
    }>;
}
//# sourceMappingURL=predicate.d.ts.map