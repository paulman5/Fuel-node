{"version":3,"sources":["../src/test-utils.ts","../src/test-utils/launchNode.ts","../src/signer/signer.ts","../src/test-utils/setup-test-provider-and-wallets.ts","../src/providers/coin-quantity.ts","../src/providers/provider.ts","../src/providers/__generated__/operations.ts","../src/providers/fuel-graphql-subscriber.ts","../src/providers/resource-cache.ts","../src/providers/transaction-request/input.ts","../src/providers/transaction-request/output.ts","../src/providers/transaction-request/transaction-request.ts","../src/providers/message.ts","../src/providers/resource.ts","../src/providers/utils/receipts.ts","../src/providers/utils/block-explorer.ts","../src/providers/utils/gas.ts","../src/providers/utils/json.ts","../src/providers/utils/extract-tx-error.ts","../src/providers/transaction-request/errors.ts","../src/providers/transaction-request/helpers.ts","../src/providers/transaction-request/witness.ts","../src/providers/transaction-request/blob-transaction-request.ts","../src/providers/transaction-request/hash-transaction.ts","../src/providers/transaction-request/create-transaction-request.ts","../src/providers/transaction-request/storage-slot.ts","../src/providers/transaction-request/script-transaction-request.ts","../src/providers/transaction-request/scripts.ts","../src/providers/transaction-request/upgrade-transaction-request.ts","../src/providers/transaction-request/upload-transaction-request.ts","../src/providers/transaction-request/utils.ts","../src/providers/transaction-response/transaction-response.ts","../src/providers/transaction-summary/assemble-transaction-summary.ts","../src/providers/transaction-summary/calculate-tx-fee-for-summary.ts","../src/providers/transaction-summary/operations.ts","../src/providers/transaction-summary/call.ts","../src/providers/transaction-summary/input.ts","../src/providers/transaction-summary/output.ts","../src/providers/transaction-summary/receipt.ts","../src/providers/transaction-summary/status.ts","../src/providers/transaction-response/getDecodedLogs.ts","../src/providers/utils/auto-retry-fetch.ts","../src/providers/utils/handle-gql-error-message.ts","../src/providers/utils/validate-pagination-args.ts","../src/providers/transaction-summary/get-transaction-summary.ts","../src/providers/chains.ts","../src/providers/assets/utils/url.ts","../src/providers/assets/utils/resolveIconPaths.ts","../src/providers/assets/utils/fuelAssetsBaseUrl.ts","../src/providers/assets/assets.ts","../src/test-utils/test-asset-id.ts","../src/test-utils/wallet-config.ts","../src/wallet/base-wallet-unlocked.ts","../src/account.ts","../src/providers/utils/merge-quantities.ts","../src/types.ts","../src/utils/formatTransferToContractScriptData.ts","../src/wallet/keystore-wallet.ts","../src/hdwallet/hdwallet.ts","../src/mnemonic/mnemonic.ts","../src/wordlists/words/english.ts","../src/mnemonic/utils.ts","../src/wallet/wallets.ts","../src/wallet/wallet.ts","../src/test-utils/test-message.ts"],"sourcesContent":["export * from './test-utils/launchNode';\nexport * from './test-utils/setup-test-provider-and-wallets';\nexport * from './test-utils/wallet-config';\nexport * from './test-utils/test-message';\nexport * from './test-utils/test-asset-id';\n","import { BYTES_32 } from '@fuel-ts/abi-coder';\nimport { randomBytes, randomUUID } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { SnapshotConfigs } from '@fuel-ts/utils';\nimport { defaultConsensusKey, hexlify, defaultSnapshotConfigs } from '@fuel-ts/utils';\nimport { existsSync, mkdirSync, rmSync, writeFileSync } from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { Signer } from '../signer';\n\nconst getFlagValueFromArgs = (args: string[], flag: string) => {\n  const flagIndex = args.indexOf(flag);\n  if (flagIndex === -1) {\n    return undefined;\n  }\n  return args[flagIndex + 1];\n};\n\nconst extractRemainingArgs = (args: string[], flagsToRemove: string[]) => {\n  const newArgs = [...args];\n  flagsToRemove.forEach((flag) => {\n    const flagIndex = newArgs.indexOf(flag);\n    if (flagIndex !== -1) {\n      newArgs.splice(flagIndex, 2);\n    }\n  });\n  return newArgs;\n};\n\nexport type LaunchNodeOptions = {\n  ip?: string;\n  port?: string;\n  args?: string[];\n  fuelCorePath?: string;\n  loggingEnabled?: boolean;\n  basePath?: string;\n  /**\n   * The snapshot configuration to use.\n   * Passing in a snapshot configuration path via the `--snapshot` flag in `args` will override this.\n   * */\n  snapshotConfig?: SnapshotConfigs;\n  includeInitialState?: boolean;\n  killProcessOnExit?: boolean;\n};\n\nexport type LaunchNodeResult = Promise<{\n  cleanup: () => void;\n  ip: string;\n  port: string;\n  url: string;\n  snapshotDir: string;\n  pid: number;\n}>;\n\nfunction getFinalStateConfigJSON({\n  stateConfig,\n  chainConfig,\n  includeInitialState = false,\n}: SnapshotConfigs & { includeInitialState?: boolean }) {\n  const defaultCoins = defaultSnapshotConfigs.stateConfig.coins.map((coin) => ({\n    ...coin,\n    amount: '18446744073709551615',\n  }));\n  const defaultMessages = defaultSnapshotConfigs.stateConfig.messages.map((message) => ({\n    ...message,\n    amount: '18446744073709551615',\n  }));\n\n  const coins = defaultCoins\n    .concat(stateConfig.coins.map((coin) => ({ ...coin, amount: coin.amount.toString() })))\n    .filter((coin, index, self) => self.findIndex((c) => c.tx_id === coin.tx_id) === index);\n  const messages = defaultMessages\n    .concat(stateConfig.messages.map((msg) => ({ ...msg, amount: msg.amount.toString() })))\n    .filter((msg, index, self) => self.findIndex((m) => m.nonce === msg.nonce) === index);\n\n  if (includeInitialState) {\n    // Funds a couple of wallets. Useful for tools like the fuels CLI and create fuels.\n    coins.push({\n      tx_id: '0x0000000000000000000000000000000000000000000000000000000000000001',\n      output_index: 0,\n      tx_pointer_block_height: 0,\n      tx_pointer_tx_idx: 0,\n      owner: '0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d',\n      amount: '18446744073709551615',\n      asset_id: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n    });\n    coins.push({\n      tx_id: '0x0000000000000000000000000000000000000000000000000000000000000002',\n      output_index: 0,\n      tx_pointer_block_height: 0,\n      tx_pointer_tx_idx: 0,\n      owner: '0x09c0b2d1a486c439a87bcba6b46a7a1a23f3897cc83a94521a96da5c23bc58db',\n      amount: '18446744073709551615',\n      asset_id: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n    });\n  }\n\n  // If there's no genesis key, generate one and some coins to the genesis block.\n  if (!process.env.GENESIS_SECRET) {\n    const pk = Signer.generatePrivateKey();\n    const signer = new Signer(pk);\n    process.env.GENESIS_SECRET = hexlify(pk);\n\n    coins.push({\n      tx_id: hexlify(randomBytes(BYTES_32)),\n      owner: signer.address.toHexString(),\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      amount: '18446744073709551615' as any,\n      asset_id: chainConfig.consensus_parameters.V2.base_asset_id,\n      output_index: 0,\n      tx_pointer_block_height: 0,\n      tx_pointer_tx_idx: 0,\n    });\n  }\n  const json = JSON.stringify({\n    ...stateConfig,\n    coins,\n    messages,\n  });\n\n  const regexMakeNumber = /(\"amount\":)\"(\\d+)\"/gm;\n  return json.replace(regexMakeNumber, '$1$2');\n}\n\n// #region launchNode-launchNodeOptions\n/**\n * Launches a fuel-core node.\n * @param ip - the ip to bind to. (optional, defaults to 0.0.0.0)\n * @param port - the port to bind to. (optional, defaults to 4000 or the next available port)\n * @param args - additional arguments to pass to fuel-core.\n * @param fuelCorePath - the path to the fuel-core binary. (optional, defaults to 'fuel-core')\n * @param loggingEnabled - whether the node should output logs. (optional, defaults to true)\n * @param basePath - the base path to use for the temporary folder. (optional, defaults to os.tmpdir())\n * @param includeInitialState - whether to initialise the chain with some default initial state. (optional, defaults to false)\n * */\n// #endregion launchNode-launchNodeOptions\nexport const launchNode = async ({\n  ip,\n  port,\n  args = [],\n  fuelCorePath = process.env.FUEL_CORE_PATH || undefined,\n  loggingEnabled = true,\n  basePath,\n  snapshotConfig = defaultSnapshotConfigs,\n  includeInitialState = false,\n  killProcessOnExit = false,\n}: LaunchNodeOptions = {}): LaunchNodeResult =>\n  // eslint-disable-next-line no-async-promise-executor\n  new Promise(async (resolve, reject) => {\n    // filter out the flags chain, consensus-key, db-type, and poa-instant. we don't want to pass them twice to fuel-core. see line 214.\n    const remainingArgs = extractRemainingArgs(args, [\n      '--snapshot',\n      '--consensus-key',\n      '--db-type',\n      '--poa-instant',\n      '--min-gas-price',\n      '--native-executor-version',\n    ]);\n\n    const snapshotDir = getFlagValueFromArgs(args, '--snapshot');\n    const consensusKey = getFlagValueFromArgs(args, '--consensus-key') || defaultConsensusKey;\n\n    const dbTypeFlagValue = getFlagValueFromArgs(args, '--db-type');\n    const useInMemoryDb = dbTypeFlagValue === 'in-memory' || dbTypeFlagValue === undefined;\n\n    const poaInstantFlagValue = getFlagValueFromArgs(args, '--poa-instant');\n    const poaInstant = poaInstantFlagValue === 'true' || poaInstantFlagValue === undefined;\n\n    const nativeExecutorVersion = getFlagValueFromArgs(args, '--native-executor-version') || '0';\n\n    const minGasPrice = getFlagValueFromArgs(args, '--min-gas-price') || '1';\n\n    // This string is logged by the client when the node has successfully started. We use it to know when to resolve.\n    const graphQLStartSubstring = 'Binding GraphQL provider to';\n\n    const command = fuelCorePath || 'fuel-core';\n\n    const ipToUse = ip || '0.0.0.0';\n\n    const portToUse = port || '0';\n\n    let snapshotDirToUse: string;\n\n    const prefix = basePath || os.tmpdir();\n    const suffix = basePath ? '' : randomUUID();\n    const tempDir = path.join(prefix, '.fuels', suffix, 'snapshotDir');\n\n    if (snapshotDir) {\n      snapshotDirToUse = snapshotDir;\n    } else {\n      if (!existsSync(tempDir)) {\n        mkdirSync(tempDir, { recursive: true });\n      }\n      const { metadata } = snapshotConfig;\n\n      const metadataPath = path.join(tempDir, 'metadata.json');\n      const chainConfigPath = path.join(tempDir, metadata.chain_config);\n      const stateConfigPath = path.join(tempDir, metadata.table_encoding.Json.filepath);\n      const stateTransitionPath = path.join(tempDir, 'state_transition_bytecode.wasm');\n\n      writeFileSync(chainConfigPath, JSON.stringify(snapshotConfig.chainConfig), 'utf8');\n      writeFileSync(\n        stateConfigPath,\n        getFinalStateConfigJSON({\n          ...snapshotConfig,\n          includeInitialState,\n        }),\n        'utf8'\n      );\n      writeFileSync(metadataPath, JSON.stringify(metadata), 'utf8');\n      writeFileSync(stateTransitionPath, JSON.stringify(''));\n\n      snapshotDirToUse = tempDir;\n    }\n\n    const { spawn } = await import('child_process');\n\n    const child = spawn(\n      command,\n      [\n        'run',\n        ['--ip', ipToUse],\n        ['--port', portToUse],\n        useInMemoryDb ? ['--db-type', 'in-memory'] : ['--db-path', tempDir],\n        ['--min-gas-price', minGasPrice],\n        poaInstant ? ['--poa-instant', 'true'] : [],\n        ['--native-executor-version', nativeExecutorVersion],\n        ['--consensus-key', consensusKey],\n        ['--snapshot', snapshotDirToUse as string],\n        '--vm-backtrace',\n        '--utxo-validation',\n        '--debug',\n        ...remainingArgs,\n      ].flat(),\n      { stdio: 'pipe', detached: true }\n    );\n\n    if (loggingEnabled) {\n      child.stderr.on('data', (chunk) => {\n        // eslint-disable-next-line no-console\n        console.log(chunk.toString());\n      });\n    }\n\n    const removeChildListeners = () => {\n      child.stderr.removeAllListeners();\n    };\n    const removeTempDir = () => {\n      if (existsSync(tempDir)) {\n        rmSync(tempDir, { recursive: true });\n      }\n    };\n\n    const childState = {\n      isDead: false,\n    };\n\n    const cleanup = () => {\n      if (childState.isDead) {\n        return;\n      }\n      childState.isDead = true;\n\n      removeChildListeners();\n\n      if (child.pid !== undefined) {\n        try {\n          process.kill(-child.pid);\n        } catch (e) {\n          const error = e as Error & { code: string };\n          if (error.code === 'ESRCH') {\n            // eslint-disable-next-line no-console\n            console.log(\n              `fuel-core node under pid ${child.pid} does not exist. The node might have been killed before cleanup was called. Exiting cleanly.`\n            );\n          } else if (error.message.includes('pid must be a positive integer')) {\n            // This is a workaround for a bug with Bun.\n            // See: https://github.com/oven-sh/bun/issues/8787\n            process.kill(+child.pid);\n          } else {\n            throw e;\n          }\n        }\n      } else {\n        // eslint-disable-next-line no-console\n        console.error('No PID available for the child process, unable to kill launched node');\n      }\n      removeTempDir();\n    };\n\n    // Look for a specific graphql start point in the output.\n    child.stderr.on('data', (chunk: string | Buffer) => {\n      const text = typeof chunk === 'string' ? chunk : chunk.toString(); // chunk is sometimes Buffer and sometimes string...\n      // Look for the graphql service start.\n      if (text.indexOf(graphQLStartSubstring) !== -1) {\n        const rows = text.split('\\n');\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const rowWithUrl = rows.find((row) => row.indexOf(graphQLStartSubstring) !== -1)!;\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const [realIp, realPort] = rowWithUrl.split(' ').at(-1)!.trim().split(':'); // e.g. \"2024-02-13T12:31:44.445844Z  INFO new{name=fuel-core}: fuel_core::graphql_api::service: 216: Binding GraphQL provider to 127.0.0.1:35039\"\n\n        // Resolve with the cleanup method.\n        resolve({\n          cleanup,\n          ip: realIp,\n          port: realPort,\n          url: `http://${realIp}:${realPort}/v1/graphql`,\n          snapshotDir: snapshotDirToUse as string,\n          pid: child.pid as number,\n        });\n      }\n      if (/error/i.test(text)) {\n        // eslint-disable-next-line no-console\n        console.log(text);\n        reject(new FuelError(FuelError.CODES.NODE_LAUNCH_FAILED, text));\n      }\n    });\n\n    // Increase the max listeners to avoid a warning\n    process.setMaxListeners(100);\n\n    // Process exit.\n    process.on('exit', cleanup);\n\n    // Catches ctrl+c event.\n    process.on('SIGINT', cleanup);\n\n    // Catches \"kill pid\" (for example: nodemon restart).\n    process.on('SIGUSR1', cleanup);\n    process.on('SIGUSR2', cleanup);\n\n    // Catches uncaught exceptions.\n    process.on('beforeExit', cleanup);\n    process.on('uncaughtException', cleanup);\n\n    child.on('exit', (code: number | null, _signal: NodeJS.Signals | null) => {\n      removeChildListeners();\n      removeTempDir();\n      if (killProcessOnExit) {\n        process.exit(code);\n      }\n    });\n    child.on('error', (err: Error) => {\n      removeChildListeners();\n      removeTempDir();\n      reject(err);\n    });\n  });\n","import { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { hash } from '@fuel-ts/hasher';\nimport { toBytes } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify, concat, arrayify } from '@fuel-ts/utils';\nimport { secp256k1 } from '@noble/curves/secp256k1';\n\nexport class Signer {\n  readonly address: Address;\n\n  readonly publicKey: string;\n\n  readonly compressedPublicKey: string;\n\n  readonly privateKey: string;\n\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey: BytesLike) {\n    // A lot of common tools do not prefix private keys with a 0x\n    if (typeof privateKey === 'string') {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = `0x${privateKey}`;\n      }\n    }\n    // Convert to byte array, normalize private key input allowing it to be BytesLike\n    // like remove 0x prefix and accept array of bytes\n    const privateKeyBytes = toBytes(privateKey, 32);\n\n    this.privateKey = hexlify(privateKeyBytes);\n\n    // Slice(1) removes the encoding scheme from the public key\n    this.publicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, false).slice(1));\n    this.compressedPublicKey = hexlify(secp256k1.getPublicKey(privateKeyBytes, true));\n    this.address = Address.fromPublicKey(this.publicKey);\n  }\n\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte.\n   * @ignore\n   * [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data: BytesLike) {\n    const signature = secp256k1.sign(arrayify(data), arrayify(this.privateKey));\n\n    const r = toBytes(`0x${signature.r.toString(16)}`, 32);\n    const s = toBytes(`0x${signature.s.toString(16)}`, 32);\n\n    // add recoveryParam to first s byte\n    s[0] |= (signature.recovery || 0) << 7;\n\n    return hexlify(concat([r, s]));\n  }\n\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point: BytesLike) {\n    const p0 = secp256k1.ProjectivePoint.fromHex(arrayify(this.compressedPublicKey));\n    const p1 = secp256k1.ProjectivePoint.fromHex(arrayify(point));\n    const result = p0.add(p1);\n    return `0x${result.toHex(true)}`;\n  }\n\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data: BytesLike, signature: BytesLike): string {\n    const signedMessageBytes = arrayify(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 0x80) >> 7;\n\n    // remove recoveryParam from s first byte\n    s[0] &= 0x7f;\n\n    const sig = new secp256k1.Signature(BigInt(hexlify(r)), BigInt(hexlify(s))).addRecoveryBit(\n      recoveryParam\n    );\n\n    const publicKey = sig.recoverPublicKey(arrayify(data)).toRawBytes(false).slice(1);\n    return hexlify(publicKey);\n  }\n\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data: BytesLike, signature: BytesLike): Address {\n    return Address.fromPublicKey(Signer.recoverPublicKey(data, signature));\n  }\n\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy?: BytesLike) {\n    return entropy ? hash(concat([randomBytes(32), arrayify(entropy)])) : randomBytes(32);\n  }\n\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey: BytesLike) {\n    const point = secp256k1.ProjectivePoint.fromHex(arrayify(publicKey));\n    return hexlify(point.toRawBytes(false).slice(1));\n  }\n}\n","import { defaultSnapshotConfigs, type SnapshotConfigs } from '@fuel-ts/utils';\nimport { mergeDeepRight } from 'ramda';\nimport type { PartialDeep } from 'type-fest';\n\nimport type { ProviderOptions } from '../providers';\nimport { Provider } from '../providers';\nimport type { WalletUnlocked } from '../wallet';\n\nimport type { LaunchNodeOptions } from './launchNode';\nimport { launchNode } from './launchNode';\nimport { TestAssetId } from './test-asset-id';\nimport type { WalletsConfigOptions } from './wallet-config';\nimport { WalletsConfig } from './wallet-config';\n\nexport interface LaunchCustomProviderAndGetWalletsOptions {\n  /** Configures the wallets that should exist in the genesis block of the `fuel-core` node. */\n  walletsConfig?: Partial<WalletsConfigOptions>;\n  /** Options for configuring the provider. */\n  providerOptions?: Partial<ProviderOptions>;\n  /** Options for configuring the test node. */\n  nodeOptions?: Partial<\n    Omit<LaunchNodeOptions, 'snapshotConfig'> & {\n      snapshotConfig: PartialDeep<SnapshotConfigs>;\n    }\n  >;\n  launchNodeServerPort?: string;\n}\n\nconst defaultWalletConfigOptions: WalletsConfigOptions = {\n  count: 2,\n  assets: [TestAssetId.A, TestAssetId.B],\n  coinsPerAsset: 1,\n  amountPerCoin: 10_000_000_000,\n  messages: [],\n};\n\nexport interface SetupTestProviderAndWalletsReturn extends Disposable {\n  wallets: WalletUnlocked[];\n  provider: Provider;\n  cleanup: () => void;\n}\n\n/**\n * Launches a test node and creates wallets for testing.\n * If initialized with the `using` keyword, the node will be killed when it goes out of scope.\n * If initialized with `const`, manual disposal of the node must be done via the `cleanup` function.\n *\n * @param options - Options for configuring the wallets, provider, and test node.\n * @returns The wallets, provider and cleanup function that kills the node.\n *\n */\nexport async function setupTestProviderAndWallets({\n  walletsConfig: walletsConfigOptions = {},\n  providerOptions,\n  nodeOptions = {},\n  launchNodeServerPort = process.env.LAUNCH_NODE_SERVER_PORT || undefined,\n}: Partial<LaunchCustomProviderAndGetWalletsOptions> = {}): Promise<SetupTestProviderAndWalletsReturn> {\n  // @ts-expect-error this is a polyfill (see https://devblogs.microsoft.com/typescript/announcing-typescript-5-2/#using-declarations-and-explicit-resource-management)\n  Symbol.dispose ??= Symbol('Symbol.dispose');\n  const walletsConfig = new WalletsConfig(\n    nodeOptions.snapshotConfig?.chainConfig?.consensus_parameters?.V2?.base_asset_id ??\n      defaultSnapshotConfigs.chainConfig.consensus_parameters.V2.base_asset_id,\n    {\n      ...defaultWalletConfigOptions,\n      ...walletsConfigOptions,\n    }\n  );\n\n  const launchNodeOptions: LaunchNodeOptions = {\n    loggingEnabled: false,\n    ...nodeOptions,\n    snapshotConfig: mergeDeepRight(\n      defaultSnapshotConfigs,\n      walletsConfig.apply(nodeOptions?.snapshotConfig)\n    ),\n    port: nodeOptions.port || '0',\n  };\n\n  let cleanup: () => void;\n  let url: string;\n  if (launchNodeServerPort) {\n    const serverUrl = `http://localhost:${launchNodeServerPort}`;\n    url = await (\n      await fetch(serverUrl, { method: 'POST', body: JSON.stringify(launchNodeOptions) })\n    ).text();\n\n    cleanup = () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      fetch(`${serverUrl}/cleanup/${url}`);\n    };\n  } else {\n    const settings = await launchNode(launchNodeOptions);\n    url = settings.url;\n    cleanup = settings.cleanup;\n  }\n\n  let provider: Provider;\n\n  try {\n    provider = new Provider(url, providerOptions);\n    await provider.init();\n  } catch (err) {\n    cleanup();\n    throw err;\n  }\n\n  const wallets = walletsConfig.wallets;\n  wallets.forEach((wallet) => {\n    wallet.connect(provider);\n  });\n\n  return {\n    provider,\n    wallets,\n    cleanup,\n    [Symbol.dispose]: cleanup,\n  };\n}\n","import type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinQuantityLike =\n  | [amount: BigNumberish, assetId: BytesLike, max?: BigNumberish]\n  | { amount: BigNumberish; assetId: BytesLike; max?: BigNumberish };\nexport type CoinQuantity = { amount: BN; assetId: string; max?: BN };\n\n/** @hidden */\nexport const coinQuantityfy = (coinQuantityLike: CoinQuantityLike): CoinQuantity => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1];\n    max = coinQuantityLike[2] ?? undefined;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId;\n    max = coinQuantityLike.max ?? undefined;\n  }\n\n  const bnAmount = bn(amount);\n  return {\n    assetId: hexlify(assetId),\n    amount: bnAmount.lt(1) ? bn(1) : bnAmount,\n    max: max ? bn(max) : undefined,\n  };\n};\n\nexport interface IAddAmountToAssetParams {\n  assetId: string;\n  amount: BN;\n  coinQuantities: CoinQuantity[];\n}\n\nexport const addAmountToCoinQuantities = (params: IAddAmountToAssetParams): CoinQuantity[] => {\n  const { amount, assetId } = params;\n\n  const coinQuantities = [...params.coinQuantities];\n\n  const assetIdx = coinQuantities.findIndex((coinQuantity) => coinQuantity.assetId === assetId);\n\n  if (assetIdx !== -1) {\n    coinQuantities[assetIdx].amount = coinQuantities[assetIdx].amount.add(amount);\n  } else {\n    coinQuantities.push({ assetId, amount });\n  }\n\n  return coinQuantities;\n};\n","import { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { BN, bn } from '@fuel-ts/math';\nimport type { Transaction } from '@fuel-ts/transactions';\nimport { InputType, InputMessageCoder, TransactionCoder } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, DateTime, isDefined } from '@fuel-ts/utils';\nimport { checkFuelCoreVersionCompatibility, versions } from '@fuel-ts/versions';\nimport { equalBytes } from '@noble/curves/abstract/utils';\nimport type { DocumentNode } from 'graphql';\nimport { GraphQLClient } from 'graphql-request';\nimport type { GraphQLClientResponse, GraphQLResponse } from 'graphql-request/src/types';\nimport gql from 'graphql-tag';\nimport { clone } from 'ramda';\n\nimport { getSdk as getOperationsSdk } from './__generated__/operations';\nimport type {\n  GqlChainInfoFragment,\n  GqlConsensusParametersVersion,\n  GqlContractParameters as ContractParameters,\n  GqlDryRunFailureStatusFragment,\n  GqlDryRunSuccessStatusFragment,\n  GqlFeeParameters as FeeParameters,\n  GqlGasCostsFragment as GasCosts,\n  GqlPredicateParameters as PredicateParameters,\n  GqlScriptParameters as ScriptParameters,\n  GqlTxParameters as TxParameters,\n  GqlPageInfo,\n  GqlRelayedTransactionFailed,\n  Requester,\n  GqlBlockFragment,\n} from './__generated__/operations';\nimport type { Coin } from './coin';\nimport type { CoinQuantity, CoinQuantityLike } from './coin-quantity';\nimport { coinQuantityfy } from './coin-quantity';\nimport { FuelGraphqlSubscriber } from './fuel-graphql-subscriber';\nimport type { Message, MessageCoin, MessageProof, MessageStatus } from './message';\nimport type { ExcludeResourcesOption, Resource } from './resource';\nimport { ResourceCache } from './resource-cache';\nimport type {\n  TransactionRequestLike,\n  TransactionRequest,\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  JsonAbisFromAllCalls,\n  ScriptTransactionRequest,\n} from './transaction-request';\nimport {\n  isTransactionTypeCreate,\n  isTransactionTypeScript,\n  transactionRequestify,\n  validateTransactionForAssetBurn,\n} from './transaction-request';\nimport type { TransactionResultReceipt } from './transaction-response';\nimport { TransactionResponse, getDecodedLogs } from './transaction-response';\nimport { processGqlReceipt } from './transaction-summary/receipt';\nimport {\n  calculateGasFee,\n  extractTxError,\n  getGasUsedFromReceipts,\n  getReceiptsWithMissingData,\n} from './utils';\nimport type { RetryOptions } from './utils/auto-retry-fetch';\nimport { autoRetryFetch } from './utils/auto-retry-fetch';\nimport { handleGqlErrorMessage } from './utils/handle-gql-error-message';\nimport { validatePaginationArgs } from './utils/validate-pagination-args';\n\nconst MAX_RETRIES = 10;\n\nexport const RESOURCES_PAGE_SIZE_LIMIT = 512;\nexport const TRANSACTIONS_PAGE_SIZE_LIMIT = 60;\nexport const BLOCKS_PAGE_SIZE_LIMIT = 5;\nexport const DEFAULT_RESOURCE_CACHE_TTL = 20_000; // 20 seconds\nexport const GAS_USED_MODIFIER = 1.2;\n\nexport type DryRunFailureStatusFragment = GqlDryRunFailureStatusFragment;\nexport type DryRunSuccessStatusFragment = GqlDryRunSuccessStatusFragment;\n\nexport type DryRunStatus = DryRunFailureStatusFragment | DryRunSuccessStatusFragment;\n\nexport type CallResult = {\n  receipts: TransactionResultReceipt[];\n  dryRunStatus?: DryRunStatus;\n};\n\nexport type EstimateTxDependenciesReturns = CallResult & {\n  outputVariables: number;\n  missingContractIds: string[];\n};\n\n/**\n * A Fuel block\n */\nexport type Block = {\n  id: string;\n  height: BN;\n  time: string;\n  transactionIds: string[];\n  header: {\n    daHeight: BN;\n    stateTransitionBytecodeVersion: string;\n    transactionsCount: string;\n    transactionsRoot: string;\n    messageOutboxRoot: string;\n    eventInboxRoot: string;\n    prevRoot: string;\n    applicationHash: string;\n  };\n};\n\nexport type PageInfo = GqlPageInfo;\n\nexport type GetCoinsResponse = {\n  coins: Coin[];\n  pageInfo: PageInfo;\n};\n\nexport type GetMessagesResponse = {\n  messages: Message[];\n  pageInfo: PageInfo;\n};\n\nexport type GetBalancesResponse = {\n  balances: CoinQuantity[];\n};\n\nexport type GetTransactionsResponse = {\n  transactions: Transaction[];\n  pageInfo: PageInfo;\n};\n\nexport type GetBlocksResponse = {\n  blocks: Block[];\n  pageInfo: PageInfo;\n};\n\n/**\n * Deployed Contract bytecode and contract id\n */\nexport type ContractResult = {\n  id: string;\n  bytecode: string;\n};\n\ntype ModifyStringToBN<T> = {\n  [P in keyof T]: P extends 'version' ? T[P] : T[P] extends string ? BN : T[P];\n};\n\nexport {\n  GasCosts,\n  FeeParameters,\n  ContractParameters,\n  PredicateParameters,\n  ScriptParameters,\n  TxParameters,\n};\n\nexport type ConsensusParameters = {\n  version: GqlConsensusParametersVersion;\n  chainId: BN;\n  baseAssetId: string;\n  feeParameters: ModifyStringToBN<FeeParameters>;\n  contractParameters: ModifyStringToBN<ContractParameters>;\n  predicateParameters: ModifyStringToBN<PredicateParameters>;\n  scriptParameters: ModifyStringToBN<ScriptParameters>;\n  txParameters: ModifyStringToBN<TxParameters>;\n  gasCosts: GasCosts;\n};\n\n/**\n * Chain information\n */\nexport type ChainInfo = {\n  name: string;\n  baseChainHeight: BN;\n  consensusParameters: ConsensusParameters;\n};\n\n/**\n * Node information\n */\nexport type NodeInfo = {\n  utxoValidation: boolean;\n  vmBacktrace: boolean;\n  maxTx: BN;\n  maxDepth: BN;\n  nodeVersion: string;\n};\n\nexport type NodeInfoAndConsensusParameters = {\n  nodeVersion: string;\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  maxGasPerTx: BN;\n};\n\n// #region cost-estimation-1\nexport type TransactionCost = {\n  gasPrice: BN;\n  gasUsed: BN;\n  minGas: BN;\n  minFee: BN;\n  maxFee: BN;\n  maxGas: BN;\n  receipts: TransactionResultReceipt[];\n  outputVariables: number;\n  missingContractIds: string[];\n  estimatedPredicates: TransactionRequestInput[];\n  requiredQuantities: CoinQuantity[];\n  addedSignatures: number;\n  dryRunStatus?: DryRunStatus;\n  updateMaxFee?: boolean;\n};\n// #endregion cost-estimation-1\n\nconst processGqlChain = (chain: GqlChainInfoFragment): ChainInfo => {\n  const { name, daHeight, consensusParameters } = chain;\n\n  const {\n    contractParams,\n    feeParams,\n    predicateParams,\n    scriptParams,\n    txParams,\n    gasCosts,\n    baseAssetId,\n    chainId,\n    version,\n  } = consensusParameters;\n\n  return {\n    name,\n    baseChainHeight: bn(daHeight),\n    consensusParameters: {\n      version,\n      chainId: bn(chainId),\n      baseAssetId,\n      feeParameters: {\n        version: feeParams.version,\n        gasPerByte: bn(feeParams.gasPerByte),\n        gasPriceFactor: bn(feeParams.gasPriceFactor),\n      },\n      contractParameters: {\n        version: contractParams.version,\n        contractMaxSize: bn(contractParams.contractMaxSize),\n        maxStorageSlots: bn(contractParams.maxStorageSlots),\n      },\n      txParameters: {\n        version: txParams.version,\n        maxInputs: bn(txParams.maxInputs),\n        maxOutputs: bn(txParams.maxOutputs),\n        maxWitnesses: bn(txParams.maxWitnesses),\n        maxGasPerTx: bn(txParams.maxGasPerTx),\n        maxSize: bn(txParams.maxSize),\n        maxBytecodeSubsections: bn(txParams.maxBytecodeSubsections),\n      },\n      predicateParameters: {\n        version: predicateParams.version,\n        maxPredicateLength: bn(predicateParams.maxPredicateLength),\n        maxPredicateDataLength: bn(predicateParams.maxPredicateDataLength),\n        maxGasPerPredicate: bn(predicateParams.maxGasPerPredicate),\n        maxMessageDataLength: bn(predicateParams.maxMessageDataLength),\n      },\n      scriptParameters: {\n        version: scriptParams.version,\n        maxScriptLength: bn(scriptParams.maxScriptLength),\n        maxScriptDataLength: bn(scriptParams.maxScriptDataLength),\n      },\n      gasCosts,\n    },\n  };\n};\n\n/**\n * @hidden\n *\n * Cursor pagination arguments\n *\n * https://relay.dev/graphql/connections.htm#sec-Arguments\n */\nexport type CursorPaginationArgs = {\n  /** Forward pagination limit */\n  first?: number | null;\n  /** Forward pagination cursor */\n  after?: string | null;\n  /** Backward pagination limit  */\n  last?: number | null;\n  /** Backward pagination cursor */\n  before?: string | null;\n};\n\n/*\n * Provider initialization options\n */\nexport type ProviderOptions = {\n  /**\n   * Custom fetch function to use for making requests.\n   */\n  fetch?: (\n    url: string,\n    requestInit?: RequestInit,\n    providerOptions?: Omit<ProviderOptions, 'fetch'>\n  ) => Promise<Response>;\n  /**\n   * Timeout [ms] after which every request will be aborted.\n   */\n  timeout?: number;\n  /**\n   * Resources cache for the given time [ms]. If set to -1, the cache will be disabled.\n   */\n  resourceCacheTTL?: number;\n  /**\n   * Retry options to use when fetching data from the node.\n   */\n  retryOptions?: RetryOptions;\n  /**\n   * Custom headers to include in the request.\n   */\n  headers?: RequestInit['headers'];\n  /**\n   * Middleware to modify the request before it is sent.\n   * This can be used to add headers, modify the body, etc.\n   */\n  requestMiddleware?: (request: RequestInit) => RequestInit | Promise<RequestInit>;\n};\n\n/**\n * UTXO validation params\n */\nexport type UTXOValidationParams = {\n  utxoValidation?: boolean;\n};\n\n/**\n * Transaction estimation params\n */\nexport type EstimateTransactionParams = {\n  /**\n   * Estimate the transaction dependencies.\n   */\n  estimateTxDependencies?: boolean;\n};\n\nexport type TransactionCostParams = EstimateTransactionParams & {\n  /**\n   * The quantities to forward to the contract.\n   */\n  quantities?: CoinQuantity[];\n\n  /**\n   * A callback to sign the transaction.\n   *\n   * @param request - The transaction request to sign.\n   * @returns A promise that resolves to the signed transaction request.\n   */\n  signatureCallback?: (request: ScriptTransactionRequest) => Promise<ScriptTransactionRequest>;\n};\n\n/**\n * Provider Call transaction params\n */\nexport type ProviderCallParams = UTXOValidationParams & EstimateTransactionParams;\n\n/**\n * Provider Send transaction params\n */\nexport type ProviderSendTxParams = EstimateTransactionParams & {\n  /**\n   * Whether to enable asset burn for the transaction.\n   */\n  enableAssetBurn?: boolean;\n};\n\n/**\n * URL - Consensus Params mapping.\n */\ntype ChainInfoCache = Record<string, ChainInfo>;\n\n/**\n * URL - Node Info mapping.\n */\ntype NodeInfoCache = Record<string, NodeInfo>;\n\ntype Operations = ReturnType<typeof getOperationsSdk>;\n\ntype SdkOperations = Omit<Operations, 'statusChange' | 'submitAndAwaitStatus'> & {\n  statusChange: (\n    ...args: Parameters<Operations['statusChange']>\n  ) => Promise<ReturnType<Operations['statusChange']>>;\n  submitAndAwaitStatus: (\n    ...args: Parameters<Operations['submitAndAwaitStatus']>\n  ) => Promise<ReturnType<Operations['submitAndAwaitStatus']>>;\n  getBlobs: (variables: { blobIds: string[] }) => Promise<{ blob: { id: string } | null }[]>;\n};\n\n/**\n * A provider for connecting to a node\n */\nexport default class Provider {\n  operations: SdkOperations;\n  cache?: ResourceCache;\n\n  /** @hidden */\n  static clearChainAndNodeCaches() {\n    Provider.nodeInfoCache = {};\n    Provider.chainInfoCache = {};\n  }\n\n  /** @hidden */\n  public url: string;\n  /** @hidden */\n  private urlWithoutAuth: string;\n  /** @hidden */\n  private static chainInfoCache: ChainInfoCache = {};\n  /** @hidden */\n  private static nodeInfoCache: NodeInfoCache = {};\n\n  /** @hidden */\n  public consensusParametersTimestamp?: number;\n\n  options: ProviderOptions = {\n    timeout: undefined,\n    resourceCacheTTL: undefined,\n    fetch: undefined,\n    retryOptions: undefined,\n    headers: undefined,\n  };\n\n  /**\n   * @hidden\n   */\n  private static getFetchFn(options: ProviderOptions): NonNullable<ProviderOptions['fetch']> {\n    const { retryOptions, timeout, headers } = options;\n\n    return autoRetryFetch(async (...args) => {\n      const url = args[0];\n      const request = args[1];\n      const signal = timeout ? AbortSignal.timeout(timeout) : undefined;\n\n      let fullRequest: RequestInit = {\n        ...request,\n        signal,\n        headers: { ...request?.headers, ...headers },\n      };\n\n      if (options.requestMiddleware) {\n        fullRequest = await options.requestMiddleware(fullRequest);\n      }\n\n      return options.fetch ? options.fetch(url, fullRequest, options) : fetch(url, fullRequest);\n    }, retryOptions);\n  }\n\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   * @hidden\n   */\n  constructor(url: string, options: ProviderOptions = {}) {\n    const { url: rawUrl, urlWithoutAuth, headers: authHeaders } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.url = url;\n\n    const { FUELS } = versions;\n    const headers = { ...authHeaders, ...options.headers, Source: `ts-sdk-${FUELS}` };\n\n    this.options = {\n      ...this.options,\n      ...options,\n      headers,\n    };\n\n    this.operations = this.createOperations();\n    const { resourceCacheTTL } = this.options;\n    if (isDefined(resourceCacheTTL)) {\n      if (resourceCacheTTL !== -1) {\n        this.cache = new ResourceCache(resourceCacheTTL);\n      } else {\n        this.cache = undefined;\n      }\n    } else {\n      this.cache = new ResourceCache(DEFAULT_RESOURCE_CACHE_TTL);\n    }\n  }\n\n  private static extractBasicAuth(url: string): {\n    url: string;\n    urlWithoutAuth: string;\n    headers: ProviderOptions['headers'];\n  } {\n    let parsedUrl: URL;\n    try {\n      parsedUrl = new URL(url);\n    } catch (error) {\n      throw new FuelError(FuelError.CODES.INVALID_URL, 'Invalid URL provided.', { url }, error);\n    }\n\n    const username = parsedUrl.username;\n    const password = parsedUrl.password;\n    const urlWithoutAuth = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    if (!(username && password)) {\n      return { url, urlWithoutAuth: url, headers: undefined };\n    }\n\n    return {\n      url,\n      urlWithoutAuth,\n      headers: { Authorization: `Basic ${btoa(`${username}:${password}`)}` },\n    };\n  }\n\n  /**\n   * Initialize Provider async stuff\n   */\n  async init(): Promise<Provider> {\n    await this.fetchChainAndNodeInfo();\n    return this;\n  }\n\n  /**\n   * Returns the `chainInfo` for the current network.\n   *\n   * @returns the chain information configuration.\n   */\n  async getChain(): Promise<ChainInfo> {\n    await this.init();\n    return Provider.chainInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns the `nodeInfo` for the current network.\n   *\n   * @returns the node information configuration.\n   */\n  async getNode(): Promise<NodeInfo> {\n    await this.init();\n    return Provider.nodeInfoCache[this.urlWithoutAuth];\n  }\n\n  /**\n   * Returns some helpful parameters related to gas fees.\n   */\n  async getGasConfig() {\n    const {\n      txParameters: { maxGasPerTx },\n      predicateParameters: { maxGasPerPredicate },\n      feeParameters: { gasPriceFactor, gasPerByte },\n      gasCosts,\n    } = (await this.getChain()).consensusParameters;\n\n    return {\n      maxGasPerTx,\n      maxGasPerPredicate,\n      gasPriceFactor,\n      gasPerByte,\n      gasCosts,\n    };\n  }\n\n  /**\n   * Updates the URL for the provider and fetches the consensus parameters for the new URL, if needed.\n   *\n   * @param url - The URL to connect to.\n   * @param options - Additional options for the provider.\n   */\n  async connect(url: string, options?: ProviderOptions): Promise<void> {\n    const { url: rawUrl, urlWithoutAuth, headers } = Provider.extractBasicAuth(url);\n\n    this.url = rawUrl;\n    this.urlWithoutAuth = urlWithoutAuth;\n    this.options = options ?? this.options;\n    this.options = { ...this.options, headers: { ...this.options.headers, ...headers } };\n\n    this.operations = this.createOperations();\n\n    await this.init();\n  }\n\n  /**\n   * Return the chain and node information.\n   * @param ignoreCache - If true, ignores the cache and re-fetch configs.\n   * @returns A promise that resolves to the Chain and NodeInfo.\n   */\n  async fetchChainAndNodeInfo(ignoreCache: boolean = false) {\n    let nodeInfo: NodeInfo;\n    let chain: ChainInfo;\n\n    try {\n      nodeInfo = Provider.nodeInfoCache[this.urlWithoutAuth];\n      chain = Provider.chainInfoCache[this.urlWithoutAuth];\n\n      const noCache = !nodeInfo || !chain;\n\n      if (ignoreCache || noCache) {\n        throw new Error(`Jumps to the catch block and re-fetch`);\n      }\n    } catch (_err) {\n      const data = await this.operations.getChainAndNodeInfo();\n\n      nodeInfo = {\n        maxDepth: bn(data.nodeInfo.maxDepth),\n        maxTx: bn(data.nodeInfo.maxTx),\n        nodeVersion: data.nodeInfo.nodeVersion,\n        utxoValidation: data.nodeInfo.utxoValidation,\n        vmBacktrace: data.nodeInfo.vmBacktrace,\n      };\n\n      Provider.ensureClientVersionIsSupported(nodeInfo);\n\n      chain = processGqlChain(data.chain);\n\n      Provider.chainInfoCache[this.urlWithoutAuth] = chain;\n      Provider.nodeInfoCache[this.urlWithoutAuth] = nodeInfo;\n\n      this.consensusParametersTimestamp = Date.now();\n    }\n\n    return {\n      chain,\n      nodeInfo,\n    };\n  }\n\n  /**\n   * @hidden\n   */\n  private static ensureClientVersionIsSupported(nodeInfo: NodeInfo) {\n    const { isMajorSupported, isMinorSupported, supportedVersion } =\n      checkFuelCoreVersionCompatibility(nodeInfo.nodeVersion);\n\n    if (!isMajorSupported || !isMinorSupported) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `The Fuel Node that you are trying to connect to is using fuel-core version ${nodeInfo.nodeVersion},\nwhich is not supported by the version of the TS SDK that you are using.\nThings may not work as expected.\nSupported fuel-core version: ${supportedVersion}.`\n      );\n    }\n  }\n\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @returns The operation SDK object\n   * @hidden\n   */\n  private createOperations(): SdkOperations {\n    const fetchFn = Provider.getFetchFn(this.options);\n    const gqlClient = new GraphQLClient(this.urlWithoutAuth, {\n      fetch: (input: RequestInfo | URL, requestInit?: RequestInit) =>\n        fetchFn(input.toString(), requestInit || {}, this.options),\n      responseMiddleware: (response: GraphQLClientResponse<unknown> | Error) => {\n        if ('response' in response) {\n          const graphQlResponse = response.response as GraphQLResponse;\n\n          if (Array.isArray(graphQlResponse?.errors)) {\n            for (const error of graphQlResponse.errors) {\n              handleGqlErrorMessage(error.message, error);\n            }\n          }\n        }\n      },\n    });\n\n    const executeQuery = (query: DocumentNode, vars: Record<string, unknown>) => {\n      const opDefinition = query.definitions.find((x) => x.kind === 'OperationDefinition') as {\n        operation: string;\n      };\n      const isSubscription = opDefinition?.operation === 'subscription';\n\n      if (isSubscription) {\n        return FuelGraphqlSubscriber.create({\n          url: this.urlWithoutAuth,\n          query,\n          fetchFn: (url, requestInit) => fetchFn(url as string, requestInit, this.options),\n          variables: vars,\n        });\n      }\n      return gqlClient.request(query, vars);\n    };\n\n    const customOperations = (requester: Requester) => ({\n      getBlobs(variables: { blobIds: string[] }) {\n        const queryParams = variables.blobIds.map((_, i) => `$blobId${i}: BlobId!`).join(', ');\n        const blobParams = variables.blobIds\n          .map((_, i) => `blob${i}: blob(id: $blobId${i}) { id }`)\n          .join('\\n');\n\n        const updatedVariables = variables.blobIds.reduce(\n          (acc, blobId, i) => {\n            acc[`blobId${i}`] = blobId;\n            return acc;\n          },\n          {} as Record<string, string>\n        );\n\n        const document = gql`\n          query getBlobs(${queryParams}) {\n            ${blobParams}\n          }\n        `;\n\n        return requester(document, updatedVariables);\n      },\n    });\n\n    // @ts-expect-error This is due to this function being generic. Its type is specified when calling a specific operation via provider.operations.xyz.\n    return { ...getOperationsSdk(executeQuery), ...customOperations(executeQuery) };\n  }\n\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion(): Promise<string> {\n    const {\n      nodeInfo: { nodeVersion },\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n\n  /**\n   * Returns the latest block number.\n   *\n   * @returns A promise that resolves to the latest block number.\n   */\n  async getBlockNumber(): Promise<BN> {\n    const {\n      chain: {\n        latestBlock: { height },\n      },\n    } = await this.operations.getLatestBlockHeight();\n    return bn(height);\n  }\n\n  /**\n   * Returns the node information for the current provider network.\n   *\n   * @returns a promise that resolves to the node information.\n   */\n  async fetchNode(): Promise<NodeInfo> {\n    const { nodeInfo } = await this.operations.getNodeInfo();\n\n    const processedNodeInfo: NodeInfo = {\n      maxDepth: bn(nodeInfo.maxDepth),\n      maxTx: bn(nodeInfo.maxTx),\n      nodeVersion: nodeInfo.nodeVersion,\n      utxoValidation: nodeInfo.utxoValidation,\n      vmBacktrace: nodeInfo.vmBacktrace,\n    };\n\n    Provider.nodeInfoCache[this.urlWithoutAuth] = processedNodeInfo;\n\n    return processedNodeInfo;\n  }\n\n  /**\n   * Returns the chain information for the current provider network.\n   *\n   * @returns a promise that resolves to the chain information.\n   */\n  async fetchChain(): Promise<ChainInfo> {\n    const { chain } = await this.operations.getChain();\n\n    const processedChain = processGqlChain(chain);\n\n    Provider.chainInfoCache[this.urlWithoutAuth] = processedChain;\n\n    return processedChain;\n  }\n\n  /**\n   * Returns the chain ID for the current provider network.\n   *\n   * @returns A promise that resolves to the chain ID number.\n   */\n  async getChainId() {\n    const {\n      consensusParameters: { chainId },\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n\n  /**\n   * Returns the base asset ID for the current provider network.\n   *\n   * @returns the base asset ID.\n   */\n  async getBaseAssetId() {\n    const all = await this.getChain();\n    const {\n      consensusParameters: { baseAssetId },\n    } = all;\n    return baseAssetId;\n  }\n\n  /**\n   * @hidden\n   */\n  #cacheInputs(inputs: TransactionRequestInput[], transactionId: string): void {\n    if (!this.cache) {\n      return;\n    }\n\n    const inputsToCache = inputs.reduce(\n      (acc, input) => {\n        if (input.type === InputType.Coin) {\n          acc.utxos.push(input.id);\n        } else if (input.type === InputType.Message) {\n          acc.messages.push(input.nonce);\n        }\n        return acc;\n      },\n      { utxos: [], messages: [] } as Required<ExcludeResourcesOption>\n    );\n\n    this.cache.set(transactionId, inputsToCache);\n  }\n\n  /**\n   * @hidden\n   */\n  async validateTransaction(tx: TransactionRequest) {\n    const {\n      consensusParameters: {\n        txParameters: { maxInputs, maxOutputs },\n      },\n    } = await this.getChain();\n    if (bn(tx.inputs.length).gt(maxInputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_INPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of inputs. Tx inputs: ${tx.inputs.length}, max inputs: ${maxInputs}`\n      );\n    }\n\n    if (bn(tx.outputs.length).gt(maxOutputs)) {\n      throw new FuelError(\n        ErrorCode.MAX_OUTPUTS_EXCEEDED,\n        `The transaction exceeds the maximum allowed number of outputs. Tx outputs: ${tx.outputs.length}, max outputs: ${maxOutputs}`\n      );\n    }\n  }\n\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response object.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n\n    if (estimateTxDependencies) {\n      await this.estimateTxDependencies(transactionRequest);\n    }\n\n    await this.validateTransaction(transactionRequest);\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n\n    let abis: JsonAbisFromAllCalls | undefined;\n\n    if (isTransactionTypeScript(transactionRequest)) {\n      abis = transactionRequest.abis;\n    }\n    const subscription = await this.operations.submitAndAwaitStatus({ encodedTransaction });\n\n    this.#cacheInputs(\n      transactionRequest.inputs,\n      transactionRequest.getTransactionId(await this.getChainId())\n    );\n\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionRequest, this, chainId, abis, subscription);\n  }\n\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async dryRun(\n    transactionRequestLike: TransactionRequestLike,\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions: encodedTransaction,\n      utxoValidation: utxoValidation || false,\n    });\n    const [{ receipts: rawReceipts, status: dryRunStatus }] = dryRunStatuses;\n    const receipts = rawReceipts.map(processGqlReceipt);\n\n    return { receipts, dryRunStatus };\n  }\n\n  /**\n   * Verifies whether enough gas is available to complete transaction.\n   *\n   * @template T - The type of the transaction request object.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimated transaction request object.\n   */\n  async estimatePredicates<T extends TransactionRequest>(transactionRequest: T): Promise<T> {\n    const shouldEstimatePredicates = Boolean(\n      transactionRequest.inputs.find(\n        (input) =>\n          'predicate' in input &&\n          input.predicate &&\n          !equalBytes(arrayify(input.predicate), arrayify('0x')) &&\n          new BN(input.predicateGasUsed).isZero()\n      )\n    );\n    if (!shouldEstimatePredicates) {\n      return transactionRequest;\n    }\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction,\n    });\n\n    const {\n      estimatePredicates: { inputs },\n    } = response;\n\n    if (inputs) {\n      inputs.forEach((input, index) => {\n        if ('predicateGasUsed' in input && bn(input.predicateGasUsed).gt(0)) {\n          // eslint-disable-next-line no-param-reassign\n          (<CoinTransactionRequestInput>transactionRequest.inputs[index]).predicateGasUsed =\n            input.predicateGasUsed;\n        }\n      });\n    }\n\n    return transactionRequest;\n  }\n\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimate transaction dependencies.\n   */\n  async estimateTxDependencies(\n    transactionRequest: TransactionRequest\n  ): Promise<EstimateTxDependenciesReturns> {\n    if (isTransactionTypeCreate(transactionRequest)) {\n      return {\n        receipts: [],\n        outputVariables: 0,\n        missingContractIds: [],\n      };\n    }\n\n    let receipts: TransactionResultReceipt[] = [];\n    const missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let dryRunStatus: DryRunStatus | undefined;\n\n    await this.validateTransaction(transactionRequest);\n\n    for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {\n      const {\n        dryRun: [{ receipts: rawReceipts, status }],\n      } = await this.operations.dryRun({\n        encodedTransactions: [hexlify(transactionRequest.toTransactionBytes())],\n        utxoValidation: false,\n        gasPrice: '0',\n      });\n\n      receipts = rawReceipts.map(processGqlReceipt);\n      dryRunStatus = status;\n\n      const { missingOutputVariables, missingOutputContractIds } =\n        getReceiptsWithMissingData(receipts);\n\n      const hasMissingOutputs =\n        missingOutputVariables.length !== 0 || missingOutputContractIds.length !== 0;\n\n      if (hasMissingOutputs && isTransactionTypeScript(transactionRequest)) {\n        outputVariables += missingOutputVariables.length;\n        transactionRequest.addVariableOutputs(missingOutputVariables.length);\n        missingOutputContractIds.forEach(({ contractId }) => {\n          transactionRequest.addContractInputAndOutput(Address.fromString(contractId));\n          missingContractIds.push(contractId);\n        });\n\n        const { maxFee } = await this.estimateTxGasAndFee({\n          transactionRequest,\n          gasPrice: bn(0),\n        });\n\n        // eslint-disable-next-line no-param-reassign\n        transactionRequest.maxFee = maxFee;\n      } else {\n        break;\n      }\n    }\n\n    return {\n      receipts,\n      outputVariables,\n      missingContractIds,\n      dryRunStatus,\n    };\n  }\n\n  /**\n   * Dry runs multiple transactions and checks for missing dependencies in batches.\n   *\n   * Transactions are dry run in batches. After each dry run, transactions requiring\n   * further modifications are identified. The method iteratively updates these transactions\n   * and performs subsequent dry runs until all dependencies for each transaction are satisfied.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @returns A promise that resolves to an array of results for each transaction.\n   */\n  async estimateMultipleTxDependencies(\n    transactionRequests: TransactionRequest[]\n  ): Promise<EstimateTxDependenciesReturns[]> {\n    const results: EstimateTxDependenciesReturns[] = transactionRequests.map(() => ({\n      receipts: [],\n      outputVariables: 0,\n      missingContractIds: [],\n      dryRunStatus: undefined,\n    }));\n\n    const allRequests = clone(transactionRequests);\n\n    // Map of original request index to its serialized transaction (for ScriptTransactionRequest only)\n    const serializedTransactionsMap = new Map();\n\n    // Prepare ScriptTransactionRequests and their indices\n    allRequests.forEach((req, index) => {\n      if (isTransactionTypeScript(req)) {\n        serializedTransactionsMap.set(index, hexlify(req.toTransactionBytes()));\n      }\n    });\n\n    // Indices of ScriptTransactionRequests\n    let transactionsToProcess = Array.from(serializedTransactionsMap.keys());\n    let attempt = 0;\n\n    while (transactionsToProcess.length > 0 && attempt < MAX_RETRIES) {\n      const encodedTransactions = transactionsToProcess.map((index) =>\n        serializedTransactionsMap.get(index)\n      );\n      const dryRunResults = await this.operations.dryRun({\n        encodedTransactions,\n        utxoValidation: false,\n      });\n\n      const nextRoundTransactions = [];\n\n      for (let i = 0; i < dryRunResults.dryRun.length; i++) {\n        const requestIdx = transactionsToProcess[i];\n        const { receipts: rawReceipts, status } = dryRunResults.dryRun[i];\n        const result = results[requestIdx];\n        result.receipts = rawReceipts.map(processGqlReceipt);\n        result.dryRunStatus = status;\n        const { missingOutputVariables, missingOutputContractIds } = getReceiptsWithMissingData(\n          result.receipts\n        );\n        const hasMissingOutputs =\n          missingOutputVariables.length > 0 || missingOutputContractIds.length > 0;\n        const request = allRequests[requestIdx];\n        if (hasMissingOutputs && isTransactionTypeScript(request)) {\n          result.outputVariables += missingOutputVariables.length;\n          request.addVariableOutputs(missingOutputVariables.length);\n          missingOutputContractIds.forEach(({ contractId }) => {\n            request.addContractInputAndOutput(Address.fromString(contractId));\n            result.missingContractIds.push(contractId);\n          });\n          const { maxFee } = await this.estimateTxGasAndFee({\n            transactionRequest: request,\n          });\n          request.maxFee = maxFee;\n          // Prepare for the next round of dry run\n          serializedTransactionsMap.set(requestIdx, hexlify(request.toTransactionBytes()));\n          nextRoundTransactions.push(requestIdx);\n        }\n      }\n\n      transactionsToProcess = nextRoundTransactions;\n      attempt += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Dry runs multiple transactions.\n   *\n   * @param transactionRequests - Array of transaction request objects.\n   * @param sendTransactionParams - The provider call parameters (optional).\n   *\n   * @returns A promise that resolves to an array of results for each transaction call.\n   */\n  async dryRunMultipleTransactions(\n    transactionRequests: TransactionRequest[],\n    { utxoValidation, estimateTxDependencies = true }: ProviderCallParams = {}\n  ): Promise<CallResult[]> {\n    if (estimateTxDependencies) {\n      return this.estimateMultipleTxDependencies(transactionRequests);\n    }\n    const encodedTransactions = transactionRequests.map((tx) => hexlify(tx.toTransactionBytes()));\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: utxoValidation || false,\n    });\n\n    const results = dryRunStatuses.map(({ receipts: rawReceipts, status }) => {\n      const receipts = rawReceipts.map(processGqlReceipt);\n      return { receipts, dryRunStatus: status };\n    });\n\n    return results;\n  }\n\n  public async autoRefetchConfigs() {\n    const now = Date.now();\n    const diff = now - (this.consensusParametersTimestamp ?? 0);\n\n    if (diff < 60000) {\n      return;\n    }\n\n    // no cache? refetch.\n    if (!Provider.chainInfoCache?.[this.urlWithoutAuth]) {\n      await this.fetchChainAndNodeInfo(true);\n      return;\n    }\n\n    const chainInfo = Provider.chainInfoCache[this.urlWithoutAuth];\n\n    const {\n      consensusParameters: { version: previous },\n    } = chainInfo;\n\n    const {\n      chain: {\n        latestBlock: {\n          header: { consensusParametersVersion: current },\n        },\n      },\n    } = await this.operations.getConsensusParametersVersion();\n\n    // old cache? refetch.\n    if (previous !== current) {\n      // calling with true to skip cache\n      await this.fetchChainAndNodeInfo(true);\n    }\n  }\n\n  /**\n   * Estimates the transaction gas and fee based on the provided transaction request.\n   * @param transactionRequest - The transaction request object.\n   * @returns An object containing the estimated minimum gas, minimum fee, maximum gas, and maximum fee.\n   */\n  async estimateTxGasAndFee(params: { transactionRequest: TransactionRequest; gasPrice?: BN }) {\n    const { transactionRequest } = params;\n    let { gasPrice } = params;\n\n    await this.autoRefetchConfigs();\n\n    const chainInfo = await this.getChain();\n    const { gasPriceFactor, maxGasPerTx } = await this.getGasConfig();\n\n    const minGas = transactionRequest.calculateMinGas(chainInfo);\n    if (!isDefined(gasPrice)) {\n      gasPrice = await this.estimateGasPrice(10);\n    }\n\n    const minFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: minGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    let gasLimit = bn(0);\n\n    // Only Script transactions consume gas\n    if (isTransactionTypeScript(transactionRequest)) {\n      // If the gasLimit is set to 0, it means we need to estimate it.\n      gasLimit = transactionRequest.gasLimit;\n      if (transactionRequest.gasLimit.eq(0)) {\n        transactionRequest.gasLimit = minGas;\n\n        /*\n         * Adjusting the gasLimit of a transaction (TX) impacts its maxGas.\n         * Consequently, this affects the maxFee, as it is derived from the maxGas. To accurately estimate the\n         * gasLimit for a transaction, especially when the exact gas consumption is uncertain (as in an estimation dry-run),\n         * the following steps are required:\n         * 1 - Initially, set the gasLimit using the calculated minGas.\n         * 2 - Based on this initial gasLimit, calculate the maxGas.\n         * 3 - Get the maximum gas per transaction allowed by the chain, and subtract the previously calculated maxGas from this limit.\n         * 4 - The result of this subtraction should then be adopted as the new, definitive gasLimit.\n         * 5 - Recalculate the maxGas with the updated gasLimit. This new maxGas is then used to compute the maxFee.\n         * 6 - The calculated maxFee represents the safe, estimated cost required to fund the transaction.\n         */\n        transactionRequest.gasLimit = maxGasPerTx.sub(\n          transactionRequest.calculateMaxGas(chainInfo, minGas)\n        );\n\n        gasLimit = transactionRequest.gasLimit;\n      }\n    }\n    const maxGas = transactionRequest.calculateMaxGas(chainInfo, minGas);\n    const maxFee = calculateGasFee({\n      gasPrice: bn(gasPrice),\n      gas: maxGas,\n      priceFactor: gasPriceFactor,\n      tip: transactionRequest.tip,\n    }).add(1);\n\n    return {\n      minGas,\n      minFee,\n      maxGas,\n      maxFee,\n      gasPrice,\n      gasLimit,\n    };\n  }\n\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      return this.estimateTxDependencies(transactionRequest);\n    }\n    const encodedTransactions = [hexlify(transactionRequest.toTransactionBytes())];\n\n    const { dryRun: dryRunStatuses } = await this.operations.dryRun({\n      encodedTransactions,\n      utxoValidation: true,\n    });\n\n    const callResult = dryRunStatuses.map((dryRunStatus) => {\n      const { id, receipts, status } = dryRunStatus;\n\n      const processedReceipts = receipts.map(processGqlReceipt);\n\n      return { id, receipts: processedReceipts, status };\n    });\n\n    return { receipts: callResult[0].receipts };\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback }: TransactionCostParams = {}\n  ): Promise<Omit<TransactionCost, 'requiredQuantities'>> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const updateMaxFee = txRequestClone.maxFee.eq(0);\n    const isScriptTransaction = isTransactionTypeScript(txRequestClone);\n\n    // Remove gasLimit to avoid gasLimit when estimating predicates\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = bn(0);\n    }\n\n    const signedRequest = clone(txRequestClone);\n    let addedSignatures = 0;\n    if (signatureCallback && isTransactionTypeScript(signedRequest)) {\n      const lengthBefore = signedRequest.witnesses.length;\n      await signatureCallback(signedRequest);\n      addedSignatures = signedRequest.witnesses.length - lengthBefore;\n    }\n\n    await this.estimatePredicates(signedRequest);\n    txRequestClone.updatePredicateGasUsed(signedRequest.inputs);\n\n    /**\n     * Calculate minGas and maxGas based on the real transaction\n     */\n    // eslint-disable-next-line prefer-const\n    let { maxFee, maxGas, minFee, minGas, gasPrice, gasLimit } = await this.estimateTxGasAndFee({\n      transactionRequest: signedRequest,\n    });\n\n    let receipts: TransactionResultReceipt[] = [];\n    let dryRunStatus: DryRunStatus | undefined;\n    let missingContractIds: string[] = [];\n    let outputVariables = 0;\n    let gasUsed = bn(0);\n\n    txRequestClone.maxFee = maxFee;\n    if (isScriptTransaction) {\n      txRequestClone.gasLimit = gasLimit;\n      if (signatureCallback) {\n        await signatureCallback(txRequestClone);\n      }\n\n      ({ receipts, missingContractIds, outputVariables, dryRunStatus } =\n        await this.estimateTxDependencies(txRequestClone));\n\n      if (dryRunStatus && 'reason' in dryRunStatus) {\n        throw this.extractDryRunError(txRequestClone, receipts, dryRunStatus);\n      }\n\n      const { maxGasPerTx } = await this.getGasConfig();\n\n      const pristineGasUsed = getGasUsedFromReceipts(receipts);\n      gasUsed = bn(pristineGasUsed.muln(GAS_USED_MODIFIER)).max(maxGasPerTx.sub(minGas));\n      txRequestClone.gasLimit = gasUsed;\n\n      ({ maxFee, maxGas, minFee, minGas, gasPrice } = await this.estimateTxGasAndFee({\n        transactionRequest: txRequestClone,\n        gasPrice,\n      }));\n    }\n\n    return {\n      receipts,\n      gasUsed,\n      gasPrice,\n      minGas,\n      maxGas,\n      minFee,\n      maxFee,\n      outputVariables,\n      missingContractIds,\n      addedSignatures,\n      estimatedPredicates: txRequestClone.inputs,\n      dryRunStatus,\n      updateMaxFee,\n    };\n  }\n\n  /**\n   * Returns coins for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get (optional).\n   * @param paginationArgs - Pagination arguments (optional).\n   *\n   * @returns A promise that resolves to the coins.\n   */\n  async getCoins(\n    owner: string | Address,\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    const ownerAddress = Address.fromAddressOrString(owner);\n    const {\n      coins: { edges, pageInfo },\n    } = await this.operations.getCoins({\n      ...validatePaginationArgs({\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n        inputArgs: paginationArgs,\n      }),\n      filter: { owner: ownerAddress.toB256(), assetId: assetId && hexlify(assetId) },\n    });\n\n    const coins = edges.map(({ node }) => ({\n      id: node.utxoId,\n      assetId: node.assetId,\n      amount: bn(node.amount),\n      owner: ownerAddress,\n      blockCreated: bn(node.blockCreated),\n      txCreatedIdx: bn(node.txCreatedIdx),\n    }));\n\n    return {\n      coins,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The coin quantities to get.\n   * @param excludedIds - IDs of excluded resources from the selection (optional).\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(\n    owner: string | Address,\n    quantities: CoinQuantityLike[],\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    const ownerAddress = Address.fromAddressOrString(owner);\n    const excludeInput = {\n      messages: excludedIds?.messages?.map((nonce) => hexlify(nonce)) || [],\n      utxos: excludedIds?.utxos?.map((id) => hexlify(id)) || [],\n    };\n\n    if (this.cache) {\n      const cached = this.cache.getActiveData();\n      excludeInput.messages.push(...cached.messages);\n      excludeInput.utxos.push(...cached.utxos);\n    }\n\n    const coinsQuery = {\n      owner: ownerAddress.toB256(),\n      queryPerAsset: quantities\n        .map(coinQuantityfy)\n        .map(({ assetId, amount, max: maxPerAsset }) => ({\n          assetId: hexlify(assetId),\n          amount: amount.toString(10),\n          max: maxPerAsset ? maxPerAsset.toString(10) : undefined,\n        })),\n      excludedIds: excludeInput,\n    };\n\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n\n    const coins = result.coinsToSpend\n      .flat()\n      .map((coin) => {\n        switch (coin.type) {\n          case 'MessageCoin':\n            return {\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              daHeight: bn(coin.daHeight),\n              sender: Address.fromAddressOrString(coin.sender),\n              recipient: Address.fromAddressOrString(coin.recipient),\n              nonce: coin.nonce,\n            } as MessageCoin;\n          case 'Coin':\n            return {\n              id: coin.utxoId,\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              owner: ownerAddress,\n              blockCreated: bn(coin.blockCreated),\n              txCreatedIdx: bn(coin.txCreatedIdx),\n            } as Coin;\n          default:\n            return null;\n        }\n      })\n      .filter((v) => !!v) as Array<Resource>;\n\n    return coins;\n  }\n\n  /**\n   * Returns an array of blobIds that exist on chain, for a given array of blobIds.\n   *\n   * @param blobIds - blobIds to check.\n   * @returns - A promise that resolves to an array of blobIds that exist on chain.\n   */\n  async getBlobs(blobIds: string[]): Promise<string[]> {\n    const res = await this.operations.getBlobs({ blobIds });\n    const blobs: (string | null)[] = [];\n\n    Object.keys(res).forEach((key) => {\n      // @ts-expect-error keys are strings\n      const val = res[key];\n      blobs.push(val?.id ?? null);\n    });\n\n    return blobs.filter((v) => v) as string[];\n  }\n\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block or null.\n   */\n  async getBlock(idOrHeight: string | number | 'latest'): Promise<Block | null> {\n    let block: GqlBlockFragment | undefined | null;\n\n    if (idOrHeight === 'latest') {\n      const {\n        chain: { latestBlock },\n      } = await this.operations.getLatestBlock();\n      block = latestBlock;\n    } else {\n      const isblockId = typeof idOrHeight === 'string' && idOrHeight.length === 66;\n      const variables = isblockId\n        ? { blockId: idOrHeight }\n        : { height: bn(idOrHeight).toString(10) };\n      const response = await this.operations.getBlock(variables);\n      block = response.block;\n    }\n\n    if (!block) {\n      return null;\n    }\n\n    const { header, height, id, transactions } = block;\n\n    return {\n      id,\n      height: bn(height),\n      time: header.time,\n      header: {\n        applicationHash: header.applicationHash,\n        daHeight: bn(header.daHeight),\n        eventInboxRoot: header.eventInboxRoot,\n        messageOutboxRoot: header.messageOutboxRoot,\n        prevRoot: header.prevRoot,\n        stateTransitionBytecodeVersion: header.stateTransitionBytecodeVersion,\n        transactionsCount: header.transactionsCount,\n        transactionsRoot: header.transactionsRoot,\n      },\n      transactionIds: transactions.map((tx) => tx.id),\n    };\n  }\n\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params?: CursorPaginationArgs): Promise<GetBlocksResponse> {\n    const {\n      blocks: { edges, pageInfo },\n    } = await this.operations.getBlocks({\n      ...validatePaginationArgs({\n        paginationLimit: BLOCKS_PAGE_SIZE_LIMIT,\n        inputArgs: params,\n      }),\n    });\n\n    const blocks: Block[] = edges.map(({ node: block }) => ({\n      id: block.id,\n      height: bn(block.height),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n    }));\n\n    return { blocks, pageInfo };\n  }\n\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(\n    /** ID or height of the block */\n    idOrHeight: string | number | 'latest'\n  ): Promise<(Block & { transactions: Transaction[] }) | null> {\n    let variables;\n    if (typeof idOrHeight === 'number') {\n      variables = { blockHeight: bn(idOrHeight).toString(10) };\n    } else if (idOrHeight === 'latest') {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else {\n      variables = { blockId: idOrHeight };\n    }\n\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n\n    if (!block) {\n      return null;\n    }\n\n    return {\n      id: block.id,\n      height: bn(block.height, 10),\n      time: block.header.time,\n      header: {\n        applicationHash: block.header.applicationHash,\n        daHeight: bn(block.header.daHeight),\n        eventInboxRoot: block.header.eventInboxRoot,\n        messageOutboxRoot: block.header.messageOutboxRoot,\n        prevRoot: block.header.prevRoot,\n        stateTransitionBytecodeVersion: block.header.stateTransitionBytecodeVersion,\n        transactionsCount: block.header.transactionsCount,\n        transactionsRoot: block.header.transactionsRoot,\n      },\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new TransactionCoder().decode(arrayify(tx.rawPayload), 0)?.[0]\n      ),\n    };\n  }\n\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction<TTransactionType = void>(\n    transactionId: string\n  ): Promise<Transaction<TTransactionType> | null> {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n\n    if (!transaction) {\n      return null;\n    }\n\n    try {\n      return new TransactionCoder().decode(\n        arrayify(transaction.rawPayload),\n        0\n      )?.[0] as Transaction<TTransactionType>;\n    } catch (error) {\n      if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n        // eslint-disable-next-line no-console\n        console.warn('Unsupported transaction type encountered');\n        return null;\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves transactions based on the provided pagination arguments.\n   * @param paginationArgs - The pagination arguments for retrieving transactions.\n   * @returns A promise that resolves to an object containing the retrieved transactions and pagination information.\n   */\n  async getTransactions(paginationArgs?: CursorPaginationArgs): Promise<GetTransactionsResponse> {\n    const {\n      transactions: { edges, pageInfo },\n    } = await this.operations.getTransactions({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n      }),\n    });\n\n    const coder = new TransactionCoder();\n    const transactions = edges\n      .map(({ node: { rawPayload } }) => {\n        try {\n          return coder.decode(arrayify(rawPayload), 0)[0];\n        } catch (error) {\n          if (error instanceof FuelError && error.code === ErrorCode.UNSUPPORTED_TRANSACTION_TYPE) {\n            // eslint-disable-next-line no-console\n            console.warn('Unsupported transaction type encountered');\n            return null;\n          }\n          throw error;\n        }\n      })\n      .filter((tx): tx is Transaction => tx !== null);\n\n    return { transactions, pageInfo };\n  }\n\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId: string): Promise<ContractResult | null> {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(\n    /** The contract ID to get the balance for */\n    contractId: string | Address,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: Address.fromAddressOrString(contractId).toB256(),\n      asset: hexlify(assetId),\n    });\n    return bn(contractBalance.amount, 10);\n  }\n\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(\n    /** The address to get coins for */\n    owner: string | Address,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { balance } = await this.operations.getBalance({\n      owner: Address.fromAddressOrString(owner).toB256(),\n      assetId: hexlify(assetId),\n    });\n    return bn(balance.amount, 10);\n  }\n\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(owner: string | Address): Promise<GetBalancesResponse> {\n    const {\n      balances: { edges },\n    } = await this.operations.getBalances({\n      /**\n       * The query parameters for this method were designed to support pagination,\n       * but the current Fuel-Core implementation does not support pagination yet.\n       */\n      first: 10000,\n      filter: { owner: Address.fromAddressOrString(owner).toB256() },\n    });\n\n    const balances = edges.map(({ node }) => ({\n      assetId: node.assetId,\n      amount: bn(node.amount),\n    }));\n\n    return { balances };\n  }\n\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments (optional).\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(\n    address: string | Address,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetMessagesResponse> {\n    const {\n      messages: { edges, pageInfo },\n    } = await this.operations.getMessages({\n      ...validatePaginationArgs({\n        inputArgs: paginationArgs,\n        paginationLimit: RESOURCES_PAGE_SIZE_LIMIT,\n      }),\n      owner: Address.fromAddressOrString(address).toB256(),\n    });\n\n    const messages = edges.map(({ node }) => ({\n      messageId: InputMessageCoder.getMessageId({\n        sender: node.sender,\n        recipient: node.recipient,\n        nonce: node.nonce,\n        amount: bn(node.amount),\n        data: node.data,\n      }),\n      sender: Address.fromAddressOrString(node.sender),\n      recipient: Address.fromAddressOrString(node.recipient),\n      nonce: node.nonce,\n      amount: bn(node.amount),\n      data: InputMessageCoder.decodeData(node.data),\n      daHeight: bn(node.daHeight),\n    }));\n\n    return {\n      messages,\n      pageInfo,\n    };\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id (optional).\n   * @param commitBlockHeight - The commit block height (optional).\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(\n    transactionId: string,\n    nonce: string,\n    commitBlockId?: string,\n    commitBlockHeight?: BN\n  ): Promise<MessageProof | null> {\n    let inputObject: {\n      /** The transaction to get message from */\n      transactionId: string;\n      /** The message id from MessageOut receipt */\n      nonce: string;\n      commitBlockId?: string;\n      commitBlockHeight?: string;\n    } = {\n      transactionId,\n      nonce,\n    };\n\n    if (commitBlockId && commitBlockHeight) {\n      throw new FuelError(\n        ErrorCode.INVALID_INPUT_PARAMETERS,\n        'commitBlockId and commitBlockHeight cannot be used together'\n      );\n    }\n\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId,\n      };\n    }\n\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Conver BN into a number string required on the query\n        // This should problably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString(),\n      };\n    }\n\n    const result = await this.operations.getMessageProof(inputObject);\n\n    if (!result.messageProof) {\n      return null;\n    }\n\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      sender,\n      recipient,\n      amount,\n      data,\n    } = result.messageProof;\n\n    return {\n      messageProof: {\n        proofIndex: bn(messageProof.proofIndex),\n        proofSet: messageProof.proofSet,\n      },\n      blockProof: {\n        proofIndex: bn(blockProof.proofIndex),\n        proofSet: blockProof.proofSet,\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: bn(messageBlockHeader.daHeight),\n        transactionsCount: Number(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: bn(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptCount: Number(messageBlockHeader.messageReceiptCount),\n        messageOutboxRoot: messageBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(messageBlockHeader.consensusParametersVersion),\n        eventInboxRoot: messageBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(messageBlockHeader.stateTransitionBytecodeVersion),\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: bn(commitBlockHeader.daHeight),\n        transactionsCount: Number(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: bn(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptCount: Number(commitBlockHeader.messageReceiptCount),\n        messageOutboxRoot: commitBlockHeader.messageOutboxRoot,\n        consensusParametersVersion: Number(commitBlockHeader.consensusParametersVersion),\n        eventInboxRoot: commitBlockHeader.eventInboxRoot,\n        stateTransitionBytecodeVersion: Number(commitBlockHeader.stateTransitionBytecodeVersion),\n      },\n      sender: Address.fromAddressOrString(sender),\n      recipient: Address.fromAddressOrString(recipient),\n      nonce,\n      amount: bn(amount),\n      data,\n    };\n  }\n\n  /**\n   * Get the latest gas price from the node.\n   *\n   * @returns A promise that resolves to the latest gas price.\n   */\n  async getLatestGasPrice(): Promise<BN> {\n    const { latestGasPrice } = await this.operations.getLatestGasPrice();\n    return bn(latestGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns the estimate gas price for the given block horizon.\n   *\n   * @param blockHorizon - The block horizon to estimate gas price for.\n   * @returns A promise that resolves to the estimated gas price.\n   */\n  async estimateGasPrice(blockHorizon: number): Promise<BN> {\n    const { estimateGasPrice } = await this.operations.estimateGasPrice({\n      blockHorizon: String(blockHorizon),\n    });\n    return bn(estimateGasPrice.gasPrice);\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param nonce - The nonce of the message to get status from.\n   * @returns A promise that resolves to the message status\n   */\n  async getMessageStatus(\n    /** The nonce of the message to get status from */\n    nonce: string\n  ): Promise<MessageStatus> {\n    const result = await this.operations.getMessageStatus({ nonce });\n    return result.messageStatus;\n  }\n\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce.\n   * @param startTime - The UNIX timestamp (milliseconds) to set for the first produced block (optional).\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount: number, startTime?: number) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: bn(amount).toString(10),\n      startTimestamp: startTime ? DateTime.fromUnixMilliseconds(startTime).toTai64() : undefined,\n    });\n    return bn(latestBlockHeight);\n  }\n\n  /**\n   * Check if the given ID is an account.\n   *\n   * @param id - The ID to check.\n   * @returns A promise that resolves to the result of the check.\n   */\n  async isUserAccount(id: string): Promise<boolean> {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id,\n    });\n\n    if (contract || blob || transaction) {\n      return false;\n    }\n    return true;\n  }\n\n  async getAddressType(id: string): Promise<'Account' | 'Contract' | 'Transaction' | 'Blob'> {\n    const { contract, blob, transaction } = await this.operations.isUserAccount({\n      blobId: id,\n      contractId: id,\n      transactionId: id,\n    });\n\n    if (contract) {\n      return 'Contract';\n    }\n    if (blob) {\n      return 'Blob';\n    }\n    if (transaction) {\n      return 'Transaction';\n    }\n\n    return 'Account';\n  }\n\n  /**\n   * Get the transaction response for the given transaction ID.\n   *\n   * @param transactionId - The transaction ID to get the response for.\n   * @returns A promise that resolves to the transaction response.\n   */\n\n  async getTransactionResponse(transactionId: string): Promise<TransactionResponse> {\n    const chainId = await this.getChainId();\n    return new TransactionResponse(transactionId, this, chainId);\n  }\n\n  /**\n   * Returns Message for given nonce.\n   *\n   * @param nonce - The nonce of the message to retrieve.\n   * @returns A promise that resolves to the Message object or null.\n   */\n  async getMessageByNonce(nonce: string): Promise<Message | null> {\n    const { message: rawMessage } = await this.operations.getMessageByNonce({ nonce });\n\n    if (!rawMessage) {\n      return null;\n    }\n\n    const message: Message = {\n      messageId: InputMessageCoder.getMessageId({\n        sender: rawMessage.sender,\n        recipient: rawMessage.recipient,\n        nonce,\n        amount: bn(rawMessage.amount),\n        data: rawMessage.data,\n      }),\n      sender: Address.fromAddressOrString(rawMessage.sender),\n      recipient: Address.fromAddressOrString(rawMessage.recipient),\n      nonce,\n      amount: bn(rawMessage.amount),\n      data: InputMessageCoder.decodeData(rawMessage.data),\n      daHeight: bn(rawMessage.daHeight),\n    };\n\n    return message;\n  }\n\n  /**\n   * Get the relayed transaction for the given transaction ID.\n   *\n   * @param relayedTransactionId - The relayed transaction ID to get the response for.\n   * @returns A promise that resolves to the relayed transaction.\n   */\n  async getRelayedTransactionStatus(\n    relayedTransactionId: string\n  ): Promise<GqlRelayedTransactionFailed | null> {\n    const { relayedTransactionStatus } = await this.operations.getRelayedTransactionStatus({\n      relayedTransactionId,\n    });\n\n    if (!relayedTransactionStatus) {\n      return null;\n    }\n\n    return relayedTransactionStatus;\n  }\n\n  /**\n   * @hidden\n   */\n  private extractDryRunError(\n    transactionRequest: ScriptTransactionRequest,\n    receipts: TransactionResultReceipt[],\n    dryRunStatus: DryRunStatus\n  ): FuelError {\n    const status = dryRunStatus as DryRunFailureStatusFragment;\n    let logs: unknown[] = [];\n    if (transactionRequest.abis) {\n      logs = getDecodedLogs(\n        receipts,\n        transactionRequest.abis.main,\n        transactionRequest.abis.otherContractsAbis\n      );\n    }\n\n    return extractTxError({\n      logs,\n      receipts,\n      statusReason: status.reason,\n    });\n  }\n}\n","import type { DocumentNode } from 'graphql';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  Address: { input: string; output: string; }\n  AssetId: { input: string; output: string; }\n  BlobId: { input: any; output: any; }\n  BlockId: { input: string; output: string; }\n  Bytes32: { input: string; output: string; }\n  ContractId: { input: string; output: string; }\n  HexString: { input: string; output: string; }\n  Nonce: { input: string; output: string; }\n  RelayedTransactionId: { input: string; output: string; }\n  Salt: { input: string; output: string; }\n  Signature: { input: string; output: string; }\n  Tai64Timestamp: { input: string; output: string; }\n  TransactionId: { input: string; output: string; }\n  TxPointer: { input: string; output: string; }\n  U16: { input: string; output: string; }\n  U32: { input: string; output: string; }\n  U64: { input: string; output: string; }\n  UtxoId: { input: string; output: string; }\n};\n\nexport type GqlBalance = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n};\n\nexport type GqlBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBalance;\n};\n\nexport type GqlBalanceFilterInput = {\n  /** Filter coins based on the `owner` field */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlBlob = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['BlobId']['output'];\n};\n\nexport type GqlBlock = {\n  consensus: GqlConsensus;\n  header: GqlHeader;\n  height: Scalars['U32']['output'];\n  id: Scalars['BlockId']['output'];\n  transactionIds: Array<Scalars['TransactionId']['output']>;\n  transactions: Array<GqlTransaction>;\n  version: GqlBlockVersion;\n};\n\nexport type GqlBlockConnection = {\n  /** A list of edges. */\n  edges: Array<GqlBlockEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBlock>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBlockEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlBlock;\n};\n\nexport enum GqlBlockVersion {\n  V1 = 'V1'\n}\n\n/** Breakpoint, defined as a tuple of contract ID and relative PC offset inside it */\nexport type GqlBreakpoint = {\n  contract: Scalars['ContractId']['input'];\n  pc: Scalars['U64']['input'];\n};\n\nexport type GqlChainInfo = {\n  consensusParameters: GqlConsensusParameters;\n  daHeight: Scalars['U64']['output'];\n  gasCosts: GqlGasCosts;\n  latestBlock: GqlBlock;\n  name: Scalars['String']['output'];\n};\n\nexport type GqlChangeOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  /** TxPointer - the height of the block this coin was created in */\n  blockCreated: Scalars['U32']['output'];\n  owner: Scalars['Address']['output'];\n  /** TxPointer - the index of the transaction that created this coin */\n  txCreatedIdx: Scalars['U16']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlCoinConnection = {\n  /** A list of edges. */\n  edges: Array<GqlCoinEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlCoin>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlCoinEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlCoin;\n};\n\nexport type GqlCoinFilterInput = {\n  /** Returns coins only with `asset_id`. */\n  assetId?: InputMaybe<Scalars['AssetId']['input']>;\n  /** Returns coins owned by the `owner`. */\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlCoinOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\n/** The schema analog of the [`coins::CoinType`]. */\nexport type GqlCoinType = GqlCoin | GqlMessageCoin;\n\nexport type GqlConsensus = GqlGenesis | GqlPoAConsensus;\n\nexport type GqlConsensusParameters = {\n  baseAssetId: Scalars['AssetId']['output'];\n  blockGasLimit: Scalars['U64']['output'];\n  blockTransactionSizeLimit: Scalars['U64']['output'];\n  chainId: Scalars['U64']['output'];\n  contractParams: GqlContractParameters;\n  feeParams: GqlFeeParameters;\n  gasCosts: GqlGasCosts;\n  predicateParams: GqlPredicateParameters;\n  privilegedAddress: Scalars['Address']['output'];\n  scriptParams: GqlScriptParameters;\n  txParams: GqlTxParameters;\n  version: GqlConsensusParametersVersion;\n};\n\nexport type GqlConsensusParametersPurpose = {\n  checksum: Scalars['Bytes32']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport enum GqlConsensusParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlContract = {\n  bytecode: Scalars['HexString']['output'];\n  id: Scalars['ContractId']['output'];\n  salt: Scalars['Salt']['output'];\n};\n\nexport type GqlContractBalance = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  contract: Scalars['ContractId']['output'];\n};\n\nexport type GqlContractBalanceConnection = {\n  /** A list of edges. */\n  edges: Array<GqlContractBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlContractBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlContractBalanceEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlContractBalance;\n};\n\nexport type GqlContractBalanceFilterInput = {\n  /** Filter assets based on the `contractId` field */\n  contract: Scalars['ContractId']['input'];\n};\n\nexport type GqlContractCreated = {\n  contract: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractOutput = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  inputIndex: Scalars['U16']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlContractParameters = {\n  contractMaxSize: Scalars['U64']['output'];\n  maxStorageSlots: Scalars['U64']['output'];\n  version: GqlContractParametersVersion;\n};\n\nexport enum GqlContractParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlDependentCost = GqlHeavyOperation | GqlLightOperation;\n\nexport type GqlDryRunFailureStatus = {\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunSuccessStatus = {\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n};\n\nexport type GqlDryRunTransactionExecutionStatus = {\n  id: Scalars['TransactionId']['output'];\n  receipts: Array<GqlReceipt>;\n  status: GqlDryRunTransactionStatus;\n};\n\nexport type GqlDryRunTransactionStatus = GqlDryRunFailureStatus | GqlDryRunSuccessStatus;\n\nexport type GqlEstimateGasPrice = {\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlExcludeInput = {\n  /** Messages to exclude from the selection. */\n  messages: Array<Scalars['Nonce']['input']>;\n  /** Utxos to exclude from the selection. */\n  utxos: Array<Scalars['UtxoId']['input']>;\n};\n\nexport type GqlFailureStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String']['output'];\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlFeeParameters = {\n  gasPerByte: Scalars['U64']['output'];\n  gasPriceFactor: Scalars['U64']['output'];\n  version: GqlFeeParametersVersion;\n};\n\nexport enum GqlFeeParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGasCosts = {\n  add: Scalars['U64']['output'];\n  addi: Scalars['U64']['output'];\n  aloc: Scalars['U64']['output'];\n  alocDependentCost: GqlDependentCost;\n  and: Scalars['U64']['output'];\n  andi: Scalars['U64']['output'];\n  bal: Scalars['U64']['output'];\n  bhei: Scalars['U64']['output'];\n  bhsh: Scalars['U64']['output'];\n  bldd?: Maybe<GqlDependentCost>;\n  bsiz?: Maybe<GqlDependentCost>;\n  burn: Scalars['U64']['output'];\n  call: GqlDependentCost;\n  cb: Scalars['U64']['output'];\n  ccp: GqlDependentCost;\n  cfe: GqlDependentCost;\n  cfei: Scalars['U64']['output'];\n  cfeiDependentCost: GqlDependentCost;\n  cfsi: Scalars['U64']['output'];\n  contractRoot: GqlDependentCost;\n  croo: GqlDependentCost;\n  csiz: GqlDependentCost;\n  div: Scalars['U64']['output'];\n  divi: Scalars['U64']['output'];\n  eck1: Scalars['U64']['output'];\n  ecr1: Scalars['U64']['output'];\n  ed19: Scalars['U64']['output'];\n  ed19DependentCost: GqlDependentCost;\n  eq: Scalars['U64']['output'];\n  exp: Scalars['U64']['output'];\n  expi: Scalars['U64']['output'];\n  flag: Scalars['U64']['output'];\n  gm: Scalars['U64']['output'];\n  gt: Scalars['U64']['output'];\n  gtf: Scalars['U64']['output'];\n  ji: Scalars['U64']['output'];\n  jmp: Scalars['U64']['output'];\n  jmpb: Scalars['U64']['output'];\n  jmpf: Scalars['U64']['output'];\n  jne: Scalars['U64']['output'];\n  jneb: Scalars['U64']['output'];\n  jnef: Scalars['U64']['output'];\n  jnei: Scalars['U64']['output'];\n  jnzb: Scalars['U64']['output'];\n  jnzf: Scalars['U64']['output'];\n  jnzi: Scalars['U64']['output'];\n  k256: GqlDependentCost;\n  lb: Scalars['U64']['output'];\n  ldc: GqlDependentCost;\n  log: Scalars['U64']['output'];\n  logd: GqlDependentCost;\n  lt: Scalars['U64']['output'];\n  lw: Scalars['U64']['output'];\n  mcl: GqlDependentCost;\n  mcli: GqlDependentCost;\n  mcp: GqlDependentCost;\n  mcpi: GqlDependentCost;\n  meq: GqlDependentCost;\n  mint: Scalars['U64']['output'];\n  mldv: Scalars['U64']['output'];\n  mlog: Scalars['U64']['output'];\n  modOp: Scalars['U64']['output'];\n  modi: Scalars['U64']['output'];\n  moveOp: Scalars['U64']['output'];\n  movi: Scalars['U64']['output'];\n  mroo: Scalars['U64']['output'];\n  mul: Scalars['U64']['output'];\n  muli: Scalars['U64']['output'];\n  newStoragePerByte: Scalars['U64']['output'];\n  noop: Scalars['U64']['output'];\n  not: Scalars['U64']['output'];\n  or: Scalars['U64']['output'];\n  ori: Scalars['U64']['output'];\n  poph: Scalars['U64']['output'];\n  popl: Scalars['U64']['output'];\n  pshh: Scalars['U64']['output'];\n  pshl: Scalars['U64']['output'];\n  ret: Scalars['U64']['output'];\n  retd: GqlDependentCost;\n  rvrt: Scalars['U64']['output'];\n  s256: GqlDependentCost;\n  sb: Scalars['U64']['output'];\n  scwq: GqlDependentCost;\n  sll: Scalars['U64']['output'];\n  slli: Scalars['U64']['output'];\n  smo: GqlDependentCost;\n  srl: Scalars['U64']['output'];\n  srli: Scalars['U64']['output'];\n  srw: Scalars['U64']['output'];\n  srwq: GqlDependentCost;\n  stateRoot: GqlDependentCost;\n  sub: Scalars['U64']['output'];\n  subi: Scalars['U64']['output'];\n  sw: Scalars['U64']['output'];\n  sww: Scalars['U64']['output'];\n  swwq: GqlDependentCost;\n  time: Scalars['U64']['output'];\n  tr: Scalars['U64']['output'];\n  tro: Scalars['U64']['output'];\n  version: GqlGasCostsVersion;\n  vmInitialization: GqlDependentCost;\n  wdam: Scalars['U64']['output'];\n  wdcm: Scalars['U64']['output'];\n  wddv: Scalars['U64']['output'];\n  wdmd: Scalars['U64']['output'];\n  wdml: Scalars['U64']['output'];\n  wdmm: Scalars['U64']['output'];\n  wdop: Scalars['U64']['output'];\n  wqam: Scalars['U64']['output'];\n  wqcm: Scalars['U64']['output'];\n  wqdv: Scalars['U64']['output'];\n  wqmd: Scalars['U64']['output'];\n  wqml: Scalars['U64']['output'];\n  wqmm: Scalars['U64']['output'];\n  wqop: Scalars['U64']['output'];\n  xor: Scalars['U64']['output'];\n  xori: Scalars['U64']['output'];\n};\n\nexport enum GqlGasCostsVersion {\n  V1 = 'V1'\n}\n\nexport type GqlGenesis = {\n  /**\n   * The chain configs define what consensus type to use, what settlement layer to use,\n   * rules of block validity, etc.\n   */\n  chainConfigHash: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis coins. */\n  coinsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of state, balances, contracts code hash of each contract. */\n  contractsRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all genesis messages. */\n  messagesRoot: Scalars['Bytes32']['output'];\n  /** The Binary Merkle Tree root of all processed transaction ids. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n};\n\nexport type GqlHeader = {\n  /** Hash of the application header. */\n  applicationHash: Scalars['Bytes32']['output'];\n  /** The version of the consensus parameters used to create this block. */\n  consensusParametersVersion: Scalars['U32']['output'];\n  /** The layer 1 height of messages and events to include since the last layer 1 block number. */\n  daHeight: Scalars['U64']['output'];\n  /** Merkle root of inbox events in this block. */\n  eventInboxRoot: Scalars['Bytes32']['output'];\n  /** Fuel block height. */\n  height: Scalars['U32']['output'];\n  /** Hash of the header */\n  id: Scalars['BlockId']['output'];\n  /** Merkle root of message receipts in this block. */\n  messageOutboxRoot: Scalars['Bytes32']['output'];\n  /** Number of message receipts in this block. */\n  messageReceiptCount: Scalars['U32']['output'];\n  /** Merkle root of all previous block header hashes. */\n  prevRoot: Scalars['Bytes32']['output'];\n  /** The version of the state transition bytecode used to create this block. */\n  stateTransitionBytecodeVersion: Scalars['U32']['output'];\n  /** The block producer time. */\n  time: Scalars['Tai64Timestamp']['output'];\n  /** Number of transactions in this block. */\n  transactionsCount: Scalars['U16']['output'];\n  /** Merkle root of transactions. */\n  transactionsRoot: Scalars['Bytes32']['output'];\n  /** Version of the header */\n  version: GqlHeaderVersion;\n};\n\nexport enum GqlHeaderVersion {\n  V1 = 'V1'\n}\n\nexport type GqlHeavyOperation = {\n  base: Scalars['U64']['output'];\n  gasPerUnit: Scalars['U64']['output'];\n};\n\nexport type GqlInput = GqlInputCoin | GqlInputContract | GqlInputMessage;\n\nexport type GqlInputCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  owner: Scalars['Address']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n  witnessIndex: Scalars['Int']['output'];\n};\n\nexport type GqlInputContract = {\n  balanceRoot: Scalars['Bytes32']['output'];\n  contractId: Scalars['ContractId']['output'];\n  stateRoot: Scalars['Bytes32']['output'];\n  txPointer: Scalars['TxPointer']['output'];\n  utxoId: Scalars['UtxoId']['output'];\n};\n\nexport type GqlInputMessage = {\n  amount: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  predicate: Scalars['HexString']['output'];\n  predicateData: Scalars['HexString']['output'];\n  predicateGasUsed: Scalars['U64']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n  witnessIndex: Scalars['U16']['output'];\n};\n\nexport type GqlLatestGasPrice = {\n  blockHeight: Scalars['U32']['output'];\n  gasPrice: Scalars['U64']['output'];\n};\n\nexport type GqlLightOperation = {\n  base: Scalars['U64']['output'];\n  unitsPerGas: Scalars['U64']['output'];\n};\n\nexport type GqlMerkleProof = {\n  proofIndex: Scalars['U64']['output'];\n  proofSet: Array<Scalars['Bytes32']['output']>;\n};\n\nexport type GqlMessage = {\n  amount: Scalars['U64']['output'];\n  daHeight: Scalars['U64']['output'];\n  data: Scalars['HexString']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageCoin = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  daHeight: Scalars['U64']['output'];\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport type GqlMessageConnection = {\n  /** A list of edges. */\n  edges: Array<GqlMessageEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlMessage>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlMessageEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlMessage;\n};\n\nexport type GqlMessageProof = {\n  amount: Scalars['U64']['output'];\n  blockProof: GqlMerkleProof;\n  commitBlockHeader: GqlHeader;\n  data: Scalars['HexString']['output'];\n  messageBlockHeader: GqlHeader;\n  messageProof: GqlMerkleProof;\n  nonce: Scalars['Nonce']['output'];\n  recipient: Scalars['Address']['output'];\n  sender: Scalars['Address']['output'];\n};\n\nexport enum GqlMessageState {\n  NotFound = 'NOT_FOUND',\n  Spent = 'SPENT',\n  Unspent = 'UNSPENT'\n}\n\nexport type GqlMessageStatus = {\n  state: GqlMessageState;\n};\n\nexport type GqlMutation = {\n  /**\n   * Resume execution of the VM instance after a breakpoint.\n   * Runs until the next breakpoint or until the transaction completes.\n   */\n  continueTx: GqlRunResult;\n  /** Execute a dry-run of multiple transactions using a fork of current state, no changes are committed. */\n  dryRun: Array<GqlDryRunTransactionExecutionStatus>;\n  /** End debugger session. */\n  endSession: Scalars['Boolean']['output'];\n  /** Execute a single fuel-asm instruction. */\n  execute: Scalars['Boolean']['output'];\n  /**\n   * Sequentially produces `blocks_to_produce` blocks. The first block starts with\n   * `start_timestamp`. If the block production in the [`crate::service::Config`] is\n   * `Trigger::Interval { block_time }`, produces blocks with `block_time ` intervals between\n   * them. The `start_timestamp` is the timestamp in seconds.\n   */\n  produceBlocks: Scalars['U32']['output'];\n  /** Reset the VM instance to the initial state. */\n  reset: Scalars['Boolean']['output'];\n  /** Set a breakpoint for a VM instance. */\n  setBreakpoint: Scalars['Boolean']['output'];\n  /** Set single-stepping mode for the VM instance. */\n  setSingleStepping: Scalars['Boolean']['output'];\n  /**\n   * Initialize a new debugger session, returning its ID.\n   * A new VM instance is spawned for each session.\n   * The session is run in a separate database transaction,\n   * on top of the most recent node state.\n   */\n  startSession: Scalars['ID']['output'];\n  /**\n   * Run a single transaction in given session until it\n   * hits a breakpoint or completes.\n   */\n  startTx: GqlRunResult;\n  /**\n   * Submits transaction to the `TxPool`.\n   *\n   * Returns submitted transaction if the transaction is included in the `TxPool` without problems.\n   */\n  submit: GqlTransaction;\n};\n\n\nexport type GqlMutationContinueTxArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationDryRunArgs = {\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n  txs: Array<Scalars['HexString']['input']>;\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\nexport type GqlMutationEndSessionArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationExecuteArgs = {\n  id: Scalars['ID']['input'];\n  op: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationProduceBlocksArgs = {\n  blocksToProduce: Scalars['U32']['input'];\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n};\n\n\nexport type GqlMutationResetArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetBreakpointArgs = {\n  breakpoint: GqlBreakpoint;\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationSetSingleSteppingArgs = {\n  enable: Scalars['Boolean']['input'];\n  id: Scalars['ID']['input'];\n};\n\n\nexport type GqlMutationStartTxArgs = {\n  id: Scalars['ID']['input'];\n  txJson: Scalars['String']['input'];\n};\n\n\nexport type GqlMutationSubmitArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlNodeInfo = {\n  maxDepth: Scalars['U64']['output'];\n  maxTx: Scalars['U64']['output'];\n  nodeVersion: Scalars['String']['output'];\n  peers: Array<GqlPeerInfo>;\n  utxoValidation: Scalars['Boolean']['output'];\n  vmBacktrace: Scalars['Boolean']['output'];\n};\n\nexport type GqlOutput = GqlChangeOutput | GqlCoinOutput | GqlContractCreated | GqlContractOutput | GqlVariableOutput;\n\n/**\n * A separate `Breakpoint` type to be used as an output, as a single\n * type cannot act as both input and output type in async-graphql\n */\nexport type GqlOutputBreakpoint = {\n  contract: Scalars['ContractId']['output'];\n  pc: Scalars['U64']['output'];\n};\n\n/** Information about pagination in a connection */\nexport type GqlPageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\nexport type GqlPeerInfo = {\n  /** The advertised multi-addrs that can be used to connect to this peer */\n  addresses: Array<Scalars['String']['output']>;\n  /** The internal fuel p2p reputation of this peer */\n  appScore: Scalars['Float']['output'];\n  /** The last reported height of the peer */\n  blockHeight?: Maybe<Scalars['U32']['output']>;\n  /** The self-reported version of the client the peer is using */\n  clientVersion?: Maybe<Scalars['String']['output']>;\n  /** The libp2p peer id */\n  id: Scalars['String']['output'];\n  /** The last heartbeat from this peer in unix epoch time ms */\n  lastHeartbeatMs: Scalars['U64']['output'];\n};\n\nexport type GqlPoAConsensus = {\n  /** Gets the signature of the block produced by `PoA` consensus. */\n  signature: Scalars['Signature']['output'];\n};\n\nexport type GqlPolicies = {\n  maturity?: Maybe<Scalars['U32']['output']>;\n  maxFee?: Maybe<Scalars['U64']['output']>;\n  tip?: Maybe<Scalars['U64']['output']>;\n  witnessLimit?: Maybe<Scalars['U64']['output']>;\n};\n\nexport type GqlPredicateParameters = {\n  maxGasPerPredicate: Scalars['U64']['output'];\n  maxMessageDataLength: Scalars['U64']['output'];\n  maxPredicateDataLength: Scalars['U64']['output'];\n  maxPredicateLength: Scalars['U64']['output'];\n  version: GqlPredicateParametersVersion;\n};\n\nexport enum GqlPredicateParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlProgramState = {\n  data: Scalars['HexString']['output'];\n  returnType: GqlReturnType;\n};\n\nexport type GqlQuery = {\n  balance: GqlBalance;\n  balances: GqlBalanceConnection;\n  blob?: Maybe<GqlBlob>;\n  block?: Maybe<GqlBlock>;\n  blocks: GqlBlockConnection;\n  chain: GqlChainInfo;\n  /** Gets the coin by `utxo_id`. */\n  coin?: Maybe<GqlCoin>;\n  /** Gets all unspent coins of some `owner` maybe filtered with by `asset_id` per page. */\n  coins: GqlCoinConnection;\n  /**\n   * For each `query_per_asset`, get some spendable coins(of asset specified by the query) owned by\n   * `owner` that add up at least the query amount. The returned coins can be spent.\n   * The number of coins is optimized to prevent dust accumulation.\n   *\n   * The query supports excluding and maximum the number of coins.\n   *\n   * Returns:\n   * The list of spendable coins per asset from the query. The length of the result is\n   * the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`\n   * is the same.\n   */\n  coinsToSpend: Array<Array<GqlCoinType>>;\n  consensusParameters: GqlConsensusParameters;\n  contract?: Maybe<GqlContract>;\n  contractBalance: GqlContractBalance;\n  contractBalances: GqlContractBalanceConnection;\n  estimateGasPrice: GqlEstimateGasPrice;\n  /** Estimate the predicate gas for the provided transaction */\n  estimatePredicates: GqlTransaction;\n  /** Returns true when the GraphQL API is serving requests. */\n  health: Scalars['Boolean']['output'];\n  latestGasPrice: GqlLatestGasPrice;\n  /** Read read a range of memory bytes. */\n  memory: Scalars['String']['output'];\n  message?: Maybe<GqlMessage>;\n  messageProof?: Maybe<GqlMessageProof>;\n  messageStatus: GqlMessageStatus;\n  messages: GqlMessageConnection;\n  nodeInfo: GqlNodeInfo;\n  /** Read register value by index. */\n  register: Scalars['U64']['output'];\n  relayedTransactionStatus?: Maybe<GqlRelayedTransactionStatus>;\n  stateTransitionBytecodeByRoot: GqlStateTransitionBytecode;\n  stateTransitionBytecodeByVersion?: Maybe<GqlStateTransitionBytecode>;\n  transaction?: Maybe<GqlTransaction>;\n  transactions: GqlTransactionConnection;\n  transactionsByOwner: GqlTransactionConnection;\n};\n\n\nexport type GqlQueryBalanceArgs = {\n  assetId: Scalars['AssetId']['input'];\n  owner: Scalars['Address']['input'];\n};\n\n\nexport type GqlQueryBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryBlobArgs = {\n  id: Scalars['BlobId']['input'];\n};\n\n\nexport type GqlQueryBlockArgs = {\n  height?: InputMaybe<Scalars['U32']['input']>;\n  id?: InputMaybe<Scalars['BlockId']['input']>;\n};\n\n\nexport type GqlQueryBlocksArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinArgs = {\n  utxoId: Scalars['UtxoId']['input'];\n};\n\n\nexport type GqlQueryCoinsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlCoinFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryCoinsToSpendArgs = {\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput>;\n};\n\n\nexport type GqlQueryConsensusParametersArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryContractArgs = {\n  id: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalanceArgs = {\n  asset: Scalars['AssetId']['input'];\n  contract: Scalars['ContractId']['input'];\n};\n\n\nexport type GqlQueryContractBalancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filter: GqlContractBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryEstimateGasPriceArgs = {\n  blockHorizon?: InputMaybe<Scalars['U32']['input']>;\n};\n\n\nexport type GqlQueryEstimatePredicatesArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryMemoryArgs = {\n  id: Scalars['ID']['input'];\n  size: Scalars['U32']['input'];\n  start: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryMessageArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessageProofArgs = {\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  nonce: Scalars['Nonce']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryMessageStatusArgs = {\n  nonce: Scalars['Nonce']['input'];\n};\n\n\nexport type GqlQueryMessagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner?: InputMaybe<Scalars['Address']['input']>;\n};\n\n\nexport type GqlQueryRegisterArgs = {\n  id: Scalars['ID']['input'];\n  register: Scalars['U32']['input'];\n};\n\n\nexport type GqlQueryRelayedTransactionStatusArgs = {\n  id: Scalars['RelayedTransactionId']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByRootArgs = {\n  root: Scalars['HexString']['input'];\n};\n\n\nexport type GqlQueryStateTransitionBytecodeByVersionArgs = {\n  version: Scalars['Int']['input'];\n};\n\n\nexport type GqlQueryTransactionArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlQueryTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\nexport type GqlQueryTransactionsByOwnerArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  owner: Scalars['Address']['input'];\n};\n\nexport type GqlReceipt = {\n  amount?: Maybe<Scalars['U64']['output']>;\n  assetId?: Maybe<Scalars['AssetId']['output']>;\n  /** Set in the case of a Panic receipt to indicate a missing contract input id */\n  contractId?: Maybe<Scalars['ContractId']['output']>;\n  data?: Maybe<Scalars['HexString']['output']>;\n  digest?: Maybe<Scalars['Bytes32']['output']>;\n  gas?: Maybe<Scalars['U64']['output']>;\n  gasUsed?: Maybe<Scalars['U64']['output']>;\n  id?: Maybe<Scalars['ContractId']['output']>;\n  is?: Maybe<Scalars['U64']['output']>;\n  len?: Maybe<Scalars['U64']['output']>;\n  nonce?: Maybe<Scalars['Nonce']['output']>;\n  param1?: Maybe<Scalars['U64']['output']>;\n  param2?: Maybe<Scalars['U64']['output']>;\n  pc?: Maybe<Scalars['U64']['output']>;\n  ptr?: Maybe<Scalars['U64']['output']>;\n  ra?: Maybe<Scalars['U64']['output']>;\n  rb?: Maybe<Scalars['U64']['output']>;\n  rc?: Maybe<Scalars['U64']['output']>;\n  rd?: Maybe<Scalars['U64']['output']>;\n  reason?: Maybe<Scalars['U64']['output']>;\n  receiptType: GqlReceiptType;\n  recipient?: Maybe<Scalars['Address']['output']>;\n  result?: Maybe<Scalars['U64']['output']>;\n  sender?: Maybe<Scalars['Address']['output']>;\n  subId?: Maybe<Scalars['Bytes32']['output']>;\n  to?: Maybe<Scalars['ContractId']['output']>;\n  toAddress?: Maybe<Scalars['Address']['output']>;\n  val?: Maybe<Scalars['U64']['output']>;\n};\n\nexport enum GqlReceiptType {\n  Burn = 'BURN',\n  Call = 'CALL',\n  Log = 'LOG',\n  LogData = 'LOG_DATA',\n  MessageOut = 'MESSAGE_OUT',\n  Mint = 'MINT',\n  Panic = 'PANIC',\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT',\n  ScriptResult = 'SCRIPT_RESULT',\n  Transfer = 'TRANSFER',\n  TransferOut = 'TRANSFER_OUT'\n}\n\nexport type GqlRelayedTransactionFailed = {\n  blockHeight: Scalars['U32']['output'];\n  failure: Scalars['String']['output'];\n};\n\nexport type GqlRelayedTransactionStatus = GqlRelayedTransactionFailed;\n\nexport enum GqlReturnType {\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT'\n}\n\nexport type GqlRunResult = {\n  breakpoint?: Maybe<GqlOutputBreakpoint>;\n  jsonReceipts: Array<Scalars['String']['output']>;\n  state: GqlRunState;\n};\n\nexport enum GqlRunState {\n  /** Stopped on a breakpoint */\n  Breakpoint = 'BREAKPOINT',\n  /** All breakpoints have been processed, and the program has terminated */\n  Completed = 'COMPLETED'\n}\n\nexport type GqlScriptParameters = {\n  maxScriptDataLength: Scalars['U64']['output'];\n  maxScriptLength: Scalars['U64']['output'];\n  version: GqlScriptParametersVersion;\n};\n\nexport enum GqlScriptParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlSpendQueryElementInput = {\n  /** Target amount for the query. */\n  amount: Scalars['U64']['input'];\n  /** Identifier of the asset to spend. */\n  assetId: Scalars['AssetId']['input'];\n  /** The maximum number of currencies for selection. */\n  max?: InputMaybe<Scalars['U32']['input']>;\n};\n\nexport type GqlSqueezedOutStatus = {\n  reason: Scalars['String']['output'];\n};\n\nexport type GqlStateTransitionBytecode = {\n  bytecode: GqlUploadedBytecode;\n  root: Scalars['HexString']['output'];\n};\n\nexport type GqlStateTransitionPurpose = {\n  root: Scalars['Bytes32']['output'];\n};\n\nexport type GqlSubmittedStatus = {\n  time: Scalars['Tai64Timestamp']['output'];\n};\n\nexport type GqlSubscription = {\n  /**\n   * Returns a stream of status updates for the given transaction id.\n   * If the current status is [`TransactionStatus::Success`], [`TransactionStatus::SqueezedOut`]\n   * or [`TransactionStatus::Failed`] the stream will return that and end immediately.\n   * If the current status is [`TransactionStatus::Submitted`] this will be returned\n   * and the stream will wait for a future update.\n   *\n   * This stream will wait forever so it's advised to use within a timeout.\n   *\n   * It is possible for the stream to miss an update if it is polled slower\n   * then the updates arrive. In such a case the stream will close without\n   * a status. If this occurs the stream can simply be restarted to return\n   * the latest status.\n   */\n  statusChange: GqlTransactionStatus;\n  /** Submits transaction to the `TxPool` and await either confirmation or failure. */\n  submitAndAwait: GqlTransactionStatus;\n  /**\n   * Submits the transaction to the `TxPool` and returns a stream of events.\n   * Compared to the `submitAndAwait`, the stream also contains `\n   * SubmittedStatus` as an intermediate state.\n   */\n  submitAndAwaitStatus: GqlTransactionStatus;\n};\n\n\nexport type GqlSubscriptionStatusChangeArgs = {\n  id: Scalars['TransactionId']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitStatusArgs = {\n  tx: Scalars['HexString']['input'];\n};\n\nexport type GqlSuccessStatus = {\n  block: GqlBlock;\n  blockHeight: Scalars['U32']['output'];\n  programState?: Maybe<GqlProgramState>;\n  receipts: Array<GqlReceipt>;\n  time: Scalars['Tai64Timestamp']['output'];\n  totalFee: Scalars['U64']['output'];\n  totalGas: Scalars['U64']['output'];\n  transaction: GqlTransaction;\n  transactionId: Scalars['TransactionId']['output'];\n};\n\nexport type GqlTransaction = {\n  blobId?: Maybe<Scalars['BlobId']['output']>;\n  bytecodeRoot?: Maybe<Scalars['Bytes32']['output']>;\n  bytecodeWitnessIndex?: Maybe<Scalars['U16']['output']>;\n  id: Scalars['TransactionId']['output'];\n  inputAssetIds?: Maybe<Array<Scalars['AssetId']['output']>>;\n  inputContract?: Maybe<GqlInputContract>;\n  inputContracts?: Maybe<Array<Scalars['ContractId']['output']>>;\n  inputs?: Maybe<Array<GqlInput>>;\n  isBlob: Scalars['Boolean']['output'];\n  isCreate: Scalars['Boolean']['output'];\n  isMint: Scalars['Boolean']['output'];\n  isScript: Scalars['Boolean']['output'];\n  isUpgrade: Scalars['Boolean']['output'];\n  isUpload: Scalars['Boolean']['output'];\n  maturity?: Maybe<Scalars['U32']['output']>;\n  mintAmount?: Maybe<Scalars['U64']['output']>;\n  mintAssetId?: Maybe<Scalars['AssetId']['output']>;\n  mintGasPrice?: Maybe<Scalars['U64']['output']>;\n  outputContract?: Maybe<GqlContractOutput>;\n  outputs: Array<GqlOutput>;\n  policies?: Maybe<GqlPolicies>;\n  proofSet?: Maybe<Array<Scalars['Bytes32']['output']>>;\n  /** Return the transaction bytes using canonical encoding */\n  rawPayload: Scalars['HexString']['output'];\n  receiptsRoot?: Maybe<Scalars['Bytes32']['output']>;\n  salt?: Maybe<Scalars['Salt']['output']>;\n  script?: Maybe<Scalars['HexString']['output']>;\n  scriptData?: Maybe<Scalars['HexString']['output']>;\n  scriptGasLimit?: Maybe<Scalars['U64']['output']>;\n  status?: Maybe<GqlTransactionStatus>;\n  storageSlots?: Maybe<Array<Scalars['HexString']['output']>>;\n  subsectionIndex?: Maybe<Scalars['U16']['output']>;\n  subsectionsNumber?: Maybe<Scalars['U16']['output']>;\n  txPointer?: Maybe<Scalars['TxPointer']['output']>;\n  upgradePurpose?: Maybe<GqlUpgradePurpose>;\n  witnesses?: Maybe<Array<Scalars['HexString']['output']>>;\n};\n\nexport type GqlTransactionConnection = {\n  /** A list of edges. */\n  edges: Array<GqlTransactionEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlTransaction>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlTransactionEdge = {\n  /** A cursor for use in pagination */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge */\n  node: GqlTransaction;\n};\n\nexport type GqlTransactionStatus = GqlFailureStatus | GqlSqueezedOutStatus | GqlSubmittedStatus | GqlSuccessStatus;\n\nexport type GqlTxParameters = {\n  maxBytecodeSubsections: Scalars['U16']['output'];\n  maxGasPerTx: Scalars['U64']['output'];\n  maxInputs: Scalars['U16']['output'];\n  maxOutputs: Scalars['U16']['output'];\n  maxSize: Scalars['U64']['output'];\n  maxWitnesses: Scalars['U32']['output'];\n  version: GqlTxParametersVersion;\n};\n\nexport enum GqlTxParametersVersion {\n  V1 = 'V1'\n}\n\nexport type GqlUpgradePurpose = GqlConsensusParametersPurpose | GqlStateTransitionPurpose;\n\nexport type GqlUploadedBytecode = {\n  /** Combined bytecode of all uploaded subsections. */\n  bytecode: Scalars['HexString']['output'];\n  /** Indicates if the bytecode upload is complete. */\n  completed: Scalars['Boolean']['output'];\n  /** Number of uploaded subsections (if incomplete). */\n  uploadedSubsectionsNumber?: Maybe<Scalars['Int']['output']>;\n};\n\nexport type GqlVariableOutput = {\n  amount: Scalars['U64']['output'];\n  assetId: Scalars['AssetId']['output'];\n  to: Scalars['Address']['output'];\n};\n\nexport type GqlSubmittedStatusFragment = { time: string, type: 'SubmittedStatus' };\n\nexport type GqlSuccessStatusFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSuccessStatusWithBlockIdFragment = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlFailureStatusWithBlockIdFragment = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlSqueezedOutStatusFragment = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusFragment = GqlTransactionStatusFragment_FailureStatus | GqlTransactionStatusFragment_SqueezedOutStatus | GqlTransactionStatusFragment_SubmittedStatus | GqlTransactionStatusFragment_SuccessStatus;\n\nexport type GqlMalleableTransactionFieldsFragment = { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> };\n\ntype GqlTransactionStatusSubscriptionFragment_FailureStatus = { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\ntype GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus = { reason: string, type: 'SqueezedOutStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SubmittedStatus = { time: string, type: 'SubmittedStatus' };\n\ntype GqlTransactionStatusSubscriptionFragment_SuccessStatus = { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlTransactionStatusSubscriptionFragment = GqlTransactionStatusSubscriptionFragment_FailureStatus | GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus | GqlTransactionStatusSubscriptionFragment_SubmittedStatus | GqlTransactionStatusSubscriptionFragment_SuccessStatus;\n\nexport type GqlTransactionFragment = { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null };\n\nexport type GqlTransactionRawPayloadFragment = { id: string, rawPayload: string };\n\ntype GqlInputEstimatePredicatesFragment_InputCoin = { predicateGasUsed: string };\n\ntype GqlInputEstimatePredicatesFragment_InputContract = {};\n\ntype GqlInputEstimatePredicatesFragment_InputMessage = { predicateGasUsed: string };\n\nexport type GqlInputEstimatePredicatesFragment = GqlInputEstimatePredicatesFragment_InputCoin | GqlInputEstimatePredicatesFragment_InputContract | GqlInputEstimatePredicatesFragment_InputMessage;\n\nexport type GqlTransactionEstimatePredicatesFragment = { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null };\n\nexport type GqlDryRunFailureStatusFragment = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunSuccessStatusFragment = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlReceiptFragment = { id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunFailureStatus = { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\ntype GqlDryRunTransactionStatusFragment_DryRunSuccessStatus = { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null };\n\nexport type GqlDryRunTransactionStatusFragment = GqlDryRunTransactionStatusFragment_DryRunFailureStatus | GqlDryRunTransactionStatusFragment_DryRunSuccessStatus;\n\nexport type GqlDryRunTransactionExecutionStatusFragment = { id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> };\n\nexport type GqlBlockFragment = { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> };\n\nexport type GqlCoinFragment = { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' };\n\nexport type GqlMessageCoinFragment = { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' };\n\nexport type GqlMessageFragment = { amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlGetMessageFragment = { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string };\n\nexport type GqlMessageProofFragment = { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } };\n\nexport type GqlTxParametersFragment = { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string };\n\nexport type GqlPredicateParametersFragment = { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string };\n\nexport type GqlScriptParametersFragment = { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string };\n\nexport type GqlContractParametersFragment = { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string };\n\nexport type GqlFeeParametersFragment = { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string };\n\ntype GqlDependentCostFragment_HeavyOperation = { base: string, gasPerUnit: string, type: 'HeavyOperation' };\n\ntype GqlDependentCostFragment_LightOperation = { base: string, unitsPerGas: string, type: 'LightOperation' };\n\nexport type GqlDependentCostFragment = GqlDependentCostFragment_HeavyOperation | GqlDependentCostFragment_LightOperation;\n\nexport type GqlGasCostsFragment = { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } };\n\nexport type GqlConsensusParametersFragment = { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } };\n\nexport type GqlChainInfoFragment = { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } };\n\nexport type GqlContractBalanceFragment = { contract: string, amount: string, assetId: string };\n\nexport type GqlPageInfoFragment = { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null };\n\nexport type GqlGetVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetVersionQuery = { nodeInfo: { nodeVersion: string } };\n\nexport type GqlNodeInfoFragment = { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string };\n\nexport type GqlRelayedTransactionStatusFragment = { blockHeight: string, failure: string };\n\nexport type GqlGetNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetNodeInfoQuery = { nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string } };\n\nexport type GqlGetChainQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } } };\n\nexport type GqlGetChainAndNodeInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainAndNodeInfoQuery = { chain: { name: string, daHeight: string, consensusParameters: { version: GqlConsensusParametersVersion, baseAssetId: string, chainId: string, txParams: { version: GqlTxParametersVersion, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxSize: string, maxBytecodeSubsections: string }, predicateParams: { version: GqlPredicateParametersVersion, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, maxMessageDataLength: string }, scriptParams: { version: GqlScriptParametersVersion, maxScriptLength: string, maxScriptDataLength: string }, contractParams: { version: GqlContractParametersVersion, contractMaxSize: string, maxStorageSlots: string }, feeParams: { version: GqlFeeParametersVersion, gasPriceFactor: string, gasPerByte: string }, gasCosts: { ecr1: string, newStoragePerByte: string, contractRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, stateRoot: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, vmInitialization: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' }, s256: { base: string, gasPerUnit: string, type: 'HeavyOperation' } | { base: string, unitsPerGas: string, type: 'LightOperation' } } } }, nodeInfo: { utxoValidation: boolean, vmBacktrace: boolean, maxTx: string, maxDepth: string, nodeVersion: string } };\n\nexport type GqlGetTransactionQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionWithReceiptsQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlGetTransactionWithReceiptsQuery = { transaction?: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } | null };\n\nexport type GqlGetTransactionsQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsQuery = { transactions: { edges: Array<{ node: { rawPayload: string } }>, pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null } } };\n\nexport type GqlGetTransactionsByOwnerQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetTransactionsByOwnerQuery = { transactionsByOwner: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, rawPayload: string, status?: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | null } }> } };\n\nexport type GqlEstimatePredicatesQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlEstimatePredicatesQuery = { estimatePredicates: { inputs?: Array<{ predicateGasUsed: string } | { predicateGasUsed: string } | {}> | null } };\n\nexport type GqlGetLatestBlockQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockQuery = { chain: { latestBlock: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } } };\n\nexport type GqlGetLatestBlockHeightQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestBlockHeightQuery = { chain: { latestBlock: { height: string } } };\n\nexport type GqlGetBlockQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  height?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockQuery = { block?: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } | null };\n\nexport type GqlGetBlockWithTransactionsQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']['input']>;\n  blockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetBlockWithTransactionsQuery = { block?: { id: string, height: string, transactions: Array<{ id: string, rawPayload: string }>, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string } } | null };\n\nexport type GqlGetBlocksQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBlocksQuery = { blocks: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { id: string, height: string, header: { time: string, daHeight: string, stateTransitionBytecodeVersion: string, transactionsCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, prevRoot: string, applicationHash: string }, transactions: Array<{ id: string }> } }> } };\n\nexport type GqlGetCoinQueryVariables = Exact<{\n  coinId: Scalars['UtxoId']['input'];\n}>;\n\n\nexport type GqlGetCoinQuery = { coin?: { owner: string, utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | null };\n\nexport type GqlGetCoinsQueryVariables = Exact<{\n  filter: GqlCoinFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetCoinsQuery = { coins: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } }> } };\n\nexport type GqlGetCoinsToSpendQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  queryPerAsset: Array<GqlSpendQueryElementInput> | GqlSpendQueryElementInput;\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n}>;\n\n\nexport type GqlGetCoinsToSpendQuery = { coinsToSpend: Array<Array<{ utxoId: string, amount: string, assetId: string, blockCreated: string, txCreatedIdx: string, type: 'Coin' } | { sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string, type: 'MessageCoin' }>> };\n\nexport type GqlGetContractQueryVariables = Exact<{\n  contractId: Scalars['ContractId']['input'];\n}>;\n\n\nexport type GqlGetContractQuery = { contract?: { bytecode: string, id: string } | null };\n\nexport type GqlGetContractBalanceQueryVariables = Exact<{\n  contract: Scalars['ContractId']['input'];\n  asset: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetContractBalanceQuery = { contractBalance: { contract: string, amount: string, assetId: string } };\n\nexport type GqlGetBalanceQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  assetId: Scalars['AssetId']['input'];\n}>;\n\n\nexport type GqlGetBalanceQuery = { balance: { amount: string } };\n\nexport type GqlGetLatestGasPriceQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetLatestGasPriceQuery = { latestGasPrice: { gasPrice: string } };\n\nexport type GqlEstimateGasPriceQueryVariables = Exact<{\n  blockHorizon: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlEstimateGasPriceQuery = { estimateGasPrice: { gasPrice: string } };\n\nexport type GqlGetBalancesQueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetBalancesQuery = { balances: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { assetId: string, amount: string } }> } };\n\nexport type GqlGetMessagesQueryVariables = Exact<{\n  owner: Scalars['Address']['input'];\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n}>;\n\n\nexport type GqlGetMessagesQuery = { messages: { pageInfo: { hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ node: { nonce: string, amount: string, sender: string, recipient: string, data: string, daHeight: string } }> } };\n\nexport type GqlGetMessageProofQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n  nonce: Scalars['Nonce']['input'];\n  commitBlockId?: InputMaybe<Scalars['BlockId']['input']>;\n  commitBlockHeight?: InputMaybe<Scalars['U32']['input']>;\n}>;\n\n\nexport type GqlGetMessageProofQuery = { messageProof?: { sender: string, recipient: string, amount: string, data: string, messageProof: { proofSet: Array<string>, proofIndex: string }, blockProof: { proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string }, commitBlockHeader: { version: GqlHeaderVersion, id: string, daHeight: string, consensusParametersVersion: string, stateTransitionBytecodeVersion: string, transactionsCount: string, messageReceiptCount: string, transactionsRoot: string, messageOutboxRoot: string, eventInboxRoot: string, height: string, prevRoot: string, time: string, applicationHash: string } } | null };\n\nexport type GqlGetMessageStatusQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageStatusQuery = { messageStatus: { state: GqlMessageState } };\n\nexport type GqlGetRelayedTransactionStatusQueryVariables = Exact<{\n  relayedTransactionId: Scalars['RelayedTransactionId']['input'];\n}>;\n\n\nexport type GqlGetRelayedTransactionStatusQuery = { relayedTransactionStatus?: { blockHeight: string, failure: string } | null };\n\nexport type GqlDryRunMutationVariables = Exact<{\n  encodedTransactions: Array<Scalars['HexString']['input']> | Scalars['HexString']['input'];\n  utxoValidation?: InputMaybe<Scalars['Boolean']['input']>;\n  gasPrice?: InputMaybe<Scalars['U64']['input']>;\n}>;\n\n\nexport type GqlDryRunMutation = { dryRun: Array<{ id: string, status: { totalGas: string, totalFee: string, reason: string, type: 'DryRunFailureStatus', programState?: { returnType: GqlReturnType, data: string } | null } | { totalGas: string, totalFee: string, type: 'DryRunSuccessStatus', programState?: { returnType: GqlReturnType, data: string } | null }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> }> };\n\nexport type GqlSubmitMutationVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitMutation = { submit: { id: string } };\n\nexport type GqlProduceBlocksMutationVariables = Exact<{\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']['input']>;\n  blocksToProduce: Scalars['U32']['input'];\n}>;\n\n\nexport type GqlProduceBlocksMutation = { produceBlocks: string };\n\nexport type GqlGetMessageByNonceQueryVariables = Exact<{\n  nonce: Scalars['Nonce']['input'];\n}>;\n\n\nexport type GqlGetMessageByNonceQuery = { message?: { amount: string, sender: string, recipient: string, data: string, daHeight: string } | null };\n\nexport type GqlIsUserAccountQueryVariables = Exact<{\n  blobId: Scalars['BlobId']['input'];\n  contractId: Scalars['ContractId']['input'];\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlIsUserAccountQuery = { blob?: { id: any } | null, contract?: { id: string } | null, transaction?: { id: string } | null };\n\nexport type GqlGetConsensusParametersVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetConsensusParametersVersionQuery = { chain: { latestBlock: { header: { consensusParametersVersion: string } } } };\n\nexport type GqlSubmitAndAwaitStatusSubscriptionVariables = Exact<{\n  encodedTransaction: Scalars['HexString']['input'];\n}>;\n\n\nexport type GqlSubmitAndAwaitStatusSubscription = { submitAndAwaitStatus: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport type GqlStatusChangeSubscriptionVariables = Exact<{\n  transactionId: Scalars['TransactionId']['input'];\n}>;\n\n\nexport type GqlStatusChangeSubscription = { statusChange: { totalGas: string, totalFee: string, time: string, reason: string, type: 'FailureStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } | { reason: string, type: 'SqueezedOutStatus' } | { time: string, type: 'SubmittedStatus' } | { time: string, totalGas: string, totalFee: string, type: 'SuccessStatus', transaction: { receiptsRoot?: string | null, inputs?: Array<{ txPointer: string, type: 'InputCoin' } | { txPointer: string, type: 'InputContract' } | { type: 'InputMessage' }> | null, outputs: Array<{ to: string, amount: string, assetId: string, type: 'ChangeOutput' } | { to: string, amount: string, assetId: string, type: 'CoinOutput' } | { contract: string, stateRoot: string, type: 'ContractCreated' } | { inputIndex: string, balanceRoot: string, stateRoot: string, type: 'ContractOutput' } | { to: string, amount: string, assetId: string, type: 'VariableOutput' }> }, block: { id: string }, programState?: { returnType: GqlReturnType, data: string } | null, receipts: Array<{ id?: string | null, pc?: string | null, is?: string | null, to?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null }> } };\n\nexport const SubmittedStatusFragmentDoc = gql`\n    fragment SubmittedStatusFragment on SubmittedStatus {\n  type: __typename\n  time\n}\n    `;\nexport const ReceiptFragmentDoc = gql`\n    fragment receiptFragment on Receipt {\n  id\n  pc\n  is\n  to\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    `;\nexport const SuccessStatusFragmentDoc = gql`\n    fragment SuccessStatusFragment on SuccessStatus {\n  type: __typename\n  time\n  programState {\n    returnType\n    data\n  }\n  receipts {\n    ...receiptFragment\n  }\n  totalGas\n  totalFee\n}\n    ${ReceiptFragmentDoc}`;\nexport const SuccessStatusWithBlockIdFragmentDoc = gql`\n    fragment SuccessStatusWithBlockIdFragment on SuccessStatus {\n  ...SuccessStatusFragment\n  block {\n    id\n  }\n}\n    ${SuccessStatusFragmentDoc}`;\nexport const MalleableTransactionFieldsFragmentDoc = gql`\n    fragment malleableTransactionFieldsFragment on Transaction {\n  receiptsRoot\n  inputs {\n    type: __typename\n    ... on InputCoin {\n      txPointer\n    }\n    ... on InputContract {\n      txPointer\n    }\n  }\n  outputs {\n    type: __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract\n      stateRoot\n    }\n  }\n}\n    `;\nexport const FailureStatusFragmentDoc = gql`\n    fragment FailureStatusFragment on FailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  time\n  reason\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentDoc}`;\nexport const FailureStatusWithBlockIdFragmentDoc = gql`\n    fragment FailureStatusWithBlockIdFragment on FailureStatus {\n  ...FailureStatusFragment\n  block {\n    id\n  }\n}\n    ${FailureStatusFragmentDoc}`;\nexport const SqueezedOutStatusFragmentDoc = gql`\n    fragment SqueezedOutStatusFragment on SqueezedOutStatus {\n  type: __typename\n  reason\n}\n    `;\nexport const TransactionStatusSubscriptionFragmentDoc = gql`\n    fragment transactionStatusSubscriptionFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on FailureStatus {\n    ...FailureStatusWithBlockIdFragment\n    transaction {\n      ...malleableTransactionFieldsFragment\n    }\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${MalleableTransactionFieldsFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionStatusFragmentDoc = gql`\n    fragment transactionStatusFragment on TransactionStatus {\n  ... on SubmittedStatus {\n    ...SubmittedStatusFragment\n  }\n  ... on SuccessStatus {\n    ...SuccessStatusFragment\n  }\n  ... on FailureStatus {\n    ...FailureStatusFragment\n  }\n  ... on SqueezedOutStatus {\n    ...SqueezedOutStatusFragment\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusFragmentDoc}\n${FailureStatusFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const TransactionFragmentDoc = gql`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  status {\n    ...transactionStatusFragment\n  }\n}\n    ${TransactionStatusFragmentDoc}`;\nexport const TransactionRawPayloadFragmentDoc = gql`\n    fragment transactionRawPayloadFragment on Transaction {\n  id\n  rawPayload\n}\n    `;\nexport const InputEstimatePredicatesFragmentDoc = gql`\n    fragment inputEstimatePredicatesFragment on Input {\n  ... on InputCoin {\n    predicateGasUsed\n  }\n  ... on InputMessage {\n    predicateGasUsed\n  }\n}\n    `;\nexport const TransactionEstimatePredicatesFragmentDoc = gql`\n    fragment transactionEstimatePredicatesFragment on Transaction {\n  inputs {\n    ...inputEstimatePredicatesFragment\n  }\n}\n    ${InputEstimatePredicatesFragmentDoc}`;\nexport const DryRunFailureStatusFragmentDoc = gql`\n    fragment dryRunFailureStatusFragment on DryRunFailureStatus {\n  type: __typename\n  totalGas\n  totalFee\n  reason\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunSuccessStatusFragmentDoc = gql`\n    fragment dryRunSuccessStatusFragment on DryRunSuccessStatus {\n  type: __typename\n  totalGas\n  totalFee\n  programState {\n    returnType\n    data\n  }\n}\n    `;\nexport const DryRunTransactionStatusFragmentDoc = gql`\n    fragment dryRunTransactionStatusFragment on DryRunTransactionStatus {\n  ... on DryRunFailureStatus {\n    ...dryRunFailureStatusFragment\n  }\n  ... on DryRunSuccessStatus {\n    ...dryRunSuccessStatusFragment\n  }\n}\n    ${DryRunFailureStatusFragmentDoc}\n${DryRunSuccessStatusFragmentDoc}`;\nexport const DryRunTransactionExecutionStatusFragmentDoc = gql`\n    fragment dryRunTransactionExecutionStatusFragment on DryRunTransactionExecutionStatus {\n  id\n  status {\n    ...dryRunTransactionStatusFragment\n  }\n  receipts {\n    ...receiptFragment\n  }\n}\n    ${DryRunTransactionStatusFragmentDoc}\n${ReceiptFragmentDoc}`;\nexport const BlockFragmentDoc = gql`\n    fragment blockFragment on Block {\n  id\n  height\n  header {\n    time\n    daHeight\n    stateTransitionBytecodeVersion\n    transactionsCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    prevRoot\n    applicationHash\n  }\n  transactions {\n    id\n  }\n}\n    `;\nexport const CoinFragmentDoc = gql`\n    fragment coinFragment on Coin {\n  type: __typename\n  utxoId\n  amount\n  assetId\n  blockCreated\n  txCreatedIdx\n}\n    `;\nexport const MessageCoinFragmentDoc = gql`\n    fragment messageCoinFragment on MessageCoin {\n  type: __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nexport const MessageFragmentDoc = gql`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  daHeight\n}\n    `;\nexport const GetMessageFragmentDoc = gql`\n    fragment getMessageFragment on Message {\n  ...messageFragment\n  nonce\n}\n    ${MessageFragmentDoc}`;\nexport const MessageProofFragmentDoc = gql`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  commitBlockHeader {\n    version\n    id\n    daHeight\n    consensusParametersVersion\n    stateTransitionBytecodeVersion\n    transactionsCount\n    messageReceiptCount\n    transactionsRoot\n    messageOutboxRoot\n    eventInboxRoot\n    height\n    prevRoot\n    time\n    applicationHash\n  }\n  sender\n  recipient\n  amount\n  data\n}\n    `;\nexport const TxParametersFragmentDoc = gql`\n    fragment TxParametersFragment on TxParameters {\n  version\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxSize\n  maxBytecodeSubsections\n}\n    `;\nexport const PredicateParametersFragmentDoc = gql`\n    fragment PredicateParametersFragment on PredicateParameters {\n  version\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  maxMessageDataLength\n}\n    `;\nexport const ScriptParametersFragmentDoc = gql`\n    fragment ScriptParametersFragment on ScriptParameters {\n  version\n  maxScriptLength\n  maxScriptDataLength\n}\n    `;\nexport const ContractParametersFragmentDoc = gql`\n    fragment ContractParametersFragment on ContractParameters {\n  version\n  contractMaxSize\n  maxStorageSlots\n}\n    `;\nexport const FeeParametersFragmentDoc = gql`\n    fragment FeeParametersFragment on FeeParameters {\n  version\n  gasPriceFactor\n  gasPerByte\n}\n    `;\nexport const DependentCostFragmentDoc = gql`\n    fragment DependentCostFragment on DependentCost {\n  ... on LightOperation {\n    type: __typename\n    base\n    unitsPerGas\n  }\n  ... on HeavyOperation {\n    type: __typename\n    base\n    gasPerUnit\n  }\n}\n    `;\nexport const GasCostsFragmentDoc = gql`\n    fragment GasCostsFragment on GasCosts {\n  contractRoot {\n    ...DependentCostFragment\n  }\n  stateRoot {\n    ...DependentCostFragment\n  }\n  vmInitialization {\n    ...DependentCostFragment\n  }\n  s256 {\n    ...DependentCostFragment\n  }\n  ecr1\n  newStoragePerByte\n}\n    ${DependentCostFragmentDoc}`;\nexport const ConsensusParametersFragmentDoc = gql`\n    fragment consensusParametersFragment on ConsensusParameters {\n  version\n  txParams {\n    ...TxParametersFragment\n  }\n  predicateParams {\n    ...PredicateParametersFragment\n  }\n  scriptParams {\n    ...ScriptParametersFragment\n  }\n  contractParams {\n    ...ContractParametersFragment\n  }\n  feeParams {\n    ...FeeParametersFragment\n  }\n  gasCosts {\n    ...GasCostsFragment\n  }\n  baseAssetId\n  chainId\n}\n    ${TxParametersFragmentDoc}\n${PredicateParametersFragmentDoc}\n${ScriptParametersFragmentDoc}\n${ContractParametersFragmentDoc}\n${FeeParametersFragmentDoc}\n${GasCostsFragmentDoc}`;\nexport const ChainInfoFragmentDoc = gql`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  daHeight\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n}\n    ${ConsensusParametersFragmentDoc}`;\nexport const ContractBalanceFragmentDoc = gql`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nexport const PageInfoFragmentDoc = gql`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nexport const NodeInfoFragmentDoc = gql`\n    fragment nodeInfoFragment on NodeInfo {\n  utxoValidation\n  vmBacktrace\n  maxTx\n  maxDepth\n  nodeVersion\n}\n    `;\nexport const RelayedTransactionStatusFragmentDoc = gql`\n    fragment relayedTransactionStatusFragment on RelayedTransactionStatus {\n  ... on RelayedTransactionFailed {\n    blockHeight\n    failure\n  }\n}\n    `;\nexport const GetVersionDocument = gql`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nexport const GetNodeInfoDocument = gql`\n    query getNodeInfo {\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${NodeInfoFragmentDoc}`;\nexport const GetChainDocument = gql`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}`;\nexport const GetChainAndNodeInfoDocument = gql`\n    query getChainAndNodeInfo {\n  chain {\n    ...chainInfoFragment\n  }\n  nodeInfo {\n    ...nodeInfoFragment\n  }\n}\n    ${ChainInfoFragmentDoc}\n${NodeInfoFragmentDoc}`;\nexport const GetTransactionDocument = gql`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentDoc}`;\nexport const GetTransactionWithReceiptsDocument = gql`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    id\n    rawPayload\n    status {\n      ... on SubmittedStatus {\n        ...SubmittedStatusFragment\n      }\n      ... on SuccessStatus {\n        ...SuccessStatusWithBlockIdFragment\n      }\n      ... on FailureStatus {\n        ...FailureStatusWithBlockIdFragment\n      }\n      ... on SqueezedOutStatus {\n        ...SqueezedOutStatusFragment\n      }\n    }\n  }\n}\n    ${SubmittedStatusFragmentDoc}\n${SuccessStatusWithBlockIdFragmentDoc}\n${FailureStatusWithBlockIdFragmentDoc}\n${SqueezedOutStatusFragmentDoc}`;\nexport const GetTransactionsDocument = gql`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        rawPayload\n      }\n    }\n    pageInfo {\n      ...pageInfoFragment\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetTransactionsByOwnerDocument = gql`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${TransactionFragmentDoc}`;\nexport const EstimatePredicatesDocument = gql`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionEstimatePredicatesFragment\n  }\n}\n    ${TransactionEstimatePredicatesFragmentDoc}`;\nexport const GetLatestBlockDocument = gql`\n    query getLatestBlock {\n  chain {\n    latestBlock {\n      ...blockFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetLatestBlockHeightDocument = gql`\n    query getLatestBlockHeight {\n  chain {\n    latestBlock {\n      height\n    }\n  }\n}\n    `;\nexport const GetBlockDocument = gql`\n    query getBlock($blockId: BlockId, $height: U32) {\n  block(id: $blockId, height: $height) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentDoc}`;\nexport const GetBlockWithTransactionsDocument = gql`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U32) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionRawPayloadFragment\n    }\n  }\n}\n    ${BlockFragmentDoc}\n${TransactionRawPayloadFragmentDoc}`;\nexport const GetBlocksDocument = gql`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${BlockFragmentDoc}`;\nexport const GetCoinDocument = gql`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n    owner\n  }\n}\n    ${CoinFragmentDoc}`;\nexport const GetCoinsDocument = gql`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${CoinFragmentDoc}`;\nexport const GetCoinsToSpendDocument = gql`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentDoc}\n${MessageCoinFragmentDoc}`;\nexport const GetContractDocument = gql`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nexport const GetContractBalanceDocument = gql`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentDoc}`;\nexport const GetBalanceDocument = gql`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    amount\n  }\n}\n    `;\nexport const GetLatestGasPriceDocument = gql`\n    query getLatestGasPrice {\n  latestGasPrice {\n    gasPrice\n  }\n}\n    `;\nexport const EstimateGasPriceDocument = gql`\n    query estimateGasPrice($blockHorizon: U32!) {\n  estimateGasPrice(blockHorizon: $blockHorizon) {\n    gasPrice\n  }\n}\n    `;\nexport const GetBalancesDocument = gql`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        assetId\n        amount\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}`;\nexport const GetMessagesDocument = gql`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...getMessageFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentDoc}\n${GetMessageFragmentDoc}`;\nexport const GetMessageProofDocument = gql`\n    query getMessageProof($transactionId: TransactionId!, $nonce: Nonce!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    nonce: $nonce\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentDoc}`;\nexport const GetMessageStatusDocument = gql`\n    query getMessageStatus($nonce: Nonce!) {\n  messageStatus(nonce: $nonce) {\n    state\n  }\n}\n    `;\nexport const GetRelayedTransactionStatusDocument = gql`\n    query getRelayedTransactionStatus($relayedTransactionId: RelayedTransactionId!) {\n  relayedTransactionStatus(id: $relayedTransactionId) {\n    ...relayedTransactionStatusFragment\n  }\n}\n    ${RelayedTransactionStatusFragmentDoc}`;\nexport const DryRunDocument = gql`\n    mutation dryRun($encodedTransactions: [HexString!]!, $utxoValidation: Boolean, $gasPrice: U64) {\n  dryRun(\n    txs: $encodedTransactions\n    utxoValidation: $utxoValidation\n    gasPrice: $gasPrice\n  ) {\n    ...dryRunTransactionExecutionStatusFragment\n  }\n}\n    ${DryRunTransactionExecutionStatusFragmentDoc}`;\nexport const SubmitDocument = gql`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nexport const ProduceBlocksDocument = gql`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U32!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\nexport const GetMessageByNonceDocument = gql`\n    query getMessageByNonce($nonce: Nonce!) {\n  message(nonce: $nonce) {\n    ...messageFragment\n  }\n}\n    ${MessageFragmentDoc}`;\nexport const IsUserAccountDocument = gql`\n    query isUserAccount($blobId: BlobId!, $contractId: ContractId!, $transactionId: TransactionId!) {\n  blob(id: $blobId) {\n    id\n  }\n  contract(id: $contractId) {\n    id\n  }\n  transaction(id: $transactionId) {\n    id\n  }\n}\n    `;\nexport const GetConsensusParametersVersionDocument = gql`\n    query getConsensusParametersVersion {\n  chain {\n    latestBlock {\n      header {\n        consensusParametersVersion\n      }\n    }\n  }\n}\n    `;\nexport const SubmitAndAwaitStatusDocument = gql`\n    subscription submitAndAwaitStatus($encodedTransaction: HexString!) {\n  submitAndAwaitStatus(tx: $encodedTransaction) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport const StatusChangeDocument = gql`\n    subscription statusChange($transactionId: TransactionId!) {\n  statusChange(id: $transactionId) {\n    ...transactionStatusSubscriptionFragment\n  }\n}\n    ${TransactionStatusSubscriptionFragmentDoc}`;\nexport type Requester<C = {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>\nexport function getSdk<C>(requester: Requester<C>) {\n  return {\n    getVersion(variables?: GqlGetVersionQueryVariables, options?: C): Promise<GqlGetVersionQuery> {\n      return requester<GqlGetVersionQuery, GqlGetVersionQueryVariables>(GetVersionDocument, variables, options) as Promise<GqlGetVersionQuery>;\n    },\n    getNodeInfo(variables?: GqlGetNodeInfoQueryVariables, options?: C): Promise<GqlGetNodeInfoQuery> {\n      return requester<GqlGetNodeInfoQuery, GqlGetNodeInfoQueryVariables>(GetNodeInfoDocument, variables, options) as Promise<GqlGetNodeInfoQuery>;\n    },\n    getChain(variables?: GqlGetChainQueryVariables, options?: C): Promise<GqlGetChainQuery> {\n      return requester<GqlGetChainQuery, GqlGetChainQueryVariables>(GetChainDocument, variables, options) as Promise<GqlGetChainQuery>;\n    },\n    getChainAndNodeInfo(variables?: GqlGetChainAndNodeInfoQueryVariables, options?: C): Promise<GqlGetChainAndNodeInfoQuery> {\n      return requester<GqlGetChainAndNodeInfoQuery, GqlGetChainAndNodeInfoQueryVariables>(GetChainAndNodeInfoDocument, variables, options) as Promise<GqlGetChainAndNodeInfoQuery>;\n    },\n    getTransaction(variables: GqlGetTransactionQueryVariables, options?: C): Promise<GqlGetTransactionQuery> {\n      return requester<GqlGetTransactionQuery, GqlGetTransactionQueryVariables>(GetTransactionDocument, variables, options) as Promise<GqlGetTransactionQuery>;\n    },\n    getTransactionWithReceipts(variables: GqlGetTransactionWithReceiptsQueryVariables, options?: C): Promise<GqlGetTransactionWithReceiptsQuery> {\n      return requester<GqlGetTransactionWithReceiptsQuery, GqlGetTransactionWithReceiptsQueryVariables>(GetTransactionWithReceiptsDocument, variables, options) as Promise<GqlGetTransactionWithReceiptsQuery>;\n    },\n    getTransactions(variables?: GqlGetTransactionsQueryVariables, options?: C): Promise<GqlGetTransactionsQuery> {\n      return requester<GqlGetTransactionsQuery, GqlGetTransactionsQueryVariables>(GetTransactionsDocument, variables, options) as Promise<GqlGetTransactionsQuery>;\n    },\n    getTransactionsByOwner(variables: GqlGetTransactionsByOwnerQueryVariables, options?: C): Promise<GqlGetTransactionsByOwnerQuery> {\n      return requester<GqlGetTransactionsByOwnerQuery, GqlGetTransactionsByOwnerQueryVariables>(GetTransactionsByOwnerDocument, variables, options) as Promise<GqlGetTransactionsByOwnerQuery>;\n    },\n    estimatePredicates(variables: GqlEstimatePredicatesQueryVariables, options?: C): Promise<GqlEstimatePredicatesQuery> {\n      return requester<GqlEstimatePredicatesQuery, GqlEstimatePredicatesQueryVariables>(EstimatePredicatesDocument, variables, options) as Promise<GqlEstimatePredicatesQuery>;\n    },\n    getLatestBlock(variables?: GqlGetLatestBlockQueryVariables, options?: C): Promise<GqlGetLatestBlockQuery> {\n      return requester<GqlGetLatestBlockQuery, GqlGetLatestBlockQueryVariables>(GetLatestBlockDocument, variables, options) as Promise<GqlGetLatestBlockQuery>;\n    },\n    getLatestBlockHeight(variables?: GqlGetLatestBlockHeightQueryVariables, options?: C): Promise<GqlGetLatestBlockHeightQuery> {\n      return requester<GqlGetLatestBlockHeightQuery, GqlGetLatestBlockHeightQueryVariables>(GetLatestBlockHeightDocument, variables, options) as Promise<GqlGetLatestBlockHeightQuery>;\n    },\n    getBlock(variables?: GqlGetBlockQueryVariables, options?: C): Promise<GqlGetBlockQuery> {\n      return requester<GqlGetBlockQuery, GqlGetBlockQueryVariables>(GetBlockDocument, variables, options) as Promise<GqlGetBlockQuery>;\n    },\n    getBlockWithTransactions(variables?: GqlGetBlockWithTransactionsQueryVariables, options?: C): Promise<GqlGetBlockWithTransactionsQuery> {\n      return requester<GqlGetBlockWithTransactionsQuery, GqlGetBlockWithTransactionsQueryVariables>(GetBlockWithTransactionsDocument, variables, options) as Promise<GqlGetBlockWithTransactionsQuery>;\n    },\n    getBlocks(variables?: GqlGetBlocksQueryVariables, options?: C): Promise<GqlGetBlocksQuery> {\n      return requester<GqlGetBlocksQuery, GqlGetBlocksQueryVariables>(GetBlocksDocument, variables, options) as Promise<GqlGetBlocksQuery>;\n    },\n    getCoin(variables: GqlGetCoinQueryVariables, options?: C): Promise<GqlGetCoinQuery> {\n      return requester<GqlGetCoinQuery, GqlGetCoinQueryVariables>(GetCoinDocument, variables, options) as Promise<GqlGetCoinQuery>;\n    },\n    getCoins(variables: GqlGetCoinsQueryVariables, options?: C): Promise<GqlGetCoinsQuery> {\n      return requester<GqlGetCoinsQuery, GqlGetCoinsQueryVariables>(GetCoinsDocument, variables, options) as Promise<GqlGetCoinsQuery>;\n    },\n    getCoinsToSpend(variables: GqlGetCoinsToSpendQueryVariables, options?: C): Promise<GqlGetCoinsToSpendQuery> {\n      return requester<GqlGetCoinsToSpendQuery, GqlGetCoinsToSpendQueryVariables>(GetCoinsToSpendDocument, variables, options) as Promise<GqlGetCoinsToSpendQuery>;\n    },\n    getContract(variables: GqlGetContractQueryVariables, options?: C): Promise<GqlGetContractQuery> {\n      return requester<GqlGetContractQuery, GqlGetContractQueryVariables>(GetContractDocument, variables, options) as Promise<GqlGetContractQuery>;\n    },\n    getContractBalance(variables: GqlGetContractBalanceQueryVariables, options?: C): Promise<GqlGetContractBalanceQuery> {\n      return requester<GqlGetContractBalanceQuery, GqlGetContractBalanceQueryVariables>(GetContractBalanceDocument, variables, options) as Promise<GqlGetContractBalanceQuery>;\n    },\n    getBalance(variables: GqlGetBalanceQueryVariables, options?: C): Promise<GqlGetBalanceQuery> {\n      return requester<GqlGetBalanceQuery, GqlGetBalanceQueryVariables>(GetBalanceDocument, variables, options) as Promise<GqlGetBalanceQuery>;\n    },\n    getLatestGasPrice(variables?: GqlGetLatestGasPriceQueryVariables, options?: C): Promise<GqlGetLatestGasPriceQuery> {\n      return requester<GqlGetLatestGasPriceQuery, GqlGetLatestGasPriceQueryVariables>(GetLatestGasPriceDocument, variables, options) as Promise<GqlGetLatestGasPriceQuery>;\n    },\n    estimateGasPrice(variables: GqlEstimateGasPriceQueryVariables, options?: C): Promise<GqlEstimateGasPriceQuery> {\n      return requester<GqlEstimateGasPriceQuery, GqlEstimateGasPriceQueryVariables>(EstimateGasPriceDocument, variables, options) as Promise<GqlEstimateGasPriceQuery>;\n    },\n    getBalances(variables: GqlGetBalancesQueryVariables, options?: C): Promise<GqlGetBalancesQuery> {\n      return requester<GqlGetBalancesQuery, GqlGetBalancesQueryVariables>(GetBalancesDocument, variables, options) as Promise<GqlGetBalancesQuery>;\n    },\n    getMessages(variables: GqlGetMessagesQueryVariables, options?: C): Promise<GqlGetMessagesQuery> {\n      return requester<GqlGetMessagesQuery, GqlGetMessagesQueryVariables>(GetMessagesDocument, variables, options) as Promise<GqlGetMessagesQuery>;\n    },\n    getMessageProof(variables: GqlGetMessageProofQueryVariables, options?: C): Promise<GqlGetMessageProofQuery> {\n      return requester<GqlGetMessageProofQuery, GqlGetMessageProofQueryVariables>(GetMessageProofDocument, variables, options) as Promise<GqlGetMessageProofQuery>;\n    },\n    getMessageStatus(variables: GqlGetMessageStatusQueryVariables, options?: C): Promise<GqlGetMessageStatusQuery> {\n      return requester<GqlGetMessageStatusQuery, GqlGetMessageStatusQueryVariables>(GetMessageStatusDocument, variables, options) as Promise<GqlGetMessageStatusQuery>;\n    },\n    getRelayedTransactionStatus(variables: GqlGetRelayedTransactionStatusQueryVariables, options?: C): Promise<GqlGetRelayedTransactionStatusQuery> {\n      return requester<GqlGetRelayedTransactionStatusQuery, GqlGetRelayedTransactionStatusQueryVariables>(GetRelayedTransactionStatusDocument, variables, options) as Promise<GqlGetRelayedTransactionStatusQuery>;\n    },\n    dryRun(variables: GqlDryRunMutationVariables, options?: C): Promise<GqlDryRunMutation> {\n      return requester<GqlDryRunMutation, GqlDryRunMutationVariables>(DryRunDocument, variables, options) as Promise<GqlDryRunMutation>;\n    },\n    submit(variables: GqlSubmitMutationVariables, options?: C): Promise<GqlSubmitMutation> {\n      return requester<GqlSubmitMutation, GqlSubmitMutationVariables>(SubmitDocument, variables, options) as Promise<GqlSubmitMutation>;\n    },\n    produceBlocks(variables: GqlProduceBlocksMutationVariables, options?: C): Promise<GqlProduceBlocksMutation> {\n      return requester<GqlProduceBlocksMutation, GqlProduceBlocksMutationVariables>(ProduceBlocksDocument, variables, options) as Promise<GqlProduceBlocksMutation>;\n    },\n    getMessageByNonce(variables: GqlGetMessageByNonceQueryVariables, options?: C): Promise<GqlGetMessageByNonceQuery> {\n      return requester<GqlGetMessageByNonceQuery, GqlGetMessageByNonceQueryVariables>(GetMessageByNonceDocument, variables, options) as Promise<GqlGetMessageByNonceQuery>;\n    },\n    isUserAccount(variables: GqlIsUserAccountQueryVariables, options?: C): Promise<GqlIsUserAccountQuery> {\n      return requester<GqlIsUserAccountQuery, GqlIsUserAccountQueryVariables>(IsUserAccountDocument, variables, options) as Promise<GqlIsUserAccountQuery>;\n    },\n    getConsensusParametersVersion(variables?: GqlGetConsensusParametersVersionQueryVariables, options?: C): Promise<GqlGetConsensusParametersVersionQuery> {\n      return requester<GqlGetConsensusParametersVersionQuery, GqlGetConsensusParametersVersionQueryVariables>(GetConsensusParametersVersionDocument, variables, options) as Promise<GqlGetConsensusParametersVersionQuery>;\n    },\n    submitAndAwaitStatus(variables: GqlSubmitAndAwaitStatusSubscriptionVariables, options?: C): AsyncIterable<GqlSubmitAndAwaitStatusSubscription> {\n      return requester<GqlSubmitAndAwaitStatusSubscription, GqlSubmitAndAwaitStatusSubscriptionVariables>(SubmitAndAwaitStatusDocument, variables, options) as AsyncIterable<GqlSubmitAndAwaitStatusSubscription>;\n    },\n    statusChange(variables: GqlStatusChangeSubscriptionVariables, options?: C): AsyncIterable<GqlStatusChangeSubscription> {\n      return requester<GqlStatusChangeSubscription, GqlStatusChangeSubscriptionVariables>(StatusChangeDocument, variables, options) as AsyncIterable<GqlStatusChangeSubscription>;\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { DocumentNode } from 'graphql';\nimport { print } from 'graphql';\n\ntype FuelGraphQLSubscriberOptions = {\n  url: string;\n  query: DocumentNode;\n  variables?: Record<string, unknown>;\n  fetchFn: typeof fetch;\n};\n\nexport class FuelGraphqlSubscriber implements AsyncIterator<unknown> {\n  private static textDecoder = new TextDecoder();\n\n  private constructor(private stream: ReadableStreamDefaultReader<Uint8Array>) {}\n\n  public static async create(options: FuelGraphQLSubscriberOptions) {\n    const { url, query, variables, fetchFn } = options;\n    const response = await fetchFn(`${url}-sub`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query: print(query),\n        variables,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/event-stream',\n      },\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [errorReader, resultReader] = response.body!.tee().map((stream) => stream.getReader());\n\n    /**\n     * If the node threw an error, read it and throw it to the user\n     * Else just discard the response and return the subscriber below,\n     * which will have that same response via `resultReader`\n     */\n    await new FuelGraphqlSubscriber(errorReader).next();\n\n    return new FuelGraphqlSubscriber(resultReader);\n  }\n\n  private events: Array<{ data: unknown; errors?: { message: string }[] }> = [];\n  private parsingLeftover = '';\n\n  async next(): Promise<IteratorResult<unknown, unknown>> {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      if (this.events.length > 0) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const { data, errors } = this.events.shift()!;\n        if (Array.isArray(errors)) {\n          throw new FuelError(\n            FuelError.CODES.INVALID_REQUEST,\n            errors.map((err) => err.message).join('\\n\\n')\n          );\n        }\n        return { value: data, done: false };\n      }\n      const { value, done } = await this.stream.read();\n      if (done) {\n        return { value, done };\n      }\n\n      /**\n       * We don't care about keep-alive messages.\n       * The only responses that I came across from the node are either 200 responses with \"data:.*\" or keep-alive messages.\n       * You can find the keep-alive message in the fuel-core codebase (latest permalink as of writing):\n       * https://github.com/FuelLabs/fuel-core/blob/e1e631902f762081d2124d9c457ddfe13ac366dc/crates/fuel-core/src/graphql_api/service.rs#L247\n       * To get the actual latest info you need to check out the master branch (might change):\n       * https://github.com/FuelLabs/fuel-core/blob/master/crates/fuel-core/src/graphql_api/service.rs#L247\n       * */\n      const decoded = FuelGraphqlSubscriber.textDecoder\n        .decode(value)\n        .replace(':keep-alive-text\\n\\n', '');\n\n      if (decoded === '') {\n        continue;\n      }\n\n      const text = `${this.parsingLeftover}${decoded}`;\n      const regex = /data:.*\\n\\n/g;\n\n      const matches = [...text.matchAll(regex)].flatMap((match) => match);\n\n      matches.forEach((match) => {\n        try {\n          this.events.push(JSON.parse(match.replace(/^data:/, '')));\n        } catch (e) {\n          throw new FuelError(\n            ErrorCode.STREAM_PARSING_ERROR,\n            `Error while parsing stream data response: ${text}`\n          );\n        }\n      });\n\n      this.parsingLeftover = text.replace(matches.join(), '');\n    }\n  }\n\n  /**\n   * Gets called when `break` is called in a `for-await-of` loop.\n   */\n  return(): Promise<IteratorResult<unknown, undefined>> {\n    return Promise.resolve({ done: true, value: undefined });\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<unknown, unknown, undefined> {\n    return this;\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport type { ExcludeResourcesOption } from './resource';\n\ninterface CachedResource {\n  utxos: Set<string>;\n  messages: Set<string>;\n  timestamp: number;\n}\n\nconst cache = new Map<string, CachedResource>();\n\nexport class ResourceCache {\n  readonly ttl: number;\n\n  constructor(ttl: number) {\n    this.ttl = ttl; // TTL in milliseconds\n\n    if (typeof ttl !== 'number' || this.ttl <= 0) {\n      throw new FuelError(\n        ErrorCode.INVALID_TTL,\n        `Invalid TTL: ${this.ttl}. Use a value greater than zero.`\n      );\n    }\n  }\n\n  // Add resources to the cache\n  set(transactionId: string, resources: Required<ExcludeResourcesOption>): void {\n    const currentTime = Date.now();\n    const existingResources = cache.get(transactionId) || {\n      utxos: new Set<string>(),\n      messages: new Set<string>(),\n      timestamp: currentTime,\n    };\n\n    resources.utxos.forEach((utxo) => existingResources.utxos.add(hexlify(utxo)));\n    resources.messages.forEach((message) => existingResources.messages.add(hexlify(message)));\n\n    cache.set(transactionId, existingResources);\n  }\n\n  // Remove resources from the cache for a given transaction ID\n  unset(transactionId: string): void {\n    cache.delete(transactionId);\n  }\n\n  // Get all cached resources and remove expired ones\n  getActiveData() {\n    const allResources: { utxos: string[]; messages: string[] } = { utxos: [], messages: [] };\n    const currentTime = Date.now();\n    cache.forEach((resource, transactionId) => {\n      if (currentTime - resource.timestamp < this.ttl) {\n        allResources.utxos.push(...resource.utxos);\n        allResources.messages.push(...resource.messages);\n      } else {\n        cache.delete(transactionId);\n      }\n    });\n    return allResources;\n  }\n\n  // Check if a UTXO ID or message nonce is already cached and not expired\n  isCached(key: string): boolean {\n    const currentTime = Date.now();\n    for (const [transactionId, resourceData] of cache.entries()) {\n      if (currentTime - resourceData.timestamp > this.ttl) {\n        cache.delete(transactionId);\n      } else if (resourceData.utxos.has(key) || resourceData.messages.has(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  clear() {\n    cache.clear();\n  }\n}\n","import { BYTES_32, UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport type { Input } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestInput = {\n  type: InputType.Coin;\n\n  /** UTXO ID */\n  id: BytesLike;\n\n  /** Owning address or script hash */\n  owner: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Asset ID of the coins */\n  assetId: BytesLike;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Index of witness that authorizes spending the coin */\n  witnessIndex: number;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n};\n\nexport type MessageTransactionRequestInput = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: BytesLike;\n\n  /** Address of recipient */\n  recipient: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Index of witness that authorizes the message */\n  witnessIndex: number;\n\n  /** Unique nonce of message */\n  nonce: BytesLike;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n\n  /** data of message */\n  data?: BytesLike;\n};\n\nexport type ContractTransactionRequestInput = {\n  type: InputType.Contract;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Contract ID */\n  contractId: BytesLike;\n};\nexport type TransactionRequestInput =\n  | CoinTransactionRequestInput\n  | ContractTransactionRequestInput\n  | MessageTransactionRequestInput;\n\n/** @hidden */\nexport const inputify = (value: TransactionRequestInput): Input => {\n  const { type } = value;\n\n  switch (value.type) {\n    case InputType.Coin: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      return {\n        type: InputType.Coin,\n        txID: hexlify(arrayify(value.id).slice(0, BYTES_32)),\n        outputIndex: toNumber(arrayify(value.id).slice(BYTES_32, UTXO_ID_LEN)),\n        owner: hexlify(value.owner),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n      };\n    }\n    case InputType.Contract: {\n      return {\n        type: InputType.Contract,\n        txID: ZeroBytes32,\n        outputIndex: 0,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        contractID: hexlify(value.contractId),\n      };\n    }\n    case InputType.Message: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      const data = arrayify(value.data ?? '0x');\n      return {\n        type: InputType.Message,\n        sender: hexlify(value.sender),\n        recipient: hexlify(value.recipient),\n        amount: bn(value.amount),\n        nonce: hexlify(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: bn(predicate.length),\n        predicateDataLength: bn(predicateData.length),\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n        data: hexlify(data),\n        dataLength: data.length,\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction input type: ${type}.`\n      );\n    }\n  }\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Output } from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type CoinTransactionRequestOutput = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Amount of coins to send */\n  amount: BigNumberish;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type ContractTransactionRequestOutput = {\n  type: OutputType.Contract;\n  /** Index of input contract */\n  inputIndex: number;\n};\nexport type ChangeTransactionRequestOutput = {\n  type: OutputType.Change;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type VariableTransactionRequestOutput = {\n  type: OutputType.Variable;\n};\nexport type ContractCreatedTransactionRequestOutput = {\n  type: OutputType.ContractCreated;\n  /** Contract ID */\n  contractId: BytesLike;\n  /** State Root */\n  stateRoot: BytesLike;\n};\nexport type TransactionRequestOutput =\n  | CoinTransactionRequestOutput\n  | ContractTransactionRequestOutput\n  | ChangeTransactionRequestOutput\n  | VariableTransactionRequestOutput\n  | ContractCreatedTransactionRequestOutput;\n\n/** @hidden */\nexport const outputify = (value: TransactionRequestOutput): Output => {\n  const { type } = value;\n\n  switch (type) {\n    case OutputType.Coin: {\n      return {\n        type: OutputType.Coin,\n        to: hexlify(value.to),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Contract: {\n      return {\n        type: OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n      };\n    }\n    case OutputType.Change: {\n      return {\n        type: OutputType.Change,\n        to: hexlify(value.to),\n        amount: bn(0),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Variable: {\n      return {\n        type: OutputType.Variable,\n        to: ZeroBytes32,\n        amount: bn(0),\n        assetId: ZeroBytes32,\n      };\n    }\n    case OutputType.ContractCreated: {\n      return {\n        type: OutputType.ContractCreated,\n        contractId: hexlify(value.contractId),\n        stateRoot: hexlify(value.stateRoot),\n      };\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_INPUT,\n        `Invalid transaction output type: ${type}.`\n      );\n    }\n  }\n};\n","import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport { Address, addressify } from '@fuel-ts/address';\nimport type { AddressLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionScript,\n  Policy,\n  TransactionCreate,\n  TransactionBlob,\n  TransactionUpload,\n  TransactionUpgrade,\n} from '@fuel-ts/transactions';\nimport {\n  PolicyType,\n  TransactionCoder,\n  InputType,\n  OutputType,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { concat, hexlify, isDefined } from '@fuel-ts/utils';\n\nimport type { Account } from '../../account';\nimport type { Coin } from '../coin';\nimport type { CoinQuantity, CoinQuantityLike } from '../coin-quantity';\nimport { coinQuantityfy } from '../coin-quantity';\nimport { isMessageCoin, type Message, type MessageCoin } from '../message';\nimport type { ChainInfo, GasCosts } from '../provider';\nimport type { Resource } from '../resource';\nimport { isCoin } from '../resource';\nimport { normalizeJSON } from '../utils';\nimport { getMaxGas, getMinGas } from '../utils/gas';\n\nimport { NoWitnessAtIndexError } from './errors';\nimport {\n  getRequestInputResourceOwner,\n  isRequestInputCoinOrMessage,\n  isRequestInputResource,\n  isRequestInputResourceFromOwner,\n} from './helpers';\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport { inputify } from './input';\nimport type {\n  TransactionRequestOutput,\n  ChangeTransactionRequestOutput,\n  CoinTransactionRequestOutput,\n} from './output';\nimport { outputify } from './output';\nimport type { TransactionRequestLike } from './types';\nimport type { TransactionRequestWitness } from './witness';\nimport { witnessify } from './witness';\n\nexport {\n  /**\n   * @hidden\n   */\n  TransactionType,\n};\n\n/**\n * @hidden\n *\n * Interface defining a like structure for a base transaction request.\n */\nexport interface BaseTransactionRequestLike {\n  /** Gas price for transaction */\n  tip?: BigNumberish;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee?: BigNumberish;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BigNumberish;\n  /** List of inputs */\n  inputs?: TransactionRequestInput[];\n  /** List of outputs */\n  outputs?: TransactionRequestOutput[];\n  /** List of witnesses */\n  witnesses?: TransactionRequestWitness[];\n}\n\ntype ToBaseTransactionResponse = Pick<\n  TransactionScript,\n  | 'inputs'\n  | 'inputsCount'\n  | 'outputs'\n  | 'outputsCount'\n  | 'witnesses'\n  | 'witnessesCount'\n  | 'policies'\n  | 'policyTypes'\n>;\n\n/**\n * Abstract class to define the functionalities of a transaction request transaction request.\n */\nexport abstract class BaseTransactionRequest implements BaseTransactionRequestLike {\n  /** Type of the transaction */\n  abstract type: TransactionType;\n  /** Gas price for transaction */\n  tip?: BN;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** The maximum fee payable by this transaction using BASE_ASSET. */\n  maxFee: BN;\n  /** The maximum amount of witness data allowed for the transaction */\n  witnessLimit?: BN | undefined;\n  /** List of inputs */\n  inputs: TransactionRequestInput[] = [];\n  /** List of outputs */\n  outputs: TransactionRequestOutput[] = [];\n  /** List of witnesses */\n  witnesses: TransactionRequestWitness[] = [];\n\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    tip,\n    maturity,\n    maxFee,\n    witnessLimit,\n    inputs,\n    outputs,\n    witnesses,\n  }: BaseTransactionRequestLike = {}) {\n    this.tip = tip ? bn(tip) : undefined;\n    this.maturity = maturity && maturity > 0 ? maturity : undefined;\n    this.witnessLimit = isDefined(witnessLimit) ? bn(witnessLimit) : undefined;\n    this.maxFee = bn(maxFee);\n    this.inputs = inputs ?? [];\n    this.outputs = outputs ?? [];\n    this.witnesses = witnesses ?? [];\n  }\n\n  static getPolicyMeta(req: BaseTransactionRequest) {\n    let policyTypes = 0;\n    const policies: Policy[] = [];\n\n    const { tip, witnessLimit, maturity } = req;\n\n    if (bn(tip).gt(0)) {\n      policyTypes += PolicyType.Tip;\n      policies.push({ data: bn(tip), type: PolicyType.Tip });\n    }\n    if (isDefined(witnessLimit) && bn(witnessLimit).gte(0)) {\n      policyTypes += PolicyType.WitnessLimit;\n      policies.push({ data: bn(witnessLimit), type: PolicyType.WitnessLimit });\n    }\n    if (maturity && maturity > 0) {\n      policyTypes += PolicyType.Maturity;\n      policies.push({ data: maturity, type: PolicyType.Maturity });\n    }\n\n    policyTypes += PolicyType.MaxFee;\n    policies.push({ data: req.maxFee, type: PolicyType.MaxFee });\n\n    return {\n      policyTypes,\n      policies,\n    };\n  }\n\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n\n  protected getBaseTransaction(): ToBaseTransactionResponse {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n\n    const { policyTypes, policies } = BaseTransactionRequest.getPolicyMeta(this);\n\n    return {\n      policyTypes,\n      inputs,\n      outputs,\n      policies,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length,\n    };\n  }\n\n  abstract toTransaction():\n    | TransactionCreate\n    | TransactionScript\n    | TransactionBlob\n    | TransactionUpgrade\n    | TransactionUpload;\n\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes(): Uint8Array {\n    return new TransactionCoder().encode(this.toTransaction());\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  protected pushInput(input: TransactionRequestInput): number {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  protected pushOutput(output: TransactionRequestOutput): number {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes a witness to the list and returns the index\n   *\n   * @param signature - The signature to add to the witness.\n   * @returns The index of the created witness.\n   */\n  addWitness(signature: BytesLike) {\n    this.witnesses.push(signature);\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   *\n   * @returns The index of the created witness.\n   */\n  addEmptyWitness(): number {\n    // Push a dummy witness with same byte size as a real witness signature\n    this.addWitness(concat([ZeroBytes32, ZeroBytes32]));\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address: string | Address, signature: BytesLike) {\n    const ownerAddress = Address.fromAddressOrString(address);\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n    if (typeof witnessIndex === 'number') {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index: number, witness: TransactionRequestWitness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n\n  /**\n   * Helper function to add an external signature to the transaction.\n   *\n   * @param account - The account/s to sign to the transaction.\n   * @returns The transaction with the signature witness added.\n   */\n  async addAccountWitnesses(account: Account | Account[]) {\n    const accounts = Array.isArray(account) ? account : [account];\n    await Promise.all(\n      accounts.map(async (acc) => {\n        this.addWitness(await acc.signTransaction(<TransactionRequestLike>this));\n      })\n    );\n\n    return this;\n  }\n\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs(): CoinTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is CoinTransactionRequestInput => input.type === InputType.Coin\n    );\n  }\n\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs(): CoinTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is CoinTransactionRequestOutput => output.type === OutputType.Coin\n    );\n  }\n\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs(): ChangeTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ChangeTransactionRequestOutput => output.type === OutputType.Change\n    );\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner: AddressLike): number | undefined {\n    const ownerAddress = addressify(owner);\n\n    const found = this.inputs.find((input) => {\n      switch (input.type) {\n        case InputType.Coin:\n          return hexlify((<CoinTransactionRequestInput>input).owner) === ownerAddress.toB256();\n        case InputType.Message:\n          return (\n            hexlify((<MessageTransactionRequestInput>input).recipient) === ownerAddress.toB256()\n          );\n        default:\n          return false;\n      }\n    });\n\n    return (<CoinTransactionRequestInput>found)?.witnessIndex;\n  }\n\n  /**\n   * Adds a single coin input to the transaction and a change output for the related\n   * assetId, if one it was not added yet.\n   *\n   * @param coin - Coin resource.\n   */\n  addCoinInput(coin: Coin) {\n    const { assetId, owner, amount, id, predicate, predicateData } = coin;\n\n    let witnessIndex;\n\n    if (coin.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: CoinTransactionRequestInput = {\n      id,\n      type: InputType.Coin,\n      owner: owner.toB256(),\n      amount,\n      assetId,\n      txPointer: '0x00000000000000000000000000000000',\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    this.addChangeOutput(owner, assetId);\n  }\n\n  /**\n   * Adds a single message input to the transaction and a change output for the\n   * asset against the message\n   *\n   * @param message - Message resource.\n   */\n  addMessageInput(message: Message | MessageCoin) {\n    const { recipient, sender, amount, predicate, nonce, predicateData } = message;\n\n    let witnessIndex;\n\n    if (message.predicate) {\n      witnessIndex = 0;\n    } else {\n      witnessIndex = this.getCoinInputWitnessIndexByOwner(recipient);\n\n      // Insert a dummy witness if no witness exists\n      if (typeof witnessIndex !== 'number') {\n        witnessIndex = this.addEmptyWitness();\n      }\n    }\n\n    const input: MessageTransactionRequestInput = {\n      nonce,\n      type: InputType.Message,\n      sender: sender.toB256(),\n      recipient: recipient.toB256(),\n      data: isMessageCoin(message) ? '0x' : message.data,\n      amount,\n      witnessIndex,\n      predicate,\n      predicateData,\n    };\n\n    // Insert the Input\n    this.pushInput(input);\n\n    // Insert a ChangeOutput if it does not exist\n    if (isMessageCoin(message)) {\n      this.addChangeOutput(recipient, message.assetId);\n    }\n  }\n\n  /**\n   * Adds a single resource to the transaction by adding a coin/message input and a\n   * change output for the related assetId, if one it was not added yet.\n   *\n   * @param resource - The resource to add.\n   * @returns This transaction.\n   */\n  addResource(resource: Resource) {\n    if (isCoin(resource)) {\n      this.addCoinInput(resource);\n    } else {\n      this.addMessageInput(resource);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds multiple resources to the transaction by adding coin/message inputs and change\n   * outputs from the related assetIds.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResources(resources: ReadonlyArray<Resource>) {\n    resources.forEach((resource) => this.addResource(resource));\n\n    return this;\n  }\n\n  /**\n   * Adds a coin output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(to: AddressLike, amount: BigNumberish, assetId: BytesLike) {\n    this.pushOutput({\n      type: OutputType.Coin,\n      to: addressify(to).toB256(),\n      amount,\n      assetId,\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(to: AddressLike, quantities: CoinQuantityLike[]) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: OutputType.Coin,\n        to: addressify(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId,\n      });\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds a change output to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param assetId - Asset ID of coin.\n   */\n  addChangeOutput(to: AddressLike, assetId: BytesLike) {\n    // Find the ChangeOutput for the AssetId of the Resource\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => hexlify(output.assetId) === assetId\n    );\n\n    // Insert a ChangeOutput if it does not exist\n    if (!changeOutput) {\n      this.pushOutput({\n        type: OutputType.Change,\n        to: addressify(to).toB256(),\n        assetId,\n      });\n    }\n  }\n\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n\n  /**\n   * @hidden\n   */\n  metadataGas(_gasCosts: GasCosts): BN {\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Not implemented');\n  }\n\n  /**\n   * @hidden\n   */\n  calculateMinGas(chainInfo: ChainInfo): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      gasCosts,\n      feeParameters: { gasPerByte },\n    } = consensusParameters;\n    return getMinGas({\n      gasPerByte,\n      gasCosts,\n      inputs: this.inputs,\n      txBytesSize: this.byteSize(),\n      metadataGas: this.metadataGas(gasCosts),\n    });\n  }\n\n  calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Funds the transaction with fake UTXOs for each assetId and amount in the\n   * quantities array.\n   *\n   * @param quantities - CoinQuantity Array.\n   * @param baseAssetId - The base asset to fund the transaction.\n   * @deprecated - This method is deprecated and will be removed in future versions.\n   * Please use `Account.generateFakeResources` along with `this.addResources` instead.\n   */\n  fundWithFakeUtxos(quantities: CoinQuantity[], baseAssetId: string, resourcesOwner?: Address) {\n    const findAssetInput = (assetId: string) =>\n      this.inputs.find((input) => {\n        if ('assetId' in input) {\n          return input.assetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n\n      let usedQuantity = quantity;\n\n      if (assetId === baseAssetId) {\n        usedQuantity = bn('1000000000000000000');\n      }\n\n      if (assetInput && 'assetId' in assetInput) {\n        assetInput.id = hexlify(randomBytes(UTXO_ID_LEN));\n        assetInput.amount = usedQuantity;\n      } else {\n        this.addResources([\n          {\n            id: hexlify(randomBytes(UTXO_ID_LEN)),\n            amount: usedQuantity,\n            assetId,\n            owner: resourcesOwner || Address.fromRandom(),\n            blockCreated: bn(1),\n            txCreatedIdx: bn(1),\n          },\n        ]);\n      }\n    };\n\n    updateAssetInput(baseAssetId, bn(100_000_000_000));\n    quantities.forEach((q) => updateAssetInput(q.assetId, q.amount));\n\n    return this;\n  }\n\n  /**\n   * Retrieves an array of CoinQuantity for each coin output present in the transaction.\n   * a transaction.\n   *\n   * @returns  CoinQuantity array.\n   */\n  getCoinOutputsQuantities(): CoinQuantity[] {\n    const coinsQuantities = this.getCoinOutputs().map(({ amount, assetId }) => ({\n      amount: bn(amount),\n      assetId: assetId.toString(),\n    }));\n\n    return coinsQuantities;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  abstract getTransactionId(chainId: number): string;\n\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n\n  removeWitness(index: number) {\n    this.witnesses.splice(index, 1);\n    this.adjustWitnessIndexes(index);\n  }\n\n  private adjustWitnessIndexes(removedIndex: number) {\n    this.inputs.filter(isRequestInputResource).forEach((input) => {\n      if (input.witnessIndex > removedIndex) {\n        // eslint-disable-next-line no-param-reassign\n        input.witnessIndex -= 1;\n      }\n    });\n  }\n\n  updatePredicateGasUsed(inputs: TransactionRequestInput[]) {\n    const inputsToExtractGasUsed = inputs.filter(isRequestInputCoinOrMessage);\n\n    this.inputs.filter(isRequestInputResource).forEach((i) => {\n      const owner = getRequestInputResourceOwner(i);\n      const correspondingInput = inputsToExtractGasUsed.find((x) =>\n        isRequestInputResourceFromOwner(x, Address.fromString(String(owner)))\n      );\n\n      if (\n        correspondingInput &&\n        'predicateGasUsed' in correspondingInput &&\n        bn(correspondingInput.predicateGasUsed).gt(0)\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        i.predicateGasUsed = correspondingInput.predicateGasUsed;\n      }\n    });\n  }\n\n  byteLength(): number {\n    return this.toTransactionBytes().byteLength;\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { GqlMessageState } from './__generated__/operations';\n\n// #region Message-shape\n/**\n * A Fuel message\n */\nexport type Message = {\n  messageId: BytesLike;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  data: BytesLike;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n// #endregion Message-shape\n\nexport type MessageCoin = {\n  assetId: string;\n  sender: Address;\n  recipient: Address;\n  nonce: BytesLike;\n  amount: BN;\n  daHeight: BN;\n  predicate?: BytesLike;\n  predicateData?: BytesLike;\n};\n\nexport type MerkleProof = {\n  proofSet: Array<string>;\n  proofIndex: BN;\n};\n\nexport type BlockHeader = {\n  id: string;\n  daHeight: BN;\n  transactionsCount: number;\n  transactionsRoot: string;\n  height: BN;\n  prevRoot: string;\n  time: string;\n  applicationHash: string;\n  messageOutboxRoot: string;\n  eventInboxRoot: string;\n  consensusParametersVersion: number;\n  stateTransitionBytecodeVersion: number;\n  messageReceiptCount: number;\n};\n\n/**\n * Message Proof\n */\nexport type MessageProof = {\n  messageProof: MerkleProof;\n  blockProof: MerkleProof;\n  messageBlockHeader: BlockHeader;\n  commitBlockHeader: BlockHeader;\n  sender: Address;\n  recipient: Address;\n  nonce: string;\n  amount: BN;\n  data: string;\n};\n\n/**\n * Message Status\n */\nexport type MessageStatus = {\n  state: GqlMessageState;\n};\n\nexport const isMessageCoin = (message: Message | MessageCoin): message is MessageCoin =>\n  !('data' in message);\n","import type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Coin } from './coin';\nimport type { MessageCoin } from './message';\n\nexport type RawCoin = {\n  utxoId: string;\n  owner: string;\n  amount: string;\n  assetId: string;\n  blockCreated: string;\n  txCreatedIdx: string;\n};\n\nexport type RawMessage = {\n  amount: string;\n  sender: string;\n  assetId: string;\n  recipient: string;\n  data: string;\n  nonce: string;\n  daHeight: string;\n};\n\nexport type RawResource = RawCoin | RawMessage;\nexport type Resource = Coin | MessageCoin;\n\n/** @hidden */\nexport type ExcludeResourcesOption = {\n  utxos?: BytesLike[];\n  messages?: BytesLike[];\n};\n\n/** @hidden */\nexport const isRawCoin = (resource: RawResource): resource is RawCoin => 'utxoId' in resource;\n/** @hidden */\nexport const isRawMessage = (resource: RawResource): resource is RawMessage =>\n  'recipient' in resource;\n/** @hidden */\nexport const isCoin = (resource: Resource): resource is Coin => 'id' in resource;\n/** @hidden */\nexport const isMessage = (resource: Resource): resource is MessageCoin => 'recipient' in resource;\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptBurn,\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptMessageOut,\n  ReceiptMint,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptScriptResult,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n} from '@fuel-ts/transactions';\nimport { getMintedAssetId, InputMessageCoder, ReceiptType } from '@fuel-ts/transactions';\nimport { FAILED_TRANSFER_TO_ADDRESS_SIGNAL } from '@fuel-ts/transactions/configs';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nimport type { GqlReceiptFragment } from '../__generated__/operations';\nimport { GqlReceiptType } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\n/** @hidden */\nconst doesReceiptHaveMissingOutputVariables = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptRevert =>\n  receipt.type === ReceiptType.Revert &&\n  receipt.val.toString('hex') === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\n\n/** @hidden */\nconst doesReceiptHaveMissingContractId = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptPanic =>\n  receipt.type === ReceiptType.Panic &&\n  receipt.contractId !== '0x0000000000000000000000000000000000000000000000000000000000000000';\n\n/** @hidden */\nexport const getReceiptsWithMissingData = (receipts: Array<TransactionResultReceipt>) =>\n  receipts.reduce<{\n    missingOutputVariables: Array<ReceiptRevert>;\n    missingOutputContractIds: Array<ReceiptPanic>;\n  }>(\n    (memo, receipt) => {\n      if (doesReceiptHaveMissingOutputVariables(receipt)) {\n        memo.missingOutputVariables.push(receipt);\n      }\n      if (doesReceiptHaveMissingContractId(receipt)) {\n        memo.missingOutputContractIds.push(receipt);\n      }\n      return memo;\n    },\n    {\n      missingOutputVariables: [],\n      missingOutputContractIds: [],\n    }\n  );\n\nconst hexOrZero = (hex?: string | null) => hex || ZeroBytes32;\n\nexport function assembleReceiptByType(receipt: GqlReceiptFragment) {\n  const { receiptType } = receipt;\n\n  switch (receiptType) {\n    case GqlReceiptType.Call: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const callReceipt: ReceiptCall = {\n        type: ReceiptType.Call,\n        id,\n        to: hexOrZero(receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: bn(receipt.gas),\n        param1: bn(receipt.param1),\n        param2: bn(receipt.param2),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return callReceipt;\n    }\n\n    case GqlReceiptType.Return: {\n      const returnReceipt: ReceiptReturn = {\n        type: ReceiptType.Return,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return returnReceipt;\n    }\n\n    case GqlReceiptType.ReturnData: {\n      const returnDataReceipt: ReceiptReturnData = {\n        type: ReceiptType.ReturnData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n\n      return returnDataReceipt;\n    }\n\n    case GqlReceiptType.Panic: {\n      const panicReceipt: ReceiptPanic = {\n        type: ReceiptType.Panic,\n        id: hexOrZero(receipt.id),\n        reason: bn(receipt.reason),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n        contractId: hexOrZero(receipt.contractId),\n      };\n\n      return panicReceipt;\n    }\n\n    case GqlReceiptType.Revert: {\n      const revertReceipt: ReceiptRevert = {\n        type: ReceiptType.Revert,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        val: bn(receipt.ra),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return revertReceipt;\n    }\n\n    case GqlReceiptType.Log: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const rc = bn(receipt.rc);\n      const rd = bn(receipt.rd);\n\n      const logReceipt: ReceiptLog = {\n        type: ReceiptType.Log,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        rc,\n        rd,\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return logReceipt;\n    }\n\n    case GqlReceiptType.LogData: {\n      const ra = bn(receipt.ra);\n      const rb = bn(receipt.rb);\n      const logDataReceipt: ReceiptLogData = {\n        type: ReceiptType.LogData,\n        id: hexOrZero(receipt.id || receipt.contractId),\n        ra,\n        rb,\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        data: hexOrZero(receipt.data),\n        is: bn(receipt.is),\n      };\n      return logDataReceipt;\n    }\n\n    case GqlReceiptType.Transfer: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferReceipt: ReceiptTransfer = {\n        type: ReceiptType.Transfer,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt?.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return transferReceipt;\n    }\n\n    case GqlReceiptType.TransferOut: {\n      const id = hexOrZero(receipt.id || receipt.contractId);\n      const transferOutReceipt: ReceiptTransferOut = {\n        type: ReceiptType.TransferOut,\n        id,\n        to: hexOrZero(receipt.toAddress || receipt.to),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return transferOutReceipt;\n    }\n\n    case GqlReceiptType.ScriptResult: {\n      const scriptResultReceipt: ReceiptScriptResult = {\n        type: ReceiptType.ScriptResult,\n        result: bn(receipt.result),\n        gasUsed: bn(receipt.gasUsed),\n      };\n\n      return scriptResultReceipt;\n    }\n\n    case GqlReceiptType.MessageOut: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = bn(receipt.amount);\n      const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n      const len = bn(receipt.len).toNumber();\n\n      const messageId = InputMessageCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data: hexlify(data),\n      });\n\n      const receiptMessageOut: ReceiptMessageOut = {\n        type: ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        len,\n        data,\n        digest,\n        messageId,\n      };\n\n      return receiptMessageOut;\n    }\n\n    case GqlReceiptType.Mint: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const mintReceipt: ReceiptMint = {\n        type: ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return mintReceipt;\n    }\n\n    case GqlReceiptType.Burn: {\n      const contractId = hexOrZero(receipt.id || receipt.contractId);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = getMintedAssetId(contractId, subId);\n\n      const burnReceipt: ReceiptBurn = {\n        type: ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return burnReceipt;\n    }\n\n    default:\n      throw new FuelError(ErrorCode.INVALID_RECEIPT_TYPE, `Invalid receipt type: ${receiptType}.`);\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nconst DEFAULT_BLOCK_EXPLORER_URL = 'https://app.fuel.network';\n\n/** @hidden */\nconst getPathFromInput = (\n  key: BuildBlockExplorerUrlHelperParam,\n  value: string | number | undefined\n) => {\n  const pathMap = {\n    address: `address`,\n    txId: `transaction`,\n    blockNumber: `block`,\n  };\n  const path = pathMap[key] || key;\n  return `${path}/${value}`;\n};\n\ntype BuildBlockExplorerUrlHelperParam = 'address' | 'txId' | 'blockNumber';\n\n/**\n * @hidden\n *\n * Builds a block explorer url based on and the given path, block explorer URL and provider URL\n */\nexport const buildBlockExplorerUrl = (\n  options: {\n    blockExplorerUrl?: string;\n    path?: string;\n    providerUrl?: string;\n    address?: string;\n    txId?: string;\n    blockNumber?: number;\n  } = {}\n) => {\n  const { blockExplorerUrl, path, providerUrl, address, txId, blockNumber } = options;\n  const explorerUrl = blockExplorerUrl || DEFAULT_BLOCK_EXPLORER_URL;\n\n  // make sure that only ONE or none of the following is defined: address, txId, blockNumber\n  const customInputParams = [\n    {\n      key: 'address',\n      value: address,\n    },\n    {\n      key: 'txId',\n      value: txId,\n    },\n    {\n      key: 'blockNumber',\n      value: blockNumber,\n    },\n  ];\n\n  const definedValues = customInputParams\n    .filter((param) => !!param.value)\n    .map(({ key, value }) => ({\n      key,\n      value,\n    }));\n\n  const hasAnyDefinedValues = definedValues.length > 0;\n\n  if (definedValues.length > 1) {\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `Only one of the following can be passed in to buildBlockExplorerUrl: ${customInputParams\n        .map((param) => param.key)\n        .join(', ')}.`\n    );\n  }\n\n  if (path && definedValues.length > 0) {\n    const inputKeys = customInputParams.map(({ key }) => key).join(', ');\n    throw new FuelError(\n      ErrorCode.ERROR_BUILDING_BLOCK_EXPLORER_URL,\n      `You cannot pass in a path to 'buildBlockExplorerUrl' along with any of the following: ${inputKeys}.`\n    );\n  }\n\n  const pathGeneratedFromInputParams = hasAnyDefinedValues\n    ? getPathFromInput(\n        definedValues[0].key as BuildBlockExplorerUrlHelperParam,\n        definedValues[0].value\n      )\n    : '';\n\n  // Remove leading and trailing slashes from the path and block explorer url respectively, if present\n  const trimSlashes = /^\\/|\\/$/gm;\n  const cleanPath = path ? path.replace(trimSlashes, '') : pathGeneratedFromInputParams;\n  const cleanBlockExplorerUrl = explorerUrl.replace(trimSlashes, '');\n  const cleanProviderUrl = providerUrl?.replace(trimSlashes, '');\n  const encodedProviderUrl = cleanProviderUrl ? encodeURIComponent(cleanProviderUrl) : undefined;\n\n  // if the block explorer url doesn't have a protocol i.e. http:// or https://, add https://\n  const protocol = cleanBlockExplorerUrl.match(/^https?:\\/\\//) ? '' : 'https://';\n  const providerUrlProtocol = cleanProviderUrl?.match(/^https?:\\/\\//) ? '' : 'https://';\n\n  const url = `${protocol}${cleanBlockExplorerUrl}/${cleanPath}${\n    encodedProviderUrl ? `?providerUrl=${providerUrlProtocol}${encodedProviderUrl}` : ''\n  }`;\n\n  return url;\n};\n","import { bn } from '@fuel-ts/math';\nimport type { BN, BNInput } from '@fuel-ts/math';\nimport { ReceiptType, type Input } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type {\n  GqlDependentCost,\n  GqlHeavyOperation,\n  GqlLightOperation,\n} from '../__generated__/operations';\nimport type { GasCosts } from '../provider';\nimport type { TransactionRequestInput } from '../transaction-request';\nimport type {\n  TransactionResultReceipt,\n  TransactionResultScriptResultReceipt,\n} from '../transaction-response';\n\n/** @hidden */\nexport const getGasUsedFromReceipts = (receipts: Array<TransactionResultReceipt>): BN => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === ReceiptType.ScriptResult\n  ) as TransactionResultScriptResultReceipt[];\n\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));\n\n  return gasUsed;\n};\n\nexport function resolveGasDependentCosts(byteSize: BNInput, gasDependentCost: GqlDependentCost) {\n  const base = bn(gasDependentCost.base);\n  let dependentValue = bn(0);\n  if ('unitsPerGas' in gasDependentCost) {\n    dependentValue = bn(byteSize).div(bn((<GqlLightOperation>gasDependentCost).unitsPerGas));\n  } else {\n    dependentValue = bn(byteSize).mul(bn((<GqlHeavyOperation>gasDependentCost).gasPerUnit));\n  }\n  return base.add(dependentValue);\n}\n\nexport function gasUsedByInputs(\n  inputs: Array<TransactionRequestInput | Input>,\n  txBytesSize: number,\n  gasCosts: GasCosts\n) {\n  const witnessCache: Array<number> = [];\n\n  const chargeableInputs = inputs.filter((input) => {\n    const isCoinOrMessage = 'owner' in input || 'sender' in input;\n    if (isCoinOrMessage) {\n      if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n        return true;\n      }\n\n      if (!witnessCache.includes(input.witnessIndex)) {\n        // should charge only once for each witness\n        witnessCache.push(input.witnessIndex);\n        return true;\n      }\n    }\n    return false;\n  });\n\n  const vmInitializationCost = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n\n  const totalGas = chargeableInputs.reduce((total, input) => {\n    if ('predicate' in input && input.predicate && input.predicate !== '0x') {\n      return total.add(\n        vmInitializationCost\n          .add(resolveGasDependentCosts(arrayify(input.predicate).length, gasCosts.contractRoot))\n          .add(bn(input.predicateGasUsed))\n      );\n    }\n\n    return total.add(gasCosts.ecr1);\n  }, bn(0));\n  // Never allow gas to exceed MAX_U64\n  return totalGas;\n}\n\nexport interface IGetMinGasParams {\n  inputs: Array<TransactionRequestInput | Input>;\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  metadataGas: BN;\n  gasPerByte: BN;\n}\n\nexport function getMinGas(params: IGetMinGasParams) {\n  const { gasCosts, gasPerByte, inputs, metadataGas, txBytesSize } = params;\n\n  const vmInitGas = resolveGasDependentCosts(txBytesSize, gasCosts.vmInitialization);\n  const bytesGas = bn(txBytesSize).mul(gasPerByte);\n  const inputsGas = gasUsedByInputs(inputs, txBytesSize, gasCosts);\n\n  const minGas = vmInitGas.add(bytesGas).add(inputsGas).add(metadataGas).maxU64();\n\n  return minGas;\n}\n\nexport interface IGetMaxGasParams {\n  witnessesLength: number;\n  witnessLimit?: BN;\n  gasPerByte: BN;\n  minGas: BN;\n  gasLimit?: BN;\n  blobSize?: BN;\n  maxGasPerTx: BN;\n}\n\nexport function getMaxGas(params: IGetMaxGasParams) {\n  const {\n    gasPerByte,\n    witnessesLength,\n    witnessLimit,\n    minGas,\n    gasLimit = bn(0),\n    maxGasPerTx,\n  } = params;\n\n  let remainingAllowedWitnessGas = bn(0);\n\n  if (witnessLimit?.gt(0) && witnessLimit.gte(witnessesLength)) {\n    remainingAllowedWitnessGas = bn(witnessLimit).sub(witnessesLength).mul(gasPerByte);\n  }\n\n  const maxGas = remainingAllowedWitnessGas.add(minGas).add(gasLimit);\n\n  return maxGas.gte(maxGasPerTx) ? maxGasPerTx : maxGas;\n}\n\nexport function calculateMetadataGasForTxCreate({\n  gasCosts,\n  stateRootSize,\n  txBytesSize,\n  contractBytesSize,\n}: {\n  gasCosts: GasCosts;\n  contractBytesSize: BN;\n  stateRootSize: number;\n  txBytesSize: number;\n}) {\n  const contractRootGas = resolveGasDependentCosts(contractBytesSize, gasCosts.contractRoot);\n  const stateRootGas = resolveGasDependentCosts(stateRootSize, gasCosts.stateRoot);\n  const txIdGas = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  // See https://github.com/FuelLabs/fuel-specs/blob/master/src/identifiers/contract-id.md\n  const contractIdInputSize = bn(4 + 32 + 32 + 32);\n  const contractIdGas = resolveGasDependentCosts(contractIdInputSize, gasCosts.s256);\n  const metadataGas = contractRootGas.add(stateRootGas).add(txIdGas).add(contractIdGas);\n  return metadataGas.maxU64();\n}\n\nexport function calculateMetadataGasForTxScript({\n  gasCosts,\n  txBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n}) {\n  return resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n}\n\nexport function calculateMetadataGasForTxBlob({\n  gasCosts,\n  txBytesSize,\n  witnessBytesSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  witnessBytesSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n  const blobLen = resolveGasDependentCosts(witnessBytesSize, gasCosts.s256);\n  return txId.add(blobLen);\n}\n\nexport function calculateMetadataGasForTxUpgrade({\n  gasCosts,\n  txBytesSize,\n  consensusSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  consensusSize?: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  if (consensusSize) {\n    const consensusLen = resolveGasDependentCosts(consensusSize, gasCosts.s256);\n    txId.add(consensusLen);\n  }\n\n  return txId;\n}\n\nexport function calculateMetadataGasForTxUpload({\n  gasCosts,\n  txBytesSize,\n  subsectionSize,\n  subsectionsSize,\n}: {\n  gasCosts: GasCosts;\n  txBytesSize: number;\n  subsectionSize: number;\n  subsectionsSize: number;\n}) {\n  const txId = resolveGasDependentCosts(txBytesSize, gasCosts.s256);\n\n  const subsectionLen = resolveGasDependentCosts(subsectionSize, gasCosts.s256);\n  txId.add(subsectionLen);\n\n  const subsectionsLen = resolveGasDependentCosts(subsectionsSize, gasCosts.stateRoot);\n  txId.add(subsectionsLen);\n\n  return txId;\n}\n\nexport function calculateMinGasForTxUpload({\n  gasCosts,\n  baseMinGas,\n  subsectionSize,\n}: {\n  gasCosts: GasCosts;\n  baseMinGas: number;\n  subsectionSize: number;\n}) {\n  // Since the `Upload` transaction occupies much of the storage, we want to\n  // discourage people from using it too much. For that, we charge additional gas\n  // for the storage.\n  // https://github.com/FuelLabs/fuel-vm/blob/6e137db6387bd291b9505d17e15e0f2edda7957e/fuel-tx/src/transaction/types/upload.rs#L135-L150\n  const additionalStoragePerByte = bn(gasCosts.newStoragePerByte).mul(subsectionSize);\n  return bn(baseMinGas).add(additionalStoragePerByte);\n}\n\nexport interface CalculateGasFeeParams {\n  tip?: BN;\n  gas: BN;\n  gasPrice: BN;\n  priceFactor: BN;\n}\n\nexport const calculateGasFee = (params: CalculateGasFeeParams) => {\n  const { gas, gasPrice, priceFactor, tip } = params;\n  return gas.mul(gasPrice).div(priceFactor).add(bn(tip));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-param-reassign */\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\n// When parsing a Transaction to JSON we need\n// to convert special types into each respective\n// JSON friendly value. This enables a tx to be\n// stringified and parsed back into a Transaction\n/** @hidden */\nfunction normalize(object: any) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case 'Uint8Array':\n        object[key] = hexlify(object[key]);\n        break;\n      case 'Array':\n        object[key] = normalize(object[key]);\n        break;\n      case 'BN':\n        object[key] = object[key].toHex();\n        break;\n      case 'Address':\n        object[key] = object[key].toB256();\n        break;\n      case 'Object':\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\n\n/**\n * Stringify Transaction to a JSON object\n * compatible with the Transaction class constructor.\n */\n/** @hidden */\nexport function normalizeJSON(root: any) {\n  // Do a single deep clone before normalizing\n  // to avoid mutating the original object\n  // and doing extra clones on each iteration\n  return normalize(clone(root));\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport type { ReceiptRevert } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport {\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_NE_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,\n  PANIC_REASONS,\n  PANIC_DOC_URL,\n} from '@fuel-ts/transactions/configs';\n\nimport type { TransactionResultReceipt } from '../transaction-response';\n\n/**\n * Assembles an error message for a panic status.\n * @param status - The transaction failure status.\n * @returns The error message.\n */\nexport const assemblePanicError = (\n  statusReason: string,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = `The transaction reverted with reason: \"${statusReason}\".`;\n\n  if (PANIC_REASONS.includes(statusReason)) {\n    errorMessage = `${errorMessage}\\n\\nYou can read more about this error at:\\n\\n${PANIC_DOC_URL}#variant.${statusReason}`;\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason: statusReason,\n  });\n};\n\n/** @hidden */\nconst stringify = (obj: unknown) => JSON.stringify(obj, null, 2);\n\n/**\n * Assembles an error message for a revert status.\n * @param receipts - The transaction result processed receipts.\n * @param logs - The transaction decoded logs.\n * @returns The error message.\n */\nexport const assembleRevertError = (\n  receipts: Array<TransactionResultReceipt>,\n  logs: Array<unknown>,\n  metadata: Record<string, unknown>\n): FuelError => {\n  let errorMessage = 'The transaction reverted with an unknown reason.';\n\n  const revertReceipt = receipts.find(({ type }) => type === ReceiptType.Revert) as ReceiptRevert;\n  let reason = '';\n\n  if (revertReceipt) {\n    const reasonHex = bn(revertReceipt.val).toHex();\n    const lastLog = logs[logs.length - 1];\n    const lastButOneLog = logs[logs.length - 2];\n\n    switch (reasonHex) {\n      case FAILED_REQUIRE_SIGNAL: {\n        reason = 'require';\n        errorMessage = `The transaction reverted because a \"require\" statement has thrown ${\n          logs.length ? stringify(lastLog) : 'an error.'\n        }.`;\n        break;\n      }\n\n      case FAILED_ASSERT_EQ_SIGNAL: {\n        const sufix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastLog)} and ${stringify(lastButOneLog)}.`\n            : '.';\n\n        reason = 'assert_eq';\n        errorMessage = `The transaction reverted because of an \"assert_eq\" statement${sufix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_NE_SIGNAL: {\n        const sufix =\n          logs.length >= 2\n            ? ` comparing ${stringify(lastButOneLog)} and ${stringify(lastLog)}.`\n            : '.';\n\n        reason = 'assert_ne';\n        errorMessage = `The transaction reverted because of an \"assert_ne\" statement${sufix}`;\n        break;\n      }\n\n      case FAILED_ASSERT_SIGNAL:\n        reason = 'assert';\n        errorMessage = `The transaction reverted because an \"assert\" statement failed to evaluate to true.`;\n        break;\n\n      case FAILED_TRANSFER_TO_ADDRESS_SIGNAL:\n        reason = 'MissingOutputChange';\n        errorMessage = `The transaction reverted because it's missing an \"OutputChange\".`;\n        break;\n\n      default:\n        throw new FuelError(\n          ErrorCode.UNKNOWN,\n          `The transaction reverted with an unknown reason: ${revertReceipt.val}`,\n          {\n            ...metadata,\n            reason: 'unknown',\n          }\n        );\n    }\n  }\n\n  return new FuelError(ErrorCode.SCRIPT_REVERTED, errorMessage, {\n    ...metadata,\n    reason,\n  });\n};\n\ninterface IExtractTxError {\n  receipts: Array<TransactionResultReceipt>;\n  logs: Array<unknown>;\n  statusReason: string;\n}\n\n/**\n * Extracts the transaction error and returns a FuelError object.\n * @param IExtractTxError - The parameters for extracting the error.\n * @returns The FuelError object.\n */\nexport const extractTxError = (params: IExtractTxError): FuelError => {\n  const { receipts, statusReason, logs } = params;\n\n  const isPanic = receipts.some(({ type }) => type === ReceiptType.Panic);\n  const isRevert = receipts.some(({ type }) => type === ReceiptType.Revert);\n  const metadata = {\n    logs,\n    receipts,\n    panic: isPanic,\n    revert: isRevert,\n    reason: '',\n  };\n\n  if (isPanic) {\n    return assemblePanicError(statusReason, metadata);\n  }\n  return assembleRevertError(receipts, logs, metadata);\n};\n","/* eslint-disable max-classes-per-file */\nimport type { Address } from '@fuel-ts/address';\n\n/**\n * @hidden\n */\nexport class ChangeOutputCollisionError extends Error {\n  override name = 'ChangeOutputCollisionError';\n  override message =\n    'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessAtIndexError extends Error {\n  override name = 'NoWitnessAtIndexError';\n  constructor(public readonly index: number) {\n    super();\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessByOwnerError extends Error {\n  override name = 'NoWitnessByOwnerError';\n  constructor(public readonly owner: Address) {\n    super();\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { InputType, OutputType } from '@fuel-ts/transactions';\n\nimport type { ExcludeResourcesOption } from '../resource';\n\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport type { TransactionRequest } from './types';\n\nexport const isRequestInputCoin = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput => input.type === InputType.Coin;\n\nexport const isRequestInputMessage = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput => input.type === InputType.Message;\n\nexport const isRequestInputMessageWithoutData = (\n  input: TransactionRequestInput\n): input is MessageTransactionRequestInput =>\n  input.type === InputType.Message && bn(input.data).isZero();\n\nexport const isRequestInputCoinOrMessage = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessage(input);\n\nexport const isRequestInputResource = (\n  input: TransactionRequestInput\n): input is CoinTransactionRequestInput | MessageTransactionRequestInput =>\n  isRequestInputCoin(input) || isRequestInputMessageWithoutData(input);\n\nexport const getRequestInputResourceOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput\n) => (isRequestInputCoin(input) ? input.owner : input.recipient);\n\nexport const isRequestInputResourceFromOwner = (\n  input: CoinTransactionRequestInput | MessageTransactionRequestInput,\n  owner: Address\n) => getRequestInputResourceOwner(input) === owner.toB256();\n\nexport const getAssetAmountInRequestInputs = (\n  inputs: TransactionRequestInput[],\n  assetId: string,\n  baseAsset: string\n) =>\n  inputs.filter(isRequestInputResource).reduce((acc, input) => {\n    if (isRequestInputCoin(input) && input.assetId === assetId) {\n      return acc.add(input.amount);\n    }\n\n    if (isRequestInputMessage(input) && assetId === baseAsset) {\n      return acc.add(input.amount);\n    }\n\n    return acc;\n  }, bn(0));\n\nexport const cacheRequestInputsResources = (inputs: TransactionRequestInput[]) =>\n  inputs.filter(isRequestInputResource).reduce(\n    (cache, input) => {\n      if (isRequestInputCoin(input)) {\n        cache.utxos.push(input.id);\n      } else {\n        cache.messages.push(input.nonce);\n      }\n      return cache;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ExcludeResourcesOption>\n  );\n\nexport const cacheRequestInputsResourcesFromOwner = (\n  inputs: TransactionRequestInput[],\n  owner: Address\n): ExcludeResourcesOption =>\n  inputs.reduce(\n    (acc, input) => {\n      if (isRequestInputCoin(input) && input.owner === owner.toB256()) {\n        acc.utxos.push(input.id);\n      } else if (isRequestInputMessage(input) && input.recipient === owner.toB256()) {\n        acc.messages.push(input.nonce);\n      }\n      return acc;\n    },\n    {\n      utxos: [],\n      messages: [],\n    } as Required<ExcludeResourcesOption>\n  );\n\n/**\n * @hidden\n *\n * Get the number of burnable assets in the transaction request.\n *\n * @param baseAssetId - The base asset ID.\n * @param transactionRequest - The transaction request to get the burnable asset count from.\n * @returns The number of burnable assets in the transaction request.\n */\nexport const getBurnableAssetCount = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest\n) => {\n  const { inputs, outputs } = transactionRequest;\n  const coinInputs = new Set(inputs.filter(isRequestInputCoin).map((input) => input.assetId));\n  // If there is a message input without data, we need to add the base asset to the set\n  if (inputs.some((i) => isRequestInputMessage(i) && bn(i.amount).gt(0))) {\n    coinInputs.add(baseAssetId);\n  }\n  const changeOutputs = new Set(\n    outputs.filter((output) => output.type === OutputType.Change).map((output) => output.assetId)\n  );\n  const difference = new Set([...coinInputs].filter((x) => !changeOutputs.has(x)));\n  return difference.size;\n};\n\n/**\n * @hidden\n *\n * Validates the transaction request for asset burn.\n *\n * @param transactionRequest - The transaction request to validate.\n * @param enableAssetBurn - Whether asset burn is enabled (default: false).\n *\n * @throws `FuelError` when an asset burn is detected and not enabled.\n */\nexport const validateTransactionForAssetBurn = (\n  baseAssetId: string,\n  transactionRequest: TransactionRequest,\n  enableAssetBurn: boolean = false\n) => {\n  // Asset burn is enabled\n  if (enableAssetBurn === true) {\n    return;\n  }\n\n  // No burnable assets detected\n  if (getBurnableAssetCount(baseAssetId, transactionRequest) <= 0) {\n    return;\n  }\n\n  const message = [\n    'Asset burn detected.',\n    'Add the relevant change outputs to the transaction to avoid burning assets.',\n    'Or enable asset burn, upon sending the transaction.',\n  ].join('\\n');\n  throw new FuelError(ErrorCode.ASSET_BURN_DETECTED, message);\n};\n","import type { Witness } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestWitness = BytesLike;\n\nexport const witnessify = (value: TransactionRequestWitness): Witness => {\n  const data = arrayify(value);\n\n  return {\n    data: hexlify(data),\n    dataLength: data.length,\n  };\n};\n","import type { BN } from '@fuel-ts/math';\nimport type { TransactionBlob } from '@fuel-ts/transactions';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxBlob } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest, TransactionType } from './transaction-request';\n\nexport interface BlobTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex?: number;\n}\n\nexport class BlobTransactionRequest extends BaseTransactionRequest {\n  static from(obj: BlobTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Blob as const;\n  /** Blob ID */\n  blobId: string;\n  /** Witness index of the bytecode to create */\n  witnessIndex: number;\n\n  /**\n   * Creates an instance `BlobTransactionRequest`.\n   *\n   * @param blobTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, blobId, ...rest }: BlobTransactionRequestLike) {\n    super(rest);\n    this.blobId = blobId;\n    this.witnessIndex = witnessIndex ?? 0;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionBlob`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionBlob {\n    const baseTransaction = this.getBaseTransaction();\n    const { witnessIndex, blobId } = this;\n    return {\n      type: TransactionType.Blob,\n      ...baseTransaction,\n      blobId,\n      witnessIndex,\n    };\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for a blob transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   * @returns metadata gas cost for the blob transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxBlob({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      witnessBytesSize: this.witnesses[this.witnessIndex].length,\n    });\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { uint64ToBytesBE, sha256 } from '@fuel-ts/hasher';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionType, InputType, OutputType, TransactionCoder } from '@fuel-ts/transactions';\nimport { concat } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { TransactionRequest } from './types';\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequest: TransactionRequest, chainId: number) {\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = clone(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txPointer, predicateGasUsed\n      case InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: predicateGasUsed\n      case InputType.Message: {\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txPointer\n      case InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.txID = ZeroBytes32;\n        inputClone.outputIndex = 0;\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = clone(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);\n  return sha256(concatenatedData);\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn, type BN } from '@fuel-ts/math';\nimport type { TransactionCreate } from '@fuel-ts/transactions';\nimport { TransactionType, OutputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxCreate } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractCreatedTransactionRequestOutput } from './output';\nimport type { TransactionRequestStorageSlot } from './storage-slot';\nimport { storageSlotify } from './storage-slot';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface CreateTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex?: number;\n  /** Salt */\n  salt?: BytesLike;\n  /** List of storage slots to initialize */\n  storageSlots?: TransactionRequestStorageSlot[];\n}\n\n/**\n * `CreateTransactionRequest` provides functionalities for creating a transaction request that creates a contract.\n */\nexport class CreateTransactionRequest extends BaseTransactionRequest {\n  static from(obj: CreateTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Create as const;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex: number;\n  /** Salt */\n  salt: string;\n  /** List of storage slots to initialize */\n  storageSlots: TransactionRequestStorageSlot[];\n\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ bytecodeWitnessIndex, salt, storageSlots, ...rest }: CreateTransactionRequestLike) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = hexlify(salt ?? ZeroBytes32);\n    this.storageSlots = [...(storageSlots ?? [])];\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionCreate {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: TransactionType.Create,\n      ...baseTransaction,\n      bytecodeWitnessIndex,\n      storageSlotsCount: bn(storageSlots.length),\n      salt: this.salt ? hexlify(this.salt) : ZeroBytes32,\n      storageSlots,\n    };\n  }\n\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs(): ContractCreatedTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractCreatedTransactionRequestOutput =>\n        output.type === OutputType.ContractCreated\n    );\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(\n    /** Contract ID */\n    contractId: BytesLike,\n    /** State Root */\n    stateRoot: BytesLike\n  ) {\n    this.pushOutput({\n      type: OutputType.ContractCreated,\n      contractId,\n      stateRoot,\n    });\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxCreate({\n      contractBytesSize: bn(arrayify(this.witnesses[this.bytecodeWitnessIndex] || '0x').length),\n      gasCosts,\n      stateRootSize: this.storageSlots.length,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n","import type { StorageSlot } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\n\nexport type TransactionRequestStorageSlot =\n  | {\n      /** Key */\n      key: BytesLike;\n      /** Value */\n      value: BytesLike;\n    }\n  | [key: BytesLike, value: BytesLike];\n\n// Make sure all values have 32 bytes\nconst getStorageValue = (value: BytesLike): Uint8Array => {\n  const v = new Uint8Array(32);\n  v.set(arrayify(value));\n  return v;\n};\n\nexport const storageSlotify = (storageSlot: TransactionRequestStorageSlot): StorageSlot => {\n  let key;\n  let value;\n\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n\n  return {\n    key: hexlify(key),\n    value: hexlify(getStorageValue(value)),\n  };\n};\n","import type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { addressify } from '@fuel-ts/address';\nimport type { ContractIdLike } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn } from '@fuel-ts/math';\nimport type { BN, BigNumberish } from '@fuel-ts/math';\nimport type { TransactionScript } from '@fuel-ts/transactions';\nimport { InputType, OutputType, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { Account } from '../../account';\nimport type { ChainInfo, GasCosts, TransactionCostParams } from '../provider';\nimport { calculateMetadataGasForTxScript, getMaxGas } from '../utils/gas';\n\nimport { hashTransaction } from './hash-transaction';\nimport type { ContractTransactionRequestInput } from './input';\nimport type { ContractTransactionRequestOutput, VariableTransactionRequestOutput } from './output';\nimport { returnZeroScript } from './scripts';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { AbstractScriptRequest, JsonAbisFromAllCalls } from './types';\n\n/**\n * @hidden\n */\nexport interface ScriptTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Gas limit for transaction */\n  gasLimit?: BigNumberish;\n  /** Script to execute */\n  script?: BytesLike;\n  /** Script input data (parameters) */\n  scriptData?: BytesLike;\n\n  abis?: JsonAbisFromAllCalls;\n}\n\n/**\n * `ScriptTransactionRequest` provides functionalities for creating a transaction request that uses a script.\n */\nexport class ScriptTransactionRequest extends BaseTransactionRequest {\n  static from(obj: ScriptTransactionRequestLike) {\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Script as const;\n  /** Gas limit for transaction */\n  gasLimit: BN;\n  /** Script to execute */\n  script: Uint8Array;\n  /** Script input data (parameters) */\n  scriptData: Uint8Array;\n\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, gasLimit, ...rest }: ScriptTransactionRequestLike = {}) {\n    super(rest);\n    this.gasLimit = bn(gasLimit);\n    this.script = arrayify(script ?? returnZeroScript.bytes);\n    this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());\n    this.abis = rest.abis;\n  }\n\n  /**\n   * Helper function to estimate and fund the transaction request with a specified account.\n   *\n   * @param account - The account to fund the transaction.\n   * @param params - The parameters for the transaction cost.\n   * @returns The current instance of the `ScriptTransactionRequest` funded.\n   */\n  async estimateAndFund(\n    account: Account,\n    { signatureCallback, quantities = [] }: TransactionCostParams = {}\n  ): Promise<ScriptTransactionRequest> {\n    const txCost = await account.getTransactionCost(this, { signatureCallback, quantities });\n\n    this.maxFee = txCost.maxFee;\n    this.gasLimit = txCost.gasUsed;\n\n    await account.fund(this, txCost);\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction(): TransactionScript {\n    const script = arrayify(this.script ?? '0x');\n    const scriptData = arrayify(this.scriptData ?? '0x');\n    return {\n      type: TransactionType.Script,\n      scriptGasLimit: this.gasLimit,\n      ...super.getBaseTransaction(),\n      scriptLength: bn(script.length),\n      scriptDataLength: bn(scriptData.length),\n      receiptsRoot: ZeroBytes32,\n      script: hexlify(script),\n      scriptData: hexlify(scriptData),\n    };\n  }\n\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs(): ContractTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is ContractTransactionRequestInput => input.type === InputType.Contract\n    );\n  }\n\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs(): ContractTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractTransactionRequestOutput => output.type === OutputType.Contract\n    );\n  }\n\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs(): VariableTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is VariableTransactionRequestOutput => output.type === OutputType.Variable\n    );\n  }\n\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript<T>(script: AbstractScriptRequest<T>, data: T) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n  }\n\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables: number = 1) {\n    let outputsNumber = numberOfVariables;\n\n    while (outputsNumber) {\n      this.pushOutput({\n        type: OutputType.Variable,\n      });\n      outputsNumber -= 1;\n    }\n\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * Calculates the maximum gas for the transaction.\n   *\n   * @param chainInfo - The chain information.\n   * @param minGas - The minimum gas.\n   * @returns the maximum gas.\n   */\n  override calculateMaxGas(chainInfo: ChainInfo, minGas: BN): BN {\n    const { consensusParameters } = chainInfo;\n    const {\n      feeParameters: { gasPerByte },\n      txParameters: { maxGasPerTx },\n    } = consensusParameters;\n\n    const witnessesLength = this.toTransaction().witnesses.reduce(\n      (acc, wit) => acc + wit.dataLength,\n      0\n    );\n\n    return getMaxGas({\n      gasPerByte,\n      minGas,\n      witnessesLength,\n      witnessLimit: this.witnessLimit,\n      gasLimit: this.gasLimit,\n      maxGasPerTx,\n    });\n  }\n\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract: ContractIdLike): ScriptTransactionRequest {\n    const contractAddress = addressify(contract);\n\n    // Add only one input contract per contractId\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n\n    const inputIndex = super.pushInput({\n      type: InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: '0x00000000000000000000000000000000',\n    });\n\n    this.pushOutput({\n      type: OutputType.Contract,\n      inputIndex,\n    });\n\n    return this;\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi: JsonAbi, args: InputValue[]): ScriptTransactionRequest {\n    const abiInterface = new Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n    });\n  }\n}\n","import { arrayify } from '@fuel-ts/utils';\n\nimport type { AbstractScriptRequest } from './types';\n\n// We can't import this from `@fuel-ts/script` because it causes\n// cyclic dependency errors so we duplicate it here.\n/** @hidden */\nexport const returnZeroScript: AbstractScriptRequest<void> = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x24000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n\n/** @hidden */\nexport const withdrawScript: AbstractScriptRequest<void> = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x5040C0105D44C0064C40001124000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n","import { FuelError } from '@fuel-ts/errors';\nimport { hash } from '@fuel-ts/hasher';\nimport type { BN } from '@fuel-ts/math';\nimport {\n  TransactionType,\n  type TransactionUpgrade,\n  type UpgradePurpose,\n  UpgradePurposeTypeEnum,\n} from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpgrade } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { BaseTransactionRequest, type BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport type UpgradePurposeRequest =\n  | {\n      type: UpgradePurposeTypeEnum.ConsensusParameters;\n      checksum: string;\n    }\n  | {\n      type: UpgradePurposeTypeEnum.StateTransition;\n      data: BytesLike;\n    };\n\n/**\n * @hidden\n */\nexport interface UpgradeTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The upgrade purpose */\n  upgradePurpose?: UpgradePurposeRequest;\n\n  /** Witness index */\n  bytecodeWitnessIndex?: number;\n}\n\nexport class UpgradeTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UpgradeTransactionRequestLike) {\n    if (obj instanceof UpgradeTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** The type of transaction */\n  type = TransactionType.Upgrade as const;\n  /** The upgrade purpose */\n  upgradePurpose: UpgradePurposeRequest;\n  /** Witness index of consensus */\n  bytecodeWitnessIndex: number;\n\n  /**\n   * Creates an instance `UpgradeTransactionRequest`.\n   *\n   * @param upgradeTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    upgradePurpose,\n    bytecodeWitnessIndex,\n    ...rest\n  }: UpgradeTransactionRequestLike = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.upgradePurpose = upgradePurpose ?? {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: '0x',\n    };\n  }\n\n  /**\n   * Adds a consensus parameters upgrade purpose.\n   *\n   * @param consensus - The consensus bytecode.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addConsensusParametersUpgradePurpose(consensus: BytesLike) {\n    this.bytecodeWitnessIndex = this.addWitness(consensus);\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.ConsensusParameters,\n      checksum: hash(consensus),\n    };\n    return this;\n  }\n\n  /**\n   * Adds a state transition upgrade purpose.\n   *\n   * @param bytecodeRoot - The Merkle root of the state transition.\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addStateTransitionUpgradePurpose(bytecodeRoot: BytesLike) {\n    this.upgradePurpose = {\n      type: UpgradePurposeTypeEnum.StateTransition,\n      data: hexlify(bytecodeRoot),\n    };\n    return this;\n  }\n\n  /**\n   * Adds an upgrade purpose.\n   *\n   * @param type - The upgrade purpose type.\n   * @param data - The bytecode or merkle root of upgrade purpose\n   *\n   * @returns - The current instance of `UpgradeTransactionRequest`.\n   */\n  addUpgradePurpose(type: UpgradePurposeTypeEnum, data: BytesLike) {\n    if (type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      this.addConsensusParametersUpgradePurpose(data);\n    }\n\n    if (type === UpgradePurposeTypeEnum.StateTransition) {\n      this.addStateTransitionUpgradePurpose(data);\n    }\n\n    return this;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpgrade`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpgrade {\n    let upgradePurpose: UpgradePurpose;\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.ConsensusParameters,\n        data: {\n          witnessIndex: this.bytecodeWitnessIndex,\n          checksum: this.upgradePurpose.checksum,\n        },\n      };\n    } else if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      upgradePurpose = {\n        type: UpgradePurposeTypeEnum.StateTransition,\n        data: {\n          bytecodeRoot: hexlify(this.upgradePurpose.data),\n        },\n      };\n    } else {\n      throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n    }\n\n    return {\n      type: TransactionType.Upgrade,\n      ...super.getBaseTransaction(),\n      upgradePurpose,\n    };\n  }\n\n  /**\n   * Gets the Transaction ID by hashing the transaction\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upgrade transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upgrade transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    const txBytesSize = this.byteSize();\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.ConsensusParameters) {\n      const witnessIndex = this.bytecodeWitnessIndex;\n      const consensusSize = this.witnesses[witnessIndex].length;\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n        consensusSize,\n      });\n    }\n\n    if (this.upgradePurpose.type === UpgradePurposeTypeEnum.StateTransition) {\n      return calculateMetadataGasForTxUpgrade({\n        gasCosts,\n        txBytesSize,\n      });\n    }\n\n    throw new FuelError(FuelError.CODES.NOT_IMPLEMENTED, 'Invalid upgrade purpose');\n  }\n}\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { BN } from '@fuel-ts/math';\nimport { type TransactionUpload, TransactionType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { ChainInfo, GasCosts } from '../provider';\nimport { calculateMetadataGasForTxUpload, calculateMinGasForTxUpload } from '../utils';\n\nimport { hashTransaction } from './hash-transaction';\nimport { type BaseTransactionRequestLike, BaseTransactionRequest } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface UploadSubsectionRequest {\n  /** The root of the Merkle tree is created over the bytecode. */\n  root: BytesLike;\n\n  /** The index of the subsection of the bytecode. */\n  subsectionIndex: number;\n\n  /** The total number of subsections on which bytecode was divided. */\n  subsectionsNumber: number;\n\n  /** The proof set helps to verify the connection of the subsection to the `root`. */\n  proofSet: BytesLike[];\n\n  /** The subsection bytecode. */\n  subsection: BytesLike;\n}\n\n/**\n * @hidden\n */\nexport interface UploadTransactionRequestLike extends BaseTransactionRequestLike {\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex?: number;\n\n  /** The subsection data. */\n  subsection?: Omit<UploadSubsectionRequest, 'subsection'>;\n}\n\nexport class UploadTransactionRequest extends BaseTransactionRequest {\n  static from(obj: UploadTransactionRequestLike): UploadTransactionRequest {\n    if (obj instanceof UploadTransactionRequest) {\n      return obj;\n    }\n    return new this(clone(obj));\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Upload as const;\n  /** The witness index of the subsection of the bytecode. */\n  witnessIndex: number;\n  /** The subsection data. */\n  subsection: Omit<UploadSubsectionRequest, 'subsection'>;\n\n  /**\n   * Creates an instance `UploadTransactionRequest`.\n   *\n   * @param uploadTransactionRequestLike - The initial values for the instance\n   */\n  constructor({ witnessIndex, subsection, ...rest }: UploadTransactionRequestLike = {}) {\n    super(rest);\n    this.witnessIndex = witnessIndex ?? 0;\n    this.subsection = subsection ?? {\n      proofSet: [],\n      root: ZeroBytes32,\n      subsectionIndex: 0,\n      subsectionsNumber: 0,\n    };\n  }\n\n  /**\n   * Adds the subsection.\n   *\n   * @param subsection - The subsection data.\n   */\n  addSubsection(subsection: UploadSubsectionRequest) {\n    const { subsection: subsectionBytecode, ...rest } = subsection;\n    this.subsection = rest;\n    this.witnessIndex = this.addWitness(subsectionBytecode);\n  }\n\n  /**\n   * Gets the Transaction Request by hashing the transaction.\n   *\n   * @param chainId - The chain ID.\n   *\n   * @returns - A hash of the transaction, which is the transaction ID.\n   */\n  getTransactionId(chainId: number): string {\n    return hashTransaction(this, chainId);\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionUpload`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionUpload {\n    const baseTransaction = this.getBaseTransaction();\n    const { subsectionIndex, subsectionsNumber, root, proofSet } = this.subsection;\n    return {\n      type: TransactionType.Upload,\n      ...baseTransaction,\n      subsectionIndex,\n      subsectionsNumber,\n      root: hexlify(root),\n      proofSet: proofSet.map(hexlify),\n      witnessIndex: this.witnessIndex,\n      proofSetCount: proofSet.length,\n    };\n  }\n\n  /**\n   * Calculates the metadata gas cost for an upload transaction.\n   *\n   * @param gasCosts - gas costs passed from the chain.\n   *\n   * @returns metadata gas cost for the upload transaction.\n   */\n  override metadataGas(gasCosts: GasCosts): BN {\n    return calculateMetadataGasForTxUpload({\n      gasCosts,\n      txBytesSize: this.byteSize(),\n      subsectionSize: arrayify(this.witnesses[this.witnessIndex]).length,\n      subsectionsSize: this.subsection.subsectionsNumber,\n    });\n  }\n\n  /**\n   * Calculates the minimum gas for an upload transaction.\n   *\n   * @param chainInfo - The chain information.\n   *\n   * @returns the minimum gas for the upload transaction\n   */\n  override calculateMinGas(chainInfo: ChainInfo): BN {\n    const minGas = super.calculateMinGas(chainInfo);\n    const { gasCosts } = chainInfo.consensusParameters;\n    const bytecode = this.witnesses[this.witnessIndex] ?? ZeroBytes32;\n    return calculateMinGasForTxUpload({\n      gasCosts,\n      baseMinGas: minGas.toNumber(),\n      subsectionSize: arrayify(bytecode).length,\n    });\n  }\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { TransactionType } from '@fuel-ts/transactions';\n\nimport { BlobTransactionRequest } from './blob-transaction-request';\nimport { CreateTransactionRequest } from './create-transaction-request';\nimport { ScriptTransactionRequest } from './script-transaction-request';\nimport type { TransactionRequestLike, TransactionRequest } from './types';\nimport { UpgradeTransactionRequest } from './upgrade-transaction-request';\nimport { UploadTransactionRequest } from './upload-transaction-request';\n\n/** @hidden */\nexport const transactionRequestify = (obj: TransactionRequestLike): TransactionRequest => {\n  if (\n    obj instanceof ScriptTransactionRequest ||\n    obj instanceof CreateTransactionRequest ||\n    obj instanceof BlobTransactionRequest ||\n    obj instanceof UpgradeTransactionRequest ||\n    obj instanceof UploadTransactionRequest\n  ) {\n    return obj;\n  }\n\n  const { type } = obj;\n\n  switch (obj.type) {\n    case TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    case TransactionType.Blob: {\n      return BlobTransactionRequest.from(obj);\n    }\n    case TransactionType.Upgrade: {\n      return UpgradeTransactionRequest.from(obj);\n    }\n    case TransactionType.Upload: {\n      return UploadTransactionRequest.from(obj);\n    }\n    default: {\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${type}.`\n      );\n    }\n  }\n};\n\n/** @hidden */\nexport const isTransactionTypeScript = (\n  request: TransactionRequestLike\n): request is ScriptTransactionRequest => request.type === TransactionType.Script;\n\n/** @hidden */\nexport const isTransactionTypeCreate = (\n  request: TransactionRequestLike\n): request is CreateTransactionRequest => request.type === TransactionType.Create;\n\n/** @hidden */\nexport const isTransactionTypeBlob = (\n  request: TransactionRequestLike\n): request is BlobTransactionRequest => request.type === TransactionType.Blob;\n\n/** @hidden */\nexport const isTransactionTypeUpgrade = (\n  request: TransactionRequestLike\n): request is UpgradeTransactionRequest => request.type === TransactionType.Upgrade;\n\n/** @hidden */\nexport const isTransactionTypeUpload = (\n  request: TransactionRequestLike\n): request is UploadTransactionRequest => request.type === TransactionType.Upload;\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n  ReceiptScriptResult,\n  ReceiptMessageOut,\n  Transaction,\n  ReceiptMint,\n  ReceiptBurn,\n  OutputCoin,\n  OutputContract,\n  OutputChange,\n  OutputVariable,\n  OutputContractCreated,\n  Output,\n  TransactionType,\n} from '@fuel-ts/transactions';\nimport { OutputType, TransactionCoder, TxPointerCoder } from '@fuel-ts/transactions';\nimport { arrayify, assertUnreachable } from '@fuel-ts/utils';\n\nimport type {\n  GqlMalleableTransactionFieldsFragment,\n  GqlStatusChangeSubscription,\n  GqlSubmitAndAwaitStatusSubscription,\n} from '../__generated__/operations';\nimport type Provider from '../provider';\nimport type { JsonAbisFromAllCalls, TransactionRequest } from '../transaction-request';\nimport { assembleTransactionSummary } from '../transaction-summary/assemble-transaction-summary';\nimport { processGqlReceipt } from '../transaction-summary/receipt';\nimport { getTotalFeeFromStatus } from '../transaction-summary/status';\nimport type { TransactionSummary, GqlTransaction, AbiMap } from '../transaction-summary/types';\nimport { extractTxError } from '../utils';\n\nimport { getDecodedLogs } from './getDecodedLogs';\n\n/** @hidden */\nexport type TransactionResultCallReceipt = ReceiptCall;\n/** @hidden */\nexport type TransactionResultReturnReceipt = ReceiptReturn;\n/** @hidden */\nexport type TransactionResultReturnDataReceipt = ReceiptReturnData & { data: string };\n/** @hidden */\nexport type TransactionResultPanicReceipt = ReceiptPanic;\n/** @hidden */\nexport type TransactionResultRevertReceipt = ReceiptRevert;\n/** @hidden */\nexport type TransactionResultLogReceipt = ReceiptLog;\n/** @hidden */\nexport type TransactionResultLogDataReceipt = ReceiptLogData & { data: string };\n/** @hidden */\nexport type TransactionResultTransferReceipt = ReceiptTransfer;\n/** @hidden */\nexport type TransactionResultTransferOutReceipt = ReceiptTransferOut;\n/** @hidden */\nexport type TransactionResultScriptResultReceipt = ReceiptScriptResult;\n/** @hidden */\nexport type TransactionResultMessageOutReceipt = ReceiptMessageOut;\nexport type TransactionResultMintReceipt = ReceiptMint;\nexport type TransactionResultBurnReceipt = ReceiptBurn;\n\n/** @hidden */\nexport type TransactionResultReceipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | (ReceiptReturnData & { data: string })\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | (ReceiptLogData & { data: string })\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | TransactionResultMintReceipt\n  | TransactionResultBurnReceipt;\n\n/** @hidden */\nexport type TransactionResult<TTransactionType = void> = TransactionSummary<TTransactionType> & {\n  logs?: Array<unknown>;\n};\n\nfunction mapGqlOutputsToTxOutputs(\n  outputs: GqlMalleableTransactionFieldsFragment['outputs']\n): Output[] {\n  return outputs.map((o) => {\n    const obj = 'amount' in o ? { ...o, amount: bn(o.amount) } : o;\n    switch (obj.type) {\n      case 'CoinOutput':\n        return { ...obj, type: OutputType.Coin } satisfies OutputCoin;\n      case 'ContractOutput':\n        return {\n          ...obj,\n          type: OutputType.Contract,\n          inputIndex: parseInt(obj.inputIndex, 10),\n        } satisfies OutputContract;\n      case 'ChangeOutput':\n        return {\n          ...obj,\n          type: OutputType.Change,\n        } satisfies OutputChange;\n      case 'VariableOutput':\n        return { ...obj, type: OutputType.Variable } satisfies OutputVariable;\n      case 'ContractCreated':\n        return {\n          ...obj,\n          type: OutputType.ContractCreated,\n          contractId: obj.contract,\n        } satisfies OutputContractCreated;\n      default:\n        return assertUnreachable(obj);\n    }\n  });\n}\n\n/**\n * Represents a response for a transaction.\n */\nexport class TransactionResponse {\n  /** Transaction ID */\n  id: string;\n  /** Current provider */\n  provider: Provider;\n  /** Gas used on the transaction */\n  gasUsed: BN = bn(0);\n  /** The graphql Transaction with receipts object. */\n  private gqlTransaction?: GqlTransaction;\n  private request?: TransactionRequest;\n  private status?: GqlStatusChangeSubscription['statusChange'];\n  abis?: JsonAbisFromAllCalls;\n\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param tx - The transaction ID or TransactionRequest.\n   * @param provider - The provider.\n   */\n  constructor(\n    tx: string | TransactionRequest,\n    provider: Provider,\n    chainId: number,\n    abis?: JsonAbisFromAllCalls,\n    private submitTxSubscription?: AsyncIterable<GqlSubmitAndAwaitStatusSubscription>\n  ) {\n    this.id = typeof tx === 'string' ? tx : tx.getTransactionId(chainId);\n\n    this.provider = provider;\n    this.abis = abis;\n    this.request = typeof tx === 'string' ? undefined : tx;\n  }\n\n  /**\n   * Async constructor for `TransactionResponse`. This method can be used to create\n   * an instance of `TransactionResponse` and wait for the transaction to be fetched\n   * from the chain, ensuring that the `gqlTransaction` property is set.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  static async create(\n    id: string,\n    provider: Provider,\n    abis?: JsonAbisFromAllCalls\n  ): Promise<TransactionResponse> {\n    const chainId = await provider.getChainId();\n    const response = new TransactionResponse(id, provider, chainId, abis);\n    await response.fetch();\n    return response;\n  }\n\n  private applyMalleableSubscriptionFields<TTransactionType = void>(\n    transaction: Transaction<TTransactionType>\n  ) {\n    const status = this.status;\n    if (!status) {\n      return;\n    }\n\n    // The SDK currently submits only these\n    const tx = transaction as Transaction<\n      TransactionType.Script | TransactionType.Create | TransactionType.Blob\n    >;\n\n    if (status.type === 'SuccessStatus' || status.type === 'FailureStatus') {\n      tx.inputs = tx.inputs.map((input, idx) => {\n        if ('txPointer' in input) {\n          const correspondingInput = status.transaction.inputs?.[idx] as { txPointer: string };\n          return {\n            ...input,\n            txPointer: TxPointerCoder.decodeFromGqlScalar(correspondingInput.txPointer),\n          };\n        }\n        return input;\n      });\n\n      tx.outputs = mapGqlOutputsToTxOutputs(status.transaction.outputs);\n\n      if ('receiptsRoot' in status.transaction) {\n        (tx as Transaction<TransactionType.Script>).receiptsRoot = status.transaction\n          .receiptsRoot as string;\n      }\n    }\n  }\n\n  private async getTransaction<TTransactionType = void>(): Promise<{\n    tx: Transaction<TTransactionType>;\n    bytes: Uint8Array;\n  }> {\n    if (this.request) {\n      const tx = this.request.toTransaction() as Transaction<TTransactionType>;\n      this.applyMalleableSubscriptionFields(tx);\n      return {\n        tx,\n        bytes: this.request.toTransactionBytes(),\n      };\n    }\n\n    const gqlTransaction = this.gqlTransaction ?? (await this.fetch());\n    return {\n      tx: this.decodeTransaction(gqlTransaction) as Transaction<TTransactionType>,\n      bytes: arrayify(gqlTransaction.rawPayload),\n    };\n  }\n\n  private getReceipts(): TransactionResultReceipt[] {\n    const status = this.status ?? this.gqlTransaction?.status;\n\n    switch (status?.type) {\n      case 'SuccessStatus':\n      case 'FailureStatus':\n        return status.receipts.map(processGqlReceipt);\n      default:\n        return [];\n    }\n  }\n\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch(): Promise<GqlTransaction> {\n    const response = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id,\n    });\n\n    if (!response.transaction) {\n      const subscription = await this.provider.operations.statusChange({\n        transactionId: this.id,\n      });\n\n      for await (const { statusChange } of subscription) {\n        if (statusChange) {\n          this.status = statusChange;\n          break;\n        }\n      }\n\n      return this.fetch();\n    }\n\n    this.gqlTransaction = response.transaction;\n\n    return response.transaction;\n  }\n\n  /**\n   * Decode the raw payload of the transaction.\n   *\n   * @param transactionWithReceipts - The transaction with receipts object.\n   * @returns The decoded transaction.\n   */\n  decodeTransaction<TTransactionType = void>(transactionWithReceipts: GqlTransaction) {\n    return new TransactionCoder().decode(\n      arrayify(transactionWithReceipts.rawPayload),\n      0\n    )?.[0] as Transaction<TTransactionType>;\n  }\n\n  /**\n   * Retrieves the TransactionSummary. If the `gqlTransaction` is not set, it will\n   * fetch it from the provider\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   * @returns\n   */\n  async getTransactionSummary<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionSummary<TTransactionType>> {\n    const { tx: transaction, bytes: transactionBytes } =\n      await this.getTransaction<TTransactionType>();\n\n    const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } =\n      await this.provider.getGasConfig();\n\n    // If we have the total fee, we do not need to refetch the gas price\n    const totalFee = getTotalFeeFromStatus(this.status ?? this.gqlTransaction?.status);\n    const gasPrice = totalFee ? bn(0) : await this.provider.getLatestGasPrice();\n\n    const maxInputs = (await this.provider.getChain()).consensusParameters.txParameters.maxInputs;\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    const transactionSummary = assembleTransactionSummary<TTransactionType>({\n      id: this.id,\n      receipts: this.getReceipts(),\n      transaction,\n      transactionBytes,\n      gqlTransactionStatus: this.status ?? this.gqlTransaction?.status,\n      gasPerByte,\n      gasPriceFactor,\n      abiMap: contractsAbiMap,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    return transactionSummary;\n  }\n\n  private async waitForStatusChange() {\n    const status = this.gqlTransaction?.status?.type;\n    if (status && status !== 'SubmittedStatus') {\n      return;\n    }\n\n    const subscription =\n      this.submitTxSubscription ??\n      (await this.provider.operations.statusChange({\n        transactionId: this.id,\n      }));\n\n    for await (const sub of subscription) {\n      const statusChange = 'statusChange' in sub ? sub.statusChange : sub.submitAndAwaitStatus;\n      this.status = statusChange;\n      if (statusChange.type === 'SqueezedOutStatus') {\n        this.unsetResourceCache();\n        throw new FuelError(\n          ErrorCode.TRANSACTION_SQUEEZED_OUT,\n          `Transaction Squeezed Out with reason: ${statusChange.reason}`\n        );\n      }\n      if (statusChange.type !== 'SubmittedStatus') {\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assembles the result of a transaction by retrieving the transaction summary,\n   * decoding logs (if available), and handling transaction failure.\n   *\n   * This method can be used to obtain the result of a transaction that has just\n   * been submitted or one that has already been processed.\n   *\n   * @template TTransactionType - The type of the transaction.\n   * @param contractsAbiMap - The map of contract ABIs.\n   * @returns - The assembled transaction result.\n   * @throws If the transaction status is a failure.\n   */\n  async assembleResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    const transactionSummary = await this.getTransactionSummary<TTransactionType>(contractsAbiMap);\n\n    const transactionResult: TransactionResult<TTransactionType> = {\n      ...transactionSummary,\n    };\n\n    let logs: Array<unknown> = [];\n\n    if (this.abis) {\n      logs = getDecodedLogs(\n        transactionSummary.receipts,\n        this.abis.main,\n        this.abis.otherContractsAbis\n      );\n\n      transactionResult.logs = logs;\n    }\n\n    const { receipts } = transactionResult;\n\n    const status = this.status ?? this.gqlTransaction?.status;\n    if (status?.type === 'FailureStatus') {\n      this.unsetResourceCache();\n      const { reason } = status;\n      throw extractTxError({\n        receipts,\n        statusReason: reason,\n        logs,\n      });\n    }\n\n    return transactionResult;\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    await this.waitForStatusChange();\n    return this.assembleResult<TTransactionType>(contractsAbiMap);\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @param contractsAbiMap - The contracts ABI map.\n   */\n  async wait<TTransactionType = void>(\n    contractsAbiMap?: AbiMap\n  ): Promise<TransactionResult<TTransactionType>> {\n    return this.waitForResult<TTransactionType>(contractsAbiMap);\n  }\n\n  private unsetResourceCache() {\n    this.provider.cache?.unset(this.id);\n  }\n}\n","import { bn, type BN } from '@fuel-ts/math';\nimport { PolicyType, type Transaction } from '@fuel-ts/transactions';\nimport { DateTime, hexlify } from '@fuel-ts/utils';\n\nimport type { GasCosts } from '../provider';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { getGasUsedFromReceipts } from '../utils';\n\nimport { calculateTXFeeForSummary } from './calculate-tx-fee-for-summary';\nimport {\n  getOperations,\n  getTransactionTypeName,\n  isTypeMint,\n  isTypeCreate,\n  isTypeScript,\n  isTypeUpgrade,\n  isTypeUpload,\n  isTypeBlob,\n} from './operations';\nimport { extractBurnedAssetsFromReceipts, extractMintedAssetsFromReceipts } from './receipt';\nimport { processGraphqlStatus } from './status';\nimport type { AbiMap, GraphqlTransactionStatus, TransactionSummary } from './types';\n\nexport interface AssembleTransactionSummaryParams {\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  transaction: Transaction;\n  id: string;\n  transactionBytes: Uint8Array;\n  gqlTransactionStatus?: GraphqlTransactionStatus;\n  receipts: TransactionResultReceipt[];\n  abiMap?: AbiMap;\n  maxInputs: BN;\n  gasCosts: GasCosts;\n  maxGasPerTx: BN;\n  gasPrice: BN;\n  baseAssetId: string;\n}\n\n/** @hidden */\nexport function assembleTransactionSummary<TTransactionType = void>(\n  params: AssembleTransactionSummaryParams\n) {\n  const {\n    id,\n    receipts,\n    gasPerByte,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    gqlTransactionStatus,\n    abiMap = {},\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  } = params;\n\n  const gasUsed = getGasUsedFromReceipts(receipts);\n\n  const rawPayload = hexlify(transactionBytes);\n\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload,\n    abiMap,\n    maxInputs,\n    baseAssetId,\n  });\n\n  const typeName = getTransactionTypeName(transaction.type);\n\n  const tip = bn(transaction.policies?.find((policy) => policy.type === PolicyType.Tip)?.data);\n\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time, totalFee } =\n    processGraphqlStatus(gqlTransactionStatus);\n\n  const fee =\n    totalFee ??\n    calculateTXFeeForSummary({\n      gasPrice,\n      rawPayload,\n      tip,\n      consensusParameters: {\n        gasCosts,\n        maxGasPerTx,\n        feeParams: {\n          gasPerByte,\n          gasPriceFactor,\n        },\n      },\n    });\n\n  const mintedAssets = extractMintedAssetsFromReceipts(receipts);\n  const burnedAssets = extractBurnedAssetsFromReceipts(receipts);\n\n  let date: DateTime | undefined;\n\n  if (time) {\n    date = DateTime.fromTai64(time);\n  }\n\n  const transactionSummary: TransactionSummary<TTransactionType> = {\n    id,\n    tip,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isTypeUpgrade: isTypeUpgrade(transaction.type),\n    isTypeUpload: isTypeUpload(transaction.type),\n    isTypeBlob: isTypeBlob(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    date,\n    transaction: transaction as Transaction<TTransactionType>,\n  };\n\n  return transactionSummary;\n}\n","import type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionCreate, TransactionScript } from '@fuel-ts/transactions';\nimport { PolicyType, TransactionCoder, TransactionType } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type { GqlFeeParameters } from '../__generated__/operations';\nimport type { ConsensusParameters } from '../provider';\nimport {\n  calculateGasFee,\n  calculateMetadataGasForTxCreate,\n  calculateMetadataGasForTxScript,\n  getMaxGas,\n  getMinGas,\n} from '../utils/gas';\n\ntype FeeParams =\n  | Pick<GqlFeeParameters, 'gasPerByte' | 'gasPriceFactor'>\n  | {\n      gasPerByte: BN | number;\n      gasPriceFactor: BN | number;\n    };\n\nexport type CalculateTXFeeForSummaryParams = {\n  gasPrice: BN;\n  rawPayload: string;\n  tip: BN;\n  consensusParameters: Pick<ConsensusParameters, 'gasCosts'> & {\n    feeParams: FeeParams;\n    maxGasPerTx: BN;\n  };\n};\n\nexport const calculateTXFeeForSummary = (params: CalculateTXFeeForSummaryParams): BN => {\n  const {\n    gasPrice,\n    rawPayload,\n    tip,\n    consensusParameters: { gasCosts, feeParams, maxGasPerTx },\n  } = params;\n\n  const gasPerByte = bn(feeParams.gasPerByte);\n  const gasPriceFactor = bn(feeParams.gasPriceFactor);\n\n  const transactionBytes = arrayify(rawPayload);\n\n  const [transaction] = new TransactionCoder().decode(transactionBytes, 0);\n\n  const { type, witnesses, inputs, policies } = transaction as\n    | TransactionCreate\n    | TransactionScript;\n\n  let metadataGas = bn(0);\n  let gasLimit = bn(0);\n\n  if (type !== TransactionType.Create && type !== TransactionType.Script) {\n    return bn(0);\n  }\n\n  if (type === TransactionType.Create) {\n    const { bytecodeWitnessIndex, storageSlots } = transaction as TransactionCreate;\n\n    const contractBytesSize = bn(arrayify(witnesses[bytecodeWitnessIndex].data).length);\n\n    metadataGas = calculateMetadataGasForTxCreate({\n      contractBytesSize,\n      gasCosts,\n      stateRootSize: storageSlots.length || 0,\n      txBytesSize: transactionBytes.length,\n    });\n  } else {\n    const { scriptGasLimit } = transaction;\n\n    if (scriptGasLimit) {\n      gasLimit = scriptGasLimit;\n    }\n\n    metadataGas = calculateMetadataGasForTxScript({\n      gasCosts,\n      txBytesSize: transactionBytes.length,\n    });\n  }\n\n  const minGas = getMinGas({\n    gasCosts,\n    gasPerByte: bn(gasPerByte),\n    inputs,\n    metadataGas,\n    txBytesSize: transactionBytes.length,\n  });\n\n  const witnessLimit = policies.find((policy) => policy.type === PolicyType.WitnessLimit)?.data as\n    | BN\n    | undefined;\n\n  const witnessesLength = witnesses.reduce((acc, wit) => acc + wit.dataLength, 0);\n\n  const maxGas = getMaxGas({\n    gasPerByte,\n    minGas,\n    witnessesLength,\n    gasLimit,\n    witnessLimit,\n    maxGasPerTx,\n  });\n\n  const maxFee = calculateGasFee({\n    gasPrice,\n    gas: maxGas,\n    priceFactor: gasPriceFactor,\n    tip,\n  });\n\n  return maxFee;\n};\n","import { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { ReceiptType, TransactionType } from '@fuel-ts/transactions';\nimport type { InputContract, Output, OutputChange, Input } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultReceipt,\n  TransactionResultCallReceipt,\n  TransactionResultMessageOutReceipt,\n  TransactionResultTransferOutReceipt,\n  TransactionResultTransferReceipt,\n} from '../transaction-response';\n\nimport type { FunctionCall } from './call';\nimport { getFunctionCall } from './call';\nimport {\n  getInputFromAssetId,\n  getInputAccountAddress,\n  getInputContractFromIndex,\n  getInputsContract,\n  getInputsCoinAndMessage,\n  aggregateInputsAmountsByAssetAndOwner,\n} from './input';\nimport {\n  getOutputsChange,\n  getOutputsCoin,\n  getOutputsContract,\n  getOutputsContractCreated,\n} from './output';\nimport { AddressType, ChainName, OperationName, TransactionTypeName } from './types';\nimport type {\n  InputOutputParam,\n  InputParam,\n  OperationCoin,\n  RawPayloadParam,\n  ReceiptParam,\n  Operation,\n  GetOperationParams,\n  GetTransferOperationsParams,\n  AbiMap,\n} from './types';\n\n/**\n * Extracts a specific type of receipt from a list of receipts.\n *\n * @param receipts - The list of receipts to filter.\n * @param type - The type of receipt to filter for.\n * @returns The filtered list of receipts.\n */\nexport function getReceiptsByType<T = TransactionResultReceipt>(\n  receipts: TransactionResultReceipt[],\n  type: ReceiptType\n) {\n  return (receipts ?? []).filter((r) => r.type === type) as T[];\n}\n\n/**\n * Returns the transaction type's name based on the transaction type enum value.\n *\n * @param transactionType - The transaction type enum value.\n * @returns The transaction type's name.\n */\nexport function getTransactionTypeName(transactionType: TransactionType): TransactionTypeName {\n  switch (transactionType) {\n    case TransactionType.Mint:\n      return TransactionTypeName.Mint;\n    case TransactionType.Create:\n      return TransactionTypeName.Create;\n    case TransactionType.Script:\n      return TransactionTypeName.Script;\n    case TransactionType.Blob:\n      return TransactionTypeName.Blob;\n    case TransactionType.Upgrade:\n      return TransactionTypeName.Upgrade;\n    case TransactionType.Upload:\n      return TransactionTypeName.Upload;\n    default:\n      throw new FuelError(\n        ErrorCode.UNSUPPORTED_TRANSACTION_TYPE,\n        `Unsupported transaction type: ${transactionType}.`\n      );\n  }\n}\n\n/** @hidden */\nexport function isType(transactionType: TransactionType, type: TransactionTypeName) {\n  const txType = getTransactionTypeName(transactionType);\n\n  return txType === type;\n}\n\n/** @hidden */\nexport function isTypeMint(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Mint);\n}\n\n/** @hidden */\nexport function isTypeCreate(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Create);\n}\n\n/** @hidden */\nexport function isTypeScript(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Script);\n}\n\n/** @hidden */\nexport function isTypeUpgrade(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upgrade);\n}\n\n/** @hidden */\nexport function isTypeUpload(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Upload);\n}\n\n/** @hidden */\nexport function isTypeBlob(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeName.Blob);\n}\n\n/** @hidden */\nexport function hasSameAssetId(a: OperationCoin) {\n  return (b: OperationCoin) => a.assetId === b.assetId;\n}\n\n/** @hidden */\nexport function getReceiptsCall(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultCallReceipt>(receipts, ReceiptType.Call);\n}\n\n/** @hidden */\nexport function getReceiptsMessageOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultMessageOutReceipt>(receipts, ReceiptType.MessageOut);\n}\n\n/** @hidden */\nfunction mergeAssets(op1: Operation, op2: Operation): OperationCoin[] {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n\n  const assetMap = new Map<string, OperationCoin>();\n\n  // Merge assets from op1\n  assets1.forEach((asset) => {\n    assetMap.set(asset.assetId, { ...asset });\n  });\n\n  // Merge assets from op2, adding to existing assets or creating new ones\n  assets2.forEach((asset) => {\n    const existingAsset = assetMap.get(asset.assetId);\n    if (existingAsset) {\n      existingAsset.amount = bn(existingAsset.amount).add(asset.amount);\n    } else {\n      assetMap.set(asset.assetId, { ...asset });\n    }\n  });\n\n  return Array.from(assetMap.values());\n}\n\n/** @hidden */\nfunction isSameOperation(a: Operation, b: Operation) {\n  return (\n    a.name === b.name &&\n    a.from?.address === b.from?.address &&\n    a.to?.address === b.to?.address &&\n    a.from?.type === b.from?.type &&\n    a.to?.type === b.to?.type\n  );\n}\n\n/** @hidden */\nfunction mergeAssetsSent(existing: Operation, toAdd: Operation): Operation['assetsSent'] {\n  if (!toAdd.assetsSent?.length) {\n    return existing.assetsSent;\n  }\n\n  return existing.assetsSent?.length ? mergeAssets(existing, toAdd) : toAdd.assetsSent;\n}\n\n/** @hidden */\nfunction mergeCalls(existing: Operation, toAdd: Operation): Operation['calls'] {\n  if (!toAdd.calls?.length) {\n    return existing.calls;\n  }\n\n  return [...(existing.calls || []), ...toAdd.calls];\n}\n\n/** @hidden */\nfunction mergeOperations(existing: Operation, toAdd: Operation): Operation {\n  return {\n    ...existing,\n    assetsSent: mergeAssetsSent(existing, toAdd),\n    calls: mergeCalls(existing, toAdd),\n  };\n}\n\n/** @hidden */\nexport function addOperation(operations: Operation[], toAdd: Operation): Operation[] {\n  const existingIndex = operations.findIndex((op) => isSameOperation(op, toAdd));\n\n  if (existingIndex === -1) {\n    return [...operations, toAdd];\n  }\n\n  return operations.map((op, index) => (index === existingIndex ? mergeOperations(op, toAdd) : op));\n}\n\n/** @hidden */\nexport function getReceiptsTransferOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultTransferOutReceipt>(receipts, ReceiptType.TransferOut);\n}\n\n/**\n * Creates withdrawal operations from Fuel to Ethereum based on message out receipts\n *\n * @param inputs - Transaction inputs containing account information\n * @param receipts - Transaction receipts containing withdrawal details\n * @param baseAssetId - The ID of the asset being withdrawn\n * @returns Array of withdrawal operations with sender, recipient, and asset id.\n */\nexport function getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n  baseAssetId,\n}: InputParam & ReceiptParam & { baseAssetId: string }): Operation[] {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      const input = getInputFromAssetId(inputs, baseAssetId, true);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: OperationName.withdrawFromFuel,\n          from: {\n            type: AddressType.account,\n            address: inputAddress,\n          },\n          to: {\n            type: AddressType.account,\n            address: receipt.recipient.toString(),\n            chain: ChainName.ethereum,\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId: baseAssetId,\n            },\n          ],\n        });\n\n        return newWithdrawFromFuelOps;\n      }\n\n      return prevWithdrawFromFuelOps;\n    },\n    [] as Operation[]\n  );\n\n  return withdrawFromFuelOperations;\n}\n\n/** @hidden */\nfunction getContractCalls(\n  contractInput: InputContract,\n  abiMap: AbiMap | undefined,\n  receipt: TransactionResultCallReceipt,\n  rawPayload: string,\n  maxInputs: BN\n): FunctionCall[] {\n  const abi = abiMap?.[contractInput.contractID];\n  if (!abi) {\n    return [];\n  }\n\n  return [\n    getFunctionCall({\n      abi,\n      receipt,\n      rawPayload,\n      maxInputs,\n    }),\n  ];\n}\n\n/** @hidden */\nfunction getAssetsSent(receipt: TransactionResultCallReceipt): OperationCoin[] | undefined {\n  return receipt.amount?.isZero()\n    ? undefined\n    : [\n        {\n          amount: receipt.amount,\n          assetId: receipt.assetId,\n        },\n      ];\n}\n\n/** @hidden */\nfunction processCallReceipt(\n  receipt: TransactionResultCallReceipt,\n  contractInput: InputContract,\n  inputs: Input[],\n  abiMap: AbiMap | undefined,\n  rawPayload: string,\n  maxInputs: BN,\n  baseAssetId: string\n): Operation[] {\n  const assetId = receipt.assetId === ZeroBytes32 ? baseAssetId : receipt.assetId;\n  const input = getInputFromAssetId(inputs, assetId, assetId === baseAssetId);\n  if (!input) {\n    return [];\n  }\n\n  const inputAddress = getInputAccountAddress(input);\n  const calls = getContractCalls(contractInput, abiMap, receipt, rawPayload, maxInputs);\n\n  return [\n    {\n      name: OperationName.contractCall,\n      from: {\n        type: AddressType.account,\n        address: inputAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: receipt.to,\n      },\n      assetsSent: getAssetsSent(receipt),\n      calls,\n    },\n  ];\n}\n\n/** @hidden */\nexport function getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: InputOutputParam &\n  ReceiptParam &\n  Pick<GetOperationParams, 'abiMap' | 'maxInputs' | 'baseAssetId'> &\n  RawPayloadParam): Operation[] {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n\n  return contractOutputs.flatMap((output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n    if (!contractInput) {\n      return [];\n    }\n\n    return contractCallReceipts\n      .filter((receipt) => receipt.to === contractInput.contractID)\n      .flatMap((receipt) =>\n        processCallReceipt(\n          receipt,\n          contractInput,\n          inputs,\n          abiMap,\n          rawPayload as string,\n          maxInputs,\n          baseAssetId\n        )\n      );\n  });\n}\n\n/**\n * Extracts a transfer operation from a transaction receipt, determining the addresses and types\n * of the sender and receiver, along with the transferred asset details.\n *\n * @param receipt - The transaction receipt containing transfer information\n * @param contractInputs - Array of contract inputs to determine address types\n * @param changeOutputs - Array of change outputs to resolve zero addresses\n * @returns A transfer operation object with sender, receiver and asset details\n */\nfunction extractTransferOperationFromReceipt(\n  receipt: TransactionResultTransferReceipt | TransactionResultTransferOutReceipt,\n  contractInputs: InputContract[],\n  changeOutputs: OutputChange[]\n) {\n  const { to: toAddress, assetId, amount } = receipt;\n  let { id: fromAddress } = receipt;\n\n  const toType = contractInputs.some((input) => input.contractID === toAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  if (ZeroBytes32 === fromAddress) {\n    const change = changeOutputs.find((output) => output.assetId === assetId);\n\n    fromAddress = change?.to || fromAddress;\n  }\n\n  const fromType = contractInputs.some((input) => input.contractID === fromAddress)\n    ? AddressType.contract\n    : AddressType.account;\n\n  return {\n    name: OperationName.transfer,\n    from: {\n      type: fromType,\n      address: fromAddress,\n    },\n    to: {\n      type: toType,\n      address: toAddress,\n    },\n    assetsSent: [\n      {\n        assetId: assetId.toString(),\n        amount,\n      },\n    ],\n  };\n}\n\n/** @hidden */\nexport function getTransferOperations({\n  inputs,\n  outputs,\n  receipts,\n  baseAssetId,\n}: GetTransferOperationsParams): Operation[] {\n  let operations: Operation[] = [];\n\n  const coinOutputs = getOutputsCoin(outputs);\n  const contractInputs = getInputsContract(inputs);\n  const changeOutputs = getOutputsChange(outputs);\n\n  const aggregated = aggregateInputsAmountsByAssetAndOwner(inputs, baseAssetId);\n\n  /**\n   * Extracting transfer operations between wallets, as they do not produce receipts\n   */\n  coinOutputs.forEach(({ amount, assetId, to }) => {\n    const txPayers = aggregated.get(assetId) || new Map<string, BN>();\n    let selectedPayer: string | undefined;\n    let fallbackPayer: string | undefined;\n\n    for (const [address, payedAmount] of txPayers) {\n      if (!fallbackPayer) {\n        fallbackPayer = address; // Set the first payer as a fallback\n      }\n\n      if (payedAmount.gte(amount)) {\n        selectedPayer = address;\n        break; // Stop looping once a suitable payer is found\n      }\n    }\n\n    // If no suitable payer is found, use the fallback payer\n    selectedPayer = selectedPayer || fallbackPayer;\n\n    if (selectedPayer) {\n      operations = addOperation(operations, {\n        name: OperationName.transfer,\n        from: {\n          type: AddressType.account,\n          address: selectedPayer,\n        },\n        to: {\n          type: AddressType.account,\n          address: to,\n        },\n        assetsSent: [{ assetId, amount }],\n      });\n    }\n  });\n\n  /**\n   * `Transfer` receipts are produced from transfers:\n   * - Wallet to Contract\n   * - Contract to Contract\n   */\n  const transferReceipts = getReceiptsByType<TransactionResultTransferReceipt>(\n    receipts,\n    ReceiptType.Transfer\n  );\n\n  /**\n   * `TransferOut` receipts are produced from transfer:\n   * - Contract to Wallet\n   */\n  const transferOutReceipts = getReceiptsByType<TransactionResultTransferOutReceipt>(\n    receipts,\n    ReceiptType.TransferOut\n  );\n\n  [...transferReceipts, ...transferOutReceipts].forEach((receipt) => {\n    const operation = extractTransferOperationFromReceipt(receipt, contractInputs, changeOutputs);\n\n    operations = addOperation(operations, operation);\n  });\n\n  return operations;\n}\n\n/** @hidden */\nexport function getPayProducerOperations(outputs: Output[]): Operation[] {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: OperationName.payBlockProducer,\n      from: {\n        type: AddressType.account,\n        address: 'Network',\n      },\n      to: {\n        type: AddressType.account,\n        address: output.to.toString(),\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount,\n        },\n      ],\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return payProducerOperations;\n}\n\n/** @hidden */\nexport function getContractCreatedOperations({ inputs, outputs }: InputOutputParam): Operation[] {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoinAndMessage(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: OperationName.contractCreated,\n      from: {\n        type: AddressType.account,\n        address: fromAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: contractCreatedOutput?.contractId || '',\n      },\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return contractCreatedOperations;\n}\n\n/** @hidden */\nexport function getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n  maxInputs,\n  baseAssetId,\n}: GetOperationParams): Operation[] {\n  if (isTypeCreate(transactionType)) {\n    return [...getContractCreatedOperations({ inputs, outputs })];\n  }\n\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs, receipts, baseAssetId }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n        maxInputs,\n        baseAssetId,\n      }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts, baseAssetId }),\n    ];\n  }\n  // at this point we are sure it's a mint transaction\n  return [...getPayProducerOperations(outputs)];\n}\n","import { Interface, type JsonAbi } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\nimport type { ReceiptCall } from '@fuel-ts/transactions';\n\ntype GetFunctionCallProps = {\n  abi: JsonAbi;\n  receipt: ReceiptCall;\n  rawPayload?: string;\n  maxInputs: BN;\n};\n\nexport interface FunctionCall {\n  amount?: BN | undefined;\n  assetId?: string | undefined;\n  functionSignature: string;\n  functionName: string;\n  argumentsProvided: Record<string, unknown> | undefined;\n}\n\nexport const getFunctionCall = ({ abi, receipt }: GetFunctionCallProps): FunctionCall => {\n  const abiInterface = new Interface(abi);\n  const callFunctionSelector = receipt.param1.toHex(8);\n  const functionFragment = abiInterface.getFunction(callFunctionSelector);\n  const inputs = functionFragment.jsonFn.inputs;\n\n  const encodedArgs = receipt.param2.toHex();\n  let argumentsProvided;\n\n  // use bytes got from rawPayload to decode function params\n  const data = functionFragment.decodeArguments(encodedArgs);\n  if (data) {\n    // put together decoded data with input names from abi\n    argumentsProvided = inputs.reduce((prev, input, index) => {\n      const value = data[index];\n      const name = input.name;\n\n      if (name) {\n        return {\n          ...prev,\n          // reparse to remove bn\n          [name]: JSON.parse(JSON.stringify(value)),\n        };\n      }\n\n      return prev;\n    }, {});\n  }\n\n  const call = {\n    functionSignature: functionFragment.signature,\n    functionName: functionFragment.name,\n    argumentsProvided,\n    ...(receipt.amount?.isZero() ? {} : { amount: receipt.amount, assetId: receipt.assetId }),\n  };\n\n  return call;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { BN } from '@fuel-ts/math';\nimport type { Input, InputCoin, InputContract, InputMessage } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getInputsByTypes<T = Input>(inputs: Input[], types: Array<InputType>) {\n  return inputs.filter((i) => types.includes(i.type)) as T[];\n}\n\n/** @hidden */\nexport function getInputsByType<T = Input>(inputs: Input[], type: InputType) {\n  return inputs.filter((i) => i.type === type) as T[];\n}\n\n/** @hidden */\nexport function getInputsCoin(inputs: Input[]): InputCoin[] {\n  return getInputsByType<InputCoin>(inputs, InputType.Coin);\n}\n\n/** @hidden */\nexport function getInputsMessage(inputs: Input[]) {\n  return getInputsByType<InputMessage>(inputs, InputType.Message);\n}\n\n/** @hidden */\nexport function getInputsCoinAndMessage(inputs: Input[]) {\n  return getInputsByTypes<InputCoin | InputMessage>(inputs, [InputType.Coin, InputType.Message]);\n}\n\n/** @hidden */\nexport function isInputCoin(input: Input): input is InputCoin {\n  return input.type === InputType.Coin;\n}\n\n/** @hidden */\nexport function getInputsContract(inputs: Input[]) {\n  return getInputsByType<InputContract>(inputs, InputType.Contract);\n}\n\n/** @hidden */\nfunction findCoinInput(inputs: Input[], assetId: string): InputCoin | undefined {\n  const coinInputs = getInputsCoin(inputs);\n  return coinInputs.find((i) => i.assetId === assetId);\n}\n\n/** @hidden */\nexport function aggregateInputsAmountsByAssetAndOwner(\n  inputs: Input[],\n  baseAssetId: string\n): Map<string, Map<string, BN>> {\n  const aggregated = new Map<string, Map<string, BN>>();\n\n  getInputsCoinAndMessage(inputs).forEach((input) => {\n    const assetId = isInputCoin(input) ? input.assetId : baseAssetId;\n    const owner = isInputCoin(input) ? input.owner : input.recipient;\n\n    // Ensure that the map for the assetId exists\n    let ownersMap = aggregated.get(assetId);\n    if (!ownersMap) {\n      ownersMap = new Map<string, BN>();\n      aggregated.set(assetId, ownersMap);\n    }\n\n    // Ensure that the map for the owner exists\n    let ownerBalance = ownersMap.get(owner);\n    if (!ownerBalance) {\n      ownerBalance = new BN(0);\n      ownersMap.set(owner, ownerBalance);\n    }\n\n    // Update the balance\n    ownersMap.set(owner, ownerBalance.add(input.amount));\n  });\n\n  return aggregated;\n}\n\n/** @hidden */\nfunction findMessageInput(inputs: Input[]): InputMessage | undefined {\n  return getInputsMessage(inputs)?.[0];\n}\n/** @hidden */\nexport function getInputFromAssetId(\n  inputs: Input[],\n  assetId: string,\n  isBaseAsset = false\n): InputCoin | InputMessage | undefined {\n  const coinInput = findCoinInput(inputs, assetId);\n  if (coinInput) {\n    return coinInput;\n  }\n\n  if (isBaseAsset) {\n    return findMessageInput(inputs);\n  }\n\n  // #TODO: we should throw an error here if we are unable to return a valid input\n  return undefined;\n}\n\n/** @hidden */\nexport function getInputContractFromIndex(\n  inputs: Input[],\n  inputIndex: number\n): InputContract | undefined {\n  if (inputIndex == null) {\n    return undefined;\n  }\n\n  const contractInput = inputs?.[inputIndex];\n\n  if (!contractInput) {\n    return undefined;\n  }\n  if (contractInput.type !== InputType.Contract) {\n    throw new FuelError(\n      ErrorCode.INVALID_TRANSACTION_INPUT,\n      `Contract input should be of type 'contract'.`\n    );\n  }\n\n  return contractInput as InputContract;\n}\n\n/** @hidden */\nexport function getInputAccountAddress(input: Input) {\n  if (input.type === InputType.Coin) {\n    return input.owner.toString();\n  }\n\n  if (input.type === InputType.Message) {\n    return input.recipient.toString();\n  }\n\n  return '';\n}\n","import type {\n  Output,\n  OutputChange,\n  OutputCoin,\n  OutputContract,\n  OutputContractCreated,\n  OutputVariable,\n} from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getOutputsByType<T = Output>(outputs: Output[], type: OutputType) {\n  return outputs.filter((o) => o.type === type) as T[];\n}\n\n/** @hidden */\nexport function getOutputsContractCreated(outputs: Output[]) {\n  return getOutputsByType<OutputContractCreated>(outputs, OutputType.ContractCreated);\n}\n\n/** @hidden */\nexport function getOutputsCoin(outputs: Output[]) {\n  return getOutputsByType<OutputCoin>(outputs, OutputType.Coin);\n}\n\n/** @hidden */\nexport function getOutputsChange(outputs: Output[]) {\n  return getOutputsByType<OutputChange>(outputs, OutputType.Change);\n}\n\n/** @hidden */\nexport function getOutputsContract(outputs: Output[]) {\n  return getOutputsByType<OutputContract>(outputs, OutputType.Contract);\n}\n\n/** @hidden */\nexport function getOutputsVariable(outputs: Output[]) {\n  return getOutputsByType<OutputVariable>(outputs, OutputType.Variable);\n}\n","import { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { GqlReceiptFragment } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { assembleReceiptByType } from '../utils';\n\nimport type { BurnedAsset, MintedAsset } from './types';\n\nexport const processGqlReceipt = (gqlReceipt: GqlReceiptFragment): TransactionResultReceipt =>\n  assembleReceiptByType(gqlReceipt);\n\nexport const extractMintedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): MintedAsset[] => {\n  const mintedAssets: MintedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return mintedAssets;\n};\n\nexport const extractBurnedAssetsFromReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): BurnedAsset[] => {\n  const burnedAssets: BurnedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return burnedAssets;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nimport { TransactionStatus } from './types';\nimport type {\n  BlockId,\n  GqlTransactionStatusesNames,\n  GraphqlTransactionStatus,\n  Time,\n  TransactionSummary,\n} from './types';\n\n/** @hidden */\nexport const getTransactionStatusName = (gqlStatus: GqlTransactionStatusesNames) => {\n  switch (gqlStatus) {\n    case 'FailureStatus':\n      return TransactionStatus.failure;\n    case 'SuccessStatus':\n      return TransactionStatus.success;\n    case 'SubmittedStatus':\n      return TransactionStatus.submitted;\n    case 'SqueezedOutStatus':\n      return TransactionStatus.squeezedout;\n    default:\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSACTION_STATUS,\n        `Invalid transaction status: ${gqlStatus}.`\n      );\n  }\n};\n\ntype IProcessGraphqlStatusResponse = Pick<\n  TransactionSummary,\n  'time' | 'blockId' | 'isStatusPending' | 'isStatusSuccess' | 'isStatusFailure' | 'status'\n> & { totalFee?: BN; totalGas?: BN };\n\n/** @hidden */\nexport const processGraphqlStatus = (gqlTransactionStatus?: GraphqlTransactionStatus) => {\n  let time: Time | undefined;\n  let blockId: BlockId | undefined;\n  let status: TransactionStatus | undefined;\n  let totalFee: BN | undefined;\n  let totalGas: BN | undefined;\n\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n\n    switch (gqlTransactionStatus.type) {\n      case 'SuccessStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusSuccess = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'FailureStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block?.id;\n        isStatusFailure = true;\n        totalFee = bn(gqlTransactionStatus.totalFee);\n        totalGas = bn(gqlTransactionStatus.totalGas);\n        break;\n\n      case 'SubmittedStatus':\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      default:\n    }\n  }\n\n  const processedGraphqlStatus: IProcessGraphqlStatusResponse = {\n    time,\n    blockId,\n    status,\n    totalFee,\n    totalGas,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n  };\n\n  return processedGraphqlStatus;\n};\n\n/**\n * Returns the total fee from the transaction status.\n *\n * @param status - The transaction status.\n * @returns The total fee from the transaction status or undefined.\n */\nexport const getTotalFeeFromStatus = (status?: GraphqlTransactionStatus): BN | undefined =>\n  status && 'totalFee' in status ? bn(status.totalFee) : undefined;\n","import type { JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface, BigNumberCoder } from '@fuel-ts/abi-coder';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { TransactionResultReceipt } from './transaction-response';\n\n/** @hidden */\nexport function getDecodedLogs<T = unknown>(\n  receipts: Array<TransactionResultReceipt>,\n  mainAbi: JsonAbi,\n  externalAbis: Record<string, JsonAbi> = {}\n): T[] {\n  /**\n   * This helper decodes logs from transaction receipts.\n   * It loops through all receipts and decodes two types of logs:\n   * - ReceiptType.LogData\n   * - ReceiptType.Log\n   *\n   * The \"mainAbi\" parameter represents the ABI of the main contract used to create the transaction\n   * or the ABI from a script used within a \"BaseInvocationScope\" context.\n   * The \"externalAbis\" parameter is a record of contract ABIs that are also part of the transaction.\n   * These ABIs were added using `contract.addContracts` or through a multicall with `contract.multiCall`.\n   *\n   * @param receipts - The array of transaction result receipts.\n   * @param mainAbi - The ABI of the script or main contract.\n   * @param externalAbis - The record of external contract ABIs.\n   * @returns An array of decoded logs from Sway projects.\n   */\n  return receipts.reduce((logs: T[], receipt) => {\n    if (receipt.type === ReceiptType.LogData || receipt.type === ReceiptType.Log) {\n      const interfaceToUse = new Interface(externalAbis[receipt.id] || mainAbi);\n\n      const data =\n        receipt.type === ReceiptType.Log\n          ? new BigNumberCoder('u64').encode(receipt.ra)\n          : receipt.data;\n\n      const [decodedLog] = interfaceToUse.decodeLog(data, receipt.rb.toString());\n      logs.push(decodedLog);\n    }\n\n    return logs;\n  }, []);\n}\n","import { sleep } from '@fuel-ts/utils';\n\nimport type { ProviderOptions } from '../provider';\n\ntype Backoff = 'linear' | 'exponential' | 'fixed';\n\n/**\n * Retry options scheme\n */\nexport type RetryOptions = {\n  /**\n   * Amount of attempts to retry before failing the call.\n   */\n  maxRetries: number;\n  /**\n   * Backoff strategy to use when retrying. Default is exponential.\n   */\n  backoff?: Backoff;\n  /**\n   * Starting delay for backoff strategy. Default is 150ms.\n   */\n  baseDelay?: number;\n};\n\n/**\n * Calculate the delay for the next retry attempt\n * @param options - Retry options configuration\n * @param retryAttemptNum - 1-based, tells which retry attempt is this\n * @returns Next wait delay\n */\nexport function getWaitDelay(options: RetryOptions, retryAttemptNum: number) {\n  const duration = options.baseDelay ?? 150;\n\n  switch (options.backoff) {\n    case 'linear':\n      return duration * retryAttemptNum;\n    case 'fixed':\n      return duration;\n    case 'exponential':\n    default:\n      return 2 ** (retryAttemptNum - 1) * duration;\n  }\n}\n\n/**\n * Returns a wrapped fetch function that will auto-execute itself in case of errors, until it succeeds\n * @param fetchFn - Function to be auto-retried\n * @param options - Retry options configuration\n * @param retryAttemptNum - ZERO=first call, ONE=first retry, TWO=second retry, etc.\n * @returns Whatever is the output of the `fetchFn` function\n */\nexport function autoRetryFetch(\n  fetchFn: NonNullable<ProviderOptions['fetch']>,\n  options?: RetryOptions,\n  retryAttemptNum: number = 0\n): NonNullable<ProviderOptions['fetch']> {\n  if (options === undefined) {\n    return fetchFn;\n  }\n\n  return async (...args) => {\n    try {\n      return await fetchFn(...args);\n    } catch (_error: unknown) {\n      const error = _error as Error & { cause?: { code: string } };\n\n      /**\n       * So far, we are auto-retrying only for `ECONNREFUSED` error.\n       * TODO: Investigate if we should consider more errors.\n       */\n      if (error.cause?.code !== 'ECONNREFUSED') {\n        throw error;\n      }\n      const retryNum = retryAttemptNum + 1;\n\n      if (retryNum > options.maxRetries) {\n        throw error;\n      }\n\n      const delay = getWaitDelay(options, retryNum);\n\n      await sleep(delay);\n\n      return autoRetryFetch(fetchFn, options, retryNum)(...args);\n    }\n  };\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { GraphQLError } from 'graphql';\n\nexport enum GqlErrorMessage {\n  NOT_ENOUGH_COINS = 'not enough coins to fit the target',\n  MAX_COINS_REACHED = 'max number of coins is reached while trying to fit the target',\n}\n\nexport const handleGqlErrorMessage = (errorMessage: string, rawError: GraphQLError) => {\n  switch (errorMessage) {\n    case GqlErrorMessage.NOT_ENOUGH_COINS:\n      throw new FuelError(\n        ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account(s) sending the transaction don't have enough funds to cover the transaction.`,\n        {},\n        rawError\n      );\n    case GqlErrorMessage.MAX_COINS_REACHED:\n      throw new FuelError(\n        ErrorCode.MAX_COINS_REACHED,\n        'The account retrieving coins has exceeded the maximum number of coins per asset. Please consider combining your coins into a single UTXO.',\n        {},\n        rawError\n      );\n    default:\n      throw new FuelError(ErrorCode.INVALID_REQUEST, errorMessage);\n  }\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nimport type { CursorPaginationArgs } from '../provider';\n\n/**\n * @hidden\n */\nexport const validatePaginationArgs = (params: {\n  inputArgs?: CursorPaginationArgs;\n  paginationLimit: number;\n}): CursorPaginationArgs => {\n  const { paginationLimit, inputArgs = {} } = params;\n  const { first, last, after, before } = inputArgs;\n\n  if (after && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'Pagination arguments \"after\" and \"before\" cannot be used together'\n    );\n  }\n\n  if ((first || 0) > paginationLimit || (last || 0) > paginationLimit) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      `Pagination limit for this query cannot exceed ${paginationLimit} items`\n    );\n  }\n\n  if (first && before) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"first\" with \"before\" is not supported'\n    );\n  }\n\n  if (last && after) {\n    throw new FuelError(\n      ErrorCode.INVALID_INPUT_PARAMETERS,\n      'The use of pagination argument \"last\" with \"after\" is not supported'\n    );\n  }\n\n  // If neither first nor last is provided, set a default first value\n  if (!first && !last) {\n    inputArgs.first = paginationLimit;\n  }\n\n  return inputArgs;\n};\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { bn } from '@fuel-ts/math';\nimport { TransactionCoder } from '@fuel-ts/transactions';\nimport { arrayify } from '@fuel-ts/utils';\n\nimport type {\n  GqlGetTransactionsByOwnerQueryVariables,\n  GqlReceiptFragment,\n} from '../__generated__/operations';\nimport type Provider from '../provider';\nimport { TRANSACTIONS_PAGE_SIZE_LIMIT, type PageInfo } from '../provider';\nimport type { TransactionRequest } from '../transaction-request';\nimport type { TransactionResult } from '../transaction-response';\nimport { validatePaginationArgs } from '../utils/validate-pagination-args';\n\nimport { assembleTransactionSummary } from './assemble-transaction-summary';\nimport { processGqlReceipt } from './receipt';\nimport { getTotalFeeFromStatus } from './status';\nimport type { AbiMap, TransactionSummary } from './types';\n/** @hidden */\nexport interface GetTransactionSummaryParams {\n  id: string;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\nexport async function getTransactionSummary<TTransactionType = void>(\n  params: GetTransactionSummaryParams\n): Promise<TransactionResult> {\n  const { id, provider, abiMap } = params;\n\n  const { transaction: gqlTransaction } = await provider.operations.getTransactionWithReceipts({\n    transactionId: id,\n  });\n\n  if (!gqlTransaction) {\n    throw new FuelError(\n      ErrorCode.TRANSACTION_NOT_FOUND,\n      `Transaction not found for given id: ${id}.`\n    );\n  }\n\n  const [decodedTransaction] = new TransactionCoder().decode(\n    arrayify(gqlTransaction.rawPayload),\n    0\n  );\n\n  let txReceipts: GqlReceiptFragment[] = [];\n\n  if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n    txReceipts = gqlTransaction.status.receipts;\n  }\n\n  const receipts = txReceipts.map(processGqlReceipt);\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  // If we have the total fee, we do not need to refetch the gas price\n  const totalFee = getTotalFeeFromStatus(gqlTransaction.status);\n  const gasPrice = totalFee ? bn(0) : await provider.getLatestGasPrice();\n\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionInfo = assembleTransactionSummary<TTransactionType>({\n    id: gqlTransaction.id,\n    receipts,\n    transaction: decodedTransaction,\n    transactionBytes: arrayify(gqlTransaction.rawPayload),\n    gqlTransactionStatus: gqlTransaction.status,\n    gasPerByte: bn(gasPerByte),\n    gasPriceFactor: bn(gasPriceFactor),\n    abiMap,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return {\n    ...transactionInfo,\n  };\n}\n\nexport interface GetTransactionSummaryFromRequestParams {\n  transactionRequest: TransactionRequest;\n  provider: Provider;\n  abiMap?: AbiMap;\n}\n\n/** @hidden */\nexport async function getTransactionSummaryFromRequest<TTransactionType = void>(\n  params: GetTransactionSummaryFromRequestParams\n): Promise<TransactionSummary<TTransactionType>> {\n  const { provider, transactionRequest, abiMap } = params;\n\n  const { receipts } = await provider.dryRun(transactionRequest);\n\n  const { gasPerByte, gasPriceFactor, gasCosts, maxGasPerTx } = await provider.getGasConfig();\n  const maxInputs = (await provider.getChain()).consensusParameters.txParameters.maxInputs;\n\n  const transaction = transactionRequest.toTransaction();\n  const transactionBytes = transactionRequest.toTransactionBytes();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactionSummary = assembleTransactionSummary<TTransactionType>({\n    id: transactionRequest.getTransactionId(await provider.getChainId()),\n    receipts,\n    transaction,\n    transactionBytes,\n    abiMap,\n    gasPerByte,\n    gasPriceFactor,\n    maxInputs,\n    gasCosts,\n    maxGasPerTx,\n    gasPrice,\n    baseAssetId,\n  });\n\n  return transactionSummary;\n}\n\nexport interface GetTransactionsSummariesParams {\n  provider: Provider;\n  filters: GqlGetTransactionsByOwnerQueryVariables;\n  abiMap?: AbiMap;\n}\n\nexport interface GetTransactionsSummariesReturns {\n  transactions: TransactionResult[];\n  pageInfo: PageInfo;\n}\n\n/**\n * Gets transaction summaries for a given owner/address.\n *\n * @param params - The filters to apply to the query.\n * @returns The transaction summaries.\n */\nexport async function getTransactionsSummaries(\n  params: GetTransactionsSummariesParams\n): Promise<GetTransactionsSummariesReturns> {\n  const { filters, provider, abiMap } = params;\n\n  const { owner, ...inputArgs } = filters;\n\n  const validPaginationParams = validatePaginationArgs({\n    inputArgs,\n    paginationLimit: TRANSACTIONS_PAGE_SIZE_LIMIT,\n  });\n\n  const { transactionsByOwner } = await provider.operations.getTransactionsByOwner({\n    ...validPaginationParams,\n    owner,\n  });\n\n  const { edges, pageInfo } = transactionsByOwner;\n\n  const {\n    consensusParameters: {\n      feeParameters: { gasPerByte, gasPriceFactor },\n      txParameters: { maxInputs, maxGasPerTx },\n      gasCosts,\n    },\n  } = await provider.getChain();\n\n  const gasPrice = await provider.getLatestGasPrice();\n  const baseAssetId = await provider.getBaseAssetId();\n\n  const transactions = edges.map((edge) => {\n    const { node: gqlTransaction } = edge;\n\n    const { id, rawPayload, status } = gqlTransaction;\n\n    const [decodedTransaction] = new TransactionCoder().decode(arrayify(rawPayload), 0);\n\n    let txReceipts: GqlReceiptFragment[] = [];\n\n    if (gqlTransaction?.status && 'receipts' in gqlTransaction.status) {\n      txReceipts = gqlTransaction.status.receipts;\n    }\n\n    const receipts = txReceipts.map(processGqlReceipt);\n\n    const transactionSummary = assembleTransactionSummary({\n      id,\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: arrayify(rawPayload),\n      gqlTransactionStatus: status,\n      abiMap,\n      gasPerByte,\n      gasPriceFactor,\n      maxInputs,\n      gasCosts,\n      maxGasPerTx,\n      gasPrice,\n      baseAssetId,\n    });\n\n    const output: TransactionResult = {\n      ...transactionSummary,\n    };\n\n    return output;\n  });\n\n  return {\n    transactions,\n    pageInfo,\n  };\n}\n","export const CHAIN_IDS = {\n  eth: {\n    mainnet: 1,\n    sepolia: 11155111,\n    foundry: 31337,\n  },\n  fuel: {\n    devnet: 0,\n    testnet: 0,\n    mainnet: 9889,\n  },\n};\n","const DELIMITER_PATH = '/';\nconst trimRegex = /^\\/|\\/$/g;\nconst trimPath = (path = '') => path.replace(trimRegex, '');\n\nexport function urlJoin(baseUrl: string | undefined, ...paths: Array<string>): string {\n  const hasBaseUrl = baseUrl !== null && baseUrl !== undefined;\n  const rootPath = baseUrl?.[0] === '/' && baseUrl.length > 1;\n  const allPaths = [baseUrl, ...paths].filter(Boolean).map(trimPath);\n  if (rootPath && hasBaseUrl) {\n    allPaths.unshift('');\n  }\n  return allPaths.join(DELIMITER_PATH);\n}\n","import type { Assets } from '../types';\n\nimport { urlJoin } from './url';\n\n/**\n * Returns the list of assets with the icon paths 'resolved'. eg. `./eth.svg` -> `https://some-url.com/eth.svg`\n * @param assets - List of assets\n * @param basePath - Base path for the icon URLs (default: './')\n * @returns The assets with the icon paths resolved\n */\nexport function resolveIconPaths(assets: Assets, basePath: string = './') {\n  return assets.map((asset) => ({\n    ...asset,\n    icon: urlJoin(basePath, asset.icon),\n  }));\n}\n","export const fuelAssetsBaseUrl = 'https://cdn.fuel.network/assets/'\n","import { CHAIN_IDS } from '../chains';\n\nimport type { Assets } from './types';\nimport { resolveIconPaths, fuelAssetsBaseUrl } from './utils';\n\nexport const rawAssets: Assets = [\n  {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    icon: 'eth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.sepolia,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.foundry,\n        decimals: 18,\n      },\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.devnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.testnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07'\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        decimals: 9,\n        assetId: '0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07',\n      }\n    ],\n  },\n  {\n    name: 'WETH',\n    symbol: 'WETH',\n    icon: 'weth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xa38a5a8beeb08d95744bc7f58528073f4052b254def59eba20c99c202b5acaa3',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'weETH',\n    symbol: 'weETH',\n    icon: 'weETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x239ed6e12b7ce4089ee245244e3bf906999a6429c2a9a445a1e1faf56914a4ab',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsETH',\n    symbol: 'rsETH',\n    icon: 'rsETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xA1290d69c65A6Fe4DF752f95823fae25cB99e5A7',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xbae80f7fb8aa6b90d9b01ef726ec847cc4f59419c4d5f2ea88fec785d1b0e849',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rETH',\n    symbol: 'rETH',\n    icon: 'reth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xae78736cd615f374d3085123a210448e74fc6393',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xf3f9a0ed0ce8eac5f89d6b83e41b3848212d5b5f56108c54a205bb228ca30c16',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wbETH',\n    symbol: 'wbETH',\n    icon: 'wbeth.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa2E3356610840701BDf5611a53974510Ae27E2e1',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x7843c74bef935e837f2bcf67b5d64ecb46dd53ff86375530b0caf3699e8ffafe',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rstETH',\n    symbol: 'rstETH',\n    icon: 'rstETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a4EffD87C2f3C55CA251080b1343b605f327E3a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x962792286fbc9b1d5860b4551362a12249362c21594c77abf4b3fe2bbe8d977a',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'amphrETH',\n    symbol: 'amphrETH',\n    icon: 'amphrETH.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x5fD13359Ba15A84B76f7F87568309040176167cd',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x05fc623e57bd7bc1258efa8e4f62b05af5471d73df6f2c2dc11ecc81134c4f36',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mBTC',\n    symbol: 'Manta mBTC',\n    icon: 'manta-mbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4041381e947CFD3D483d67a25C6aa9Dc924250c5',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xaf3111a248ff7a3238cdeea845bb2d43cf3835f1f6b8c9d28360728b55b9ce5b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mETH',\n    symbol: 'Manta mETH',\n    icon: 'manta-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8CdF550C04Bc9B9F10938368349C9c8051A772b6',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xafd219f513317b1750783c6581f55530d6cf189a5863fd18bd1b3ffcec1714b4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Manta mUSD',\n    symbol: 'Manta mUSD',\n    icon: 'manta-musd.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x3f24E1d7a973867fC2A03fE199E5502514E0e11E',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x89cb9401e55d49c3269654dd1cdfb0e80e57823a4a7db98ba8fc5953b120fef4',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pumpBTC',\n    symbol: 'pumpBTC',\n    icon: 'pumpbtc.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xf469fbd2abcd6b9de8e169d128226c0fc90a012e',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x0aa5eb2bb97ca915288b653a2529355d4dc66de2b37533213f0e4aeee3d3421f',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'FBTC',\n    symbol: 'FBTC',\n    icon: 'fbtc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xc96de26018a54d51c097160568752c4e3bd6c364',\n        decimals: 8,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xb5ecb0a1e08e2abbabf624ffea089df933376855f468ade35c6375b00c33996a',\n        decimals: 8,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC',\n    symbol: 'SolvBTC',\n    icon: 'solvBTC.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7a56e1c57c7475ccf742a1832b028f0456652f97',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x1186afea9affb88809c210e13e2330b5258c2cef04bb8fff5eff372b7bd3f40f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'SolvBTC.BBN',\n    symbol: 'SolvBTC.BBN',\n    icon: 'SolvBTC.BBN.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd9d920aa40f578ab794426f5c90f6c731d159def',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x7a4f087c957d30218223c2baaaa365355c9ca81b6ea49004cfb1590a5399216f',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Mantle mETH',\n    symbol: 'Mantle mETH',\n    icon: 'mantle-meth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xd5F7838F5C461fefF7FE49ea5ebaF7728bB0ADfa',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x642a5db59ec323c2f846d4d4cf3e58d78aff64accf4f8f6455ba0aa3ef000a3b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sDAI',\n    symbol: 'sDAI',\n    icon: 'sdai.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x83f20f44975d03b1b09e64809b757c47f942beea',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x9e46f919fbf978f3cad7cd34cca982d5613af63ff8aab6c379e4faa179552958',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'USDT',\n    symbol: 'USDT',\n    icon: 'usdt.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xa0265fb5c32f6e8db3197af3c7eb05c48ae373605b8165b6f4a51c5b0ba4812e',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDC',\n    symbol: 'USDC',\n    icon: 'usdc.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',\n        decimals: 6,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x286c479da40dc953bddc3bb4c453b608bba2e0ac483b077bd475174115395e6b',\n        decimals: 6,\n      },\n    ],\n  },\n  {\n    name: 'USDe',\n    symbol: 'USDe',\n    icon: 'USDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x4c9edd5852cd905f086c759e8383e09bff1e68b3',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xb6133b2ef9f6153eb869125d23dcf20d1e735331b5e41b15a6a7a6cec70e8651',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'sUSDe',\n    symbol: 'sUSDe',\n    icon: 'sUSDe.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x9d39a5de30e57443bff2a8307a4256c8797a3497',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xd05563025104fc36496c15c7021ad6b31034b0e89a356f4f818045d1f48808bc',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'rsUSDe',\n    symbol: 'rsUSDe',\n    icon: 'rsUSDe.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x82f5104b23FF2FA54C2345F821dAc9369e9E0B26',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x78d4522ec607f6e8efb66ea49439d1ee48623cf763f9688a8eada025def033d9',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'wstETH',\n    symbol: 'wstETH',\n    icon: 'wsteth.svg',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x1a7815cc9f75db5c24a5b0814bfb706bb9fe485333e98254015de8f48f84c67b',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'ezETH',\n    symbol: 'ezETH',\n    icon: 'ezeth.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xbf5495Efe5DB9ce00f80364C8B423567e58d2110',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x91b3559edb2619cde8ffb2aa7b3c3be97efd794ea46700db7092abeee62281b0',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'pzETH',\n    symbol: 'pzETH',\n    icon: 'pzETH.webp',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x8c9532a60e0e7c6bbd2b2c1303f63ace1c3e9811',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x1493d4ec82124de8f9b625682de69dcccda79e882b89a55a8c737b12de67bd68',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'Re7LRT',\n    symbol: 'Re7LRT',\n    icon: 'Re7LRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0x84631c0d0081FDe56DeB72F6DE77abBbF6A9f93a',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0xf2fc648c23a5db24610a1cf696acc4f0f6d9a7d6028dd9944964ab23f6e35995',\n        decimals: 9,\n      },\n    ],\n  },\n  {\n    name: 'steakLRT',\n    symbol: 'steakLRT',\n    icon: 'steakLRT.png',\n    networks: [\n      {\n        type: 'ethereum',\n        chainId: CHAIN_IDS.eth.mainnet,\n        address: '0xBEEF69Ac7870777598A04B2bd4771c71212E6aBc',\n        decimals: 18,\n      },\n      {\n        type: 'fuel',\n        chainId: CHAIN_IDS.fuel.mainnet,\n        contractId:\n          '0x4ea6ccef1215d9479f1024dff70fc055ca538215d2c8c348beddffd54583d0e8',\n        assetId:\n          '0x4fc8ac9f101df07e2c2dec4a53c8c42c439bdbe5e36ea2d863a61ff60afafc30',\n        decimals: 9,\n      },\n    ],\n  },\n];\n\nexport const assets = resolveIconPaths(rawAssets, fuelAssetsBaseUrl);","import { randomBytes } from '@fuel-ts/crypto';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport class TestAssetId {\n  public static A = new TestAssetId(\n    '0x0101010101010101010101010101010101010101010101010101010101010101'\n  );\n\n  public static B = new TestAssetId(\n    '0x0202020202020202020202020202020202020202020202020202020202020202'\n  );\n\n  private constructor(public value: string) {}\n\n  public static random(count: number = 1) {\n    const assetIds = [];\n    for (let i = 0; i < count; i++) {\n      assetIds.push(new TestAssetId(hexlify(randomBytes(32))));\n    }\n    return assetIds;\n  }\n}\n","import { randomBytes } from '@fuel-ts/crypto';\nimport { FuelError } from '@fuel-ts/errors';\nimport { defaultSnapshotConfigs, hexlify, type SnapshotConfigs } from '@fuel-ts/utils';\nimport type { PartialDeep } from 'type-fest';\n\nimport { WalletUnlocked } from '../wallet';\n\nimport { TestAssetId } from './test-asset-id';\nimport type { TestMessage } from './test-message';\n\nexport interface WalletsConfigOptions {\n  /**\n   * Number of wallets to generate.\n   */\n  count: number;\n\n  /**\n   * If `number`, the number of unique asset ids each wallet will own with the base asset included.\n   *\n   * If `TestAssetId[]`, the asset ids the each wallet will own besides the base asset.\n   */\n  assets: number | TestAssetId[];\n\n  /**\n   * Number of coins (UTXOs) per asset id.\n   */\n  coinsPerAsset: number;\n\n  /**\n   * For each coin, the amount it'll contain.\n   */\n  amountPerCoin: number;\n\n  /**\n   * Messages that are supposed to be on the wallet.\n   * The `recipient` field of the message is overriden to be the wallet's address.\n   */\n  messages: TestMessage[];\n}\n\n/**\n * Used for configuring the wallets that should exist in the genesis block of a test node.\n */\nexport class WalletsConfig {\n  private initialState: SnapshotConfigs['stateConfig'];\n  private options: WalletsConfigOptions;\n  public wallets: WalletUnlocked[];\n\n  private generateWallets: () => WalletUnlocked[] = () => {\n    const generatedWallets: WalletUnlocked[] = [];\n    for (let index = 1; index <= this.options.count; index++) {\n      generatedWallets.push(new WalletUnlocked(randomBytes(32)));\n    }\n    return generatedWallets;\n  };\n\n  constructor(baseAssetId: string, config: WalletsConfigOptions) {\n    WalletsConfig.validate(config);\n\n    this.options = config;\n\n    const { assets, coinsPerAsset, amountPerCoin, messages } = this.options;\n\n    this.wallets = this.generateWallets();\n\n    this.initialState = {\n      messages: WalletsConfig.createMessages(this.wallets, messages),\n      coins: WalletsConfig.createCoins(\n        this.wallets,\n        baseAssetId,\n        assets,\n        coinsPerAsset,\n        amountPerCoin\n      ),\n    };\n  }\n\n  apply(snapshotConfig: PartialDeep<SnapshotConfigs> | undefined): PartialDeep<SnapshotConfigs> & {\n    stateConfig: { coins: SnapshotConfigs['stateConfig']['coins'] };\n  } {\n    return {\n      ...snapshotConfig,\n      stateConfig: {\n        ...(snapshotConfig?.stateConfig ?? defaultSnapshotConfigs.stateConfig),\n        coins: this.initialState.coins.concat(snapshotConfig?.stateConfig?.coins || []),\n        messages: this.initialState.messages.concat(snapshotConfig?.stateConfig?.messages ?? []),\n      },\n    };\n  }\n\n  /**\n   * Create messages for the wallets in the format that the chain expects.\n   */\n  private static createMessages(wallets: WalletUnlocked[], messages: TestMessage[]) {\n    return messages\n      .map((msg) => wallets.map((wallet) => msg.toChainMessage(wallet.address)))\n      .flatMap((x) => x);\n  }\n\n  /**\n   * Create coins for the wallets in the format that the chain expects.\n   */\n  private static createCoins(\n    wallets: WalletUnlocked[],\n    baseAssetId: string,\n    assets: number | TestAssetId[],\n    coinsPerAsset: number,\n    amountPerCoin: number\n  ) {\n    const coins: SnapshotConfigs['stateConfig']['coins'] = [];\n\n    let assetIds: string[] = [baseAssetId];\n    if (Array.isArray(assets)) {\n      assetIds = assetIds.concat(assets.map((a) => a.value));\n    } else {\n      assetIds = assetIds.concat(TestAssetId.random(assets - 1).map((a) => a.value));\n    }\n\n    wallets\n      .map((wallet) => wallet.address.toHexString())\n      .forEach((walletAddress) => {\n        assetIds.forEach((assetId) => {\n          for (let index = 0; index < coinsPerAsset; index++) {\n            coins.push({\n              amount: amountPerCoin,\n              asset_id: assetId,\n              owner: walletAddress,\n              tx_pointer_block_height: 0,\n              tx_pointer_tx_idx: 0,\n              output_index: 0,\n              tx_id: hexlify(randomBytes(32)),\n            });\n          }\n        });\n      });\n\n    return coins;\n  }\n\n  private static validate({\n    count: wallets,\n    assets,\n    coinsPerAsset,\n    amountPerCoin,\n  }: WalletsConfigOptions) {\n    if (\n      (Array.isArray(wallets) && wallets.length === 0) ||\n      (typeof wallets === 'number' && wallets <= 0)\n    ) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_INPUT_PARAMETERS,\n        'Number of wallets must be greater than zero.'\n      );\n    }\n    if (\n      (Array.isArray(assets) && assets.length === 0) ||\n      (typeof assets === 'number' && assets <= 0)\n    ) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_INPUT_PARAMETERS,\n        'Number of assets per wallet must be greater than zero.'\n      );\n    }\n    if (coinsPerAsset <= 0) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_INPUT_PARAMETERS,\n        'Number of coins per asset must be greater than zero.'\n      );\n    }\n    if (amountPerCoin < 0) {\n      throw new FuelError(\n        FuelError.CODES.INVALID_INPUT_PARAMETERS,\n        'Amount per coin must be greater than or equal to zero.'\n      );\n    }\n  }\n}\n","import { hashMessage } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { transactionRequestify, validateTransactionForAssetBurn } from '../providers';\nimport type {\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n  ProviderSendTxParams,\n  EstimateTransactionParams,\n  TransactionRequest,\n  TransactionResponse,\n} from '../providers';\nimport { Signer } from '../signer';\n\nimport { encryptKeystoreWallet } from './keystore-wallet';\n\n/**\n * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.\n */\nexport class BaseWalletUnlocked extends Account {\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer: () => Signer;\n\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   */\n  constructor(privateKey: BytesLike, provider?: Provider) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n  }\n\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signMessage(message: string): Promise<string> {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return hexlify(signedMessage);\n  }\n\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  override async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = await this.provider.getChainId();\n    const hashedTransaction = transactionRequest.getTransactionId(chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n    return hexlify(signature);\n  }\n\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature<T extends TransactionRequest>(\n    transactionRequestLike: TransactionRequestLike\n  ) {\n    const transactionRequest = transactionRequestify(transactionRequestLike) as T;\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @param estimateTxDependencies - Whether to estimate the transaction dependencies.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  override async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = false, enableAssetBurn }: ProviderSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    validateTransactionForAssetBurn(\n      await this.provider.getBaseAssetId(),\n      transactionRequest,\n      enableAssetBurn\n    );\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      { estimateTxDependencies: false, enableAssetBurn }\n    );\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.dryRun`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  override async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.dryRun(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n        estimateTxDependencies: false,\n      }\n    );\n  }\n\n  /**\n   * Encrypts an unlocked wallet with a password.\n   *\n   * @param password - the password to encrypt the wallet with.\n   * @returns - the encrypted wallet.\n   */\n  async encrypt(password: string): Promise<string> {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n}\n","import { UTXO_ID_LEN } from '@fuel-ts/abi-coder';\nimport type { WithAddress } from '@fuel-ts/address';\nimport { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport { InputType } from '@fuel-ts/transactions';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, isDefined } from '@fuel-ts/utils';\nimport { clone } from 'ramda';\n\nimport type { FuelConnector, FuelConnectorSendTxParams } from './connectors';\nimport type {\n  TransactionRequest,\n  CoinQuantityLike,\n  CoinQuantity,\n  Resource,\n  ExcludeResourcesOption,\n  Provider,\n  ScriptTransactionRequestLike,\n  TransactionCost,\n  EstimateTransactionParams,\n  CursorPaginationArgs,\n  TransactionRequestLike,\n  CallResult,\n  GetCoinsResponse,\n  GetMessagesResponse,\n  GetBalancesResponse,\n  Coin,\n  TransactionCostParams,\n  TransactionResponse,\n  ProviderSendTxParams,\n} from './providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  transactionRequestify,\n  addAmountToCoinQuantities,\n} from './providers';\nimport {\n  cacheRequestInputsResourcesFromOwner,\n  getAssetAmountInRequestInputs,\n  isRequestInputCoin,\n  isRequestInputMessageWithoutData,\n  isRequestInputResource,\n} from './providers/transaction-request/helpers';\nimport { mergeQuantities } from './providers/utils/merge-quantities';\nimport { AbstractAccount } from './types';\nimport { assembleTransferToContractScript } from './utils/formatTransferToContractScriptData';\n\nexport type TxParamsType = Pick<\n  ScriptTransactionRequestLike,\n  'gasLimit' | 'tip' | 'maturity' | 'maxFee' | 'witnessLimit'\n>;\n\nexport type TransferParams = {\n  destination: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type ContractTransferParams = {\n  contractId: string | Address;\n  amount: BigNumberish;\n  assetId: BytesLike;\n};\n\nexport type AccountSendTxParams = ProviderSendTxParams & FuelConnectorSendTxParams;\n\nexport type EstimatedTxParams = Pick<\n  TransactionCost,\n  'estimatedPredicates' | 'addedSignatures' | 'requiredQuantities' | 'updateMaxFee' | 'gasPrice'\n>;\nconst MAX_FUNDING_ATTEMPTS = 5;\n\nexport type FakeResources = Partial<Coin> & Required<Pick<Coin, 'amount' | 'assetId'>>;\n\n/**\n * `Account` provides an abstraction for interacting with accounts or wallets on the network.\n */\nexport class Account extends AbstractAccount implements WithAddress {\n  /**\n   * The address associated with the account.\n   */\n  readonly address: Address;\n\n  /**\n   * The provider used to interact with the network.\n   */\n  protected _provider?: Provider;\n\n  /**\n   * The connector for use with external wallets\n   */\n  protected _connector?: FuelConnector;\n\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - A Provider instance  (optional).\n   * @param connector - A FuelConnector instance (optional).\n   */\n  constructor(address: string | Address, provider?: Provider, connector?: FuelConnector) {\n    super();\n    this._provider = provider;\n    this._connector = connector;\n    this.address = Address.fromDynamicInput(address);\n  }\n\n  /**\n   * The provider used to interact with the network.\n   *\n   * @returns A Provider instance.\n   *\n   * @throws `FuelError` if the provider is not set.\n   */\n  get provider(): Provider {\n    if (!this._provider) {\n      throw new FuelError(ErrorCode.MISSING_PROVIDER, 'Provider not set');\n    }\n\n    return this._provider;\n  }\n\n  /**\n   * Sets the provider for the account.\n   *\n   * @param provider - A Provider instance.\n   */\n  set provider(provider: Provider) {\n    this._provider = provider;\n  }\n\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - A Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider: Provider): Provider {\n    this._provider = provider;\n    return this.provider;\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - Quantities of resources to be obtained.\n   * @param excludedIds - IDs of resources to be excluded from the query (optional).\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[],\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve (optional).\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(\n    assetId?: BytesLike,\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<GetCoinsResponse> {\n    return this.provider.getCoins(this.address, assetId, paginationArgs);\n  }\n\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(paginationArgs?: CursorPaginationArgs): Promise<GetMessagesResponse> {\n    return this.provider.getMessages(this.address, paginationArgs);\n  }\n\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for (optional).\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId?: BytesLike): Promise<BN> {\n    const assetIdToFetch = assetId ?? (await this.provider.getBaseAssetId());\n    const amount = await this.provider.getBalance(this.address, assetIdToFetch);\n    return amount;\n  }\n\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances(): Promise<GetBalancesResponse> {\n    return this.provider.getBalances(this.address);\n  }\n\n  /**\n   * Funds a transaction request by adding the necessary resources.\n   *\n   * @typeParam T - The type of the TransactionRequest.\n   * @param request - The transaction request to fund.\n   * @param params - The estimated transaction parameters.\n   * @returns A promise that resolves to the funded transaction request.\n   */\n  async fund<T extends TransactionRequest>(request: T, params: EstimatedTxParams): Promise<T> {\n    const { addedSignatures, estimatedPredicates, requiredQuantities, updateMaxFee, gasPrice } =\n      params;\n\n    const fee = request.maxFee;\n    const baseAssetId = await this.provider.getBaseAssetId();\n    const requiredInBaseAsset =\n      requiredQuantities.find((quantity) => quantity.assetId === baseAssetId)?.amount || bn(0);\n\n    const requiredQuantitiesWithFee = addAmountToCoinQuantities({\n      amount: bn(fee),\n      assetId: baseAssetId,\n      coinQuantities: requiredQuantities,\n    });\n\n    const quantitiesDict: Record<string, { required: BN; owned: BN }> = {};\n\n    requiredQuantitiesWithFee.forEach(({ amount, assetId }) => {\n      quantitiesDict[assetId] = {\n        required: amount,\n        owned: bn(0),\n      };\n    });\n\n    request.inputs.filter(isRequestInputResource).forEach((input) => {\n      const isCoin = isRequestInputCoin(input);\n      const assetId = isCoin ? String(input.assetId) : baseAssetId;\n      if (quantitiesDict[assetId]) {\n        quantitiesDict[assetId].owned = quantitiesDict[assetId].owned.add(input.amount);\n      }\n    });\n\n    let missingQuantities: CoinQuantity[] = [];\n    Object.entries(quantitiesDict).forEach(([assetId, { owned, required }]) => {\n      if (owned.lt(required)) {\n        missingQuantities.push({\n          assetId,\n          amount: required.sub(owned),\n        });\n      }\n    });\n\n    let needsToBeFunded = missingQuantities.length > 0;\n    let fundingAttempts = 0;\n    while (needsToBeFunded && fundingAttempts < MAX_FUNDING_ATTEMPTS) {\n      const resources = await this.getResourcesToSpend(\n        missingQuantities,\n        cacheRequestInputsResourcesFromOwner(request.inputs, this.address)\n      );\n\n      request.addResources(resources);\n      request.updatePredicateGasUsed(estimatedPredicates);\n\n      const requestToReestimate = clone(request);\n      if (addedSignatures) {\n        Array.from({ length: addedSignatures }).forEach(() =>\n          requestToReestimate.addEmptyWitness()\n        );\n      }\n\n      if (!updateMaxFee) {\n        needsToBeFunded = false;\n        break;\n      }\n\n      // Recalculate the fee after adding the resources\n      const { maxFee: newFee } = await this.provider.estimateTxGasAndFee({\n        transactionRequest: requestToReestimate,\n        gasPrice,\n      });\n\n      const totalBaseAssetOnInputs = getAssetAmountInRequestInputs(\n        request.inputs.filter(isRequestInputResource),\n        baseAssetId,\n        baseAssetId\n      );\n\n      // Update the new total as the fee will change after adding new resources\n      const totalBaseAssetRequiredWithFee = requiredInBaseAsset.add(newFee);\n\n      if (totalBaseAssetOnInputs.gt(totalBaseAssetRequiredWithFee)) {\n        needsToBeFunded = false;\n      } else {\n        missingQuantities = [\n          {\n            amount: totalBaseAssetRequiredWithFee.sub(totalBaseAssetOnInputs),\n            assetId: baseAssetId,\n          },\n        ];\n      }\n\n      fundingAttempts += 1;\n    }\n\n    // If the transaction still needs to be funded after the maximum number of attempts\n    if (needsToBeFunded) {\n      throw new FuelError(\n        ErrorCode.NOT_ENOUGH_FUNDS,\n        `The account ${this.address} does not have enough base asset funds to cover the transaction execution.`\n      );\n    }\n\n    await this.provider.validateTransaction(request);\n\n    request.updatePredicateGasUsed(estimatedPredicates);\n\n    const requestToReestimate = clone(request);\n    if (addedSignatures) {\n      Array.from({ length: addedSignatures }).forEach(() => requestToReestimate.addEmptyWitness());\n    }\n\n    if (!updateMaxFee) {\n      return request;\n    }\n\n    const { maxFee } = await this.provider.estimateTxGasAndFee({\n      transactionRequest: requestToReestimate,\n      gasPrice,\n    });\n\n    request.maxFee = maxFee;\n\n    return request;\n  }\n\n  /**\n   * A helper that creates a transfer transaction request and returns it.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the prepared transaction request.\n   */\n  async createTransfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<ScriptTransactionRequest> {\n    let request = new ScriptTransactionRequest(txParams);\n\n    request = this.addTransfer(request, {\n      destination,\n      amount,\n      assetId: assetId || (await this.provider.getBaseAssetId()),\n    });\n\n    request = await this.estimateAndFundTransaction(request, txParams);\n\n    return request;\n  }\n\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(\n    destination: string | Address,\n    amount: BigNumberish,\n    assetId?: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const request = await this.createTransfer(destination, amount, assetId, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Transfers multiple amounts of a token to multiple recipients.\n   *\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @param txParams - Optional transaction parameters.\n   * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.\n   */\n  async batchTransfer(\n    transferParams: TransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest(txParams);\n    request = this.addBatchTransfer(request, transferParams);\n    request = await this.estimateAndFundTransaction(request, txParams);\n    return this.sendTransaction(request, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Adds a transfer to the given transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - The object representing the transfer to be made.\n   * @returns The updated transaction request with the added transfer.\n   */\n  addTransfer(request: ScriptTransactionRequest, transferParams: TransferParams) {\n    const { destination, amount, assetId } = transferParams;\n    this.validateTransferAmount(amount);\n    request.addCoinOutput(Address.fromAddressOrString(destination), amount, assetId);\n    return request;\n  }\n\n  /**\n   * Adds multiple transfers to a script transaction request.\n   *\n   * @param request - The script transaction request to add transfers to.\n   * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.\n   * @returns The updated script transaction request.\n   */\n  addBatchTransfer(request: ScriptTransactionRequest, transferParams: TransferParams[]) {\n    transferParams.forEach(({ destination, amount, assetId }) => {\n      this.addTransfer(request, {\n        destination,\n        amount,\n        assetId,\n      });\n    });\n    return request;\n  }\n\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer (optional).\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(\n    contractId: string | Address,\n    amount: BigNumberish,\n    assetId: BytesLike,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    return this.batchTransferToContracts([{ amount, assetId, contractId }], txParams);\n  }\n\n  async batchTransferToContracts(\n    contractTransferParams: ContractTransferParams[],\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    let request = new ScriptTransactionRequest({\n      ...txParams,\n    });\n\n    const quantities: CoinQuantity[] = [];\n\n    const defaultAssetId = await this.provider.getBaseAssetId();\n\n    const transferParams = contractTransferParams.map((transferParam) => {\n      const amount = bn(transferParam.amount);\n      const contractAddress = Address.fromAddressOrString(transferParam.contractId);\n\n      const assetId = transferParam.assetId ? hexlify(transferParam.assetId) : defaultAssetId;\n\n      if (amount.lte(0)) {\n        throw new FuelError(\n          ErrorCode.INVALID_TRANSFER_AMOUNT,\n          'Transfer amount must be a positive number.'\n        );\n      }\n\n      request.addContractInputAndOutput(contractAddress);\n      quantities.push({ amount, assetId });\n\n      return {\n        amount,\n        contractId: contractAddress.toB256(),\n        assetId,\n      };\n    });\n\n    const { script, scriptData } = await assembleTransferToContractScript(transferParams);\n\n    request.script = script;\n    request.scriptData = scriptData;\n\n    request = await this.estimateAndFundTransaction(request, txParams, { quantities });\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(\n    recipient: string | Address,\n    amount: BigNumberish,\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const recipientAddress = Address.fromAddressOrString(recipient);\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipientAddress.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    const params: ScriptTransactionRequestLike = { script, ...txParams };\n\n    const baseAssetId = await this.provider.getBaseAssetId();\n    let request = new ScriptTransactionRequest(params);\n    const quantities = [{ amount: bn(amount), assetId: baseAssetId }];\n\n    const txCost = await this.getTransactionCost(request, { quantities });\n\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n\n    await this.fund(request, txCost);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the transaction.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param transactionCostParams - The transaction cost parameters (optional).\n   *\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    { signatureCallback, quantities = [] }: TransactionCostParams = {}\n  ): Promise<TransactionCost> {\n    const txRequestClone = clone(transactionRequestify(transactionRequestLike));\n    const baseAssetId = await this.provider.getBaseAssetId();\n\n    // Fund with fake UTXOs to avoid not enough funds error\n    // Getting coin quantities from amounts being transferred\n    const coinOutputsQuantities = txRequestClone.getCoinOutputsQuantities();\n    // Combining coin quantities from amounts being transferred and forwarding to contracts\n    const requiredQuantities = mergeQuantities(coinOutputsQuantities, quantities);\n    // An arbitrary amount of the base asset is added to cover the transaction fee during dry runs\n    const transactionFeeForDryRun = [{ assetId: baseAssetId, amount: bn('100000000000000000') }];\n\n    const findAssetInput = (assetId: string) =>\n      txRequestClone.inputs.find((input) => {\n        if (input.type === InputType.Coin) {\n          return input.assetId === assetId;\n        }\n\n        // We only consider the message input if it has no data.\n        // Messages with `data` cannot fund the gas of a transaction.\n        if (isRequestInputMessageWithoutData(input)) {\n          return baseAssetId === assetId;\n        }\n        return false;\n      });\n\n    const updateAssetInput = (assetId: string, quantity: BN) => {\n      const assetInput = findAssetInput(assetId);\n      const usedQuantity = quantity;\n\n      if (assetInput && 'amount' in assetInput) {\n        assetInput.amount = usedQuantity;\n      } else {\n        txRequestClone.addResources(\n          this.generateFakeResources([\n            {\n              amount: quantity,\n              assetId,\n            },\n          ])\n        );\n      }\n    };\n\n    mergeQuantities(requiredQuantities, transactionFeeForDryRun).forEach(({ amount, assetId }) =>\n      updateAssetInput(assetId, amount)\n    );\n\n    const txCost = await this.provider.getTransactionCost(txRequestClone, {\n      signatureCallback,\n    });\n\n    return {\n      ...txCost,\n      requiredQuantities,\n    };\n  }\n\n  /**\n   * Sign a message from the account via the connector.\n   *\n   * @param message - the message to sign.\n   * @returns a promise that resolves to the signature.\n   *\n   * @hidden\n   */\n  async signMessage(message: string): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(ErrorCode.MISSING_CONNECTOR, 'A connector is required to sign messages.');\n    }\n    return this._connector.signMessage(this.address.toString(), message);\n  }\n\n  /**\n   * Signs a transaction from the account via the connector..\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature of the transaction.\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    if (!this._connector) {\n      throw new FuelError(\n        ErrorCode.MISSING_CONNECTOR,\n        'A connector is required to sign transactions.'\n      );\n    }\n    return this._connector.signTransaction(this.address.toString(), transactionRequestLike);\n  }\n\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @param sendTransactionParams - The provider send transaction parameters (optional).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true, onBeforeSend, skipCustomFee = false }: AccountSendTxParams = {}\n  ): Promise<TransactionResponse> {\n    if (this._connector) {\n      return this.provider.getTransactionResponse(\n        await this._connector.sendTransaction(this.address.toString(), transactionRequestLike, {\n          onBeforeSend,\n          skipCustomFee,\n        })\n      );\n    }\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.sendTransaction(transactionRequest, {\n      estimateTxDependencies: false,\n    });\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @param estimateTxParams - The estimate transaction params (optional).\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(\n    transactionRequestLike: TransactionRequestLike,\n    { estimateTxDependencies = true }: EstimateTransactionParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    if (estimateTxDependencies) {\n      await this.provider.estimateTxDependencies(transactionRequest);\n    }\n    return this.provider.simulate(transactionRequest, { estimateTxDependencies: false });\n  }\n\n  /**\n   * Generates an array of fake resources based on the provided coins.\n   *\n   * @param coins - An array of `FakeResources` objects representing the coins.\n   * @returns An array of `Resource` objects with generated properties.\n   */\n  generateFakeResources(coins: FakeResources[]): Array<Resource> {\n    return coins.map((coin) => ({\n      id: hexlify(randomBytes(UTXO_ID_LEN)),\n      owner: this.address,\n      blockCreated: bn(1),\n      txCreatedIdx: bn(1),\n      ...coin,\n    }));\n  }\n\n  /** @hidden * */\n  private validateTransferAmount(amount: BigNumberish) {\n    if (bn(amount).lte(0)) {\n      throw new FuelError(\n        ErrorCode.INVALID_TRANSFER_AMOUNT,\n        'Transfer amount must be a positive number.'\n      );\n    }\n  }\n\n  /** @hidden * */\n  private async estimateAndFundTransaction(\n    transactionRequest: ScriptTransactionRequest,\n    txParams: TxParamsType,\n    costParams?: TransactionCostParams\n  ) {\n    let request = transactionRequest;\n    const txCost = await this.getTransactionCost(request, costParams);\n    request = this.validateGasLimitAndMaxFee({\n      transactionRequest: request,\n      gasUsed: txCost.gasUsed,\n      maxFee: txCost.maxFee,\n      txParams,\n    });\n    request = await this.fund(request, txCost);\n    return request;\n  }\n\n  /** @hidden * */\n  private validateGasLimitAndMaxFee({\n    gasUsed,\n    maxFee,\n    transactionRequest,\n    txParams: { gasLimit: setGasLimit, maxFee: setMaxFee },\n  }: {\n    gasUsed: BN;\n    maxFee: BN;\n    transactionRequest: ScriptTransactionRequest;\n    txParams: Pick<TxParamsType, 'gasLimit' | 'maxFee'>;\n  }) {\n    const request = transactionRequestify(transactionRequest) as ScriptTransactionRequest;\n\n    if (!isDefined(setGasLimit)) {\n      request.gasLimit = gasUsed;\n    } else if (gasUsed.gt(setGasLimit)) {\n      throw new FuelError(\n        ErrorCode.GAS_LIMIT_TOO_LOW,\n        `Gas limit '${setGasLimit}' is lower than the required: '${gasUsed}'.`\n      );\n    }\n\n    if (!isDefined(setMaxFee)) {\n      request.maxFee = maxFee;\n    } else if (maxFee.gt(setMaxFee)) {\n      throw new FuelError(\n        ErrorCode.MAX_FEE_TOO_LOW,\n        `Max fee '${setMaxFee}' is lower than the required: '${maxFee}'.`\n      );\n    }\n\n    return request;\n  }\n}\n","import type { BN } from '@fuel-ts/math';\n\nimport type { CoinQuantity } from '../coin-quantity';\n\nexport const mergeQuantities = (...coinQuantities: CoinQuantity[][]): CoinQuantity[] => {\n  const resultMap: { [key: string]: BN } = {};\n\n  function addToMap({ amount, assetId }: CoinQuantity) {\n    if (resultMap[assetId]) {\n      resultMap[assetId] = resultMap[assetId].add(amount);\n    } else {\n      resultMap[assetId] = amount;\n    }\n  }\n\n  coinQuantities.forEach((arr) => arr.forEach(addToMap));\n\n  // Convert the resultMap back to an array\n  return Object.entries(resultMap).map(([assetId, amount]) => ({ assetId, amount }));\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Address } from '@fuel-ts/address';\n\nexport abstract class AbstractAccount {\n  abstract address: Address;\n  abstract provider: unknown;\n  abstract getResourcesToSpend(quantities: any[], options?: any): any;\n  abstract sendTransaction(transactionRequest: any, options?: any): any;\n  abstract simulateTransaction(transactionRequest: any, options?: any): any;\n  abstract getTransactionCost(transactionRequest: any, options?: any): Promise<any>;\n  abstract fund(transactionRequest: any, txCost: any): Promise<any>;\n}\n","import { ASSET_ID_LEN, BigNumberCoder, CONTRACT_ID_LEN, WORD_SIZE } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport type { BN } from '@fuel-ts/math';\nimport { arrayify, concat } from '@fuel-ts/utils';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport * as asm from '@fuels/vm-asm';\n\ninterface AssembleTransferToContractParams {\n  contractId: string;\n  assetId: BytesLike;\n  amount: BN;\n}\n\nexport const formatTransferToContractScriptData = (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const numberCoder = new BigNumberCoder('u64');\n  return transferParams.reduce((acc, transferParam) => {\n    const { assetId, amount, contractId } = transferParam;\n    const encoded = numberCoder.encode(amount);\n    const scriptData = concat([\n      Address.fromAddressOrString(contractId).toBytes(),\n      encoded,\n      arrayify(assetId),\n    ]);\n    return concat([acc, scriptData]);\n  }, new Uint8Array());\n};\n\nexport const assembleTransferToContractScript = async (\n  transferParams: Array<AssembleTransferToContractParams>\n) => {\n  const scriptData = formatTransferToContractScriptData(transferParams);\n\n  // @ts-expect-error method reference missing in DTS\n  await asm.initWasm();\n\n  let script = new Uint8Array();\n\n  transferParams.forEach((_, i) => {\n    const offset = (CONTRACT_ID_LEN + WORD_SIZE + ASSET_ID_LEN) * i;\n\n    script = concat([\n      script,\n      // Load ScriptData into register 0x10.\n      asm.gtf(0x10, 0x0, asm.GTFArgs.ScriptData).to_bytes(),\n      // Add the offset to 0x10 so it will point to the current contract ID, store in 0x11.\n      asm.addi(0x11, 0x10, offset).to_bytes(),\n      // Add CONTRACT_ID_LEN to 0x11 to point to the amount in the ScriptData, store in 0x12.\n      asm.addi(0x12, 0x11, CONTRACT_ID_LEN).to_bytes(),\n      // Load word to the amount at 0x12 into register 0x13.\n      asm.lw(0x13, 0x12, 0x0).to_bytes(),\n      // Add WORD_SIZE to 0x12 to point to the asset ID in the ScriptData, store in 0x14.\n      asm.addi(0x14, 0x12, WORD_SIZE).to_bytes(),\n      // Perform the transfer using contract ID in 0x11, amount in 0x13, and asset ID in 0x14.\n      asm.tr(0x11, 0x13, 0x14).to_bytes(),\n    ]);\n  });\n\n  // Add return instruction at the end of the script\n  script = concat([script, asm.ret(0x1).to_bytes()]);\n\n  return { script, scriptData };\n};\n","import { Address } from '@fuel-ts/address';\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  randomUUID,\n} from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { hexlify } from '@fuel-ts/utils';\n\nexport type KeystoreWallet = {\n  id: string;\n  version: number;\n  address: string;\n  crypto: KeystoreCrypto;\n};\n\ntype KeystoreCrypto = {\n  cipher: 'aes-128-ctr';\n  cipherparams: { iv: string };\n  ciphertext: string;\n  kdf: 'scrypt';\n  mac: string;\n  kdfparams: KDFParams;\n};\n\ntype KDFParams = {\n  dklen: number;\n  n: number;\n  p: number;\n  r: number;\n  salt: string;\n};\n\n// Same values used in the Rust SDK\nexport const DEFAULT_KDF_PARAMS_LOG_N = 13;\nexport const DEFAULT_KDF_PARAMS_R = 8;\nexport const DEFAULT_KDF_PARAMS_P = 1;\nexport const DEFAULT_KEY_SIZE = 32;\nexport const DEFAULT_IV_SIZE = 16;\n\n/**\n * Removes the '0x' prefix from a hexadecimal string.\n * If the prefix does not exist, it returns the original string.\n */\nexport const removeHexPrefix = (hexString: string) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n\n  return hexString;\n};\n\nexport async function encryptKeystoreWallet(\n  privateKey: string,\n  address: string | Address,\n  password: string\n): Promise<string> {\n  // Convert the hexlified private key string to a Buffer.\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), 'hex');\n  const ownerAddress = Address.fromAddressOrString(address);\n  // Generate a random salt.\n  const salt = randomBytes(DEFAULT_KEY_SIZE);\n\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P,\n  });\n\n  // Encrypt the private key using AES-128-CTR.\n  const iv = randomBytes(DEFAULT_IV_SIZE);\n\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n\n  // Calculate the MAC.\n  const macHashUint8Array = keccak256(data);\n\n  const mac = stringFromBuffer(macHashUint8Array, 'hex');\n\n  // Construct keystore.\n  const keystore: KeystoreWallet = {\n    id: randomUUID(),\n    version: 3,\n    address: removeHexPrefix(ownerAddress.toHexString()),\n    crypto: {\n      cipher: 'aes-128-ctr',\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, 'hex') },\n      ciphertext: stringFromBuffer(ciphertext, 'hex'),\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, 'hex'),\n      },\n    },\n  };\n\n  return JSON.stringify(keystore);\n}\n\nexport async function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string> {\n  const keystoreWallet = JSON.parse(jsonWallet) as KeystoreWallet;\n\n  // Extract the parameters needed for decryption.\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt },\n    },\n  } = keystoreWallet;\n\n  const ciphertextBuffer = bufferFromString(ciphertext, 'hex');\n  const ivBuffer = bufferFromString(iv, 'hex');\n  const saltBuffer = bufferFromString(salt, 'hex');\n\n  const passwordBuffer = bufferFromString(password);\n\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen,\n  });\n\n  // Verify the MAC. It should be the Keccak-256 hash of the concatenation of the second half of the derived key and the ciphertext.\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n\n  const macHashUint8Array = keccak256(data);\n\n  const macHash = stringFromBuffer(macHashUint8Array, 'hex');\n\n  if (mac !== macHash) {\n    throw new FuelError(\n      ErrorCode.INVALID_PASSWORD,\n      'Failed to decrypt the keystore wallet, the provided password is incorrect.'\n    );\n  }\n\n  // Decrypt the private key.\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n\n  const privateKey = hexlify(buffer);\n\n  return privateKey;\n}\n","import { computeHmac, ripemd160 } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport { bn, toBytes, toHex } from '@fuel-ts/math';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, decodeBase58 } from '@fuel-ts/utils';\n\nimport { Mnemonic } from '../mnemonic';\nimport { Signer } from '../signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return encodeBase58(concat([data, dataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new FuelError(ErrorCode.HD_WALLET_ERROR, `invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Both public and private Key cannot be missing. At least one should be provided.'\n        );\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = dataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new FuelError(\n          ErrorCode.HD_WALLET_ERROR,\n          'Cannot derive a hardened index without a private Key.'\n        );\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(toBytes(index, 4), 33);\n\n    const bytes = arrayify(computeHmac('sha512', chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141';\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        `Exceeded max depth of 255. Current depth: ${this.depth}.`\n      );\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(Uint8Array.from([this.depth]));\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = arrayify(concat([prefix, depth, parentFingerprint, index, chainCode, key]));\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const decoded = hexlify(toBytes(decodeBase58(extendedKey)));\n    const bytes = arrayify(decoded);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key is not a valid extended key.');\n    }\n    if (!validChecksum) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Provided key has an invalid checksum.');\n    }\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new FuelError(\n        ErrorCode.HD_WALLET_ERROR,\n        'Inconsistency detected: Depth is zero but fingerprint/index is non-zero.'\n      );\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid public extended key.');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new FuelError(ErrorCode.HD_WALLET_ERROR, 'Invalid private extended key.');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n","import { randomBytes, pbkdf2, computeHmac } from '@fuel-ts/crypto';\nimport { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify, hexlify, concat, dataSlice, encodeBase58, toUtf8Bytes } from '@fuel-ts/utils';\n\nimport { english } from '../wordlists';\n\nimport type { MnemonicPhrase } from './utils';\nimport { entropyToMnemonicIndices, getWords, getPhrase, mnemonicWordsToEntropy } from './utils';\n\n//\n// Constants\n//\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes('Bitcoin seed');\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = '0x0488ade4';\nconst TestnetPRV = '0x04358394';\nexport const MNEMONIC_SIZES = [12, 15, 18, 21, 24];\n\nfunction assertWordList(wordlist: Array<string>) {\n  if (wordlist.length !== 2048) {\n    throw new FuelError(\n      ErrorCode.INVALID_WORD_LIST,\n      `Expected word list length of 2048, but got ${wordlist.length}.`\n    );\n  }\n}\n\nfunction assertEntropy(entropy: BytesLike) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new FuelError(\n      ErrorCode.INVALID_ENTROPY,\n      `Entropy should be between 16 and 32 bytes and a multiple of 4, but got ${entropy.length} bytes.`\n    );\n  }\n}\n\nfunction assertMnemonic(words: Array<string>) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    const errorMsg = `Invalid mnemonic size. Expected one of [${MNEMONIC_SIZES.join(\n      ', '\n    )}] words, but got ${words.length}.`;\n\n    throw new FuelError(ErrorCode.INVALID_MNEMONIC, errorMsg);\n  }\n}\n\nclass Mnemonic {\n  wordlist: Array<string>;\n\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist: Array<string> = english) {\n    this.wordlist = wordlist;\n\n    assertWordList(this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase: MnemonicPhrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy: BytesLike) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase: MnemonicPhrase, wordlist: Array<string> = english): string {\n    const words = getWords(phrase);\n\n    assertMnemonic(words);\n\n    return hexlify(mnemonicWordsToEntropy(words, wordlist));\n  }\n\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy: BytesLike, wordlist: Array<string> = english): string {\n    const entropyBytes = arrayify(entropy);\n\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n\n    return entropyToMnemonicIndices(entropyBytes)\n      .map((i) => wordlist[i])\n      .join(' ');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    assertMnemonic(getWords(phrase));\n\n    const phraseBytes = toUtf8Bytes(getPhrase(phrase));\n    const salt = toUtf8Bytes(`mnemonic${passphrase}`);\n\n    return pbkdf2(phraseBytes, salt, 2048, 64, 'sha512');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase: string) {\n    const words = getWords(phrase);\n\n    let i: number = 0;\n\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) {\n        return false;\n      }\n      i += 1;\n    }\n\n    return true;\n  }\n\n  static binarySearch(target: string): boolean {\n    const words = english;\n    let left: number = 0;\n    let right: number = words.length - 1;\n\n    while (left <= right) {\n      const mid: number = Math.floor((left + right) / 2);\n\n      if (words[mid] === target) {\n        return true;\n      }\n      if (target < words[mid]) {\n        right = mid - 1;\n      } else {\n        left = mid + 1;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed: string): Uint8Array {\n    const seedArray = arrayify(seed);\n\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new FuelError(\n        ErrorCode.INVALID_SEED,\n        `Seed length should be between 16 and 64 bytes, but received ${seedArray.length} bytes.`\n      );\n    }\n\n    return arrayify(computeHmac('sha512', MasterSecret, seedArray));\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed: string, testnet: boolean = false): string {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);\n    const depth = '0x00';\n    const fingerprint = '0x00000000';\n    const index = '0x00000000';\n    // last 32 bites from the key\n    const chainCode = masterKey.slice(32);\n    // first 32 bites from the key\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = concat([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      concat(['0x00', privateKey]),\n    ]);\n    const checksum = dataSlice(sha256(sha256(extendedKey)), 0, 4);\n\n    return encodeBase58(concat([extendedKey, checksum]));\n  }\n\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size: number = 32, extraEntropy: BytesLike = '') {\n    const entropy = extraEntropy\n      ? sha256(concat([randomBytes(size), arrayify(extraEntropy)]))\n      : randomBytes(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n}\n\nexport default Mnemonic;\n","export const english = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo',\n];\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport { sha256 } from '@fuel-ts/hasher';\nimport type { BytesLike } from '@fuel-ts/utils';\nimport { arrayify } from '@fuel-ts/utils';\n\n/* Mnemonic phrase composed by words from the provided wordlist it can be a text or a array of words */\nexport type MnemonicPhrase = string | Array<string>;\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n  return (1 << bits) - 1;\n}\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n  return ((1 << bits) - 1) << (8 - bits);\n}\n\nexport function getWords(mnemonic: MnemonicPhrase): Array<string> {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\n\nexport function getPhrase(mnemonic: MnemonicPhrase): string {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(' ');\n  }\n  return mnemonic;\n}\n\nexport function entropyToMnemonicIndices(entropy: Uint8Array): Array<number> {\n  const indices: Array<number> = [0];\n\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n      remainingBits += 3;\n    }\n  }\n\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> (8 - checksumBits);\n\n  return indices;\n}\n\nexport function mnemonicWordsToEntropy(words: Array<string>, wordlist: Array<string>): BytesLike {\n  const size = Math.ceil((11 * words.length) / 8);\n  const entropy = arrayify(new Uint8Array(size));\n\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize('NFKD'));\n    if (index === -1) {\n      throw new FuelError(\n        ErrorCode.INVALID_MNEMONIC,\n        `Invalid mnemonic: the word '${words[i]}' is not found in the provided wordlist.`\n      );\n    }\n\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & (1 << (10 - bit))) {\n        entropy[offset >> 3] |= 1 << (7 - (offset % 8));\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = (32 * words.length) / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new FuelError(\n      ErrorCode.INVALID_CHECKSUM,\n      'Checksum validation failed for the provided mnemonic.'\n    );\n  }\n\n  return entropy.slice(0, entropyBits / 8);\n}\n","//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport { Account } from '../account';\nimport { HDWallet } from '../hdwallet';\nimport { Mnemonic } from '../mnemonic';\nimport type { Provider } from '../providers';\nimport { Signer } from '../signer';\n\nimport { BaseWalletUnlocked } from './base-wallet-unlocked';\nimport { decryptKeystoreWallet } from './keystore-wallet';\n\nexport interface GenerateOptions {\n  /** Additional entropy for the random bytes */\n  entropy?: BytesLike;\n  provider?: Provider;\n}\n\n/**\n * `WalletLocked` provides the functionalities for a locked  wallet.\n */\nexport class WalletLocked extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey: BytesLike): WalletUnlocked {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this._provider);\n  }\n}\n\n/**\n * `WalletUnlocked` provides the functionalities for an unlocked wallet.\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this._provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions?: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed: string, path?: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    path?: string,\n    passphrase?: BytesLike,\n    provider?: Provider\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static async fromEncryptedJson(\n    jsonWallet: string,\n    password: string,\n    provider?: Provider\n  ): Promise<WalletUnlocked> {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n\n    return new WalletUnlocked(privateKey, provider);\n  }\n}\n","import type { Address } from '@fuel-ts/address';\nimport type { BytesLike } from '@fuel-ts/utils';\n\nimport type { Provider } from '../providers';\n\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\n/**\n * `Wallet` provides methods to create locked and unlocked wallet instances.\n */\nexport class Wallet {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(address: string | Address, provider?: Provider): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey: BytesLike, provider?: Provider) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param provider - A Provider instance (optional).\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n\n  /**\n   * Create a Wallet Unlocked from an encrypted JSON.\n   *\n   * @param jsonWallet - The encrypted JSON keystore.\n   * @param password - The password to decrypt the JSON.\n   * @param provider - A Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n}\n","import { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { bn, type BN } from '@fuel-ts/math';\nimport type { SnapshotConfigs } from '@fuel-ts/utils';\nimport { hexlify } from '@fuel-ts/utils';\n\ninterface TestMessageSpecs {\n  sender: Address;\n  recipient: Address;\n  nonce: string;\n  amount: number;\n  data: string;\n  da_height: number;\n}\n\nexport type ChainMessage = SnapshotConfigs['stateConfig']['messages'][0];\n\nexport class TestMessage {\n  public readonly sender: Address;\n  public readonly recipient: Address;\n  public readonly nonce: string;\n  public readonly amount: number | BN;\n  public readonly data: string;\n  public readonly da_height: number;\n\n  /**\n   * A helper class to create messages for testing purposes.\n   *\n   * Used in tandem with `WalletsConfig`.\n   * It can also be used standalone and passed into the initial state of a chain via the `.toChainMessage` method.\n   */\n  constructor({\n    sender = Address.fromRandom(),\n    recipient = Address.fromRandom(),\n    nonce = hexlify(randomBytes(32)),\n    amount = 1_000_000,\n    data = '', // Will default to empty data in order to be a spendable message\n    da_height = 0,\n  }: Partial<TestMessageSpecs> = {}) {\n    this.sender = sender;\n    this.recipient = recipient;\n    this.nonce = nonce;\n    this.amount = amount;\n    this.data = data;\n    this.da_height = da_height;\n  }\n\n  toChainMessage(recipient?: Address): ChainMessage {\n    // Fuel-core throwns error for message data prefixed with 0x within the stateConfig.json file\n    const data = /^0x/.test(this.data) ? this.data.replace(/^0x/, '') : this.data;\n    return {\n      sender: this.sender.toB256(),\n      recipient: recipient?.toB256() ?? this.recipient.toB256(),\n      nonce: this.nonce,\n      amount: bn(this.amount).toNumber(),\n      data,\n      da_height: this.da_height,\n    };\n  }\n}\n"],"mappings":"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","names":["import_crypto","import_utils","os","path","import_utils","import_ramda","import_math","import_utils","import_address","import_errors","import_math","import_transactions","import_utils","import_graphql_tag","import_ramda","gql","import_errors","import_errors","import_utils","import_abi_coder","import_errors","import_math","import_utils","import_configs","import_errors","import_math","import_transactions","import_utils","import_abi_coder","import_address","import_configs","import_crypto","import_errors","import_math","import_transactions","import_utils","import_configs","import_errors","import_math","import_transactions","import_utils","import_errors","import_math","import_transactions","import_utils","import_utils","import_errors","import_math","import_transactions","import_configs","import_errors","import_math","import_transactions","import_utils","import_ramda","import_configs","import_hasher","import_math","import_transactions","import_utils","import_ramda","import_configs","import_math","import_transactions","import_utils","import_ramda","import_utils","import_abi_coder","import_address","import_configs","import_math","import_transactions","import_utils","import_ramda","import_utils","import_errors","import_hasher","import_transactions","import_utils","import_ramda","import_configs","import_transactions","import_utils","import_ramda","import_errors","import_transactions","import_errors","import_math","import_transactions","import_utils","import_math","import_transactions","import_utils","import_math","import_transactions","import_utils","import_configs","import_errors","import_math","import_transactions","import_abi_coder","import_errors","import_math","import_transactions","import_transactions","import_transactions","import_errors","import_math","import_abi_coder","import_transactions","import_utils","import_errors","import_errors","gql","import_errors","import_math","import_transactions","import_utils","path","assets","import_crypto","import_utils","import_crypto","import_errors","import_utils","import_hasher","import_utils","import_abi_coder","import_address","import_crypto","import_errors","import_math","import_transactions","import_utils","import_ramda","import_abi_coder","import_address","import_utils","isCoin","requestToReestimate","import_address","import_crypto","import_errors","import_utils","import_crypto","import_errors","import_hasher","import_math","import_utils","import_crypto","import_errors","import_hasher","import_utils","import_errors","import_hasher","import_utils","MainnetPRV","TestnetPRV","path","path","assets","import_address","import_crypto","import_math","import_utils"]}