import { Address } from '@fuel-ts/address';
import { type BN } from '@fuel-ts/math';
import type { SnapshotConfigs } from '@fuel-ts/utils';
interface TestMessageSpecs {
    sender: Address;
    recipient: Address;
    nonce: string;
    amount: number;
    data: string;
    da_height: number;
}
export type ChainMessage = SnapshotConfigs['stateConfig']['messages'][0];
export declare class TestMessage {
    readonly sender: Address;
    readonly recipient: Address;
    readonly nonce: string;
    readonly amount: number | BN;
    readonly data: string;
    readonly da_height: number;
    /**
     * A helper class to create messages for testing purposes.
     *
     * Used in tandem with `WalletsConfig`.
     * It can also be used standalone and passed into the initial state of a chain via the `.toChainMessage` method.
     */
    constructor({ sender, recipient, nonce, amount, data, // Will default to empty data in order to be a spendable message
    da_height, }?: Partial<TestMessageSpecs>);
    toChainMessage(recipient?: Address): ChainMessage;
}
export {};
//# sourceMappingURL=test-message.d.ts.map