import type { SnapshotConfigs } from '@fuel-ts/utils';
export type LaunchNodeOptions = {
    ip?: string;
    port?: string;
    args?: string[];
    fuelCorePath?: string;
    loggingEnabled?: boolean;
    basePath?: string;
    /**
     * The snapshot configuration to use.
     * Passing in a snapshot configuration path via the `--snapshot` flag in `args` will override this.
     * */
    snapshotConfig?: SnapshotConfigs;
    includeInitialState?: boolean;
    killProcessOnExit?: boolean;
};
export type LaunchNodeResult = Promise<{
    cleanup: () => void;
    ip: string;
    port: string;
    url: string;
    snapshotDir: string;
    pid: number;
}>;
/**
 * Launches a fuel-core node.
 * @param ip - the ip to bind to. (optional, defaults to 0.0.0.0)
 * @param port - the port to bind to. (optional, defaults to 4000 or the next available port)
 * @param args - additional arguments to pass to fuel-core.
 * @param fuelCorePath - the path to the fuel-core binary. (optional, defaults to 'fuel-core')
 * @param loggingEnabled - whether the node should output logs. (optional, defaults to true)
 * @param basePath - the base path to use for the temporary folder. (optional, defaults to os.tmpdir())
 * @param includeInitialState - whether to initialise the chain with some default initial state. (optional, defaults to false)
 * */
export declare const launchNode: ({ ip, port, args, fuelCorePath, loggingEnabled, basePath, snapshotConfig, includeInitialState, killProcessOnExit, }?: LaunchNodeOptions) => LaunchNodeResult;
//# sourceMappingURL=launchNode.d.ts.map