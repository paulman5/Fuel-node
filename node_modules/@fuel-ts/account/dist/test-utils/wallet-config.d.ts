import { type SnapshotConfigs } from '@fuel-ts/utils';
import type { PartialDeep } from 'type-fest';
import { WalletUnlocked } from '../wallet';
import { TestAssetId } from './test-asset-id';
import type { TestMessage } from './test-message';
export interface WalletsConfigOptions {
    /**
     * Number of wallets to generate.
     */
    count: number;
    /**
     * If `number`, the number of unique asset ids each wallet will own with the base asset included.
     *
     * If `TestAssetId[]`, the asset ids the each wallet will own besides the base asset.
     */
    assets: number | TestAssetId[];
    /**
     * Number of coins (UTXOs) per asset id.
     */
    coinsPerAsset: number;
    /**
     * For each coin, the amount it'll contain.
     */
    amountPerCoin: number;
    /**
     * Messages that are supposed to be on the wallet.
     * The `recipient` field of the message is overriden to be the wallet's address.
     */
    messages: TestMessage[];
}
/**
 * Used for configuring the wallets that should exist in the genesis block of a test node.
 */
export declare class WalletsConfig {
    private initialState;
    private options;
    wallets: WalletUnlocked[];
    private generateWallets;
    constructor(baseAssetId: string, config: WalletsConfigOptions);
    apply(snapshotConfig: PartialDeep<SnapshotConfigs> | undefined): PartialDeep<SnapshotConfigs> & {
        stateConfig: {
            coins: SnapshotConfigs['stateConfig']['coins'];
        };
    };
    /**
     * Create messages for the wallets in the format that the chain expects.
     */
    private static createMessages;
    /**
     * Create coins for the wallets in the format that the chain expects.
     */
    private static createCoins;
    private static validate;
}
//# sourceMappingURL=wallet-config.d.ts.map