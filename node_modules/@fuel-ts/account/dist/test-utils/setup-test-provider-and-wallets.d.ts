import { type SnapshotConfigs } from '@fuel-ts/utils';
import type { PartialDeep } from 'type-fest';
import type { ProviderOptions } from '../providers';
import { Provider } from '../providers';
import type { WalletUnlocked } from '../wallet';
import type { LaunchNodeOptions } from './launchNode';
import type { WalletsConfigOptions } from './wallet-config';
export interface LaunchCustomProviderAndGetWalletsOptions {
    /** Configures the wallets that should exist in the genesis block of the `fuel-core` node. */
    walletsConfig?: Partial<WalletsConfigOptions>;
    /** Options for configuring the provider. */
    providerOptions?: Partial<ProviderOptions>;
    /** Options for configuring the test node. */
    nodeOptions?: Partial<Omit<LaunchNodeOptions, 'snapshotConfig'> & {
        snapshotConfig: PartialDeep<SnapshotConfigs>;
    }>;
    launchNodeServerPort?: string;
}
export interface SetupTestProviderAndWalletsReturn extends Disposable {
    wallets: WalletUnlocked[];
    provider: Provider;
    cleanup: () => void;
}
/**
 * Launches a test node and creates wallets for testing.
 * If initialized with the `using` keyword, the node will be killed when it goes out of scope.
 * If initialized with `const`, manual disposal of the node must be done via the `cleanup` function.
 *
 * @param options - Options for configuring the wallets, provider, and test node.
 * @returns The wallets, provider and cleanup function that kills the node.
 *
 */
export declare function setupTestProviderAndWallets({ walletsConfig: walletsConfigOptions, providerOptions, nodeOptions, launchNodeServerPort, }?: Partial<LaunchCustomProviderAndGetWalletsOptions>): Promise<SetupTestProviderAndWalletsReturn>;
//# sourceMappingURL=setup-test-provider-and-wallets.d.ts.map