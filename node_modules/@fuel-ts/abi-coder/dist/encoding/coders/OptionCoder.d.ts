import type { Coder } from './AbstractCoder';
import type { DecodedValueOf } from './EnumCoder';
import { EnumCoder } from './EnumCoder';
export type Option<T> = T | undefined;
export declare class OptionCoder<TCoders extends Record<string, Coder>> extends EnumCoder<TCoders> {
    encode(value?: Option<unknown>): Uint8Array;
    private toSwayOption;
    decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number];
    private toOption;
}
//# sourceMappingURL=OptionCoder.d.ts.map