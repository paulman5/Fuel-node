import { Coder } from './AbstractCoder';
import type { TypesOfCoder } from './AbstractCoder';
type InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']> | Uint8Array;
type DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;
export declare class VecCoder<TCoder extends Coder> extends Coder<InputValueOf<TCoder>, DecodedValueOf<TCoder>> {
    #private;
    coder: TCoder;
    constructor(coder: TCoder);
    encode(value: InputValueOf<TCoder>): Uint8Array;
    decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number];
}
export {};
//# sourceMappingURL=VecCoder.d.ts.map