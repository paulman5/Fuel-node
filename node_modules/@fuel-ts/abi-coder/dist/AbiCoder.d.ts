import type { DecodedValue, InputValue, Coder } from './encoding/coders/AbstractCoder';
import type { EncodingOptions } from './types/EncodingOptions';
import type { JsonAbiOld, JsonAbiArgument } from './types/JsonAbi';
export declare abstract class AbiCoder {
    static getCoder(abi: JsonAbiOld, argument: JsonAbiArgument, options?: EncodingOptions): Coder;
    static encode(abi: JsonAbiOld, argument: JsonAbiArgument, value: InputValue, options?: EncodingOptions): Uint8Array;
    static decode(abi: JsonAbiOld, argument: JsonAbiArgument, data: Uint8Array, offset: number, options?: EncodingOptions): [DecodedValue | undefined, number];
}
//# sourceMappingURL=AbiCoder.d.ts.map