import type { BytesLike } from '@fuel-ts/utils';
import { FunctionFragment } from './FunctionFragment';
import type { DecodedValue, InputValue } from './encoding/coders/AbstractCoder';
import type { Configurable, JsonAbi } from './types/JsonAbiNew';
import { type EncodingVersion } from './utils/constants';
export declare class Interface {
    readonly functions: Record<string, FunctionFragment>;
    readonly configurables: Record<string, Configurable>;
    readonly jsonAbi: JsonAbi;
    readonly encoding: EncodingVersion;
    private readonly jsonAbiOld;
    constructor(jsonAbi: JsonAbi);
    /**
     * Returns function fragment for a dynamic input.
     * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment
     */
    getFunction(nameOrSignatureOrSelector: string): FunctionFragment;
    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): any;
    decodeLog(data: BytesLike, logId: string): any;
    encodeConfigurable(name: string, value: InputValue): Uint8Array;
    encodeType(concreteTypeId: string, value: InputValue): Uint8Array;
    decodeType(concreteTypeId: string, data: Uint8Array): [DecodedValue | undefined, number];
}
//# sourceMappingURL=Interface.d.ts.map