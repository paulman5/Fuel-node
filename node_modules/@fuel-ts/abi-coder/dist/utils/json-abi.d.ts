import type { ResolvedAbiType } from '../ResolvedAbiType';
import type { JsonAbiOld, JsonAbiArgument, JsonAbiType } from '../types/JsonAbi';
import type { AbiFunction, JsonAbi } from '../types/JsonAbiNew';
import { type EncodingVersion } from './constants';
/**
 * Asserts that the encoding version is supported by the ABI coder.
 *
 * @param encoding - the encoding version to check
 * @returns the encoding version
 * @throws FuelError if the encoding version is not supported
 */
export declare const getEncodingVersion: (encoding?: string) => EncodingVersion;
/**
 * Find a function by name in the ABI.
 *
 * @param abi - the JsonAbi object
 * @param name - the name of the function to find
 * @returns the JsonAbi function object
 */
export declare const findFunctionByName: (abi: JsonAbi, name: string) => AbiFunction;
/**
 * Find a type by its typeId in the ABI.
 *
 * @param abi - the JsonAbi object
 * @param typeId - the typeId of the type to find
 * @returns the JsonAbi type object
 */
export declare const findTypeById: (abi: JsonAbiOld, typeId: number) => JsonAbiType;
/**
 * Find all non-void inputs in a list of inputs.
 * i.e. all inputs that are not of the type '()'.
 *
 * @param abi - the JsonAbi object
 * @param inputs - the list of inputs to filter
 * @returns the list of non-void inputs
 */
export declare const findNonVoidInputs: (abi: JsonAbiOld, inputs: readonly JsonAbiArgument[]) => JsonAbiArgument[];
/**
 * Find the vector buffer argument in a list of components.
 *
 * @param components - the list of components to search
 * @returns the vector buffer argument
 */
export declare const findVectorBufferArgument: (components: readonly ResolvedAbiType[]) => JsonAbiArgument;
//# sourceMappingURL=json-abi.d.ts.map