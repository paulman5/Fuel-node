import type { Coder } from '../encoding/coders/AbstractCoder';
/**
 * Turns:
  Uint8Array(24) [
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 24
  ]

  Into:
  Array [
    Uint8Array(8) [
      0, 0, 0, 0, 0, 0, 0, 1
    ],
    Uint8Array(8) [
      0, 0, 0, 0, 0, 0, 0, 2
    ],
    Uint8Array(8) [
      0, 0, 0, 0, 0, 0, 0, 24
    ]
  ]
 *
 */
export declare const chunkByLength: (data: Uint8Array, length?: number) => Uint8Array[];
export declare const isUint8Array: (value: unknown) => value is Uint8Array;
export type TCoders = Record<string, Coder>;
/**
 * Finds a deeply nested option in a coders object.
 *
 * @param coders - the coders object to search.
 * @returns - whether the coder has been found.
 */
export declare const hasNestedOption: (coders: Record<string, Coder> | Coder[]) => boolean;
//# sourceMappingURL=utilities.d.ts.map