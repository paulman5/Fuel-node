{"version":3,"sources":["../src/index.ts","../src/utils/capitalizeString.ts","../src/utils/chunkAndPadBytes.ts","../src/utils/arrayify.ts","../src/utils/concat.ts","../src/utils/hexlify.ts","../src/utils/normalizeString.ts","../src/utils/date-time.ts","../src/utils/sleep.ts","../src/utils/defaultSnapshots/chainConfig.json","../src/utils/defaultSnapshots/metadata.json","../src/utils/defaultSnapshots/stateConfig.json","../src/utils/defaultSnapshotConfigs.ts","../src/utils/isDefined.ts","../src/utils/base58.ts","../src/utils/dataSlice.ts","../src/utils/toUtf8Bytes.ts","../src/utils/toUtf8String.ts","../src/utils/bytecode.ts"],"sourcesContent":["export * from './utils/capitalizeString';\nexport * from './utils/chunkAndPadBytes';\nexport * from './utils/concat';\nexport * from './utils/arrayify';\nexport * from './utils/hexlify';\nexport * from './utils/normalizeString';\nexport * from './utils/date-time';\nexport * from './utils/types';\nexport * from './utils/sleep';\nexport * from './utils/defaultSnapshotConfigs';\nexport * from './utils/isDefined';\nexport * from './utils/base58';\nexport * from './utils/dataSlice';\nexport * from './utils/toUtf8Bytes';\nexport * from './utils/toUtf8String';\nexport * from './utils/bytecode';\n\n/**\n * Used to verify that a switch statement exhausts all variants.\n */\nexport function assertUnreachable(_x: never): never {\n  throw new Error(\"Didn't expect to get here\");\n}\n","export const capitalizeString = (str: string) => {\n  if (!str.length) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n};\n","/**\n * Function to take a byte array and split into chunks of a given size\n *\n * @param bytes - The byte array to chunk\n * @param chunkSize - The size of each chunk\n * @returns An array of byte arrays of a specified size\n */\nexport const chunkAndPadBytes = (bytes: Uint8Array, chunkSize: number): Uint8Array[] => {\n  const chunks: Uint8Array[] = [];\n\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + ((8 - (remainingBytes % 8)) % 8);\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n\n  return chunks;\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\nexport type BytesLike = Uint8Array | string;\n\n/**\n * Get a typed Uint8Array from a BytesLike object.\n *\n * @param value - the BytesLike data.\n * @param name - a display name for the error result.\n * @param copy - create a copy of the original data (if applicable).\n * @returns - a typed Uint8Array.\n */\nexport const arrayify = (value: BytesLike, name?: string, copy: boolean = true): Uint8Array => {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n\n  if (typeof value === 'string' && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n\n  const nameMessage = name ? ` ${name} -` : '';\n  const message = `invalid data:${nameMessage} ${value}\\nIf you are attempting to transform a hex value, please make sure it is being passed as a string and wrapped in quotes.`;\n  throw new FuelError(ErrorCode.INVALID_DATA, message);\n};\n","import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\n/**\n * Concatenates multiple Uint8Arrays into a single Uint8Array.\n *\n * @param arrays - The arrays to concatenate.\n * @returns - The concatenated array.\n */\nexport const concatBytes = (\n  arrays: ReadonlyArray<Uint8Array> | ReadonlyArray<number[]>\n): Uint8Array => {\n  const byteArrays = arrays.map((array) => {\n    if (array instanceof Uint8Array) {\n      return array;\n    }\n    return Uint8Array.from(array);\n  });\n\n  const totalSize = byteArrays.reduce((accum, item) => accum + item.length, 0);\n  const concatenated = new Uint8Array(totalSize);\n\n  byteArrays.reduce((offset, object) => {\n    concatenated.set(object, offset);\n    return offset + object.length;\n  }, 0);\n\n  return concatenated;\n};\n\n/**\n * Concatenates multiple BytesLike into a single Uint8Array.\n *\n * @param arrays - The arrays to concatenate.\n * @returns - The concatenated array.\n */\nexport const concat = (arrays: ReadonlyArray<BytesLike>): Uint8Array => {\n  const bytes = arrays.map((v) => arrayify(v));\n\n  return concatBytes(bytes);\n};\n","import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nconst HexCharacters: string = '0123456789abcdef';\n\n/**\n *  Returns a hex representation of the inputted bytes.\n */\nexport function hexlify(data: BytesLike): string {\n  const bytes = arrayify(data);\n\n  let result = '0x';\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n  }\n  return result;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\n/**\n * Converts `some.string-value` into `SomeStringValue`.\n *\n * Examples:\n *  my-simple.test —— MySimpleTest\n *  myFile.ts —— MyFileTs\n *  my-abi.json —— MyAbiJson\n */\nexport const normalizeString = (str: string): string => {\n  const transformations: ((s: string) => string)[] = [\n    (s) => s.replace(/\\s+/g, '-'), // spaces to -\n    (s) => s.replace(/\\./g, '-'), // dots to -\n    (s) => s.replace(/_/g, '-'), // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()), // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, ''), // delete any '-' left\n    (s) => s.replace(/^\\d+/, ''), // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1), // capitalize first letter\n  ];\n\n  const output = transformations.reduce((s, t) => t(s), str);\n\n  if (output === '') {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);\n  }\n\n  return output;\n};\n","/**\n * Tai64 timestamp.\n */\ntype Tai64Timestamp = string;\n\n/**\n * This constant is used to calculate the offset between the Unix epoch and the TAI64 epoch.\n * It allows for a **rough** conversion between the two time formats.\n *\n * // Value expires on:  28 June 2024\n * {@link https://data.iana.org/time-zones/data/leap-seconds.list}\n * {@link https://github.com/hl2/tai64/blob/master/src/leapSeconds.ts}\n */\nconst TAI64_LEAP_SECONDS: number = 37;\n\n/**\n * Tai64 (Temps Atomique International) is a time format\n *\n * The offset between the Unix epoch and the TAI64 epoch.\n * The TAI64 epoch is 2^62 nanoseconds after the Unix epoch (+ the offset of \"leap seconds\" relevant to the date).\n *\n * {@link https://cr.yp.to/libtai/tai64.html}\n * {@link https://cr.yp.to/proto/tai64.txt}\n */\nconst TAI64_UNIX_OFFSET: bigint = BigInt(2 ** 62) + BigInt(TAI64_LEAP_SECONDS);\n\n/**\n * Converts milliseconds to seconds and vice versa.\n *\n * @param ms - milliseconds to convert\n * @returns seconds\n */\nconst msToSeconds = (ms: number): number => Math.floor(ms / 1000);\n\n/**\n * Converts seconds to milliseconds and vice versa.\n *\n * @param seconds - seconds to convert\n * @returns milliseconds\n */\nconst secondsToMs = (seconds: number): number => seconds * 1000;\n\n/**\n * Converts Tai64 (seconds) time units to UNIX (seconds) time units.\n *\n * @param tai64 - Tai64 timestamp\n * @returns Unix seconds timestamp\n */\nconst tai64ToUnixSeconds = (tai64: Tai64Timestamp): number =>\n  Number(BigInt(tai64) - TAI64_UNIX_OFFSET);\n\n/**\n * Converts Unix (seconds) to Tai64 (seconds).\n *\n * @param unixSeconds - unix seconds timestamp\n * @returns Tai64 timestamp\n */\nconst unixSecondsToTai64 = (unixSeconds: number): string =>\n  String(BigInt(unixSeconds) + TAI64_UNIX_OFFSET);\n\n/**\n * Helper to convert Tai64 (seconds) time units to UNIX (milliseconds) time units and vice.\n *\n * @param tai64 - Tai64 timestamp\n * @returns Unix milliseconds timestamp\n */\nconst tai64ToUnixMilliseconds = (tai64: Tai64Timestamp): number =>\n  secondsToMs(tai64ToUnixSeconds(tai64));\n\n/**\n * This class is used to represent a date and time in the Tai64 format.\n *\n * ```typescript\n * import { DateTime } from 'fuels';\n *\n * // Constants\n * const tai64 = '4611686020108779340';\n * const unixMilliseconds = 1681391398000;\n * const seconds = 1681391398;\n *\n * // Instantiation\n * let date: DateTime = DateTime.now();\n * date = DateTime.fromTai64(tai64);\n * date = DateTime.fromUnixMilliseconds(unixMilliseconds);\n * date = DateTime.fromUnixSeconds(seconds);\n *\n * // Utility functions\n * tai64.toTai64() // '4611686020108779340'\n * milliseconds.toUnixMilliseconds() // 1681391398000\n * seconds.toUnixSeconds() // 1681391398\n *\n * // All date methods are available\n * const now: Date = DateTime.now();\n * now.toISOString(); // '2023-04-13T13:09:58.000Z'\n * now.getTime(); // 1681391398000\n * ```\n */\nexport class DateTime extends Date implements Date {\n  static TAI64_NULL: Tai64Timestamp = '';\n\n  /**\n   * Generates a new DateTime instance from a Tai64 timestamp.\n   *\n   * @param tai64 - Tai64 timestamp\n   * @returns a new DateTime instance\n   */\n  static fromTai64(tai64: Tai64Timestamp): DateTime {\n    return new DateTime(tai64ToUnixMilliseconds(tai64));\n  }\n\n  /**\n   * @param unixMilliseconds - unix milliseconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixMilliseconds(unixMilliseconds: number): DateTime {\n    return new DateTime(unixMilliseconds);\n  }\n\n  /**\n   * @param unixSeconds - unix seconds timestamp\n   * @returns a new DateTime instance\n   */\n  static fromUnixSeconds(unixSeconds: number): DateTime {\n    return new DateTime(secondsToMs(unixSeconds));\n  }\n\n  /**\n   * Hide the constructor to prevent direct instantiation.\n   */\n  private constructor(date: Date | number | string) {\n    super(date);\n  }\n\n  /**\n   * Returns the Tai64 timestamp.\n   *\n   * @returns the Tai64 timestamp\n   */\n  toTai64(): Tai64Timestamp {\n    return unixSecondsToTai64(this.toUnixSeconds());\n  }\n\n  /**\n   * @returns the unix milliseconds timestamp\n   */\n  toUnixMilliseconds(): number {\n    return this.getTime();\n  }\n\n  /**\n   * @returns the unix seconds timestamp\n   */\n  toUnixSeconds(): number {\n    return msToSeconds(this.getTime());\n  }\n}\n","export function sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n","{\n  \"chain_name\": \"local_testnet\",\n  \"consensus_parameters\": {\n    \"V2\": {\n      \"tx_params\": {\n        \"V1\": {\n          \"max_inputs\": 255,\n          \"max_outputs\": 255,\n          \"max_witnesses\": 255,\n          \"max_gas_per_tx\": 30000000,\n          \"max_size\": 112640,\n          \"max_bytecode_subsections\": 256\n        }\n      },\n      \"predicate_params\": {\n        \"V1\": {\n          \"max_predicate_length\": 24576,\n          \"max_predicate_data_length\": 24576,\n          \"max_message_data_length\": 102400,\n          \"max_gas_per_predicate\": 1000000\n        }\n      },\n      \"script_params\": {\n        \"V1\": {\n          \"max_script_length\": 102400,\n          \"max_script_data_length\": 102400\n        }\n      },\n      \"contract_params\": {\n        \"V1\": {\n          \"contract_max_size\": 112640,\n          \"max_storage_slots\": 1760\n        }\n      },\n      \"fee_params\": {\n        \"V1\": {\n          \"gas_price_factor\": 1150000,\n          \"gas_per_byte\": 63\n        }\n      },\n      \"chain_id\": 0,\n      \"gas_costs\": {\n        \"V4\": {\n          \"add\": 2,\n          \"addi\": 2,\n          \"and\": 2,\n          \"andi\": 2,\n          \"bal\": 274,\n          \"bhei\": 2,\n          \"bhsh\": 2,\n          \"burn\": 7566,\n          \"cb\": 2,\n          \"cfsi\": 2,\n          \"div\": 2,\n          \"divi\": 2,\n          \"eck1\": 1489,\n          \"ecr1\": 20513,\n          \"eq\": 2,\n          \"exp\": 2,\n          \"expi\": 2,\n          \"flag\": 2,\n          \"gm\": 2,\n          \"gt\": 2,\n          \"gtf\": 3,\n          \"ji\": 2,\n          \"jmp\": 2,\n          \"jne\": 2,\n          \"jnei\": 2,\n          \"jnzi\": 2,\n          \"jmpf\": 2,\n          \"jmpb\": 2,\n          \"jnzf\": 2,\n          \"jnzb\": 2,\n          \"jnef\": 2,\n          \"jneb\": 2,\n          \"lb\": 2,\n          \"log\": 80,\n          \"lt\": 2,\n          \"lw\": 2,\n          \"mint\": 6566,\n          \"mlog\": 2,\n          \"mod\": 2,\n          \"modi\": 2,\n          \"move\": 2,\n          \"movi\": 1,\n          \"mroo\": 3,\n          \"mul\": 2,\n          \"muli\": 2,\n          \"mldv\": 3,\n          \"noop\": 1,\n          \"not\": 2,\n          \"or\": 1,\n          \"ori\": 2,\n          \"poph\": 2,\n          \"popl\": 2,\n          \"pshh\": 5,\n          \"pshl\": 5,\n          \"ret_contract\": 43,\n          \"rvrt_contract\": 39,\n          \"sb\": 2,\n          \"sll\": 2,\n          \"slli\": 2,\n          \"srl\": 2,\n          \"srli\": 2,\n          \"srw\": 237,\n          \"sub\": 2,\n          \"subi\": 2,\n          \"sw\": 2,\n          \"sww\": 5708,\n          \"time\": 106,\n          \"tr\": 9253,\n          \"tro\": 7199,\n          \"wdcm\": 2,\n          \"wqcm\": 2,\n          \"wdop\": 2,\n          \"wqop\": 3,\n          \"wdml\": 3,\n          \"wqml\": 3,\n          \"wddv\": 3,\n          \"wqdv\": 4,\n          \"wdmd\": 6,\n          \"wqmd\": 9,\n          \"wdam\": 6,\n          \"wqam\": 6,\n          \"wdmm\": 6,\n          \"wqmm\": 6,\n          \"xor\": 2,\n          \"xori\": 2,\n          \"aloc\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 35\n            }\n          },\n          \"bsiz\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 564\n            }\n          },\n          \"bldd\": {\n            \"LightOperation\": {\n              \"base\": 33,\n              \"units_per_gas\": 130\n            }\n          },\n          \"cfe\": {\n            \"LightOperation\": {\n              \"base\": 10,\n              \"units_per_gas\": 62\n            }\n          },\n          \"cfei\": {\n            \"LightOperation\": {\n              \"base\": 10,\n              \"units_per_gas\": 66\n            }\n          },\n          \"call\": {\n            \"LightOperation\": {\n              \"base\": 6934,\n              \"units_per_gas\": 14\n            }\n          },\n          \"ccp\": {\n            \"LightOperation\": {\n              \"base\": 21,\n              \"units_per_gas\": 155\n            }\n          },\n          \"croo\": {\n            \"LightOperation\": {\n              \"base\": 69,\n              \"units_per_gas\": 4\n            }\n          },\n          \"csiz\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 580\n            }\n          },\n          \"ed19\": {\n            \"LightOperation\": {\n              \"base\": 3232,\n              \"units_per_gas\": 7\n            }\n          },\n          \"k256\": {\n            \"LightOperation\": {\n              \"base\": 21,\n              \"units_per_gas\": 6\n            }\n          },\n          \"ldc\": {\n            \"LightOperation\": {\n              \"base\": 84,\n              \"units_per_gas\": 113\n            }\n          },\n          \"logd\": {\n            \"LightOperation\": {\n              \"base\": 278,\n              \"units_per_gas\": 5\n            }\n          },\n          \"mcl\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1282\n            }\n          },\n          \"mcli\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1250\n            }\n          },\n          \"mcp\": {\n            \"LightOperation\": {\n              \"base\": 3,\n              \"units_per_gas\": 385\n            }\n          },\n          \"mcpi\": {\n            \"LightOperation\": {\n              \"base\": 7,\n              \"units_per_gas\": 585\n            }\n          },\n          \"meq\": {\n            \"LightOperation\": {\n              \"base\": 2,\n              \"units_per_gas\": 1234\n            }\n          },\n          \"retd_contract\": {\n            \"LightOperation\": {\n              \"base\": 227,\n              \"units_per_gas\": 5\n            }\n          },\n          \"s256\": {\n            \"LightOperation\": {\n              \"base\": 25,\n              \"units_per_gas\": 5\n            }\n          },\n          \"scwq\": {\n            \"HeavyOperation\": {\n              \"base\": 5666,\n              \"gas_per_unit\": 6628\n            }\n          },\n          \"smo\": {\n            \"LightOperation\": {\n              \"base\": 14635,\n              \"units_per_gas\": 3\n            }\n          },\n          \"srwq\": {\n            \"HeavyOperation\": {\n              \"base\": 245,\n              \"gas_per_unit\": 243\n            }\n          },\n          \"swwq\": {\n            \"HeavyOperation\": {\n              \"base\": 5661,\n              \"gas_per_unit\": 5776\n            }\n          },\n          \"contract_root\": {\n            \"LightOperation\": {\n              \"base\": 24,\n              \"units_per_gas\": 3\n            }\n          },\n          \"state_root\": {\n            \"HeavyOperation\": {\n              \"base\": 189,\n              \"gas_per_unit\": 96\n            }\n          },\n          \"new_storage_per_byte\": 63,\n          \"vm_initialization\": {\n            \"LightOperation\": {\n              \"base\": 3127,\n              \"units_per_gas\": 61\n            }\n          }\n        }\n      },\n      \"base_asset_id\": \"0xf8f8b6283d7fa5b672b530cbb84fcccb4ff8dc40f8176ef4544ddb1f1952ad07\",\n      \"block_gas_limit\": 30000000,\n      \"block_transaction_size_limit\": 260096,\n      \"privileged_address\": \"0000000000000000000000000000000000000000000000000000000000000000\"\n    }\n  },\n  \"consensus\": {\n    \"PoA\": {\n      \"signing_key\": \"0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d\"\n    }\n  }\n}\n","{\n  \"chain_config\": \"chainConfig.json\",\n  \"table_encoding\": {\n    \"Json\": {\n      \"filepath\": \"stateConfig.json\"\n    }\n  }\n}\n","{\n  \"coins\": [],\n  \"messages\": [],\n  \"contracts\": [],\n  \"blobs\": [],\n  \"block_height\": 0,\n  \"da_block_height\": 0\n}\n","import chainConfigJson from './defaultSnapshots/chainConfig.json';\nimport metadataJson from './defaultSnapshots/metadata.json';\nimport stateConfigJson from './defaultSnapshots/stateConfig.json';\nimport type { SnapshotConfigs } from './types';\n\nexport const defaultSnapshotConfigs: SnapshotConfigs = {\n  chainConfig: chainConfigJson,\n  metadata: metadataJson,\n  stateConfig: stateConfigJson,\n};\n\nexport const defaultConsensusKey =\n  '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298';\n","export function isDefined<T>(value: T | undefined): value is T {\n  return value !== undefined;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nconst BN_0 = bn(0);\nconst BN_58 = bn(58);\nconst Alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nlet Lookup: null | Record<string, BN> = null;\n\nfunction getAlpha(letter: string): BN {\n  if (Lookup == null) {\n    Lookup = {};\n    for (let i = 0; i < Alphabet.length; i++) {\n      Lookup[Alphabet[i]] = bn(i);\n    }\n  }\n  const result = Lookup[letter];\n  if (result == null) {\n    throw new FuelError(ErrorCode.INVALID_DATA, `invalid base58 value ${letter}`);\n  }\n  return bn(result);\n}\n\n/**\n *  Encode value as a Base58-encoded string.\n */\nexport function encodeBase58(_value: BytesLike): string {\n  const bytes = arrayify(_value);\n\n  let value = bn(bytes);\n  let result = '';\n  while (value.gt(BN_0)) {\n    result = Alphabet[Number(value.mod(BN_58))] + result;\n    value = value.div(BN_58);\n  }\n\n  // Account for leading padding zeros\n  for (let i = 0; i < bytes.length; i++) {\n    if (bytes[i]) {\n      break;\n    }\n    result = Alphabet[0] + result;\n  }\n\n  return result;\n}\n\nexport function decodeBase58(value: string): BN {\n  let result = BN_0;\n  for (let i = 0; i < value.length; i++) {\n    result = result.mul(BN_58);\n    result = result.add(getAlpha(value[i].toString()));\n  }\n  return result;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\nimport { hexlify } from './hexlify';\n\n/**\n *  Returns a hex string by slicing data from the start offset to the end offset.\n *\n * @param data - the data to be sliced.\n * @param start - the start offset (default: 0).\n * @param end - the end offset (default: length of data).\n * @returns - a sliced hex string from start to end.\n */\nexport function dataSlice(data: BytesLike, start?: number, end?: number): string {\n  const bytes = arrayify(data);\n  if (end != null && end > bytes.length) {\n    throw new FuelError(ErrorCode.INVALID_DATA, 'cannot slice beyond data bounds');\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\n\n/**\n *  Returns the UTF-8 byte representation of str.\n *\n *  If form is disabled, the string is not normalized.\n * @param stri - the string to convert to UTF-8 bytes.\n * @param form - whether to normalize the string.\n * @returns - the UTF-8 byte representation of str.\n */\nexport function toUtf8Bytes(stri: string, form = true): Uint8Array {\n  let str = stri;\n\n  if (form) {\n    str = stri.normalize('NFC');\n  }\n\n  const result: Array<number> = [];\n\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push((c >> 6) | 0xc0);\n      result.push((c & 0x3f) | 0x80);\n    } else if ((c & 0xfc00) === 0xd800) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new FuelError(\n          ErrorCode.INVALID_INPUT_PARAMETERS,\n          'Invalid UTF-8 in the input string.'\n        );\n      }\n\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push((pair >> 18) | 0xf0);\n      result.push(((pair >> 12) & 0x3f) | 0x80);\n      result.push(((pair >> 6) & 0x3f) | 0x80);\n      result.push((pair & 0x3f) | 0x80);\n    } else {\n      result.push((c >> 12) | 0xe0);\n      result.push(((c >> 6) & 0x3f) | 0x80);\n      result.push((c & 0x3f) | 0x80);\n    }\n  }\n\n  return new Uint8Array(result);\n}\n","import { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\n/**\n *  These errors are logged when decoding a UTF-8 string fails.\n *\n *  `\"UNEXPECTED_CONTINUE\"` - a continuation byte was present where there\n *  was nothing to continue.\n *\n *  `\"BAD_PREFIX\"` - an invalid (non-continuation) byte to start a\n *  UTF-8 codepoint was found.\n *\n *  `\"OVERRUN\"` - the string is too short to process the expected\n *  codepoint length.\n *\n *  `\"MISSING_CONTINUE\"` - a missing continuation byte was expected but\n *  not found. The offset indicates the index the continuation byte\n *  was expected at.\n *\n *  `\"OUT_OF_RANGE\"` - the computed code point is outside the range\n *  for UTF-8. The badCodepoint indicates the computed codepoint, which was\n *  outside the valid UTF-8 range.\n *\n *  `\"UTF16_SURROGATE\"` - the UTF-8 strings contained a UTF-16 surrogate\n *  pair. The badCodepoint is the computed codepoint, which was inside the\n *  UTF-16 surrogate range.\n *\n *  `\"OVERLONG\"` - the string is an overlong representation. The\n *   badCodepoint indicates the computed codepoint, which has already\n *  been bounds checked.\n *\n *\n *  @returns string\n */\ntype Utf8ErrorReason =\n  | 'UNEXPECTED_CONTINUE'\n  | 'BAD_PREFIX'\n  | 'OVERRUN'\n  | 'MISSING_CONTINUE'\n  | 'OUT_OF_RANGE'\n  | 'UTF16_SURROGATE'\n  | 'OVERLONG';\n\nfunction onError(\n  reason: Utf8ErrorReason,\n  offset: number,\n  bytes: Uint8Array,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  output: Array<number>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  badCodepoint?: number\n): number {\n  // #TODO: Log these as warnings after https://github.com/FuelLabs/fuels-ts/issues/2298 is implemented.\n  // eslint-disable-next-line no-console\n  console.log(`invalid codepoint at offset ${offset}; ${reason}, bytes: ${bytes}`);\n  return offset;\n}\n\nfunction helper(codePoints: Array<number>): string {\n  return codePoints\n    .map((codePoint) => {\n      if (codePoint <= 0xffff) {\n        return String.fromCharCode(codePoint);\n      }\n      // eslint-disable-next-line no-param-reassign\n      codePoint -= 0x10000;\n      return String.fromCharCode(\n        ((codePoint >> 10) & 0x3ff) + 0xd800,\n        (codePoint & 0x3ff) + 0xdc00\n      );\n    })\n    .join('');\n}\n\nfunction getUtf8CodePoints(_bytes: BytesLike): Array<number> {\n  const bytes = arrayify(_bytes, 'bytes');\n\n  const result: Array<number> = [];\n  let i = 0;\n\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    const c = bytes[i++];\n\n    // 0xxx xxxx\n    if (c >> 7 === 0) {\n      result.push(c);\n      continue;\n    }\n\n    // Multibyte; how many bytes left for this character?\n    let extraLength: null | number = null;\n    let overlongMask: null | number = null;\n\n    // 110x xxxx 10xx xxxx\n    if ((c & 0xe0) === 0xc0) {\n      extraLength = 1;\n      overlongMask = 0x7f;\n\n      // 1110 xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf0) === 0xe0) {\n      extraLength = 2;\n      overlongMask = 0x7ff;\n\n      // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n    } else if ((c & 0xf8) === 0xf0) {\n      extraLength = 3;\n      overlongMask = 0xffff;\n    } else {\n      if ((c & 0xc0) === 0x80) {\n        i += onError('UNEXPECTED_CONTINUE', i - 1, bytes, result);\n      } else {\n        i += onError('BAD_PREFIX', i - 1, bytes, result);\n      }\n      continue;\n    }\n\n    // Do we have enough bytes in our data?\n    if (i - 1 + extraLength >= bytes.length) {\n      i += onError('OVERRUN', i - 1, bytes, result);\n      continue;\n    }\n\n    // Remove the length prefix from the char\n    let res: null | number = c & ((1 << (8 - extraLength - 1)) - 1);\n\n    for (let j = 0; j < extraLength; j++) {\n      const nextChar = bytes[i];\n\n      // Invalid continuation byte\n      if ((nextChar & 0xc0) !== 0x80) {\n        i += onError('MISSING_CONTINUE', i, bytes, result);\n        res = null;\n        break;\n      }\n\n      res = (res << 6) | (nextChar & 0x3f);\n      i++;\n    }\n\n    // See above loop for invalid continuation byte\n    if (res === null) {\n      continue;\n    }\n\n    // Maximum code point\n    if (res > 0x10ffff) {\n      i += onError('OUT_OF_RANGE', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    // Reserved for UTF-16 surrogate halves\n    if (res >= 0xd800 && res <= 0xdfff) {\n      i += onError('UTF16_SURROGATE', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    // Check for overlong sequences (more bytes than needed)\n    if (res <= overlongMask) {\n      i += onError('OVERLONG', i - 1 - extraLength, bytes, result, res);\n      continue;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n}\n\n/**\n *  Returns the string represented by the UTF-8 data bytes.\n *\n * @param bytes - the UTF-8 data bytes\n * @returns the string represented by the UTF-8 data bytes\n */\n\nexport function toUtf8String(bytes: BytesLike): string {\n  return helper(getUtf8CodePoints(bytes));\n}\n","import { gzipSync, gunzipSync } from 'fflate';\n\nimport { arrayify } from './arrayify';\nimport type { BytesLike } from './arrayify';\n\nexport const compressBytecode = (bytecodeAsBinary?: BytesLike) => {\n  if (!bytecodeAsBinary) {\n    return '';\n  }\n\n  const bytecodeCompressBytes = arrayify(bytecodeAsBinary);\n  const bytecodeCompressGzipped = gzipSync(bytecodeCompressBytes, { mtime: 0 });\n  const bytecodeCompressBinary = String.fromCharCode.apply(\n    null,\n    new Uint8Array(bytecodeCompressGzipped) as unknown as number[]\n  );\n  const bytecodeCompressEncoded = btoa(bytecodeCompressBinary);\n\n  return bytecodeCompressEncoded;\n};\n\nexport const decompressBytecode = (bytecodeAsBase64: string) => {\n  const bytecodeDecompressBinary = atob(bytecodeAsBase64);\n  const bytecodeDecompressDecoded = new Uint8Array(bytecodeDecompressBinary.length).map((_, i) =>\n    bytecodeDecompressBinary.charCodeAt(i)\n  );\n  const bytecodeDecompressBytes = gunzipSync(bytecodeDecompressDecoded);\n\n  return bytecodeDecompressBytes;\n};\n"],"mappings":"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","names":["import_errors","import_errors","import_errors","import_errors"]}