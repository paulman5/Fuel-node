{"version":3,"sources":["../src/cli-utils.ts","../src/cli-utils/tryFindBinaries.ts"],"sourcesContent":["export * from './cli-utils/tryFindBinaries';\n","import { FuelError } from '@fuel-ts/errors';\nimport {\n  compareSystemVersions,\n  eitherOr,\n  getSystemForc,\n  getSystemFuelCore,\n  getBuiltinVersions,\n} from '@fuel-ts/versions/cli';\n\n/**\n * Tries to find compatible binaries on the filesystem, otherwise throws an error.\n *\n * @param paths - paths to the binaries (optional)\n * @returns - paths to the resolved binaries\n */\nexport const tryFindBinaries = (paths: { forcPath?: string; fuelCorePath?: string } = {}) => {\n  // Ensure we can get the binary versions\n  const { error: forcError, systemForcPath, systemForcVersion } = getSystemForc(paths.forcPath);\n\n  const {\n    error: fuelCoreError,\n    systemFuelCorePath,\n    systemFuelCoreVersion,\n  } = getSystemFuelCore(paths.fuelCorePath);\n\n  if (forcError || fuelCoreError) {\n    const errors = [\n      'Unable to find the following binaries on the filesystem:',\n      forcError ? ` -> 'forc' at path '${systemForcPath}'` : undefined,\n      fuelCoreError ? ` -> 'fuel-core' at path '${systemFuelCorePath}'` : undefined,\n      `\\nVisit https://docs.fuel.network/guides/installation/ for an installation guide.`,\n    ];\n\n    throw new FuelError(\n      FuelError.CODES.BIN_FILE_NOT_FOUND,\n      `${errors.filter(Boolean).join('\\n')}`,\n      { ...paths }\n    );\n  }\n\n  const { systemForcIsLt, systemFuelCoreIsLt } = compareSystemVersions({\n    systemForcVersion: eitherOr(systemForcVersion, '0'),\n    systemFuelCoreVersion: eitherOr(systemFuelCoreVersion, '0'),\n  });\n\n  if (systemForcIsLt || systemFuelCoreIsLt) {\n    const { FORC: compatibleForcVersion, FUEL_CORE: compatibleFuelCoreVersion } =\n      getBuiltinVersions();\n\n    const errors = [\n      'The following binaries on the filesystem are outdated:',\n      systemForcIsLt\n        ? ` -> '${systemForcPath}' is currently 'v${systemForcVersion}', but the current 'fuels' version requires 'v${compatibleForcVersion}'.`\n        : undefined,\n      systemFuelCoreIsLt\n        ? ` -> '${systemFuelCorePath}' is currently 'v${systemFuelCoreVersion}', but the current 'fuels' version requires 'v${compatibleFuelCoreVersion}'.`\n        : undefined,\n    ];\n\n    // eslint-disable-next-line no-console\n    console.warn(`${errors.filter(Boolean).join('\\n')}`);\n  }\n\n  return {\n    forcPath: systemForcPath,\n    fuelCorePath: systemFuelCorePath,\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,oBAA0B;AAC1B,iBAMO;AAQA,IAAM,kBAAkB,CAAC,QAAsD,CAAC,MAAM;AAE3F,QAAM,EAAE,OAAO,WAAW,gBAAgB,kBAAkB,QAAI,0BAAc,MAAM,QAAQ;AAE5F,QAAM;AAAA,IACJ,OAAO;AAAA,IACP;AAAA,IACA;AAAA,EACF,QAAI,8BAAkB,MAAM,YAAY;AAExC,MAAI,aAAa,eAAe;AAC9B,UAAM,SAAS;AAAA,MACb;AAAA,MACA,YAAY,uBAAuB,oBAAoB;AAAA,MACvD,gBAAgB,4BAA4B,wBAAwB;AAAA,MACpE;AAAA;AAAA,IACF;AAEA,UAAM,IAAI;AAAA,MACR,wBAAU,MAAM;AAAA,MAChB,GAAG,OAAO,OAAO,OAAO,EAAE,KAAK,IAAI;AAAA,MACnC,EAAE,GAAG,MAAM;AAAA,IACb;AAAA,EACF;AAEA,QAAM,EAAE,gBAAgB,mBAAmB,QAAI,kCAAsB;AAAA,IACnE,uBAAmB,qBAAS,mBAAmB,GAAG;AAAA,IAClD,2BAAuB,qBAAS,uBAAuB,GAAG;AAAA,EAC5D,CAAC;AAED,MAAI,kBAAkB,oBAAoB;AACxC,UAAM,EAAE,MAAM,uBAAuB,WAAW,0BAA0B,QACxE,+BAAmB;AAErB,UAAM,SAAS;AAAA,MACb;AAAA,MACA,iBACI,QAAQ,kCAAkC,kEAAkE,4BAC5G;AAAA,MACJ,qBACI,QAAQ,sCAAsC,sEAAsE,gCACpH;AAAA,IACN;AAGA,YAAQ,KAAK,GAAG,OAAO,OAAO,OAAO,EAAE,KAAK,IAAI,GAAG;AAAA,EACrD;AAEA,SAAO;AAAA,IACL,UAAU;AAAA,IACV,cAAc;AAAA,EAChB;AACF;","names":[]}