"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/cli-utils.ts
var cli_utils_exports = {};
__export(cli_utils_exports, {
  tryFindBinaries: () => tryFindBinaries
});
module.exports = __toCommonJS(cli_utils_exports);

// src/cli-utils/tryFindBinaries.ts
var import_errors = require("@fuel-ts/errors");
var import_cli = require("@fuel-ts/versions/cli");
var tryFindBinaries = (paths = {}) => {
  const { error: forcError, systemForcPath, systemForcVersion } = (0, import_cli.getSystemForc)(paths.forcPath);
  const {
    error: fuelCoreError,
    systemFuelCorePath,
    systemFuelCoreVersion
  } = (0, import_cli.getSystemFuelCore)(paths.fuelCorePath);
  if (forcError || fuelCoreError) {
    const errors = [
      "Unable to find the following binaries on the filesystem:",
      forcError ? ` -> 'forc' at path '${systemForcPath}'` : void 0,
      fuelCoreError ? ` -> 'fuel-core' at path '${systemFuelCorePath}'` : void 0,
      `
Visit https://docs.fuel.network/guides/installation/ for an installation guide.`
    ];
    throw new import_errors.FuelError(
      import_errors.FuelError.CODES.BIN_FILE_NOT_FOUND,
      `${errors.filter(Boolean).join("\n")}`,
      { ...paths }
    );
  }
  const { systemForcIsLt, systemFuelCoreIsLt } = (0, import_cli.compareSystemVersions)({
    systemForcVersion: (0, import_cli.eitherOr)(systemForcVersion, "0"),
    systemFuelCoreVersion: (0, import_cli.eitherOr)(systemFuelCoreVersion, "0")
  });
  if (systemForcIsLt || systemFuelCoreIsLt) {
    const { FORC: compatibleForcVersion, FUEL_CORE: compatibleFuelCoreVersion } = (0, import_cli.getBuiltinVersions)();
    const errors = [
      "The following binaries on the filesystem are outdated:",
      systemForcIsLt ? ` -> '${systemForcPath}' is currently 'v${systemForcVersion}', but the current 'fuels' version requires 'v${compatibleForcVersion}'.` : void 0,
      systemFuelCoreIsLt ? ` -> '${systemFuelCorePath}' is currently 'v${systemFuelCoreVersion}', but the current 'fuels' version requires 'v${compatibleFuelCoreVersion}'.` : void 0
    ];
    console.warn(`${errors.filter(Boolean).join("\n")}`);
  }
  return {
    forcPath: systemForcPath,
    fuelCorePath: systemFuelCorePath
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  tryFindBinaries
});
//# sourceMappingURL=cli-utils.js.map