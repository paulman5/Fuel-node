// src/cli.ts
import chalk2 from "chalk";
import CliTable from "cli-table";

// src/lib/colorizeUserVersion.ts
import chalk from "chalk";
var colorizeUserVersion = (params) => {
  const { version, isGt, isOk } = params;
  if (isGt) {
    return chalk.cyan(version);
  }
  if (isOk) {
    return chalk.green(version);
  }
  return chalk.red(version);
};

// src/lib/getBuiltinVersions.ts
function getBuiltinVersions() {
  return {
    FORC: "0.66.5",
    FUEL_CORE: "0.40.2",
    FUELS: "0.98.0"
  };
}

// src/lib/semver.ts
function parseVersion(version) {
  const [major, minor, patch] = version.split(".").map((v) => parseInt(v, 10));
  return { major, minor, patch };
}
function versionDiffs(version1, version2) {
  const semver1 = parseVersion(version1);
  const semver2 = parseVersion(version2);
  const major = semver1.major - semver2.major;
  const minor = semver1.minor - semver2.minor;
  const patch = semver1.patch - semver2.patch;
  return {
    major,
    minor,
    patch,
    fullVersionDiff: major || minor || patch
  };
}
function gt(version1, version2) {
  const { fullVersionDiff } = versionDiffs(version1, version2);
  return fullVersionDiff > 0;
}
function eq(version1, version2) {
  const { fullVersionDiff } = versionDiffs(version1, version2);
  return fullVersionDiff === 0;
}

// src/lib/compareSystemVersions.ts
function compareSystemVersions(params) {
  const { systemForcVersion, systemFuelCoreVersion } = params;
  const versions = getBuiltinVersions();
  const systemForcIsGt = gt(systemForcVersion, versions.FORC);
  const systemFuelCoreIsGt = gt(systemFuelCoreVersion, versions.FUEL_CORE);
  const systemForcIsEq = eq(systemForcVersion, versions.FORC);
  const systemFuelCoreIsEq = eq(systemFuelCoreVersion, versions.FUEL_CORE);
  const systemForcIsLt = !systemForcIsGt && !systemForcIsEq;
  const systemFuelCoreIsLt = !systemFuelCoreIsGt && !systemFuelCoreIsEq;
  return {
    systemForcIsGt,
    systemFuelCoreIsGt,
    systemForcIsEq,
    systemFuelCoreIsEq,
    systemForcIsLt,
    systemFuelCoreIsLt
  };
}

// src/lib/fuelUpLink.ts
var fuelUpLink = "https://github.com/fuellabs/fuelup";

// src/lib/getSystemVersions.ts
import { execSync } from "child_process";
var versionReg = /[0-9]+\.[0-9]+\.[0-9]/;
var defaultForcCommand = "forc";
var defaultFuelCoreCommand = "fuel-core";
var getSystemVersion = (command) => {
  let version = null;
  let error = null;
  try {
    const contents = execSync(command, {
      stdio: ["pipe", "pipe", "ignore"],
      encoding: "utf8"
    }).toString();
    if (versionReg.test(contents)) {
      version = contents.match(versionReg)?.[0];
    } else {
      throw new Error(contents);
    }
  } catch (err) {
    error = err;
  }
  return {
    error,
    version
  };
};
function getSystemForc(forcPath = defaultForcCommand) {
  const { error, version: v } = getSystemVersion(`${forcPath} --version`);
  return { error, systemForcVersion: v, systemForcPath: forcPath };
}
function getSystemFuelCore(fuelCorePath = defaultFuelCoreCommand) {
  const { error, version: v } = getSystemVersion(`${fuelCorePath} --version`);
  return { error, systemFuelCoreVersion: v, systemFuelCorePath: fuelCorePath };
}
function getSystemVersions(params = {}) {
  const { forcPath, fuelCorePath } = params;
  const { error: errorForc, systemForcVersion, systemForcPath } = getSystemForc(forcPath);
  const {
    error: errorCore,
    systemFuelCoreVersion,
    systemFuelCorePath
  } = getSystemFuelCore(fuelCorePath);
  const error = errorForc ?? errorCore;
  return {
    error,
    systemForcVersion,
    systemForcPath,
    systemFuelCoreVersion,
    systemFuelCorePath
  };
}

// src/cli.ts
var eitherOr = (val1, val2) => val1 ?? val2;
function runVersions(params = {}) {
  const { error, info } = console;
  const supportedVersions = getBuiltinVersions();
  const cliTable = new CliTable({
    head: ["", chalk2.bold("Supported"), chalk2.bold(`Yours / System`), chalk2.bold("System Path")]
  });
  const {
    error: systemError,
    systemForcVersion,
    systemFuelCoreVersion,
    systemForcPath,
    systemFuelCorePath
  } = getSystemVersions(params);
  const comparisons = compareSystemVersions({
    systemForcVersion: eitherOr(systemForcVersion, "0"),
    systemFuelCoreVersion: eitherOr(systemFuelCoreVersion, "0")
  });
  const userForcColorized = colorizeUserVersion({
    version: eitherOr(systemForcVersion, "\u2014"),
    isGt: comparisons.systemForcIsGt,
    isOk: comparisons.systemForcIsEq
  });
  const userFuelCoreColorized = colorizeUserVersion({
    version: eitherOr(systemFuelCoreVersion, "\u2014"),
    isGt: comparisons.systemFuelCoreIsGt,
    isOk: comparisons.systemFuelCoreIsEq
  });
  cliTable.push(["Forc", supportedVersions.FORC, userForcColorized, systemForcPath]);
  cliTable.push([
    "Fuel-Core",
    supportedVersions.FUEL_CORE,
    userFuelCoreColorized,
    systemFuelCorePath
  ]);
  const someIsGt = comparisons.systemForcIsGt || comparisons.systemFuelCoreIsGt;
  const bothAreExact = comparisons.systemForcIsEq && comparisons.systemFuelCoreIsEq;
  let exitCode;
  if (someIsGt) {
    exitCode = 0;
    info(cliTable.toString());
    info(`
Your system's components are newer than the ones supported!`);
  } else if (bothAreExact) {
    exitCode = 0;
    info(cliTable.toString());
    info(`
You have all the right versions! \u26A1`);
  } else if (systemError) {
    exitCode = 1;
    error(cliTable.toString());
    error("\n - Make sure you have Forc and Fuel-Core installed");
    error("   >> Error: ", systemError.message);
  } else {
    exitCode = 1;
    error(cliTable.toString());
    error(`
 - You're using outdated versions`);
  }
  if (exitCode === 1) {
    error(`  ${chalk2.green(fuelUpLink)}`);
  }
  process.exit(exitCode);
}

// src/bin.ts
runVersions();
//# sourceMappingURL=bin.mjs.map