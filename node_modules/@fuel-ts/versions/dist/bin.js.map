{"version":3,"sources":["../src/cli.ts","../src/lib/colorizeUserVersion.ts","../src/lib/getBuiltinVersions.ts","../src/lib/semver.ts","../src/lib/compareSystemVersions.ts","../src/lib/fuelUpLink.ts","../src/lib/getSystemVersions.ts","../src/bin.ts"],"sourcesContent":["import chalk from 'chalk';\nimport CliTable from 'cli-table';\n\nimport { colorizeUserVersion } from './lib/colorizeUserVersion';\nimport { compareSystemVersions } from './lib/compareSystemVersions';\nimport { fuelUpLink } from './lib/fuelUpLink';\nimport { getBuiltinVersions } from './lib/getBuiltinVersions';\nimport { getSystemVersions } from './lib/getSystemVersions';\n\nexport * from './lib/compareSystemVersions';\nexport * from './lib/fuelUpLink';\nexport * from './lib/getBinaryVersions';\nexport * from './lib/getSystemVersions';\nexport * from './lib/getBuiltinVersions';\n\nexport const eitherOr = (val1: string | null, val2: string) => val1 ?? val2;\n\nexport function runVersions(params: { forcPath?: string; fuelCorePath?: string } = {}) {\n  const { error, info } = console;\n\n  const supportedVersions = getBuiltinVersions();\n\n  const cliTable = new CliTable({\n    head: ['', chalk.bold('Supported'), chalk.bold(`Yours / System`), chalk.bold('System Path')],\n  });\n\n  const {\n    error: systemError,\n    systemForcVersion,\n    systemFuelCoreVersion,\n    systemForcPath,\n    systemFuelCorePath,\n  } = getSystemVersions(params);\n\n  const comparisons = compareSystemVersions({\n    systemForcVersion: eitherOr(systemForcVersion, '0'),\n    systemFuelCoreVersion: eitherOr(systemFuelCoreVersion, '0'),\n  });\n\n  const userForcColorized = colorizeUserVersion({\n    version: eitherOr(systemForcVersion, '—'),\n    isGt: comparisons.systemForcIsGt,\n    isOk: comparisons.systemForcIsEq,\n  });\n\n  const userFuelCoreColorized = colorizeUserVersion({\n    version: eitherOr(systemFuelCoreVersion, '—'),\n    isGt: comparisons.systemFuelCoreIsGt,\n    isOk: comparisons.systemFuelCoreIsEq,\n  });\n\n  cliTable.push(['Forc', supportedVersions.FORC, userForcColorized, systemForcPath]);\n  cliTable.push([\n    'Fuel-Core',\n    supportedVersions.FUEL_CORE,\n    userFuelCoreColorized,\n    systemFuelCorePath,\n  ]);\n\n  const someIsGt = comparisons.systemForcIsGt || comparisons.systemFuelCoreIsGt;\n  const bothAreExact = comparisons.systemForcIsEq && comparisons.systemFuelCoreIsEq;\n\n  let exitCode: number;\n\n  if (someIsGt) {\n    exitCode = 0;\n    info(cliTable.toString());\n    info(`\\nYour system's components are newer than the ones supported!`);\n  } else if (bothAreExact) {\n    exitCode = 0;\n    info(cliTable.toString());\n    info(`\\nYou have all the right versions! ⚡`);\n  } else if (systemError) {\n    exitCode = 1;\n    error(cliTable.toString());\n    error('\\n - Make sure you have Forc and Fuel-Core installed');\n    error('   >> Error: ', systemError.message);\n  } else {\n    exitCode = 1;\n    error(cliTable.toString());\n    error(`\\n - You're using outdated versions`);\n  }\n\n  if (exitCode === 1) {\n    error(`  ${chalk.green(fuelUpLink)}`);\n  }\n\n  process.exit(exitCode);\n}\n","import chalk from 'chalk';\n\nexport interface IColorizeUserVersion {\n  version: string;\n  isGt: boolean;\n  isOk: boolean;\n}\n\nexport const colorizeUserVersion = (params: IColorizeUserVersion) => {\n  const { version, isGt, isOk } = params;\n\n  if (isGt) {\n    return chalk.cyan(version);\n  }\n\n  if (isOk) {\n    return chalk.green(version);\n  }\n\n  return chalk.red(version);\n};\n","import type { Versions } from './types';\n\nexport function getBuiltinVersions(): Versions {\n  return {\n    FORC: '0.66.5',\n    FUEL_CORE: '0.40.2',\n    FUELS: '0.98.0',\n  };\n}\n","function parseVersion(version: string): { major: number; minor: number; patch: number } {\n  const [major, minor, patch] = version.split('.').map((v) => parseInt(v, 10));\n  return { major, minor, patch };\n}\n\nfunction versionDiffs(\n  version1: string,\n  version2: string\n): { major: number; minor: number; patch: number; fullVersionDiff: number } {\n  const semver1 = parseVersion(version1);\n  const semver2 = parseVersion(version2);\n  const major = semver1.major - semver2.major;\n  const minor = semver1.minor - semver2.minor;\n  const patch = semver1.patch - semver2.patch;\n  return {\n    major,\n    minor,\n    patch,\n    fullVersionDiff: major || minor || patch,\n  };\n}\n\nexport function gt(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff > 0;\n}\n\nexport function eq(version1: string, version2: string): boolean {\n  const { fullVersionDiff } = versionDiffs(version1, version2);\n  return fullVersionDiff === 0;\n}\n\nexport function majorEq(version1: string, version2: string): boolean {\n  const { major } = versionDiffs(version1, version2);\n  return major === 0;\n}\n\nexport function minorEq(version1: string, version2: string): boolean {\n  const { minor } = versionDiffs(version1, version2);\n  return minor === 0;\n}\n\nexport function patchEq(version1: string, version2: string): boolean {\n  const { patch } = versionDiffs(version1, version2);\n  return patch === 0;\n}\n","import { getBuiltinVersions } from './getBuiltinVersions';\nimport { gt, eq } from './semver';\n\nexport interface ICompareVersionsParams {\n  systemForcVersion: string;\n  systemFuelCoreVersion: string;\n}\n\nexport function compareSystemVersions(params: ICompareVersionsParams) {\n  const { systemForcVersion, systemFuelCoreVersion } = params;\n\n  const versions = getBuiltinVersions();\n\n  // are user's versions GREATER than the ones supported by the SDK?\n  const systemForcIsGt = gt(systemForcVersion, versions.FORC);\n  const systemFuelCoreIsGt = gt(systemFuelCoreVersion, versions.FUEL_CORE);\n\n  // are user's versions EXACTLY the ones supported by the SDK?\n  const systemForcIsEq = eq(systemForcVersion, versions.FORC);\n  const systemFuelCoreIsEq = eq(systemFuelCoreVersion, versions.FUEL_CORE);\n\n  // are user's versions LESS than the ones supported by the SDK?\n  const systemForcIsLt = !systemForcIsGt && !systemForcIsEq;\n  const systemFuelCoreIsLt = !systemFuelCoreIsGt && !systemFuelCoreIsEq;\n\n  return {\n    systemForcIsGt,\n    systemFuelCoreIsGt,\n    systemForcIsEq,\n    systemFuelCoreIsEq,\n    systemForcIsLt,\n    systemFuelCoreIsLt,\n  };\n}\n","export const fuelUpLink = 'https://github.com/fuellabs/fuelup';\n","import { execSync } from 'child_process';\n\nconst versionReg = /[0-9]+\\.[0-9]+\\.[0-9]/;\nconst defaultForcCommand = 'forc';\nconst defaultFuelCoreCommand = 'fuel-core';\n\nexport const getSystemVersion = (command: string) => {\n  let version: string | null = null;\n  let error: Error | null = null;\n\n  try {\n    const contents = execSync(command, {\n      stdio: ['pipe', 'pipe', 'ignore'],\n      encoding: 'utf8',\n    }).toString();\n    if (versionReg.test(contents)) {\n      version = contents.match(versionReg)?.[0] as string;\n    } else {\n      throw new Error(contents);\n    }\n  } catch (err: unknown) {\n    error = err as Error;\n  }\n\n  return {\n    error,\n    version,\n  };\n};\n\nexport function getSystemForc(forcPath: string = defaultForcCommand) {\n  const { error, version: v } = getSystemVersion(`${forcPath} --version`);\n  return { error, systemForcVersion: v, systemForcPath: forcPath };\n}\n\nexport function getSystemFuelCore(fuelCorePath: string = defaultFuelCoreCommand) {\n  const { error, version: v } = getSystemVersion(`${fuelCorePath} --version`);\n  return { error, systemFuelCoreVersion: v, systemFuelCorePath: fuelCorePath };\n}\n\nexport function getSystemVersions(params: { forcPath?: string; fuelCorePath?: string } = {}) {\n  const { forcPath, fuelCorePath } = params;\n  const { error: errorForc, systemForcVersion, systemForcPath } = getSystemForc(forcPath);\n  const {\n    error: errorCore,\n    systemFuelCoreVersion,\n    systemFuelCorePath,\n  } = getSystemFuelCore(fuelCorePath);\n\n  const error = errorForc ?? errorCore;\n\n  return {\n    error,\n    systemForcVersion,\n    systemForcPath,\n    systemFuelCoreVersion,\n    systemFuelCorePath,\n  };\n}\n","import { runVersions } from './cli';\n\nrunVersions();\n"],"mappings":"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","names":["import_chalk","chalk","CliTable","chalk"]}