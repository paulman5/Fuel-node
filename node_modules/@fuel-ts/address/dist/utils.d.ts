import type { Address } from './address';
import type { AddressLike, ContractIdLike, B256Address, B256AddressEvm } from './types';
/**
 * Determines if a given string is B256 format
 *
 * @hidden
 */
export declare function isB256(address: string): boolean;
/**
 * Determines if a given string is in Public Key format (512 bits)
 *
 * @hidden
 */
export declare function isPublicKey(address: string): boolean;
/**
 * Determines if a given string is in EVM Address format
 *
 * @hidden
 */
export declare function isEvmAddress(address: string): boolean;
export declare function normalizeB256(address: B256Address): B256Address;
/**
 * A simple type guard to check if an object is an Address
 *
 * @hidden
 */
export declare function isAddress(address: object): address is Address;
/**
 * Takes an indeterminate address type and returns an address
 *
 * @hidden
 */
export declare const addressify: (addressLike: AddressLike | ContractIdLike) => Address;
/**
 * @hidden
 */
export declare const getRandomB256: () => string;
/**
 * Takes a B256 address and clears the first 12 bytes, this is required for an EVM Address
 *
 * @param b256 - the address to clear
 * @returns b256 with first 12 bytes cleared
 *
 * @hidden
 */
export declare const toB256AddressEvm: (b256: B256Address) => B256AddressEvm;
/**
 * Pads the first 12 bytes of an Evm address. This is useful for padding addresses returned from
 * the EVM to interact with the Sway EVM Address Type.
 *
 * @param address - Evm address to be padded
 * @returns Evm address padded to a b256 address
 *
 * @hidden
 */
export declare const padFirst12BytesOfEvmAddress: (address: string) => B256AddressEvm;
//# sourceMappingURL=utils.d.ts.map