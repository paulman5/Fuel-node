import type { JsonAbi } from '@fuel-ts/abi-coder';
import type { Provider, CoinQuantity, Account, TransferParams, TransactionCost } from '@fuel-ts/account';
import { ScriptTransactionRequest } from '@fuel-ts/account';
import type { ContractCall, InvocationScopeLike, TxParams, FunctionResult, DryRunResult, AbstractContract, AbstractProgram } from '../types';
/**
 * Base class for managing invocation scopes and preparing transactions.
 */
export declare class BaseInvocationScope<TReturn = any> {
    protected transactionRequest: ScriptTransactionRequest;
    protected program: AbstractProgram;
    protected functionInvocationScopes: Array<InvocationScopeLike>;
    protected txParameters?: TxParams;
    protected requiredCoins: CoinQuantity[];
    protected isMultiCall: boolean;
    protected hasCallParamsGasLimit: boolean;
    protected externalAbis: Record<string, JsonAbi>;
    private addSignersCallback?;
    /**
     * Constructs an instance of BaseInvocationScope.
     *
     * @param program - The abstract program to be invoked.
     * @param isMultiCall - A flag indicating whether the invocation is a multi-call.
     */
    constructor(program: AbstractProgram, isMultiCall: boolean);
    /**
     * Getter for the contract calls.
     *
     * @returns An array of contract calls.
     */
    protected get calls(): ContractCall[];
    /**
     * Updates the script request with the current contract calls.
     */
    protected updateScriptRequest(): Promise<void>;
    /**
     * Updates the transaction request with the current input/output.
     */
    protected updateContractInputAndOutput(): void;
    /**
     * Gets the required coins for the transaction.
     *
     * @returns An array of required coin quantities.
     */
    protected getRequiredCoins(): Array<CoinQuantity>;
    /**
     * Updates the required coins for the transaction.
     */
    protected updateRequiredCoins(): void;
    /**
     * Adds a single call to the invocation scope.
     *
     * @param funcScope - The function scope to add.
     * @returns The current instance of the class.
     */
    protected addCall(funcScope: InvocationScopeLike): this;
    /**
     * Adds multiple calls to the invocation scope.
     *
     * @param funcScopes - An array of function scopes to add.
     * @returns The current instance of the class.
     */
    protected addCalls(funcScopes: Array<InvocationScopeLike>): this;
    /**
     * Prepares the transaction by updating the script request, required coins, and checking the gas limit.
     */
    protected prepareTransaction(): Promise<void>;
    /**
     * Checks if the total gas limit is within the acceptable range.
     */
    protected checkGasLimitTotal(): void;
    /**
     * Gets the transaction cost for dry running the transaction.
     *
     * @param options - Optional transaction cost options.
     * @returns The transaction cost details.
     */
    getTransactionCost(): Promise<TransactionCost>;
    /**
     * Costs and funds the underlying transaction request.
     *
     * @returns The invocation scope as a funded transaction request.
     */
    fundWithRequiredCoins(): Promise<ScriptTransactionRequest>;
    /**
     * Sets the transaction parameters.
     *
     * @param txParams - The transaction parameters to set.
     * @returns The current instance of the class.
     */
    txParams(txParams: TxParams): this;
    /**
     * Adds contracts to the invocation scope.
     *
     * @param contracts - An array of contracts to add.
     * @returns The current instance of the class.
     */
    addContracts(contracts: Array<AbstractContract>): this;
    /**
     * Adds an asset transfer to an Account on the contract call transaction request.
     *
     * @param transferParams - The object representing the transfer to be made.
     * @returns The current instance of the class.
     */
    addTransfer(transferParams: TransferParams): this;
    /**
     * Adds multiple transfers to the contract call transaction request.
     *
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @returns The current instance of the class.
     */
    addBatchTransfer(transferParams: TransferParams[]): this;
    addSigners(signers: Account | Account[]): this;
    /**
     * Prepares and returns the transaction request object.
     *
     * @returns The prepared transaction request.
     */
    getTransactionRequest(): Promise<ScriptTransactionRequest>;
    /**
     * Submits the contract call transaction and returns a promise that resolves to an object
     * containing the transaction ID and a function to wait for the result. The promise will resolve
     * as soon as the transaction is submitted to the node.
     *
     * @returns A promise that resolves to an object containing:
     * - `transactionId`: The ID of the submitted transaction.
     * - `waitForResult`: A function that waits for the transaction result.
     * @template T - The type of the return value.
     */
    call<T = TReturn>(): Promise<{
        transactionId: string;
        waitForResult: () => Promise<FunctionResult<T>>;
    }>;
    /**
     * Simulates a transaction.
     *
     * @returns The result of the invocation call.
     */
    simulate<T = TReturn>(): Promise<DryRunResult<T>>;
    /**
     * Executes a transaction in dry run mode.
     *
     * @returns The result of the invocation call.
     */
    dryRun<T = TReturn>(): Promise<DryRunResult<T>>;
    get<T = TReturn>(): Promise<DryRunResult<T>>;
    getProvider(): Provider;
    /**
     * Obtains the ID of a transaction.
     *
     * @param chainId - the chainId to use to hash the transaction with
     * @returns the ID of the transaction.
     */
    getTransactionId(chainId?: number): Promise<string>;
    /**
     * In case the gasLimit is *not* set by the user, this method sets a default value.
     */
    private setDefaultTxParams;
}
//# sourceMappingURL=base-invocation-scope.d.ts.map