import type { TransactionResultReceipt, TransactionResponse, CallResult } from '@fuel-ts/account';
import type { AbstractProgram, InvocationScopeLike, FunctionResult, DryRunResult } from './types';
/** @hidden */
export declare const extractInvocationResult: <T>(functionScopes: Array<InvocationScopeLike>, receipts: TransactionResultReceipt[], isMultiCall: boolean, logs: any[]) => T;
type BuiltFunctionResultParams = {
    funcScope: InvocationScopeLike | Array<InvocationScopeLike>;
    transactionResponse: TransactionResponse;
    isMultiCall: boolean;
    program: AbstractProgram;
};
/** @hidden */
export declare const buildFunctionResult: <T>(params: BuiltFunctionResultParams) => Promise<FunctionResult<T>>;
type BuiltDryRunResultParams = {
    funcScopes: InvocationScopeLike | Array<InvocationScopeLike>;
    callResult: CallResult;
    isMultiCall: boolean;
};
/** @hidden * */
export declare const buildDryRunResult: <T>(params: BuiltDryRunResultParams) => DryRunResult<T>;
export {};
//# sourceMappingURL=response.d.ts.map